<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant runtime support file for Curam projects running on WLS.
  It includes tasks to start, stop and restart an application server, install and uninstall
  an application, configure an application server and precompile the JSPs of an installed client.

  This file is dependant on the AppServer.properties file and if this file does not exist any
  of the targets will fail.

-->
<project name="app_runtimewls" default="start">

  <import file="./app_properties.xml" />
  <!--  **************************  -->
  <!--  ***  Import Utilities  ***  -->
  <!--  **************************  -->
  <import file="./app_utilities.xml" />

  <!--  *******************************  -->
  <!--  ***  App server Properties  ***  -->
  <!--  *******************************  -->
  <property file="${app.prop.location}"/>

  <property name="domain.home" value="${WLS_HOME}/../../user_projects/domains/${node.name}"/>

  <!--  **************  -->
  <!--  ***  Init  ***  -->
  <!--  **************  -->
  <target name="init">

    <!-- Check to see if running on Windows or Unix -->
    <condition property="os.windows">
      <os family="windows"/>
    </condition>

    <!-- Check to see if the AppServer.properties file contains the correct settings -->
    <condition property="appserver.properties.valid">
      <and>
        <isset property="curam.server.name"/>
        <isset property="curam.server.port"/>
      </and>
    </condition>
    <antcall target="check.appserver.properties.valid"/>

    <!-- Check to see if the was.home variable has been setup. -->
    <condition property="wls.environment.variable.set">
      <available file="${WLS_HOME}" type="dir"/>
    </condition>
    <antcall target="check.wls.environment.variable"/>

  </target>

  <!-- Fail if some properties are missing. -->
  <target name="check.appserver.properties.valid" unless="appserver.properties.valid">
    <fail message="Missing properties from AppServer.properties file. See AppServer.properties.sample."/>
  </target>

  <!-- Print message if environment variable does not exist. -->
  <target name="check.wls.environment.variable" unless="wls.environment.variable.set">
    <fail message="WLS_HOME environment variable is not set."/>
  </target>

  <!--  *************************************  -->
  <!--  ***  Start an application server  ***  -->
  <!--  *************************************  -->
  <target name="start" depends="init, check.server.name">

    <!-- On windows we call 'startWebLogic.cmd' -->
    <condition property="startWebLogic.extension" value=".cmd" >
      <os family="windows" />
    </condition>
    <!-- Unix platforms use startWebLogic.sh -->
    <property name="startWebLogic.extension" value=".sh"/>

    <!-- On Unix need to enable Java AWT headless mode -->
    <condition property="headless.mode" value="" >
      <os family="windows" />
    </condition>
    <property name="headless.mode" value="-Djava.awt.headless=true"/>

    <condition property="java.options" value="${sysenv.JAVA_OPTIONS}">
      <isset property="sysenv.JAVA_OPTIONS"/>
    </condition>
    <property name="java.options" value=""/>

    <condition property="weblogic.alternateTypesDirectory.command" value="-Dweblogic.alternateTypesDirectory=${weblogic.alternateMbeanTypesDir}">
      <isset property="weblogic.alternateMbeanTypesDir"/>
    </condition>
    
    <property name="weblogic.alternateTypesDirectory.command" value=""/>
    
    <mkdir dir="${domain.home}/servers/${server.name}/logs"/>

    <!-- User memory argument settings -->
    <property name="curam.server.jvm.heap.size"           value="1024"/>
    <property name="curam.server.jvm.permgen.size"        value="-XX:PermSize=128m -XX:MaxPermSize=256m"/>

    <exec executable="${domain.home}/bin/startWebLogic${startWebLogic.extension}" spawn="true">
      <env key="USER_MEM_ARGS"    value="-Xmx${curam.server.jvm.heap.size}m -Xms${curam.server.jvm.heap.size}m ${curam.server.jvm.permgen.size}"/>
      <env key="WLS_REDIRECT_LOG" value="${domain.home}/servers/${server.name}/logs/${server.name}_Redirect.log"/>
      <env key="JAVA_OPTIONS"     value="${weblogic.alternateTypesDirectory.command} ${java.options} ${headless.mode}"/>
      <env key="PRE_CLASSPATH"    value=""/>
      <env key="POST_CLASSPATH"    value=""/>
    </exec>

    <!-- Wait for the weblogic server to be started -->
    <antcall target="check.server.running" inheritAll="false">
      <param name="server.name"        value="${server.name}"/>
      <param name="node.name"          value="${node.name}"/>
      <param name="bea.home"           value="${WLS_HOME}/../.."/>
    </antcall>

    <!-- Ping the weblogic server to be sure it has started correctly -->
    <antcall target="pingWLS" inheritAll="false">
      <param name="server.name"        value="${server.name}" />
      <param name="security.username"  value="${security.username}"/>
      <param name="security.password"  value="${security.password}"/>
    </antcall>

  </target>

  <!--  ************************************  -->
  <!--  ***  Stop an application server  ***  -->
  <!--  ************************************  -->
  <target name="stop" depends="init, check.server.name, get.decrypted.appserver.password">

    <!-- On windows we call 'startWebLogic.cmd' -->
    <condition property="stopWebLogic.extension" value=".cmd" >
      <os family="windows" />
    </condition>

    <!-- Unix platforms use startWebLogic.sh -->
    <property name="stopWebLogic.extension" value=".sh"/>

    <!-- User memory argument settings -->
    <property name="curam.server.jvm.heap.size"           value="1024"/>
    <property name="curam.server.jvm.permgen.size"        value="-XX:PermSize=128m -XX:MaxPermSize=256m"/>

    <exec executable="${domain.home}/bin/stopWebLogic${stopWebLogic.extension}">
      <env key="USER_MEM_ARGS" value="-Xmx${curam.server.jvm.heap.size}m -Xms${curam.server.jvm.heap.size}m ${curam.server.jvm.permgen.size}"/>
      <arg value="${security.username}" />
      <arg value="${decrypted.appserver.password}" />
    </exec>

  </target>

  <!--  ***************************************  -->
  <!--  ***  Restart an application server  ***  -->
  <!--  ***************************************  -->
  <target name="restart" depends="init, check.server.name">

    <antcall target="stop">
      <param name="fail.on.error" value="false"/>
    </antcall>
    <sleep seconds="10"/>
    <antcall target="start">
      <param name="fail.on.error" value="true"/>
    </antcall>

  </target>

  <!--  ********************************  -->
  <!--  ***  Install an application  ***  -->
  <!--  ********************************  -->
  <target name="install" depends="init, check.ear.file, check.server.name, check.application.name, get.decrypted.appserver.password">
    <echo message="Install ${ear.file} on ${server.name}.."/>
    <java
      classname="weblogic.Deployer"
      classpath="${WLS_HOME}/lib/weblogic.jar"
      failonerror="${fail.on.error}"
      fork="${java.fork}"
      maxmemory="${java.maxmemory}"
      taskname="weblogic.deployer"
    >
      <jvmarg value="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <arg value="-adminurl" />
      <arg value="t3://localhost:${curam.server.port}" />
      <arg value="-source" />
      <arg value="${ear.file}" />
      <arg value="-targets" />
      <arg value="${server.name}" />
      <arg value="-username" />
      <arg value="${security.username}" />
      <arg value="-password" />
      <arg value="${decrypted.appserver.password}" />
      <arg value="-stage" />
      <arg value="-deploy" />
      <arg value="-name" />
      <arg value="${application.name}" />
    </java>
  </target>

  <!--  **********************************  -->
  <!--  ***  Uninstall an application  ***  -->
  <!--  **********************************  -->
  <target name="uninstall" depends="init, check.application.name, check.server.name, get.decrypted.appserver.password">

    <echo message="Stopping ${application.name} on ${server.name}.."/>
    <java
      classname="weblogic.Deployer"
      classpath="${WLS_HOME}/lib/weblogic.jar"
      failonerror="false"
      fork="${java.fork}"
      maxmemory="${java.maxmemory}"
      taskname="weblogic.deployer"
    >
      <jvmarg value="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <arg value="-adminurl" />
      <arg value="t3://localhost:${curam.server.port}" />
      <arg value="-targets" />
      <arg value="${server.name}" />
      <arg value="-username" />
      <arg value="${security.username}" />
      <arg value="-password" />
      <arg value="${decrypted.appserver.password}" />
      <arg value="-stop" />
      <arg value="-name" />
      <arg value="${application.name}" />
    </java>
    <echo message="Uninstall ${application.name} on ${server.name}.."/>
    <java
      classname="weblogic.Deployer"
      classpath="${WLS_HOME}/lib/weblogic.jar"
      failonerror="${fail.on.error}"
      fork="${java.fork}"
      maxmemory="${java.maxmemory}"
      taskname="weblogic.deployer"
    >
      <jvmarg value="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <arg value="-adminurl" />
      <arg value="t3://localhost:${curam.server.port}" />
      <arg value="-targets" />
      <arg value="${server.name}" />
      <arg value="-username" />
      <arg value="${security.username}" />
      <arg value="-password" />
      <arg value="${decrypted.appserver.password}" />
      <arg value="-undeploy" />
      <arg value="-name" />
      <arg value="${application.name}" />
    </java>

  </target>


  <!--  *****************************************  -->
  <!--  ***  Configure an application server  ***  -->
  <!--  *****************************************  -->
  <target name="configure" depends="init">
    <ant antfile="app_configureWLS.xml" target="configure"/>
  </target>


  <!--  *****************************  -->
  <!--  ***  Precompile the JSPs  ***  -->
  <!--  *****************************  -->
  <target name="precompile" depends="init, check.ear.file">

    <property name="temp.dir" value="${dir.bld}/temp_precompile"/>

    <!-- Unpack the specified client EAR file -->
    <delete dir="${temp.dir}"/>
    <mkdir dir="${temp.dir}"/>
    <unjar src="${ear.file}" dest="${temp.dir}"/>
    <property name="max.compile.files" value="100"/>

    <!-- Unpack the contained WAR file -->
    <unjar src="${temp.dir}/ClientModule.war" dest="${temp.dir}/war"/>

     <condition property="wlsj" value="-k">
      <and>
        <isset property="wlsjspcompile.failonerror"/>
        <equals arg1="${wlsjspcompile.failonerror}" arg2="false"/>
      </and>
    </condition>
    <property name="wlsj" value="fake"/>
    <!-- Precompile the unpacked contents -->
    <java classname="weblogic.jspc"
      classpath="${WLS_HOME}/lib/weblogic.jar:${JAVA_HOME}/lib/tools.jar"
      failonerror="${fail.on.error}"
      fork="${java.fork}"
      maxmemory="${java.maxmemory}"
      taskname="weblogic.jspc"
    >
      <jvmarg value="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <arg value="-webapp"/>
      <arg value="${temp.dir}/war"/>
      <arg value="-compileAll"/>
      <arg value="-maxfiles"/>
      <arg value="${max.compile.files}"/>
      <arg value="-d"/>
      <arg value="${temp.dir}/war/WEB-INF/classes"/>
      <arg value="${wlsj}"/>
    </java>

    <!-- Repack the compiled contents and update the client ear file -->
    <mkdir dir="${temp.dir}/new"/>
    <jar destfile="${temp.dir}/new/ClientModule.war" basedir="${temp.dir}/war"/>
    <jar destfile="${ear.file}" basedir="${temp.dir}/new"
        includes="ClientModule.war" update="yes"/>

    <!-- Delete the temporary directories used -->
    <delete dir="${temp.dir}"/>

  </target>

  <!-- ******************************************* -->
  <!-- ***  I S  S E R V E R  R U N N I N G ?  *** -->
  <!-- ******************************************* -->
  <!-- Check if the server is running. -->
  <target name="check.server.running" depends="max.timeout.set">
    <echo>${server.name} is starting.</echo>
    <echo>Max startup time is ${server.maxtimeout} minutes.</echo>
    <echo>Waiting....</echo>
    <waitfor maxwait="${server.maxtimeout}"
             maxwaitunit="minute"
             checkevery="1"
             checkeveryunit="second"
             timeoutproperty="server.timeout">
      <socket server="localhost" port="${curam.server.port}"/>
    </waitfor>

    <!-- Fail after server.maxtimeout minutes of trying, default is 10 mins. -->
    <antcall target="fail.not.running"/>

  </target>

  <!-- Default the max timeout to 10 minutes if not passed in. -->
  <target name="max.timeout.set">
    <property name="server.maxtimeout" value="10"/>
  </target>

  <!-- Fail if server not started. -->
  <target name="fail.not.running" if="server.timeout">
    <fail message="The ${server.name} could not be started. Check the log files (${domain.home}/servers/${server.name}/logs/${server.name}_Redirect.log)."/>
  </target>

  <!-- ************************ -->
  <!-- ***  W L S  P I N G  *** -->
  <!-- ************************ -->
  <target name="pingWLS"
    description="Ping a Weblogic Server." depends="get.decrypted.appserver.password">

    <echo message="Pinging server '${server.name}' at 'localhost:${curam.server.port}'." />
  
    <java classname="weblogic.Admin"
          classpath="${WLS_HOME}/lib/weblogic.jar"
          fork="true"
          failonerror="true"
          taskname="weblogic.admin"
          maxmemory="${java.maxmemory}"
    >
      <jvmarg value="-Xms${java.maxmemory}" />
      <arg value="-url" />
      <arg value="localhost:${curam.server.port}" />
      <arg value="-username" />
      <arg value="${security.username}" />
      <arg value="-password" />
      <arg value="${decrypted.appserver.password}" />
      <arg value="PING" />
    </java>

  </target>

</project>
