require({cache:{
'url:dijit/templates/TitlePane.html':"<div>\n\t<div data-dojo-attach-event=\"onclick:_onTitleClick, onkeypress:_onTitleKey\"\n\t\t\tclass=\"dijitTitlePaneTitle\" data-dojo-attach-point=\"titleBarNode\">\n\t\t<div class=\"dijitTitlePaneTitleFocus\" data-dojo-attach-point=\"focusNode\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"arrowNode\" class=\"dijitArrowNode\" role=\"presentation\"\n\t\t\t/><span data-dojo-attach-point=\"arrowNodeInner\" class=\"dijitArrowNodeInner\"></span\n\t\t\t><span data-dojo-attach-point=\"titleNode\" class=\"dijitTitlePaneTextNode\"></span>\n\t\t</div>\n\t</div>\n\t<div class=\"dijitTitlePaneContentOuter\" data-dojo-attach-point=\"hideNode\" role=\"presentation\">\n\t\t<div class=\"dijitReset\" data-dojo-attach-point=\"wipeNode\" role=\"presentation\">\n\t\t\t<div class=\"dijitTitlePaneContentInner\" data-dojo-attach-point=\"containerNode\" role=\"region\" id=\"${id}_pane\">\n\t\t\t\t<!-- nested divs because wipeIn()/wipeOut() doesn't work right on node w/padding etc.  Put padding on inner div. -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n",
'curam/date':function(){
/* Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2013,2014. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * --------------------
   * 10-Oct-2013 SK  [CR00411875] Month names override implemented.
   */

define("curam/date", ["curam/define", "dojo/date", "curam/date/locale", "dojo/date/stamp" ],
         function(def, date, loc, stamp) {
  
  curam.define.singleton("curam.date", {
    /* externally set locale used when testing */
        testLocale: null,
        
   /**
    * Determines if the passed string matches the date format
    * (hence is a valid date).
    *
    * @str the string to be checked.
    * @fmt the valid date format.
    */
    isDate: function(str,fmt) {
      return (curam.date.getDateFromFormat(str,fmt) != 0);
    },
   /**
    * Compares two dates to determine if the first one is greater than the
    * second one, or they are equal.
    * 
    * @param d1 The first formatted date string to be compared
    * @param df1 The format string for the first date.
    * @param d2 The second formatted date string to be compared
    * @param df2 The format string for the second date.
    * @return 1 if date1 is greater than date2, 0 if the dates are equal.
    *        -1 if either of the two dates is in an invalid format
    *        (NOTE: the previous usage didn't cater for the situation d2 < d1)
    */
    compareDates: function(d1,df1,d2,df2) {
      var d1 = curam.date.getDateFromFormat(d1, df1);
      if (d1 == 0) {
        return -1;
      }
      var d2 = curam.date.getDateFromFormat(d2, df2);
      if (d2 == 0) {
        return -1;
      }
      // could return -1 for d2 > d1, but obviously the previous usage
      // does not allow this (see description)
      return date.compare(d1, d2, "date");
    },
   /**
    * Formats the date using the specified format.
    *
    * @param d the JavaScript Date object
    * @param fmt the date format string .
    * @return the date string in the output format specified.
    */
    formatDate: function(d,fmt) {
      var result = loc.format(d, {selector:"date", datePattern:fmt, locale:curam.date.getLocale()});
      return result;
    },
  /**
   * Converts the given string into JavaScript Date object.
   * 
   * Original doc:
   * This function takes a date string and a format string. It matches
   * If the date string matches the format string, it returns the 
   * getTime() of the date. If it does not match, it returns 0.
   *
   * This function uses the same format strings as the 
   * java.text.SimpleDateFormat class, with minor exceptions.
   *
   * The format string can be "ISO8601" or consist of the following 
   * abbreviations:
   * 
   * Field        | Full Form          | Short Form
   * -------------+--------------------+-----------------------
   * Year         | yyyy (4 digits)    | yy (2 digits), y (2 or 4 digits)
   * Month        | MMM (name or abbr.)| MM (2 digits), M (1 or 2 digits)
   * Day of Month | dd (2 digits)      | d (1 or 2 digits)
   * Hour (1-12)  | hh (2 digits)      | h (1 or 2 digits)
   * Hour (0-23)  | HH (2 digits)      | H (1 or 2 digits)
   * Hour (0-11)  | KK (2 digits)      | K (1 or 2 digits)
   * Hour (1-24)  | kk (2 digits)      | k (1 or 2 digits)
   * Minute       | mm (2 digits)      | m (1 or 2 digits)
   * Second       | ss (2 digits)      | s (1 or 2 digits)
   * AM/PM        | a                  |
   *
   * Examples:
   *  "MMM d, y" matches: January 01, 2000
   *                      Dec 1, 1900
   *                      Nov 20, 00
   *  "m/d/yy"   matches: 01/20/00
   *                      9/2/00
   *  "MMM dd, yyyy hh:mm:ssa" matches: "January 01, 2000 12:30:45AM"
   * ------------------------------------------------------------------
   * @param str the formatted Date string
   * @param fmt the format to be used to parse the date string.
   * @return the parsed JavaScript Date object or 0 if the parsing fails.
   */
   getDateFromFormat: function(str,fmt) {
     var res = loc.parse(str, {selector:"date", datePattern:fmt, locale:curam.date.getLocale() });
     return (res == null) ? "0" : res;
   },
  /**
   * Parses a ISO8601 String and returns a Date object
   * 
   * @param val The string in ISO8601 format
   * @return A JavaScript Date object
   */  
   ISO8601StringToDate: function(val) {
      return stamp.fromISOString(val);
    },
    /**
     * Gets the locale to be used by the date functions.
     * 
     * @returns the locale specified on the page, the locale set by the testing environment,
     * or the default fall-back locale.
     */
    getLocale: function()  {
      var appLoc = (typeof jsL != "undefined" && jsL)
                     ? jsL : (curam.config ? curam.config.locale : null);
      return appLoc || curam.date.testLocale || 'en';
    }
  });
  return curam.date;
});
},
'dojo/date':function(){
define("dojo/date", ["./_base/kernel", "./_base/lang"], function(dojo, lang) {
	// module:
	//		dojo/date
	// summary:
	//		TODOC

lang.getObject("date", true, dojo);

/*=====
dojo.date = {
	// summary: Date manipulation utilities
}
=====*/

dojo.date.getDaysInMonth = function(/*Date*/dateObject){
	//	summary:
	//		Returns the number of days in the month used by dateObject
	var month = dateObject.getMonth();
	var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	if(month == 1 && dojo.date.isLeapYear(dateObject)){ return 29; } // Number
	return days[month]; // Number
};

dojo.date.isLeapYear = function(/*Date*/dateObject){
	//	summary:
	//		Determines if the year of the dateObject is a leap year
	//	description:
	//		Leap years are years with an additional day YYYY-02-29, where the
	//		year number is a multiple of four with the following exception: If
	//		a year is a multiple of 100, then it is only a leap year if it is
	//		also a multiple of 400. For example, 1900 was not a leap year, but
	//		2000 is one.

	var year = dateObject.getFullYear();
	return !(year%400) || (!(year%4) && !!(year%100)); // Boolean
};

// FIXME: This is not localized
dojo.date.getTimezoneName = function(/*Date*/dateObject){
	//	summary:
	//		Get the user's time zone as provided by the browser
	// dateObject:
	//		Needed because the timezone may vary with time (daylight savings)
	//	description:
	//		Try to get time zone info from toString or toLocaleString method of
	//		the Date object -- UTC offset is not a time zone.  See
	//		http://www.twinsun.com/tz/tz-link.htm Note: results may be
	//		inconsistent across browsers.

	var str = dateObject.toString(); // Start looking in toString
	var tz = ''; // The result -- return empty string if nothing found
	var match;

	// First look for something in parentheses -- fast lookup, no regex
	var pos = str.indexOf('(');
	if(pos > -1){
		tz = str.substring(++pos, str.indexOf(')'));
	}else{
		// If at first you don't succeed ...
		// If IE knows about the TZ, it appears before the year
		// Capital letters or slash before a 4-digit year
		// at the end of string
		var pat = /([A-Z\/]+) \d{4}$/;
		if((match = str.match(pat))){
			tz = match[1];
		}else{
		// Some browsers (e.g. Safari) glue the TZ on the end
		// of toLocaleString instead of putting it in toString
			str = dateObject.toLocaleString();
			// Capital letters or slash -- end of string,
			// after space
			pat = / ([A-Z\/]+)$/;
			if((match = str.match(pat))){
				tz = match[1];
			}
		}
	}

	// Make sure it doesn't somehow end up return AM or PM
	return (tz == 'AM' || tz == 'PM') ? '' : tz; // String
};

// Utility methods to do arithmetic calculations with Dates

dojo.date.compare = function(/*Date*/date1, /*Date?*/date2, /*String?*/portion){
	//	summary:
	//		Compare two date objects by date, time, or both.
	//	description:
	//  	Returns 0 if equal, positive if a > b, else negative.
	//	date1:
	//		Date object
	//	date2:
	//		Date object.  If not specified, the current Date is used.
	//	portion:
	//		A string indicating the "date" or "time" portion of a Date object.
	//		Compares both "date" and "time" by default.  One of the following:
	//		"date", "time", "datetime"

	// Extra step required in copy for IE - see #3112
	date1 = new Date(+date1);
	date2 = new Date(+(date2 || new Date()));

	if(portion == "date"){
		// Ignore times and compare dates.
		date1.setHours(0, 0, 0, 0);
		date2.setHours(0, 0, 0, 0);
	}else if(portion == "time"){
		// Ignore dates and compare times.
		date1.setFullYear(0, 0, 0);
		date2.setFullYear(0, 0, 0);
	}

	if(date1 > date2){ return 1; } // int
	if(date1 < date2){ return -1; } // int
	return 0; // int
};

dojo.date.add = function(/*Date*/date, /*String*/interval, /*int*/amount){
	//	summary:
	//		Add to a Date in intervals of different size, from milliseconds to years
	//	date: Date
	//		Date object to start with
	//	interval:
	//		A string representing the interval.  One of the following:
	//			"year", "month", "day", "hour", "minute", "second",
	//			"millisecond", "quarter", "week", "weekday"
	//	amount:
	//		How much to add to the date.

	var sum = new Date(+date); // convert to Number before copying to accomodate IE (#3112)
	var fixOvershoot = false;
	var property = "Date";

	switch(interval){
		case "day":
			break;
		case "weekday":
			//i18n FIXME: assumes Saturday/Sunday weekend, but this is not always true.  see dojo.cldr.supplemental

			// Divide the increment time span into weekspans plus leftover days
			// e.g., 8 days is one 5-day weekspan / and two leftover days
			// Can't have zero leftover days, so numbers divisible by 5 get
			// a days value of 5, and the remaining days make up the number of weeks
			var days, weeks;
			var mod = amount % 5;
			if(!mod){
				days = (amount > 0) ? 5 : -5;
				weeks = (amount > 0) ? ((amount-5)/5) : ((amount+5)/5);
			}else{
				days = mod;
				weeks = parseInt(amount/5);
			}
			// Get weekday value for orig date param
			var strt = date.getDay();
			// Orig date is Sat / positive incrementer
			// Jump over Sun
			var adj = 0;
			if(strt == 6 && amount > 0){
				adj = 1;
			}else if(strt == 0 && amount < 0){
			// Orig date is Sun / negative incrementer
			// Jump back over Sat
				adj = -1;
			}
			// Get weekday val for the new date
			var trgt = strt + days;
			// New date is on Sat or Sun
			if(trgt == 0 || trgt == 6){
				adj = (amount > 0) ? 2 : -2;
			}
			// Increment by number of weeks plus leftover days plus
			// weekend adjustments
			amount = (7 * weeks) + days + adj;
			break;
		case "year":
			property = "FullYear";
			// Keep increment/decrement from 2/29 out of March
			fixOvershoot = true;
			break;
		case "week":
			amount *= 7;
			break;
		case "quarter":
			// Naive quarter is just three months
			amount *= 3;
			// fallthrough...
		case "month":
			// Reset to last day of month if you overshoot
			fixOvershoot = true;
			property = "Month";
			break;
//		case "hour":
//		case "minute":
//		case "second":
//		case "millisecond":
		default:
			property = "UTC"+interval.charAt(0).toUpperCase() + interval.substring(1) + "s";
	}

	if(property){
		sum["set"+property](sum["get"+property]()+amount);
	}

	if(fixOvershoot && (sum.getDate() < date.getDate())){
		sum.setDate(0);
	}

	return sum; // Date
};

dojo.date.difference = function(/*Date*/date1, /*Date?*/date2, /*String?*/interval){
	//	summary:
	//		Get the difference in a specific unit of time (e.g., number of
	//		months, weeks, days, etc.) between two dates, rounded to the
	//		nearest integer.
	//	date1:
	//		Date object
	//	date2:
	//		Date object.  If not specified, the current Date is used.
	//	interval:
	//		A string representing the interval.  One of the following:
	//			"year", "month", "day", "hour", "minute", "second",
	//			"millisecond", "quarter", "week", "weekday"
	//		Defaults to "day".

	date2 = date2 || new Date();
	interval = interval || "day";
	var yearDiff = date2.getFullYear() - date1.getFullYear();
	var delta = 1; // Integer return value

	switch(interval){
		case "quarter":
			var m1 = date1.getMonth();
			var m2 = date2.getMonth();
			// Figure out which quarter the months are in
			var q1 = Math.floor(m1/3) + 1;
			var q2 = Math.floor(m2/3) + 1;
			// Add quarters for any year difference between the dates
			q2 += (yearDiff * 4);
			delta = q2 - q1;
			break;
		case "weekday":
			var days = Math.round(dojo.date.difference(date1, date2, "day"));
			var weeks = parseInt(dojo.date.difference(date1, date2, "week"));
			var mod = days % 7;

			// Even number of weeks
			if(mod == 0){
				days = weeks*5;
			}else{
				// Weeks plus spare change (< 7 days)
				var adj = 0;
				var aDay = date1.getDay();
				var bDay = date2.getDay();

				weeks = parseInt(days/7);
				mod = days % 7;
				// Mark the date advanced by the number of
				// round weeks (may be zero)
				var dtMark = new Date(date1);
				dtMark.setDate(dtMark.getDate()+(weeks*7));
				var dayMark = dtMark.getDay();

				// Spare change days -- 6 or less
				if(days > 0){
					switch(true){
						// Range starts on Sat
						case aDay == 6:
							adj = -1;
							break;
						// Range starts on Sun
						case aDay == 0:
							adj = 0;
							break;
						// Range ends on Sat
						case bDay == 6:
							adj = -1;
							break;
						// Range ends on Sun
						case bDay == 0:
							adj = -2;
							break;
						// Range contains weekend
						case (dayMark + mod) > 5:
							adj = -2;
					}
				}else if(days < 0){
					switch(true){
						// Range starts on Sat
						case aDay == 6:
							adj = 0;
							break;
						// Range starts on Sun
						case aDay == 0:
							adj = 1;
							break;
						// Range ends on Sat
						case bDay == 6:
							adj = 2;
							break;
						// Range ends on Sun
						case bDay == 0:
							adj = 1;
							break;
						// Range contains weekend
						case (dayMark + mod) < 0:
							adj = 2;
					}
				}
				days += adj;
				days -= (weeks*2);
			}
			delta = days;
			break;
		case "year":
			delta = yearDiff;
			break;
		case "month":
			delta = (date2.getMonth() - date1.getMonth()) + (yearDiff * 12);
			break;
		case "week":
			// Truncate instead of rounding
			// Don't use Math.floor -- value may be negative
			delta = parseInt(dojo.date.difference(date1, date2, "day")/7);
			break;
		case "day":
			delta /= 24;
			// fallthrough
		case "hour":
			delta /= 60;
			// fallthrough
		case "minute":
			delta /= 60;
			// fallthrough
		case "second":
			delta /= 1000;
			// fallthrough
		case "millisecond":
			delta *= date2.getTime() - date1.getTime();
	}

	// Round for fractional values and DST leaps
	return Math.round(delta); // Number (integer)
};

return dojo.date;
});

},
'curam/UIMController':function(){
require({cache:{
'url:curam/layout/resources/UIMController.html':"<div id=\"uimcontroller_${uid}\" class=\"uimcontroller_${uid} uimController ${classList}\" data-dojo-attach-point=\"uimController\">\r\n  <div style=\"display:none;\" \r\n       id=\"uimcontroller_tc_${uid}\" \r\n       class=\"ipnTabController in-page-nav-tabContainer\"\r\n       data-dojo-attach-point=\"tabController\" \r\n       data-dojo-type=\"curam.layout.TabContainer\">\r\n  </div>\r\n  <div class=\"contentPanelFrameWrapper\"  \r\n        data-dojo-attach-point=\"frameWrapper\">\r\n    <iframe frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\"\r\n             allowTransparency=\"true\" \r\n             id=\"${iframeId}\" \r\n             data-dojo-attach-point=\"frame\"                 \r\n             class=\"${iframeId} ${iframeClassList}\"\r\n             iscpiframe=\"${iscpiframe}\"\r\n             title=\"${title}\" >\r\n    </iframe>\r\n  </div> \r\n</div>"}});
/* Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2013. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

 /*
  * Modification History
  * --------------------
  * 18-Jul-2013  SB  [CR00388308] Added publish event for tab context in modals.
  * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
  *                include required bundle.
  * 15-Feb-2013  SK  [CR00366971] Now properly clears content before redrawing.
  * 13-Dec-2012  PK  [CR00361104] Added missing dependency.
  * 15-Oct-2012  BOS [CR00346368] Localized debug messages to console.  
  * 11-Sep-2012  MV  [CR00339639] Performance related update: do not declare
  *    dependency on TabController module - not needed.
  * 09-Aug-2012  MV  [CR00337714] Load HTML template using the new mechanism. 
  * 11-Jun-2011  MV  [CR00327652] Move HTML template to a separate file. 
  * 23-Oct-2012  SK  [CR00346419] Correctly unsubscribes frok onload registry
  *    when closing a tab to avoid memory leak.  
  * 11-Sep-2012  MV  [CR00339639] Performance related update: do not declare
  *    dependency on TabController module - not needed.
  * 09-Aug-2012  MV  [CR00337714] Load HTML template using the new mechanism. 
  * 11-Jun-2011  MV  [CR00327652] Move HTML template to a separate file. 
  * 27-Sep-2011  MV  [CR00288663] Adjust a dialog height when IPN tabs exist. 
  * 28-Apr-2011  AF  [CR00264788] Added title attribute to generated frame.
  * 17-Feb-2011  PK  [CR00253211] The "absoluteURL" instance variable was not
  *                    being reset when "setURL" was called.
  * 01-Feb-2011  MV  [CR00250375] Publish load finished event when load without
  *    tabs is done.
  * 20-Jan-2011  MV  [CR00243263] Publish load finished event when full load
  *    is done.
  * 14-Jan-2011  MK  [CR00240138] Update _getFullURL function to only add the
  *                    o3nocache parameter if it does not already exist in the
  *                    URL.
  * 04-Jan-2011  MV  [CR00240081] Ignore request to show tab container
  *    if there are no tabs to show. Code cleanup.
  * 16-Dec-2010  PK  [CR00238879] Added auto-sizing for use in the application
  *                    team's CoverFlow widget.
  * 28-Nov-2010  MV  [CR00232623] Fix dialog-related sizing.
  * 18-Nov-2010  MV  [CR00231387] Perform cleanup on widget destroy.
  * 16-Jun-2010  BD  [CR00204119] Initial version.
  */

define("curam/UIMController", ["dojo/text!curam/layout/resources/UIMController.html",
        "dijit/_Widget",
        "dijit/_Templated",
        "dijit/layout/ContentPane",
        "curam/tab",
        "curam/debug",
        "curam/util",
        "curam/util/onLoad",
        "curam/util/ResourceBundle"        
        ], function(template) {

/**
 * @name curam.UIMController
 * @namespace Create and manage a widget that controls an IFRAME that is known
 * to load UIM pages. The controller will handle official communications
 * from the IFRAME to the parent window using the event system.
 * This will bridge the gap created by security restrictions that stop parent
 * windows manipulating the content of IFRAMES they control.
 * 
 * The controller also provides "In Page Navigation" functionality by creating
 * a tab controller to handle the page linking described by In Page Navigation
 * in the UIM file.
 *
 */
  
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  var UIMController = dojo.declare("curam.UIMController", [dijit._Widget, dijit._Templated],
/**
 * @lends curam.UIMController.prototype
 */
{
  //NB: This value is duplicated in v6_common.css. Search for "TAB_HEIGHT" in
  //that file to find corresponding CSS values. They need to be updated if
  //any change is made to this value.
  TAB_HEIGHT: 20,

  // EVENT.TOPIC_PREFIX: String
  //          "UIMController.InPageNav_" the topic prefix for the IPN page load 
  //          event. The uid of the particular instance of the UIMController 
  //          completes the topic.
  EVENT: {
   TOPIC_PREFIX: "UIMController.InPageNav_"
  },
  
  TOPIC_LOADED: "/curam/uim/controller/loaded",
  
  // frameLoadEvent: String
  //          The topic on which to listen for a page load event.
  frameLoadEvent: "", 
  // frameLoadEvent: String
  //          The unique identifier for this instance of a UIMController.
  uid:"",
  // frameLoadEvent: String
  //          The url of the page that is loaded into the IFrame.
  url:"",
  // tabControllerId: String
  //          The id of the tab controller. Used to reference events on the
  //          tabController.
  tabControllerId: "",
  // oldTabsTitlesList: Array
  //          A list of the old(current) tab titles.
  oldTabsTitlesList:[],
  // newTabsTitlesList: Array
  //          A list of the new tab titles received from the iframe load event
  newTabsTitlesList:[],
  // widgetsInTemplate: Boolean
  //          Indicates that there are widgets to be processed in the template. 
  widgetsInTemplate: true,
  // finishedLoadingTabs: Boolean
  //          Indicates that the tabs have finished loading. 
  finishedLoadingTabs: false,
  // className: String
  //          A String representing classes to be added to the div wrapper. 
  classList: "",
  // iframeId: String
  //    The id of the iframe
  iframeId:"",
  // height: String
  //    The height of the widget
  height:"",
    // width: String
    //    The width of the widget
  width:"",
  // iframeClassList: String
  //          A comma separated list of classes to be added to the iframe. 
  iframeClassList: "",
  // iscpiframe: Boolean
  //          an attribute that indicates this is the content panel frame. 
  iscpiframe: "false",
  // ipnTabClickEvent: Tab Click Event 
  //          the event that occurs when a tab is clicked on this widget.
  ipnTabClickEvent:null,
  // title: String 
  //        Title attribute value for iframe. 
  title: "",
  // handleIPNTabClickListener: Event listener
  //          an attribute that stores the listener for the Tab Click event. 
  //          Can be switched on and off to avoid circular references when
  //          Tabs are being loaded.
  handleIPNTabClickListener:null,
  // inPageNavItems: Object array
  //          An array of inPageNavigation objects representing the in page
  //          navigation links.
  inPageNavItems:null,
  
  // Indicates whether the iframe should be loaded when the UIMController is
  // created. If set to false, the frame will not be loaded and it will be up
  // to the "owner" of the UIMController to load the page. For example, an
  // expandable list only wants to load the iframe when the toggle button
  // is clicked.
  loadFrameOnCreate: true,
  
  // Indicates if the frame element of this widget should size itself according
  // to the size of the UIM page loaded within it. It uses the height provided
  // by the "curam.util.onLoad" API.
  resizeFrameOnLoad: false,
  
  
    templateString: template,
    
  /**
   * Specifies if the controller is used within a dialog.
   */
  inDialog: false,

  /**
   * Constructor, create a UIMController widget.
   *   
   * @param uid
   *    a unqiue identifier for this widget.
   * @param url
   *    The page that will be initially loaded into the iframe.
   */
  constructor: function(args) {
    if (!args.uid) {
      throw "'uid' attribute not provided to constructor for"
            + " curam.UIMController(url,uid)";
    }
    
    this.uid = "uimcontroller_" + args.uid;
    this.tabControllerId = "uimcontroller_tc_" + args.uid;
    this.newTabsTitlesList = [];
    this.ipnTabClickEvent = this.tabControllerId + "-selectChild";
    
    if (this.height == "") {
      this.height = "99%";
    }
    
    if (this.width == "") {
      this.width = "99%";
    }
    
    curam.debug.log(bundle.getProperty("curam.UIMController.new") 
      + " curam.UIMController()...");
    curam.debug.log("curam.UIMController " 
      + bundle.getProperty("curam.UIMController.identifier") + " " +this.uid);
    curam.debug.log("curam.UIMController " 
      + bundle.getProperty("curam.UIMController.url") + " " + this.url);
    curam.debug.log("curam.UIMController " 
        + bundle.getProperty("curam.UIMController.identifier") 
        + " " + this.tabControllerId);
    curam.debug.log("curam.UIMController: newTabsTitlesList " 
        + " " + this.newTabsTitlesList);

    return this.uimController;
  },
  
  /**
   * postCreate, after the widget has been created add a listener for events
   * coming from the iframe, then load the iframe. It is important that the
   * order is maintained here as adding the listener after loading the iframe
   * will mean the events are missed.
   */
  postCreate: function() {

    /* width and height specified on dom node in application.css
    dojo.attr(this.domNode, 
        "style", {"height": this.height,"width": this.width});
    curam.debug.log(
        "UIMController Height: " + dojo.style(this.domNode,"height"));
    curam.debug.log(
        "UIMController Width: " + dojo.style(this.domNode,"width"));
    */
    this.frameLoadEvent = this.EVENT.TOPIC_PREFIX + this.frame.id;
    
    this.setURL(this.url);

    // subscribe for onLoad events on the iframe
    var fLoadFunct = dojo.hitch(this, "processFrameLoadEvent"); 
    curam.util.onLoad.addSubscriber(this.frame.id, fLoadFunct);
    dojo.connect(this, "destroy", function() {
      curam.util.onLoad.removeSubscriber(this.iframeId, fLoadFunct);
      this.fLoadFunct = null;
    });
    
    if (this.inDialog) {
      // Set the initial dimensions of the iframe.
      // The width is particularly important for correct automatic height
      // calculation in dialogs
      dojo.style(this.frame, {
        width: this.width,
        height: this.height
      });
    }
    
    curam.debug.log("curam.UIMController: loadFrameOnCreate=" 
      + this.loadFrameOnCreate);
    curam.debug.log("curam.UIMController " 
        + bundle.getProperty("curam.UIMController.url") + this.url);
    if(this.loadFrameOnCreate == true && typeof(this.url) != "undefined"){
      curam.debug.log("curam.UIMController: " 
        + bundle.getProperty("uram.UIMController.loading"));
      this.loadPage();
    }
  },
  
  setURL: function(url) {
    if (url.indexOf("Page.do") == -1) {
      this.absoluteURL = true;
      this.url = url;
    } else {
      this.absoluteURL = false;
      this.url = this._trimURL(url);
    }
  },
  
  /**
   * Process the object returned from a frame load event. Extract
   * in page navigation if it exists in the frame and trigger the
   * Tab Controller for the UIMController.
   * If no In Page Navigation then hide the Tab Controller if it
   * is currently being displayed.
   *
   * @param iframeID
   *    ID of the iframe on which the load event occurred.
   * @param context
   *    The data received from the event published by the IFrame.
   */
  processFrameLoadEvent: function(iframeID, context) {
    curam.debug.log(
        "curam.UIMController: processFrameLoadEvent " 
        + bundle.getProperty("curam.UIMController.processing.IPN") + context);

      this.inPageNavItems = context.inPageNavItems;
      curam.debug.log("curam.UIMController: processFrameLoadEvent: " 
        + bundle.getProperty("curam.UIMController.processing"));
      curam.debug
        .log("curam.UIMController.processFrameLoadEvent: this.tabController: " 
          + this.tabController);

      if (this.resizeFrameOnLoad == true) {
        var newPageHeight = context.height;
        
        curam.debug.log(bundle.getProperty("curam.UIMController.resizing") 
          + newPageHeight);
        if (newPageHeight) {
          dojo.style(this.getIFrame(), { height: newPageHeight + "px" });
        }
      }
      
      // If no IPN hide the tabcontainer and exit.
      curam.debug.log(bundle.getProperty("curam.UIMController.IPN.items"), 
        this.inPageNavItems);
      if (!this.hasInPageNavigation()) {
        curam.debug.log(bundle.getProperty("curam.UIMController.no.IPN"));
        this.clearIPNTabs();
        if (!this._tabControllerHidden()) {
           curam.debug.log(bundle.getProperty("curam.UIMController.hiding"));
           this.showTabContainer(false);
        }
        dojo.publish(this.TOPIC_LOADED);
        return;
      }
      
      curam.debug.log(bundle.getProperty("curam.UIMController.extract"));
      var newSelectedTabIndex = -1;
      // Extract the data from the published event.
      for(var i = 0; i < this.inPageNavItems.length; i++) {
        this.newTabsTitlesList.push(this.inPageNavItems[i].title);
        if (this.inPageNavItems[i].selected == true) {
          newSelectedTabIndex = i;
        }      
        curam.debug.log(
            bundle.getProperty("curam.UIMController.IPN.") + "[" 
            + this.inPageNavItems[i].title + ", " 
            + this.inPageNavItems[i].href + ", "  
            + this.inPageNavItems[i].selected + "]" );
      }

      // Test if the tab titles have changed.
      // Note: There are a number of ways we could view equality. The title
      // might be the same but the link could be different, or vice versa, or 
      // the order of items have changed. For now we are doing a simple 
      // compare on the list of titles for order and equality, if they are 
      // different in these ways we reload all tabs.
      var tabsChanged = 
        !(this.compareLists(this.oldTabsTitlesList, this.newTabsTitlesList));

      if (tabsChanged) {
        this.clearIPNTabs(this);
        this.createIPNTabs(this.inPageNavItems);

        // if there were no tabs previously then we need to show the 
        // Tab Controller and call the resize function to trigger a redraw.
        if (this._tabControllerHidden()) {
          this.showTabContainer(true);
        }
        
      } else {
        curam.debug.log(bundle.getProperty("curam.UIMController.no.change"));
        if (newSelectedTabIndex > -1) {
          var currentSelectedTabIndex =
            this.tabController.getIndexOfChild(
                this.tabController.selectedChildWidget);
          if (currentSelectedTabIndex != newSelectedTabIndex) {
            curam.debug.log(bundle.getProperty("curam.UIMController.change") 
                + currentSelectedTabIndex 
                + bundle.getProperty("curam.UIMController.to") 
                + newSelectedTabIndex);
        
            // In this case the selected tab is bing updated as a result of a
            // page being loaded from an external source, as opposed to a user
            // clicking on of the in-page navigation tabs. The listener for the
            // selected child event has to be switched off to prevent an infinite
            // loop.
            this.toggleIPNTabClickEventListener("off");
            this.tabController.selectChild(
                this.tabController.getChildren()[newSelectedTabIndex]);
            // Now that the tab has been selected, switch on the listener again
            // to respond to input from the user.
            this.toggleIPNTabClickEventListener("on");
          }
        }      
      }
      this.newTabsTitlesList = [];
      curam.debug.log(bundle.getProperty("curam.UIMController.clear") 
        + this.newTabsTitlesList);
      this.finishedLoadingTabs = true;
    
      dojo.publish(this.TOPIC_LOADED);
      dojo.publish("/curam/tab/labelUpdated");
  },
  
  /**
   * Determines if the in-page navigation tab controller is hidden or not.
   *
   * @private
   * 
   * @return True if the in-page navigation tab controller is hidden,
   *    otherwise true.
   */
  _tabControllerHidden: function() {
    return dojo.style(this.tabController.domNode, "display") == "none";
  },
  
  /**
   * Switches on or off the In Page Navigation Tab Click listener. The
   * listener reacts to tab select events, but because these occur when
   * creating or destroying tabs we must have the ability to switch off 
   * the listeners until these processes have finished to avoid 
   * unwanted behaviour.
   *
   * @param switchIs
   *      "on" or "off"
   */
  toggleIPNTabClickEventListener: function(switchIs) {
    if (switchIs == "off") {
      if (this.handleIPNTabClickListener != null) {
        // Stop listening for tab select events while the tab container redraws, 
        // otherwise we end up in a continuous loop where the redraw causes a 
        // select and the select causes a redraw.
        curam.debug.log(bundle.getProperty("curam.UIMController.off.listener"));
        dojo.unsubscribe(this.handleIPNTabClickListener);
      }     
    
    } else {
      curam.debug.log(bundle.getProperty("curam.UIMController.on.listener"));
      this.handleIPNTabClickListener = 
        this.subscribe(
            this.ipnTabClickEvent, dojo.hitch(this, this.handleIPNTabClick));
    }
  },
  
  /**
   * React to a user tab select on the in page navigation tabs.
   * After the tabs have finished loading extract the url from the tab 
   * object and pass it to the handlePageRequest function on the 
   * Curam TabController.
   *
   * @param tab
   *    The tab that was clicked.
   */
  handleIPNTabClick: function(tab) {
    if (this.finishedLoadingTabs) {
      curam.debug.log(bundle.getProperty("curam.UIMController.finishing"));
      
      // Reset the indicator for the next tab click.
      this.finishedLoadingTabs = false;

      // Set the new url by using the title of the selected tab to look up the 
      // associated URL.
      this.setURL(this._getURLByTitle(tab.title));
      // reload the frame
      this.loadPage();
    }
  },    
  
  /**
   * Given a Dijit TabController and a list of items, create a Dijit
   * ContentPane for each item in the list and add it to the Dijit
   * TabController to create a list of tabs.
   *
   * @param newTabs
   *    An array of objects representing the new tabs.
   */
  createIPNTabs: function(newTabs) {
    this.toggleIPNTabClickEventListener("off");
    if (!this.tabController) {
      console.error(
       "curam.UIMController.createIPNTabs: " 
         + bundle.getProperty("uram.UIMController.no.widget")
       + " '" + this.tabControllerId + "'");
       
    } else {
      curam.debug.log("curam.UIMController.createIPNTabs: " 
        + bundle.getProperty("curam.UIMController.creating.tabs") + newTabs);
      var selectedTab = null;
      for (var i = 0; i < newTabs.length; i++) {
        var cp = new dijit.layout.ContentPane({
          title: newTabs[i].title
        });
        this.tabController.addChild(cp);
        if(newTabs[i].selected == true || selectedTab==null){
          selectedTab = cp;
        }
        // Maintain the list of Tab Titles.
        this.oldTabsTitlesList.push(newTabs[i].title);
        curam.debug.log("curam.UIMController.createIPNTabs: " 
          + bundle.getProperty("curam.UIMController.adding.tabs") 
          + newTabs[i].title);      
      }

      this.tabController.startup();
      this.tabController.selectChild(selectedTab);
      
    }
    this.toggleIPNTabClickEventListener("on");
    this.newTabsTitlesList = [];
  },
  
  clearIPNTabs: function() {
    
    // summary: 
    //      Given the id of a Dijit TabContainer find the widget and 
    //      remove all tabs from the controller by removing the children.
    //      Destroy each child as it is removed.
    //
    curam.debug.log("curam.UIMController.createIPNTabs: " 
        + bundle.getProperty("curam.UIMController.clearing.tabs") 
        + this.oldTabsTitlesList);
    
    this.toggleIPNTabClickEventListener("off");
    this.tabController.destroyDescendants();
    this.tabController.selectedChildWidget = null;
    this.oldTabsTitlesList=[];
    this.toggleIPNTabClickEventListener("on");
    
    curam.debug.log("curam.UIMController.createIPNTabs: " 
      + bundle.getProperty("curam.UIMController.clearing.notify") 
      + this.oldTabsTitlesList);
  },
  
  compareLists: function(list1, list2){

    // summary: 
    //    Given 2 arrays compare the items in each array for equality, 
    //    if the count, values or order do not match return false, else true.
    //
    // parameter : list1, an array.
    // parameter : list2, an array.
    
    curam.debug.log("curam.UIMController.compareLists: " 
      + bundle.getProperty("curam.UIMController.comparing.tabs"));
    curam.debug
      .log(bundle.getProperty("curam.UIMController.tab.list1") + list1);
    curam.debug
      .log(bundle.getProperty("curam.UIMController.tab.list1") + list2);
    var result = true;
    if(list1.length != list2.length){
      result = false;
    }
    for(var i = 0; i < list1.length; i++){
      if(list1[i] != list2[i]){
        result = false;
      }
    }
    curam.debug.log(bundle.getProperty("curam.UIMController.result") + result);
    return result;
  },
  

  _getURLByTitle: function (title){
    // summary:
    //    Given a title for a tab return the associated url from the map of
    //    navigation items.
    // parameter: title, this is the title of the tab. 
   
    var url = null;
    dojo.forEach(this.inPageNavItems, function(navItem){
      if(navItem.title == title){
        url = navItem.href;
      }
    });
    curam.debug.log(url);
    return url;
  },
  
  /**
   * Utility method which trims a href down to just
   * "PageIDPage.do?queryString"
   */
  _trimURL: function(href) {
    var idx=href.lastIndexOf("/");
    if (idx>-1 && idx <= href.length) {
      return href.substring(idx + 1);
    
    } else {
      return href;
    }
  },
  
  hasInPageNavigation: function() {
    return this.inPageNavItems != null;
  },
  
  getIFrame: function(){
    // summary:
    //   Returns the iframe created by this widget.
    return this.frame;
  },
  
  /**
   * Sets the 'src' attribute of the iframe created by this widget.
   * 
   * @param {dojo.Deferred} [deferred]
   *    The instance of dojo.Deferred to be notified when the frame
   *    has finished loading.
   */
  loadPage: function(deferred) {
    if (typeof(this.url) == "undefined" || this.url == null) {
      var e = new Error(
          "curam.UIMController: Cannot load page as URL has not been set");
      if (deferred) {
        deferred.errback(e);
      }
      throw e;
    }
    
    if (deferred) {
      // when the frame is loaded, notify the listeners
      var st = curam.util.subscribe(this.TOPIC_LOADED, function() {
        curam.util.unsubscribe(st);
        deferred.callback();
      });
    }

    var fullURL = this._getFullURL();
    curam.debug.log(
        "curam.UIMController.loadPage(): " 
          + bundle.getProperty("curam.UIMController.set.source")
        + this.frame.id + " to url: " + fullURL);
      dojo.attr(this.frame, "src", fullURL);
  },
  
  _getFullURL: function() {
    if (typeof(this.absoluteURL) != "undefined" && this.absoluteURL == true) {
      return this.url;
    }
    
    var urlAppend;
    if (this.url.indexOf("?") == -1) {
      urlAppend = "?";
    } else {
      urlAppend = "&";
    }
    // The "url" attribute of this class is always in the form:
    // PageIDPage.do?queryString
    // To set the source of the iframe we have to add the locale.
    // The iframe can exist in the "top level AppController.do" or within a
    // UIM page (e.g. iframes used in expandable list are nested *within* the
    // iframe used for the UIM page itself) we have to be carefull with the
    // use of relative URLs. For an iframe that exists in the "top level" page
    // we can set it's src attribute to "en/PageIDPage.do?queryString". This
    // is relative to "http://baseURL/Curam" and so will load the UIM page as
    // http://baseURL/Curam/en/PageIDPage.do?queryString.
    // However, when the iframe exists *within* a UIM page the URL would be
    // to relative to "http://baseURL/Curam/locale/". Without adjusting the
    // relative path we'd end up with an iframe with a src of, which doesn't
    // exist (the two locales in the path):
    // http://baseURL/Curam/en/en/PageIDPage.do?queryString
    // So, we check if we are not in the context of the top level window we
    // know we are within a UIM page and relative to
    // "http://baseURL/Curam/locale/". Therefore, we avoid adding the locale
    // in this case.
    var locale = curam.config ? curam.config.locale : jsL;
    var urlPrefix = "";
    if (window == curam.util.getTopmostWindow()) {
      // it's the "top level" window so we need to add the locale to the URL.
      urlPrefix = locale + "/";
    }

    // only add the o3nocache parameter if it does not already exist, adding it
    // more than once will cause the modal to fail to load.
    if (this.url.indexOf("o3nocache=") == -1) {
      return urlPrefix + this.url
             + urlAppend + curam.util.getCacheBusterParameter();
    } else {
      return urlPrefix + this.url;
    }       
  },
  
  showTabContainer: function(show) {
    if (show && !this.hasInPageNavigation()) {
      curam.debug.log(bundle.getProperty("curam.UIMController.ignore.reuest"));
      return;
    }
    
    dojo.style(this.frameWrapper, "top",
        (show ? this.TAB_HEIGHT + 7 : "0") + "px");

    dojo.style(this.tabController.domNode, "display",
        show ? "block" : "none");

    if (show) {
      this.tabController.resize();
    }
  }, 
  
  setDimensionsForModalDialog: function(w, h, context) {
    curam.debug.log("curam.UIMController:setDimensionsForModalDialog() - "
                    + "w=" + w + ", h=" + h);
    
    // Set the dimensions of the iframe
    dojo.style(this.frame, {
      width: w + "px",
      height: h + "px"
    });
    
    // Set the width of the tab container. Note, the height is fixed by the
    // "ipnTabController" CSS class applied in the dijit template.
    dojo.style(this.tabController.domNode, {
      width: w + "px"
    });

    if (typeof(context.inPageNavItems) != "undefined") {
      // means we have tabs to show so set the dimensions of this
      // UIMControllers's root node to match the width of the iframe and the
      // height adjusted to allow for the tab container
      h += this.TAB_HEIGHT + 5;
      curam.debug.log("cura.UIMController:setDimensionsForModalDialog() - "
          + bundle.getProperty("curam.UIMController.height"));
    }

    dojo.style(this.domNode, {
      width: w + "px",
      height: h + "px"
    });
  },

  destroy: function() {
    this.iframe = null;
    this.inPageNavItems = null;
    dojo.unsubscribe(this.handleIPNTabClickListener);
    this.tabController.destroy();

    this.inherited(arguments);
  }
  });
  
  return UIMController;
});

},
'dojox/storage/WhatWGStorageProvider':function(){
// wrapped by build app
define("dojox/storage/WhatWGStorageProvider", ["dijit","dojo","dojox","dojo/require!dojox/storage/Provider,dojox/storage/manager"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage.WhatWGStorageProvider");
dojo.require("dojox.storage.Provider");
dojo.require("dojox.storage.manager");

dojo.declare("dojox.storage.WhatWGStorageProvider", [ dojox.storage.Provider ], {
	// summary:
	//		Storage provider that uses WHAT Working Group features in Firefox 2
	//		to achieve permanent storage.
	// description:
	//		The WHAT WG storage API is documented at
	//		http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side
	//
	//		You can disable this storage provider with the following djConfig
	//		variable:
	//		var djConfig = { disableWhatWGStorage: true };
	//
	//		Authors of this storage provider-
	//			JB Boisseau, jb.boisseau@eutech-ssii.com
	//			Brad Neuberg, bkn3@columbia.edu

	initialized: false,
	
	_domain: null,
	_available: null,
	_statusHandler: null,
	_allNamespaces: null,
	_storageEventListener: null,
	
	initialize: function(){
		if(dojo.config["disableWhatWGStorage"] == true){
			return;
		}
		
		// get current domain
		this._domain = location.hostname;
		// console.debug(this._domain);
		
		// indicate that this storage provider is now loaded
		this.initialized = true;
		dojox.storage.manager.loaded();
	},
	
	isAvailable: function(){
		try{
			var myStorage = globalStorage[location.hostname];
		}catch(e){
			this._available = false;
			return this._available;
		}
		
		this._available = true;
		return this._available;
	},

	put: function(key, value, resultsHandler, namespace){
		if(this.isValidKey(key) == false){
			throw new Error("Invalid key given: " + key);
		}
		namespace = namespace||this.DEFAULT_NAMESPACE;
		
		// get our full key name, which is namespace + key
		key = this.getFullKey(key, namespace);
		
		this._statusHandler = resultsHandler;
		
		// serialize the value;
		// handle strings differently so they have better performance
		if(dojo.isString(value)){
			value = "string:" + value;
		}else{
			value = dojo.toJson(value);
		}
		
		// register for successful storage events.
		var storageListener = dojo.hitch(this, function(evt){
			// remove any old storage event listener we might have added
			// to the window on old put() requests; Firefox has a bug
			// where it can occassionaly go into infinite loops calling
			// our storage event listener over and over -- this is a
			// workaround
			// FIXME: Simplify this into a test case and submit it
			// to Firefox
			window.removeEventListener("storage", storageListener, false);
			
			// indicate we succeeded
			if(resultsHandler){
				resultsHandler.call(null, this.SUCCESS, key, null, namespace);
			}
		});
		
		window.addEventListener("storage", storageListener, false);
		
		// try to store the value
		try{
			var myStorage = globalStorage[this._domain];
			myStorage.setItem(key, value);
		}catch(e){
			// indicate we failed
			this._statusHandler.call(null, this.FAILED, key, e.toString(), namespace);
		}
	},

	get: function(key, namespace){
		if(this.isValidKey(key) == false){
			throw new Error("Invalid key given: " + key);
		}
		namespace = namespace||this.DEFAULT_NAMESPACE;
		
		// get our full key name, which is namespace + key
		key = this.getFullKey(key, namespace);
		
		// sometimes, even if a key doesn't exist, Firefox
		// will return a blank string instead of a null --
		// this _might_ be due to having underscores in the
		// keyname, but I am not sure.
		
		// FIXME: Simplify this bug into a testcase and
		// submit it to Firefox
		var myStorage = globalStorage[this._domain];
		var results = myStorage.getItem(key);
		
		if(results == null || results == ""){
			return null;
		}
		
		results = results.value;
		
		// destringify the content back into a
		// real JavaScript object;
		// handle strings differently so they have better performance
		if(dojo.isString(results) && (/^string:/.test(results))){
			results = results.substring("string:".length);
		}else{
			results = dojo.fromJson(results);
		}
		
		return results;
	},
	
	getNamespaces: function(){
		var results = [ this.DEFAULT_NAMESPACE ];
		
		// simply enumerate through our array and save any string
		// that starts with __
		var found = {};
		var myStorage = globalStorage[this._domain];
		var tester = /^__([^_]*)_/;
		for(var i = 0; i < myStorage.length; i++){
			var currentKey = myStorage.key(i);
			if(tester.test(currentKey) == true){
				var currentNS = currentKey.match(tester)[1];
				// have we seen this namespace before?
				if(typeof found[currentNS] == "undefined"){
					found[currentNS] = true;
					results.push(currentNS);
				}
			}
		}
		
		return results;
	},

	getKeys: function(namespace){
		namespace = namespace||this.DEFAULT_NAMESPACE;
		
		if(this.isValidKey(namespace) == false){
			throw new Error("Invalid namespace given: " + namespace);
		}
		
		// create a regular expression to test the beginning
		// of our key names to see if they match our namespace;
		// if it is the default namespace then test for the presence
		// of no namespace for compatibility with older versions
		// of dojox.storage
		var namespaceTester;
		if(namespace == this.DEFAULT_NAMESPACE){
			namespaceTester = new RegExp("^([^_]{2}.*)$");
		}else{
			namespaceTester = new RegExp("^__" + namespace + "_(.*)$");
		}
		
		var myStorage = globalStorage[this._domain];
		var keysArray = [];
		for(var i = 0; i < myStorage.length; i++){
			var currentKey = myStorage.key(i);
			if(namespaceTester.test(currentKey) == true){
				// strip off the namespace portion
				currentKey = currentKey.match(namespaceTester)[1];
				keysArray.push(currentKey);
			}
		}
		
		return keysArray;
	},

	clear: function(namespace){
		namespace = namespace||this.DEFAULT_NAMESPACE;
		
		if(this.isValidKey(namespace) == false){
			throw new Error("Invalid namespace given: " + namespace);
		}
		
		// create a regular expression to test the beginning
		// of our key names to see if they match our namespace;
		// if it is the default namespace then test for the presence
		// of no namespace for compatibility with older versions
		// of dojox.storage
		var namespaceTester;
		if(namespace == this.DEFAULT_NAMESPACE){
			namespaceTester = new RegExp("^[^_]{2}");
		}else{
			namespaceTester = new RegExp("^__" + namespace + "_");
		}
		
		var myStorage = globalStorage[this._domain];
		var keys = [];
		for(var i = 0; i < myStorage.length; i++){
			if(namespaceTester.test(myStorage.key(i)) == true){
				keys[keys.length] = myStorage.key(i);
			}
		}
		
		dojo.forEach(keys, dojo.hitch(myStorage, "removeItem"));
	},
	
	remove: function(key, namespace){
		// get our full key name, which is namespace + key
		key = this.getFullKey(key, namespace);
		
		var myStorage = globalStorage[this._domain];
		myStorage.removeItem(key);
	},
	
	isPermanent: function(){
		return true;
	},

	getMaximumSize: function(){
		return this.SIZE_NO_LIMIT;
	},

	hasSettingsUI: function(){
		return false;
	},
	
	showSettingsUI: function(){
		throw new Error(this.declaredClass + " does not support a storage settings user-interface");
	},
	
	hideSettingsUI: function(){
		throw new Error(this.declaredClass + " does not support a storage settings user-interface");
	},
	
	getFullKey: function(key, namespace){
		namespace = namespace||this.DEFAULT_NAMESPACE;
		
		if(this.isValidKey(namespace) == false){
			throw new Error("Invalid namespace given: " + namespace);
		}
		
		// don't append a namespace string for the default namespace,
		// for compatibility with older versions of dojox.storage
		if(namespace == this.DEFAULT_NAMESPACE){
			return key;
		}else{
			return "__" + namespace + "_" + key;
		}
	}
});

dojox.storage.manager.register("dojox.storage.WhatWGStorageProvider",
								new dojox.storage.WhatWGStorageProvider());

});

},
'curam/ajax':function(){
/*
 * Copyright 2009-2012 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/*
 * Modification History
 * --------------------
 * 11-Apr-2014 MV [CR00424825] Move to common AJAX request API.
 * 31-Jan-2012 MV [CR00302081] Move away from global context. 
 */

define("curam/ajax", ['curam/util/Request'
        ], function(curamRequest) {

var AJAXCall = function(dataTarget, inputProviderName) {
  this.target=dataTarget;
  this.inputProvider = inputProviderName || 'null';
};

var theAJAXCall = {
  doRequest: function (opAlias, params, isPopup, synchronous) {
    var theServlet = "../servlet/JSONServlet";

    var filler = this;

      if (isPopup) theServlet= "../" + theServlet;

      var oData = {
          caller: this.target.id,
          operation: opAlias,
          inputProvider: this.inputProvider,
          args: params
      };

      function processResult(oResult, opAlias){
        oResult = dojo.fromJson(oResult);
          if (oResult instanceof Array) {
            if (oResult.length > 1) {
              if (opAlias == "getCodeTableSubset") {
                filler.fillCTWithBlank(oResult); 
              } else { 
                filler.fillCT(oResult);
              }
            } else {
              if (opAlias == "getCodeTableSubset") {
                // have to handle code tables with one item
                filler.fillCTWithBlank(oResult);            
              } else {
                filler.fillSingle(oResult, true);
              }
            }
          } else {
            filler.fillSingle(oResult);
          }
      };

      curamRequest.post({
        url:theServlet,
        handleAs:   "text",
        load: function(data, evt){
          processResult(data, opAlias);
        },
        error: function(){
          alert("error");
        },
        content: {"content": dojo.toJson(oData)},
        preventCache: true,
        sync: synchronous
      });
  },

  fillCT: function (theResult) {
    this.target.options.length = 0;
    for (var i = 0; i < theResult.length; i++) {
      this.target.options[i] = new Option(theResult[i]["descr"], theResult[i]["code"], theResult[i]["default"]);
    }
  },

  fillCTWithBlank: function (theResult) {
    this.target.options.length = 0;
    this.target.options[0] = new Option("");
    for (var i = 0; i < theResult.length; i++) {
      this.target.options[i+1] = new Option(theResult[i]["descr"], theResult[i]["code"]);
    }
  },

  fillSingle: function (theResult, arrayed) {
    if (arrayed) {
      this.target.value = theResult[0]["value"];
    } else {
      this.target.value = theResult["value"];
    }
  }
};

dojo.mixin(AJAXCall.prototype, theAJAXCall);

// Keep the functions in the global scope for backwards compatibility.
// TODO: remove when code calling these functions is updated
dojo.global.AJAXCall = AJAXCall;

return AJAXCall;
});

},
'curam/util/Request':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2014. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*
 * Modification History
 * --------------------
 * 04-Mar-2014  MV  [CR00421036] Use new LocalConfig API to read options, make
 *      login page detector configurable, add documentation.
 * 27-Feb-2014  MV  [CR00419961] Initial version.
 */

define("curam/util/Request", ['dojo/_base/xhr',
        'curam/debug',
        'curam/util/ResourceBundle',
        'curam/util/LocalConfig'
        ], function(xhr, debug, ResourceBundle, localConfig) {
  
  dojo.requireLocalization("curam.application", "Request");

  var bundle = new ResourceBundle("Request"),

      // holds custom login page detector function, if one was provided
      // by the API client
      _isLoginPage = null,
        
      /**
       * Check for a login page based on the presence of this HTML tag:
       * <form action="j_security_check" ...>
       * 
       * @param request The XHR request object.
       * @return True if the response is a login page, otherwise False.
       */
      isLoginPage = function(request) {
        // if custom login page detector was provided use it
        if (_isLoginPage) {
          return _isLoginPage(request);

        // or fall back to default detection method
        } else {
          return request.responseText.indexOf(
              "action=\"j_security_check\"") > 0;
        }
      },

      errorDisplayHookpoint = function(err, ioargs) {
        if (isLoginPage(ioargs.xhr)) {
          // session timeout scenario
          debug.log(bundle.getProperty('sessionExpired'));
          alert(bundle.getProperty('sessionExpired'));

        } else {
          // display generic error message
          debug.log(bundle.getProperty('ajaxError'));
          alert(bundle.getProperty('ajaxError'));
        }

        // log the error
        debug.log(err);
        debug.log('HTTP status was: ' + ioargs.xhr.status);
      },
      
      _xhr = function(method, args) {
        var ajaxDebugMode =
                localConfig.readOption('ajaxDebugMode', 'false') == 'true';

        var error = args.error;
        
        // only enable common error handling if debug mode is on
        if (ajaxDebugMode) {
          args.error = function(err, ioargs) {
            if (args.errorHandlerOverrideDefault !== true) {
              errorDisplayHookpoint(err, ioargs);
            }

            // make sure custom error handler gets called, if there is one
            if (error) {
              error(err, ioargs);
            }
          };
        }

        var deferred = method(args);
        return deferred;
      };

  /**
   * @name curam.util.Request
   * @namespace AJAX request API with common error handling and login page
   * detection. It is designed as a near drop-in replacement for the dojo.xhr*
   * group of functions.
   * <p/>
   * By default this API will behave exactly like it's dojo.xhr* counterpart.
   * <p/>
   * But if the "curam.trace.javascript.ajax.report" application property is set
   * to true then common error reporting is used, causing every AJAX request
   * failure to be reported to the user in a friendly dialog with details
   * written to the JavaScript trace log (if it is enabled).<br/>
   * Session timeouts will be reported differently, asking the user to log
   * in again.
   * <p/>
   * Note that by default the common reporting will work alongside any custom
   * error handlers specified by the API client. However if
   * the "errorHandlerOverrideDefault" property is present on the args
   * object and is set to true, then a provided custom error handler will
   * override the default handling provided by this API.
   */
  var Request = 
    /**
     * @lends curam.util.Request.prototype
     */
    {
      /**
       * This function works exactly like
       * <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/xhrPost.html">dojo.xhrPost</a>
       * only it additionally provides common error handling for AJAX requests.
       *
       * @param args This object defines how the post() should operate.
       *  For detailed information see
       *  <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/xhrPost.html#dojo-xhrpost-supported-object-properties">dojo.xhrPost documentation</a>
       * @returns {dojo.Deferred} Same return type as get(). See
       *  <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/xhrGet.html#return-type-dojo-deferred">dojo.xhrGet return type</a>
       *  for details.
       */
      post: function(args) {
        return _xhr(xhr.post, args);
      },
      
      /**
       * This function works exactly like
       * <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/xhrGet.html">dojo.xhrGet</a>
       * only it additionally provides common error handling for AJAX requests.
       *
       * @param args This object defines how the get() should operate.
       *  For detailed information see
       *  <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/xhrGet.html#dojo-xhrget-supported-object-properties">dojo.xhrGet documentation</a>
       * @returns {dojo.Deferred} See
       *  <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/xhrGet.html#return-type-dojo-deferred">dojo.xhrGet return type</a>
       *  for details.
       */
      get: function(args) {
        return _xhr(xhr.get, args);
      },
      
      /**
       * Allows to optionally customize the way to detect that a response
       * from an AJAX request is a login page.
       * 
       * This is optional and if custom detector function is not provided
       * the API will by default recognize login pages that contain a HTML form
       * that submits into the standard "j_security_check" mechanism.
       * 
       * If null is passed the default detection method will be used.
       * 
       * @param {function(dojoXhrRequestObject)::boolean} detectorFunction
       *        The function to be used for detecting login page based on the
       *        <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/xhrGet.html#handling-status-codes">Dojo XHR
       *        request object.</a>
       */
      setLoginPageDetector: function(detectorFunction) {
        _isLoginPage = detectorFunction;
      }
    };

  return Request;
});

},
'curam/widget/DropDownButton':function(){
require({cache:{
'url:curam/widget/templates/DropDownButton.html':"<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\" role=\"presentation\"\n/></span>\n"}});
/*
 * Copyright 2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/widget/DropDownButton", ["dojo/text!curam/widget/templates/DropDownButton.html",
        "dijit/form/DropDownButton"
        ], function(template) {
  
/*
 * Modification History
 * --------------------
 * 10-Jan-2013 SB [CR00357346]   Initial version.
 */

  /**
   * @name curam.widget.DropDownButton
   * @namespace Override of the Dojo DropDownButton in order to make the DropDownButton
   * accessible using screen reader.
   * 
   * 
   */
  var DropDownButton = dojo.declare("curam.widget.DropDownButton", dijit.form.DropDownButton,
  /**
   * @lends curam.widget.DropDownButton.prototype
   */
  {
    templateString: template
  });
  
  return DropDownButton;
});

},
'cm/_base/_form':function(){
define("cm/_base/_form", [], function() {
  
/*
  This file provides common functions that are used
  to manipulate HTML forms.
*/

  var cm = dojo.global.cm || {};
  dojo.global.cm = cm;

  dojo.mixin(cm, {
  
    checkAll: function(/*Boolean*/value, /*Node*/fromNode) {
      // summary: Sets the check state of one or more checkboxes 
      //           to the value specified. All checkboxes inside the
      //           node 'fromNode' are affected.
      cm.query("input[type='checkbox']", fromNode)
        .forEach("item.checked = " + (value ? "true" : "false"));
    },
    
    setFormSubmitted: function(form, wasSubmitted) {
      // summary: Sets the flag on the form to state whether or not it was 
      //           previously submitted. If any onSubmit handler for a form 
      //           (e.g. validation) cancels the onSubmit event, it should 
      //           call this method, passing false as the second parameter.
      form._alreadySubmitted = wasSubmitted;
    },
  
    wasFormSubmitted: function(form) {
      // summary: returns true if the form was previously submitted, false otherwise.
      return form._alreadySubmitted;
    },
    
    getFormItems: function() {
      // summary: Returns an object that provides access to information on
      //           the form elements on the page. The object contains the
      //           following methods:
      //            length(): returns the number of inputs on the page. Takes
      //                       no parameters
      //            getNames(): returns an array of strings, each element is a
      //                          form element name. Takes no parameters.
      //            getInputs(boolean): returns an array of DOM input elements.
      //                        If the boolean 'true' is passed to the method,
      //                        it only returns inputs that are mandatory.
      //            getTargetPath(index): returns the target path of an input.
      //                        The parameter to the function can be either
      //                        the string name of the input, or an integer index.
      //            getLabel(index): returns the string label for the input.
      //                        The parameter to the function can be either
      //                        the string name of the input, or an integer index.
      //            getDomain(index): returns the data Domain for the input.
      //                        The parameter to the function can be either
      //                        the string name of the input, or an integer index.
      //            isMandatory(index): returns true if the input is mandatory. Otherwise
      //                        false is returned.
      //                        The parameter to the function can be either
      //                        the string name of the input, or an integer index.
      if(cm._formItems) {
        return cm._formItems;
      }
      
      // The form metadata is stored in the input with the name "__o3fmeta"
      var formItemsInput = dojo.query("input[name='__o3fmeta']");
      var data = formItemsInput.length > 0 ? 
                                                  dojo.fromJson(formItemsInput[0].value) : {};
      var names = [];
      for(var x in data) {
        names.push(x);
      }
      
      // Create a function that has child functions.  This accesses the 
      // 'data' and 'names' arrays above.
      cm._formItems = new function() {
        this.length = function(){
          return names.length;
        };
        this.getNames = function(){
          return names;
        };
        // List the inputs on the page. If the mandatory flag is set to true,
        // only mandatory inputs are returned.
        this.getInputs = function(mandatory) {
          var inputs = [];
          dojo.forEach(names, function(name, index){
            if(!mandatory || this.isMandatory(index)){
              inputs.push("[name='" + name + "']");
            } 
          }, this);
          return inputs.length > 0 ? dojo.query(inputs.join(",")) : [];
        };
        function fn(dataIdx) {
          return function(index) {
            var d = data[dojo.isString(index) ? index : names[index]];
            return d ?  d[dataIdx]:null;
          };
        }
        this.getTargetPath = fn(0);
        this.getLabel = fn(1);
        this.getDomain = fn(2);
        this.isMandatory = fn(3);
      };
      return cm._formItems;
    }
  });
  
  return cm;
});

},
'dijit/MenuBar':function(){
require({cache:{
'url:dijit/templates/MenuBar.html':"<div class=\"dijitMenuBar dijitMenuPassive\" data-dojo-attach-point=\"containerNode\"  role=\"menubar\" tabIndex=\"${tabIndex}\" data-dojo-attach-event=\"onkeypress: _onKeyPress\"></div>\n"}});
define("dijit/MenuBar", [
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/keys", // keys.DOWN_ARROW
	"./_MenuBase",
	"dojo/text!./templates/MenuBar.html"
], function(declare, event, keys, _MenuBase, template){

/*=====
	var _MenuBase = dijit._MenuBase;
=====*/

// module:
//		dijit/MenuBar
// summary:
//		A menu bar, listing menu choices horizontally, like the "File" menu in most desktop applications

return declare("dijit.MenuBar", _MenuBase, {
	// summary:
	//		A menu bar, listing menu choices horizontally, like the "File" menu in most desktop applications

	templateString: template,

	baseClass: "dijitMenuBar",

	// _isMenuBar: [protected] Boolean
	//		This is a MenuBar widget, not a (vertical) Menu widget.
	_isMenuBar: true,

	postCreate: function(){
		var l = this.isLeftToRight();
		this.connectKeyNavHandlers(
			l ? [keys.LEFT_ARROW] : [keys.RIGHT_ARROW],
			l ? [keys.RIGHT_ARROW] : [keys.LEFT_ARROW]
		);

		// parameter to dijit.popup.open() about where to put popup (relative to this.domNode)
		this._orient = ["below"];
	},

	focusChild: function(item){
		// overload focusChild so that whenever the focus is moved to a new item,
		// check the previous focused whether it has its popup open, if so, after
		// focusing the new item, open its submenu immediately
		var prev_item = this.focusedChild,
			showpopup = prev_item && prev_item.popup && prev_item.popup.isShowingNow;
		this.inherited(arguments);
		if(showpopup && item.popup && !item.disabled){
			this._openPopup();		// TODO: on down arrow, _openPopup() is called here and in onItemClick()
		}
	},

	_onKeyPress: function(/*Event*/ evt){
		// summary:
		//		Handle keyboard based menu navigation.
		// tags:
		//		protected

		if(evt.ctrlKey || evt.altKey){ return; }

		switch(evt.charOrCode){
			case keys.DOWN_ARROW:
				this._moveToPopup(evt);
				event.stop(evt);
		}
	},

	onItemClick: function(/*dijit._Widget*/ item, /*Event*/ evt){
		// summary:
		//		Handle clicks on an item. Cancels a dropdown if already open.
		// tags:
		//		private
		if(item.popup && item.popup.isShowingNow){
			item.popup.onCancel();
		}else{
			this.inherited(arguments);
		}
	}
});

});

},
'url:curam/widget/templates/_TabButton.html':"<div role=\"presentation\" data-dojo-attach-point=\"titleNode\" data-dojo-attach-event='onclick:onClick' class='dijitTab'>\r\n    <div role=\"presentation\" class='dijitTabInnerDiv' data-dojo-attach-point='innerDiv'>\r\n        <div role=\"presentation\" class='dijitTabContent' data-dojo-attach-point='tabContent'>\r\n          <div role=\"presentation\" aria-labelledby='${id}_tabLabel'>\r\n            <img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" data-dojo-attach-point='iconNode' />\r\n            <span data-dojo-attach-point='containerNode,focusNode' class='tabLabel' id='${id}_tabLabel'></span>\r\n            <span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" data-dojo-attach-point='closeNode'\r\n                data-dojo-attach-event='onclick: onClickCloseButton' role=\"presentation\">\r\n                <span data-dojo-attach-point='closeText' class='dijitTabCloseText'>Close Tab</span\r\n            ></span>\r\n      </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
'dijit/Dialog':function(){
require({cache:{
'url:dijit/templates/Dialog.html':"<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\n\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\n\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\n\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\n\t</span>\n\t</div>\n\t\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\n</div>\n"}});
define("dijit/Dialog", [
	"require",
	"dojo/_base/array", // array.forEach array.indexOf array.map
	"dojo/_base/connect", // connect._keypress
	"dojo/_base/declare", // declare
	"dojo/_base/Deferred", // Deferred
	"dojo/dom", // dom.isDescendant
	"dojo/dom-class", // domClass.add domClass.contains
	"dojo/dom-geometry", // domGeometry.position
	"dojo/dom-style", // domStyle.set
	"dojo/_base/event", // event.stop
	"dojo/_base/fx", // fx.fadeIn fx.fadeOut
	"dojo/i18n", // i18n.getLocalization
	"dojo/_base/kernel", // kernel.isAsync
	"dojo/keys",
	"dojo/_base/lang", // lang.mixin lang.hitch
	"dojo/on",
	"dojo/ready",
	"dojo/_base/sniff", // has("ie") has("opera")
	"dojo/_base/window", // win.body
	"dojo/window", // winUtils.getBox
	"dojo/dnd/Moveable", // Moveable
	"dojo/dnd/TimedMoveable", // TimedMoveable
	"./focus",
	"./_base/manager",	// manager.defaultDuration
	"./_Widget",
	"./_TemplatedMixin",
	"./_CssStateMixin",
	"./form/_FormMixin",
	"./_DialogMixin",
	"./DialogUnderlay",
	"./layout/ContentPane",
	"dojo/text!./templates/Dialog.html",
	".",			// for back-compat, exporting dijit._underlay (remove in 2.0)
	"dojo/i18n!./nls/common"
], function(require, array, connect, declare, Deferred,
			dom, domClass, domGeometry, domStyle, event, fx, i18n, kernel, keys, lang, on, ready, has, win, winUtils,
			Moveable, TimedMoveable, focus, manager, _Widget, _TemplatedMixin, _CssStateMixin, _FormMixin, _DialogMixin,
			DialogUnderlay, ContentPane, template, dijit){
	
/*=====
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _CssStateMixin = dijit._CssStateMixin;
	var _FormMixin = dijit.form._FormMixin;
	var _DialogMixin = dijit._DialogMixin;
=====*/	


	// module:
	//		dijit/Dialog
	// summary:
	//		A modal dialog Widget


	/*=====
	dijit._underlay = function(kwArgs){
		// summary:
		//		A shared instance of a `dijit.DialogUnderlay`
		//
		// description:
		//		A shared instance of a `dijit.DialogUnderlay` created and
		//		used by `dijit.Dialog`, though never created until some Dialog
		//		or subclass thereof is shown.
	};
	=====*/

	var _DialogBase = declare("dijit._DialogBase", [_TemplatedMixin, _FormMixin, _DialogMixin, _CssStateMixin], {
		// summary:
		//		A modal dialog Widget
		//
		// description:
		//		Pops up a modal dialog window, blocking access to the screen
		//		and also graying out the screen Dialog is extended from
		//		ContentPane so it supports all the same parameters (href, etc.)
		//
		// example:
		// |	<div data-dojo-type="dijit.Dialog" data-dojo-props="href: 'test.html'"></div>
		//
		// example:
		// |	var foo = new dijit.Dialog({ title: "test dialog", content: "test content" };
		// |	dojo.body().appendChild(foo.domNode);
		// |	foo.startup();

		templateString: template,

		baseClass: "dijitDialog",

		cssStateNodes: {
			closeButtonNode: "dijitDialogCloseIcon"
		},

		// Map widget attributes to DOMNode attributes.
		_setTitleAttr: [
			{ node: "titleNode", type: "innerHTML" },
			{ node: "titleBar", type: "attribute" }
		],

		// open: [readonly] Boolean
		//		True if Dialog is currently displayed on screen.
		open: false,

		// duration: Integer
		//		The time in milliseconds it takes the dialog to fade in and out
		duration: manager.defaultDuration,

		// refocus: Boolean
		// 		A Toggle to modify the default focus behavior of a Dialog, which
		// 		is to re-focus the element which had focus before being opened.
		//		False will disable refocusing. Default: true
		refocus: true,

		// autofocus: Boolean
		// 		A Toggle to modify the default focus behavior of a Dialog, which
		// 		is to focus on the first dialog element after opening the dialog.
		//		False will disable autofocusing. Default: true
		autofocus: true,

		// _firstFocusItem: [private readonly] DomNode
		//		The pointer to the first focusable node in the dialog.
		//		Set by `dijit._DialogMixin._getFocusItems`.
		_firstFocusItem: null,

		// _lastFocusItem: [private readonly] DomNode
		//		The pointer to which node has focus prior to our dialog.
		//		Set by `dijit._DialogMixin._getFocusItems`.
		_lastFocusItem: null,

		// doLayout: [protected] Boolean
		//		Don't change this parameter from the default value.
		//		This ContentPane parameter doesn't make sense for Dialog, since Dialog
		//		is never a child of a layout container, nor can you specify the size of
		//		Dialog in order to control the size of an inner widget.
		doLayout: false,

		// draggable: Boolean
		//		Toggles the moveable aspect of the Dialog. If true, Dialog
		//		can be dragged by it's title. If false it will remain centered
		//		in the viewport.
		draggable: true,

		//aria-describedby: String
		//		Allows the user to add an aria-describedby attribute onto the dialog. The value should
		//		be the id of the container element of text that describes the dialog purpose (usually
		//		the first text in the dialog).
		//		<div data-dojo-type="dijit.Dialog" aria-describedby="intro" .....>
		//			<div id="intro">Introductory text</div>
		//			<div>rest of dialog contents</div>
		//		</div>
		"aria-describedby":"",

		postMixInProperties: function(){
			var _nlsResources = i18n.getLocalization("dijit", "common");
			lang.mixin(this, _nlsResources);
			this.inherited(arguments);
		},

		postCreate: function(){
			domStyle.set(this.domNode, {
				display: "none",
				position:"absolute"
			});
			win.body().appendChild(this.domNode);

			this.inherited(arguments);

			this.connect(this, "onExecute", "hide");
			this.connect(this, "onCancel", "hide");
			this._modalconnects = [];
		},

		onLoad: function(){
			// summary:
			//		Called when data has been loaded from an href.
			//		Unlike most other callbacks, this function can be connected to (via `dojo.connect`)
			//		but should *not* be overridden.
			// tags:
			//		callback

			// when href is specified we need to reposition the dialog after the data is loaded
			// and find the focusable elements
			this._position();
			if(this.autofocus && DialogLevelManager.isTop(this)){
				this._getFocusItems(this.domNode);
				focus.focus(this._firstFocusItem);
			}
			this.inherited(arguments);
		},

		_endDrag: function(){
			// summary:
			//		Called after dragging the Dialog. Saves the position of the dialog in the viewport,
			//		and also adjust position to be fully within the viewport, so user doesn't lose access to handle
			var nodePosition = domGeometry.position(this.domNode),
				viewport = winUtils.getBox();
			nodePosition.y = Math.min(Math.max(nodePosition.y, 0), (viewport.h - nodePosition.h));
			nodePosition.x = Math.min(Math.max(nodePosition.x, 0), (viewport.w - nodePosition.w));
			this._relativePosition = nodePosition;
			this._position();
		},

		_setup: function(){
			// summary:
			//		Stuff we need to do before showing the Dialog for the first
			//		time (but we defer it until right beforehand, for
			//		performance reasons).
			// tags:
			//		private

			var node = this.domNode;

			if(this.titleBar && this.draggable){
				this._moveable = new ((has("ie") == 6) ? TimedMoveable // prevent overload, see #5285
					: Moveable)(node, { handle: this.titleBar });
				this.connect(this._moveable, "onMoveStop", "_endDrag");
			}else{
				domClass.add(node,"dijitDialogFixed");
			}

			this.underlayAttrs = {
				dialogId: this.id,
				"class": array.map(this["class"].split(/\s/), function(s){ return s+"_underlay"; }).join(" ")
			};
		},

		_size: function(){
			// summary:
			// 		If necessary, shrink dialog contents so dialog fits in viewport
			// tags:
			//		private

			this._checkIfSingleChild();

			// If we resized the dialog contents earlier, reset them back to original size, so
			// that if the user later increases the viewport size, the dialog can display w/out a scrollbar.
			// Need to do this before the domGeometry.position(this.domNode) call below.
			if(this._singleChild){
				if(this._singleChildOriginalStyle){
					this._singleChild.domNode.style.cssText = this._singleChildOriginalStyle;
				}
				delete this._singleChildOriginalStyle;
			}else{
				domStyle.set(this.containerNode, {
					width:"auto",
					height:"auto"
				});
			}

			var bb = domGeometry.position(this.domNode);
			var viewport = winUtils.getBox();
			if(bb.w >= viewport.w || bb.h >= viewport.h){
				// Reduce size of dialog contents so that dialog fits in viewport

				var w = Math.min(bb.w, Math.floor(viewport.w * 0.75)),
					h = Math.min(bb.h, Math.floor(viewport.h * 0.75));

				if(this._singleChild && this._singleChild.resize){
					this._singleChildOriginalStyle = this._singleChild.domNode.style.cssText;
					this._singleChild.resize({w: w, h: h});
				}else{
					domStyle.set(this.containerNode, {
						width: w + "px",
						height: h + "px",
						overflow: "auto",
						position: "relative"	// workaround IE bug moving scrollbar or dragging dialog
					});
				}
			}else{
				if(this._singleChild && this._singleChild.resize){
					this._singleChild.resize();
				}
			}
		},

		_position: function(){
			// summary:
			//		Position modal dialog in the viewport. If no relative offset
			//		in the viewport has been determined (by dragging, for instance),
			//		center the node. Otherwise, use the Dialog's stored relative offset,
			//		and position the node to top: left: values based on the viewport.
			if(!domClass.contains(win.body(), "dojoMove")){	// don't do anything if called during auto-scroll
				var node = this.domNode,
					viewport = winUtils.getBox(),
					p = this._relativePosition,
					bb = p ? null : domGeometry.position(node),
					l = Math.floor(viewport.l + (p ? p.x : (viewport.w - bb.w) / 2)),
					t = Math.floor(viewport.t + (p ? p.y : (viewport.h - bb.h) / 2))
				;
				domStyle.set(node,{
					left: l + "px",
					top: t + "px"
				});
			}
		},

		_onKey: function(/*Event*/ evt){
			// summary:
			//		Handles the keyboard events for accessibility reasons
			// tags:
			//		private

			if(evt.charOrCode){
				var node = evt.target;
				if(evt.charOrCode === keys.TAB){
					this._getFocusItems(this.domNode);
				}
				var singleFocusItem = (this._firstFocusItem == this._lastFocusItem);
				// see if we are shift-tabbing from first focusable item on dialog
				if(node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === keys.TAB){
					if(!singleFocusItem){
						focus.focus(this._lastFocusItem); // send focus to last item in dialog
					}
					event.stop(evt);
				}else if(node == this._lastFocusItem && evt.charOrCode === keys.TAB && !evt.shiftKey){
					if(!singleFocusItem){
						focus.focus(this._firstFocusItem); // send focus to first item in dialog
					}
					event.stop(evt);
				}else{
					// see if the key is for the dialog
					while(node){
						if(node == this.domNode || domClass.contains(node, "dijitPopup")){
							if(evt.charOrCode == keys.ESCAPE){
								this.onCancel();
							}else{
								return; // just let it go
							}
						}
						node = node.parentNode;
					}
					// this key is for the disabled document window
					if(evt.charOrCode !== keys.TAB){ // allow tabbing into the dialog for a11y
						event.stop(evt);
					// opera won't tab to a div
					}else if(!has("opera")){
						try{
							this._firstFocusItem.focus();
						}catch(e){ /*squelch*/ }
					}
				}
			}
		},

		show: function(){
			// summary:
			//		Display the dialog
			// returns: dojo.Deferred
			//		Deferred object that resolves when the display animation is complete

			if(this.open){ return; }

			if(!this._started){
				this.startup();
			}

			// first time we show the dialog, there's some initialization stuff to do
			if(!this._alreadyInitialized){
				this._setup();
				this._alreadyInitialized=true;
			}

			if(this._fadeOutDeferred){
				this._fadeOutDeferred.cancel();
			}

			if(!has("touch")){
				// If the user scrolls the display or resizes the viewport then reposition the Dialog.  But don't do it
				// for touch devices, because it will counteract when a keyboard pops up and then the browser
				// auto-scrolls the focused node into view.
				this._modalconnects.push(on(window, "scroll", lang.hitch(this, "layout")));
				this._modalconnects.push(on(window, "resize", lang.hitch(this, function(){
					// IE gives spurious resize events and can actually get stuck
					// in an infinite loop if we don't ignore them
					var viewport = winUtils.getBox();
					if(!this._oldViewport ||
							viewport.h != this._oldViewport.h ||
							viewport.w != this._oldViewport.w){
						this.layout();
						this._oldViewport = viewport;
					}
				})));
			}
			this._modalconnects.push(on(this.domNode, connect._keypress, lang.hitch(this, "_onKey")));

			domStyle.set(this.domNode, {
				opacity:0,
				display:""
			});

			this._set("open", true);
			this._onShow(); // lazy load trigger

			this._size();
			this._position();

			// fade-in Animation object, setup below
			var fadeIn;

			this._fadeInDeferred = new Deferred(lang.hitch(this, function(){
				fadeIn.stop();
				delete this._fadeInDeferred;
			}));

			fadeIn = fx.fadeIn({
				node: this.domNode,
				duration: this.duration,
				beforeBegin: lang.hitch(this, function(){
					DialogLevelManager.show(this, this.underlayAttrs);
				}),
				onEnd: lang.hitch(this, function(){
					if(this.autofocus && DialogLevelManager.isTop(this)){
						// find focusable items each time dialog is shown since if dialog contains a widget the
						// first focusable items can change
						this._getFocusItems(this.domNode);
						focus.focus(this._firstFocusItem);
					}
					this._fadeInDeferred.callback(true);
					delete this._fadeInDeferred;
				})
			}).play();

			return this._fadeInDeferred;
		},

		hide: function(){
			// summary:
			//		Hide the dialog
			// returns: dojo.Deferred
			//		Deferred object that resolves when the hide animation is complete

			// if we haven't been initialized yet then we aren't showing and we can just return
			if(!this._alreadyInitialized){
				return;
			}
			if(this._fadeInDeferred){
				this._fadeInDeferred.cancel();
			}

			// fade-in Animation object, setup below
			var fadeOut;

			this._fadeOutDeferred = new Deferred(lang.hitch(this, function(){
				fadeOut.stop();
				delete this._fadeOutDeferred;
			}));
			// fire onHide when the promise resolves.
			this._fadeOutDeferred.then(lang.hitch(this, 'onHide'));

			fadeOut = fx.fadeOut({
				node: this.domNode,
				duration: this.duration,
				onEnd: lang.hitch(this, function(){
					this.domNode.style.display = "none";
					DialogLevelManager.hide(this);
					this._fadeOutDeferred.callback(true);
					delete this._fadeOutDeferred;
				})
			 }).play();

			if(this._scrollConnected){
				this._scrollConnected = false;
			}
			var h;
			while(h = this._modalconnects.pop()){
				h.remove();
			}

			if(this._relativePosition){
				delete this._relativePosition;
			}
			this._set("open", false);

			return this._fadeOutDeferred;
		},

		layout: function(){
			// summary:
			//		Position the Dialog and the underlay
			// tags:
			//		private
			if(this.domNode.style.display != "none"){
				if(dijit._underlay){	// avoid race condition during show()
					dijit._underlay.layout();
				}
				this._position();
			}
		},

		destroy: function(){
			if(this._fadeInDeferred){
				this._fadeInDeferred.cancel();
			}
			if(this._fadeOutDeferred){
				this._fadeOutDeferred.cancel();
			}
			if(this._moveable){
				this._moveable.destroy();
			}
			var h;
			while(h = this._modalconnects.pop()){
				h.remove();
			}

			DialogLevelManager.hide(this);

			this.inherited(arguments);
		}
	});

	var Dialog = declare("dijit.Dialog", [ContentPane, _DialogBase], {});
	Dialog._DialogBase = _DialogBase;	// for monkey patching

	var DialogLevelManager = Dialog._DialogLevelManager = {
		// summary:
		//		Controls the various active "levels" on the page, starting with the
		//		stuff initially visible on the page (at z-index 0), and then having an entry for
		//		each Dialog shown.

		_beginZIndex: 950,

		show: function(/*dijit._Widget*/ dialog, /*Object*/ underlayAttrs){
			// summary:
			//		Call right before fade-in animation for new dialog.
			//		Saves current focus, displays/adjusts underlay for new dialog,
			//		and sets the z-index of the dialog itself.
			//
			//		New dialog will be displayed on top of all currently displayed dialogs.
			//
			//		Caller is responsible for setting focus in new dialog after the fade-in
			//		animation completes.

			// Save current focus
			ds[ds.length-1].focus = focus.curNode;

			// Display the underlay, or if already displayed then adjust for this new dialog
			var underlay = dijit._underlay;
			if(!underlay || underlay._destroyed){
				underlay = dijit._underlay = new DialogUnderlay(underlayAttrs);
			}else{
				underlay.set(dialog.underlayAttrs);
			}

			// Set z-index a bit above previous dialog
			var zIndex = ds[ds.length-1].dialog ? ds[ds.length-1].zIndex + 2 : Dialog._DialogLevelManager._beginZIndex;
			if(ds.length == 1){	// first dialog
				underlay.show();
			}
			domStyle.set(dijit._underlay.domNode, 'zIndex', zIndex - 1);

			// Dialog
			domStyle.set(dialog.domNode, 'zIndex', zIndex);

			ds.push({dialog: dialog, underlayAttrs: underlayAttrs, zIndex: zIndex});
		},

		hide: function(/*dijit._Widget*/ dialog){
			// summary:
			//		Called when the specified dialog is hidden/destroyed, after the fade-out
			//		animation ends, in order to reset page focus, fix the underlay, etc.
			//		If the specified dialog isn't open then does nothing.
			//
			//		Caller is responsible for either setting display:none on the dialog domNode,
			//		or calling dijit.popup.hide(), or removing it from the page DOM.

			if(ds[ds.length-1].dialog == dialog){
				// Removing the top (or only) dialog in the stack, return focus
				// to previous dialog

				ds.pop();

				var pd = ds[ds.length-1];	// the new active dialog (or the base page itself)

				// Adjust underlay
				if(ds.length == 1){
					// Returning to original page.
					// Hide the underlay, unless the underlay widget has already been destroyed
					// because we are being called during page unload (when all widgets are destroyed)
					if(!dijit._underlay._destroyed){
						dijit._underlay.hide();
					}
				}else{
					// Popping back to previous dialog, adjust underlay
					domStyle.set(dijit._underlay.domNode, 'zIndex', pd.zIndex - 1);
					dijit._underlay.set(pd.underlayAttrs);
				}

				// Adjust focus
				if(dialog.refocus){
					// If we are returning control to a previous dialog but for some reason
					// that dialog didn't have a focused field, set focus to first focusable item.
					// This situation could happen if two dialogs appeared at nearly the same time,
					// since a dialog doesn't set it's focus until the fade-in is finished.
					var focus = pd.focus;
					if(pd.dialog && (!focus || !dom.isDescendant(focus, pd.dialog.domNode))){
						pd.dialog._getFocusItems(pd.dialog.domNode);
						focus = pd.dialog._firstFocusItem;
					}

					if(focus){
						// Refocus the button that spawned the Dialog.   This will fail in corner cases including
						// page unload on IE, because the dijit/form/Button that launched the Dialog may get destroyed
						// before this code runs.  (#15058)
						try{
							focus.focus();
						}catch(e){}
					}
				}
			}else{
				// Removing a dialog out of order (#9944, #10705).
				// Don't need to mess with underlay or z-index or anything.
				var idx = array.indexOf(array.map(ds, function(elem){return elem.dialog}), dialog);
				if(idx != -1){
					ds.splice(idx, 1);
				}
			}
		},

		isTop: function(/*dijit._Widget*/ dialog){
			// summary:
			//		Returns true if specified Dialog is the top in the task
			return ds[ds.length-1].dialog == dialog;
		}
	};

	// Stack representing the various active "levels" on the page, starting with the
	// stuff initially visible on the page (at z-index 0), and then having an entry for
	// each Dialog shown.
	// Each element in stack has form {
	//		dialog: dialogWidget,
	//		focus: returnFromGetFocus(),
	//		underlayAttrs: attributes to set on underlay (when this widget is active)
	// }
	var ds = Dialog._dialogStack = [
		{dialog: null, focus: null, underlayAttrs: null}	// entry for stuff at z-index: 0
	];

	// Back compat w/1.6, remove for 2.0
	if(!kernel.isAsync){
		ready(0, function(){
			var requires = ["dijit/TooltipDialog"];
			require(requires);	// use indirection so modules not rolled into a build
		});
	}

	return Dialog;
});

},
'dojo/date/locale':function(){
define("dojo/date/locale", [
	"../_base/kernel",
	"../_base/lang",
	"../_base/array",
	"../date",
	"../cldr/supplemental",
	"../regexp",
	"../string",
	"../i18n!../cldr/nls/gregorian"
], function(dojo, lang, array, date, cldr, regexp, string, gregorian) {
	// module:
	//		dojo/date/locale
	// summary:
	//		This modules defines dojo.date.locale, localization methods for Date.

lang.getObject("date.locale", true, dojo);

// Localization methods for Date.   Honor local customs using locale-dependent dojo.cldr data.

// Load the bundles containing localization information for
// names and formats

//NOTE: Everything in this module assumes Gregorian calendars.
// Other calendars will be implemented in separate modules.

	// Format a pattern without literals
	function formatPattern(dateObject, bundle, options, pattern){
		return pattern.replace(/([a-z])\1*/ig, function(match){
			var s, pad,
				c = match.charAt(0),
				l = match.length,
				widthList = ["abbr", "wide", "narrow"];
			switch(c){
				case 'G':
					s = bundle[(l < 4) ? "eraAbbr" : "eraNames"][dateObject.getFullYear() < 0 ? 0 : 1];
					break;
				case 'y':
					s = dateObject.getFullYear();
					switch(l){
						case 1:
							break;
						case 2:
							if(!options.fullYear){
								s = String(s); s = s.substr(s.length - 2);
								break;
							}
							// fallthrough
						default:
							pad = true;
					}
					break;
				case 'Q':
				case 'q':
					s = Math.ceil((dateObject.getMonth()+1)/3);
//					switch(l){
//						case 1: case 2:
							pad = true;
//							break;
//						case 3: case 4: // unimplemented
//					}
					break;
				case 'M':
					var m = dateObject.getMonth();
					if(l<3){
						s = m+1; pad = true;
					}else{
						var propM = ["months", "format", widthList[l-3]].join("-");
						s = bundle[propM][m];
					}
					break;
				case 'w':
					var firstDay = 0;
					s = dojo.date.locale._getWeekOfYear(dateObject, firstDay); pad = true;
					break;
				case 'd':
					s = dateObject.getDate(); pad = true;
					break;
				case 'D':
					s = dojo.date.locale._getDayOfYear(dateObject); pad = true;
					break;
				case 'E':
					var d = dateObject.getDay();
					if(l<3){
						s = d+1; pad = true;
					}else{
						var propD = ["days", "format", widthList[l-3]].join("-");
						s = bundle[propD][d];
					}
					break;
				case 'a':
					var timePeriod = (dateObject.getHours() < 12) ? 'am' : 'pm';
					s = options[timePeriod] || bundle['dayPeriods-format-wide-' + timePeriod];
					break;
				case 'h':
				case 'H':
				case 'K':
				case 'k':
					var h = dateObject.getHours();
					// strange choices in the date format make it impossible to write this succinctly
					switch (c){
						case 'h': // 1-12
							s = (h % 12) || 12;
							break;
						case 'H': // 0-23
							s = h;
							break;
						case 'K': // 0-11
							s = (h % 12);
							break;
						case 'k': // 1-24
							s = h || 24;
							break;
					}
					pad = true;
					break;
				case 'm':
					s = dateObject.getMinutes(); pad = true;
					break;
				case 's':
					s = dateObject.getSeconds(); pad = true;
					break;
				case 'S':
					s = Math.round(dateObject.getMilliseconds() * Math.pow(10, l-3)); pad = true;
					break;
				case 'v': // FIXME: don't know what this is. seems to be same as z?
				case 'z':
					// We only have one timezone to offer; the one from the browser
					s = dojo.date.locale._getZone(dateObject, true, options);
					if(s){break;}
					l=4;
					// fallthrough... use GMT if tz not available
				case 'Z':
					var offset = dojo.date.locale._getZone(dateObject, false, options);
					var tz = [
						(offset<=0 ? "+" : "-"),
						string.pad(Math.floor(Math.abs(offset)/60), 2),
						string.pad(Math.abs(offset)% 60, 2)
					];
					if(l==4){
						tz.splice(0, 0, "GMT");
						tz.splice(3, 0, ":");
					}
					s = tz.join("");
					break;
//				case 'Y': case 'u': case 'W': case 'F': case 'g': case 'A': case 'e':
//					console.log(match+" modifier unimplemented");
				default:
					throw new Error("dojo.date.locale.format: invalid pattern char: "+pattern);
			}
			if(pad){ s = string.pad(s, l); }
			return s;
		});
	}

/*=====
	dojo.date.locale.__FormatOptions = function(){
	//	selector: String
	//		choice of 'time','date' (default: date and time)
	//	formatLength: String
	//		choice of long, short, medium or full (plus any custom additions).  Defaults to 'short'
	//	datePattern:String
	//		override pattern with this string
	//	timePattern:String
	//		override pattern with this string
	//	am: String
	//		override strings for am in times
	//	pm: String
	//		override strings for pm in times
	//	locale: String
	//		override the locale used to determine formatting rules
	//	fullYear: Boolean
	//		(format only) use 4 digit years whenever 2 digit years are called for
	//	strict: Boolean
	//		(parse only) strict parsing, off by default
		this.selector = selector;
		this.formatLength = formatLength;
		this.datePattern = datePattern;
		this.timePattern = timePattern;
		this.am = am;
		this.pm = pm;
		this.locale = locale;
		this.fullYear = fullYear;
		this.strict = strict;
	}
=====*/

dojo.date.locale._getZone = function(/*Date*/dateObject, /*boolean*/getName, /*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Returns the zone (or offset) for the given date and options.  This
	//		is broken out into a separate function so that it can be overridden
	//		by timezone-aware code.
	//
	// dateObject:
	//		the date and/or time being formatted.
	//
	// getName:
	//		Whether to return the timezone string (if true), or the offset (if false)
	//
	// options:
	//		The options being used for formatting
	if(getName){
		return date.getTimezoneName(dateObject);
	}else{
		return dateObject.getTimezoneOffset();
	}
};


dojo.date.locale.format = function(/*Date*/dateObject, /*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Format a Date object as a String, using locale-specific settings.
	//
	// description:
	//		Create a string from a Date object using a known localized pattern.
	//		By default, this method formats both date and time from dateObject.
	//		Formatting patterns are chosen appropriate to the locale.  Different
	//		formatting lengths may be chosen, with "full" used by default.
	//		Custom patterns may be used or registered with translations using
	//		the dojo.date.locale.addCustomFormats method.
	//		Formatting patterns are implemented using [the syntax described at
	//		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
	//
	// dateObject:
	//		the date and/or time to be formatted.  If a time only is formatted,
	//		the values in the year, month, and day fields are irrelevant.  The
	//		opposite is true when formatting only dates.

	options = options || {};

	var locale = dojo.i18n.normalizeLocale(options.locale),
		formatLength = options.formatLength || 'short',
		bundle = dojo.date.locale._getGregorianBundle(locale),
		str = [],
		sauce = lang.hitch(this, formatPattern, dateObject, bundle, options);
	if(options.selector == "year"){
		return _processPattern(bundle["dateFormatItem-yyyy"] || "yyyy", sauce);
	}
	var pattern;
	if(options.selector != "date"){
		pattern = options.timePattern || bundle["timeFormat-"+formatLength];
		if(pattern){str.push(_processPattern(pattern, sauce));}
	}
	if(options.selector != "time"){
		pattern = options.datePattern || bundle["dateFormat-"+formatLength];
		if(pattern){str.push(_processPattern(pattern, sauce));}
	}

	return str.length == 1 ? str[0] : bundle["dateTimeFormat-"+formatLength].replace(/\{(\d+)\}/g,
		function(match, key){ return str[key]; }); // String
};

dojo.date.locale.regexp = function(/*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Builds the regular needed to parse a localized date

	return dojo.date.locale._parseInfo(options).regexp; // String
};

dojo.date.locale._parseInfo = function(/*dojo.date.locale.__FormatOptions?*/options){
	options = options || {};
	var locale = dojo.i18n.normalizeLocale(options.locale),
		bundle = dojo.date.locale._getGregorianBundle(locale),
		formatLength = options.formatLength || 'short',
		datePattern = options.datePattern || bundle["dateFormat-" + formatLength],
		timePattern = options.timePattern || bundle["timeFormat-" + formatLength],
		pattern;
	if(options.selector == 'date'){
		pattern = datePattern;
	}else if(options.selector == 'time'){
		pattern = timePattern;
	}else{
		pattern = bundle["dateTimeFormat-"+formatLength].replace(/\{(\d+)\}/g,
			function(match, key){ return [timePattern, datePattern][key]; });
	}

	var tokens = [],
		re = _processPattern(pattern, lang.hitch(this, _buildDateTimeRE, tokens, bundle, options));
	return {regexp: re, tokens: tokens, bundle: bundle};
};

dojo.date.locale.parse = function(/*String*/value, /*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Convert a properly formatted string to a primitive Date object,
	//		using locale-specific settings.
	//
	// description:
	//		Create a Date object from a string using a known localized pattern.
	//		By default, this method parses looking for both date and time in the string.
	//		Formatting patterns are chosen appropriate to the locale.  Different
	//		formatting lengths may be chosen, with "full" used by default.
	//		Custom patterns may be used or registered with translations using
	//		the dojo.date.locale.addCustomFormats method.
	//
	//		Formatting patterns are implemented using [the syntax described at
	//		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
	//		When two digit years are used, a century is chosen according to a sliding
	//		window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns.
	//		year < 100CE requires strict mode.
	//
	// value:
	//		A string representation of a date

	// remove non-printing bidi control chars from input and pattern
	var controlChars = /[\u200E\u200F\u202A\u202E]/g,
		info = dojo.date.locale._parseInfo(options),
		tokens = info.tokens, bundle = info.bundle,
		re = new RegExp("^" + info.regexp.replace(controlChars, "") + "$",
			info.strict ? "" : "i"),
		match = re.exec(value && value.replace(controlChars, ""));

	if(!match){ return null; } // null

	var widthList = ['abbr', 'wide', 'narrow'],
		result = [1970,0,1,0,0,0,0], // will get converted to a Date at the end
		amPm = "",
		valid = dojo.every(match, function(v, i){
		if(!i){return true;}
		var token=tokens[i-1];
		var l=token.length;
		switch(token.charAt(0)){
			case 'y':
				if(l != 2 && options.strict){
					//interpret year literally, so '5' would be 5 A.D.
					result[0] = v;
				}else{
					if(v<100){
						v = Number(v);
						//choose century to apply, according to a sliding window
						//of 80 years before and 20 years after present year
						var year = '' + new Date().getFullYear(),
							century = year.substring(0, 2) * 100,
							cutoff = Math.min(Number(year.substring(2, 4)) + 20, 99);
						result[0] = (v < cutoff) ? century + v : century - 100 + v;
					}else{
						//we expected 2 digits and got more...
						if(options.strict){
							return false;
						}
						//interpret literally, so '150' would be 150 A.D.
						//also tolerate '1950', if 'yyyy' input passed to 'yy' format
						result[0] = v;
					}
				}
				break;
			case 'M':
				if(l>2){
					var months = bundle['months-format-' + widthList[l-3]].concat();
					if(!options.strict){
						//Tolerate abbreviating period in month part
						//Case-insensitive comparison
						v = v.replace(".","").toLowerCase();
						months = dojo.map(months, function(s){ return s.replace(".","").toLowerCase(); } );
					}
					v = dojo.indexOf(months, v);
					if(v == -1){
//						console.log("dojo.date.locale.parse: Could not parse month name: '" + v + "'.");
						return false;
					}
				}else{
					v--;
				}
				result[1] = v;
				break;
			case 'E':
			case 'e':
				var days = bundle['days-format-' + widthList[l-3]].concat();
				if(!options.strict){
					//Case-insensitive comparison
					v = v.toLowerCase();
					days = dojo.map(days, function(d){return d.toLowerCase();});
				}
				v = dojo.indexOf(days, v);
				if(v == -1){
//					console.log("dojo.date.locale.parse: Could not parse weekday name: '" + v + "'.");
					return false;
				}

				//TODO: not sure what to actually do with this input,
				//in terms of setting something on the Date obj...?
				//without more context, can't affect the actual date
				//TODO: just validate?
				break;
			case 'D':
				result[1] = 0;
				// fallthrough...
			case 'd':
				result[2] = v;
				break;
			case 'a': //am/pm
				var am = options.am || bundle['dayPeriods-format-wide-am'],
					pm = options.pm || bundle['dayPeriods-format-wide-pm'];
				if(!options.strict){
					var period = /\./g;
					v = v.replace(period,'').toLowerCase();
					am = am.replace(period,'').toLowerCase();
					pm = pm.replace(period,'').toLowerCase();
				}
				if(options.strict && v != am && v != pm){
//					console.log("dojo.date.locale.parse: Could not parse am/pm part.");
					return false;
				}

				// we might not have seen the hours field yet, so store the state and apply hour change later
				amPm = (v == pm) ? 'p' : (v == am) ? 'a' : '';
				break;
			case 'K': //hour (1-24)
				if(v == 24){ v = 0; }
				// fallthrough...
			case 'h': //hour (1-12)
			case 'H': //hour (0-23)
			case 'k': //hour (0-11)
				//TODO: strict bounds checking, padding
				if(v > 23){
//					console.log("dojo.date.locale.parse: Illegal hours value");
					return false;
				}

				//in the 12-hour case, adjusting for am/pm requires the 'a' part
				//which could come before or after the hour, so we will adjust later
				result[3] = v;
				break;
			case 'm': //minutes
				result[4] = v;
				break;
			case 's': //seconds
				result[5] = v;
				break;
			case 'S': //milliseconds
				result[6] = v;
//				break;
//			case 'w':
//TODO				var firstDay = 0;
//			default:
//TODO: throw?
//				console.log("dojo.date.locale.parse: unsupported pattern char=" + token.charAt(0));
		}
		return true;
	});

	var hours = +result[3];
	if(amPm === 'p' && hours < 12){
		result[3] = hours + 12; //e.g., 3pm -> 15
	}else if(amPm === 'a' && hours == 12){
		result[3] = 0; //12am -> 0
	}

	//TODO: implement a getWeekday() method in order to test
	//validity of input strings containing 'EEE' or 'EEEE'...

	var dateObject = new Date(result[0], result[1], result[2], result[3], result[4], result[5], result[6]); // Date
	if(options.strict){
		dateObject.setFullYear(result[0]);
	}

	// Check for overflow.  The Date() constructor normalizes things like April 32nd...
	//TODO: why isn't this done for times as well?
	var allTokens = tokens.join(""),
		dateToken = allTokens.indexOf('d') != -1,
		monthToken = allTokens.indexOf('M') != -1;

	if(!valid ||
		(monthToken && dateObject.getMonth() > result[1]) ||
		(dateToken && dateObject.getDate() > result[2])){
		return null;
	}

	// Check for underflow, due to DST shifts.  See #9366
	// This assumes a 1 hour dst shift correction at midnight
	// We could compare the timezone offset after the shift and add the difference instead.
	if((monthToken && dateObject.getMonth() < result[1]) ||
		(dateToken && dateObject.getDate() < result[2])){
		dateObject = date.add(dateObject, "hour", 1);
	}

	return dateObject; // Date
};

function _processPattern(pattern, applyPattern, applyLiteral, applyAll){
	//summary: Process a pattern with literals in it

	// Break up on single quotes, treat every other one as a literal, except '' which becomes '
	var identity = function(x){return x;};
	applyPattern = applyPattern || identity;
	applyLiteral = applyLiteral || identity;
	applyAll = applyAll || identity;

	//split on single quotes (which escape literals in date format strings)
	//but preserve escaped single quotes (e.g., o''clock)
	var chunks = pattern.match(/(''|[^'])+/g),
		literal = pattern.charAt(0) == "'";

	dojo.forEach(chunks, function(chunk, i){
		if(!chunk){
			chunks[i]='';
		}else{
			chunks[i]=(literal ? applyLiteral : applyPattern)(chunk.replace(/''/g, "'"));
			literal = !literal;
		}
	});
	return applyAll(chunks.join(''));
}

function _buildDateTimeRE(tokens, bundle, options, pattern){
	pattern = regexp.escapeString(pattern);
	if(!options.strict){ pattern = pattern.replace(" a", " ?a"); } // kludge to tolerate no space before am/pm
	return pattern.replace(/([a-z])\1*/ig, function(match){
		// Build a simple regexp.  Avoid captures, which would ruin the tokens list
		var s,
			c = match.charAt(0),
			l = match.length,
			p2 = '', p3 = '';
		if(options.strict){
			if(l > 1){ p2 = '0' + '{'+(l-1)+'}'; }
			if(l > 2){ p3 = '0' + '{'+(l-2)+'}'; }
		}else{
			p2 = '0?'; p3 = '0{0,2}';
		}
		switch(c){
			case 'y':
				s = '\\d{2,4}';
				break;
			case 'M':
				s = (l>2) ? '\\S+?' : '1[0-2]|'+p2+'[1-9]';
				break;
			case 'D':
				s = '[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|'+p2+'[1-9][0-9]|'+p3+'[1-9]';
				break;
			case 'd':
				s = '3[01]|[12]\\d|'+p2+'[1-9]';
				break;
			case 'w':
				s = '[1-4][0-9]|5[0-3]|'+p2+'[1-9]';
				break;
			case 'E':
				s = '\\S+';
				break;
			case 'h': //hour (1-12)
				s = '1[0-2]|'+p2+'[1-9]';
				break;
			case 'k': //hour (0-11)
				s = '1[01]|'+p2+'\\d';
				break;
			case 'H': //hour (0-23)
				s = '1\\d|2[0-3]|'+p2+'\\d';
				break;
			case 'K': //hour (1-24)
				s = '1\\d|2[0-4]|'+p2+'[1-9]';
				break;
			case 'm':
			case 's':
				s = '[0-5]\\d';
				break;
			case 'S':
				s = '\\d{'+l+'}';
				break;
			case 'a':
				var am = options.am || bundle['dayPeriods-format-wide-am'],
					pm = options.pm || bundle['dayPeriods-format-wide-pm'];
					s = am + '|' + pm;
				if(!options.strict){
					if(am != am.toLowerCase()){ s += '|' + am.toLowerCase(); }
					if(pm != pm.toLowerCase()){ s += '|' + pm.toLowerCase(); }
					if(s.indexOf('.') != -1){ s += '|' + s.replace(/\./g, ""); }
				}
				s = s.replace(/\./g, "\\.");
				break;
			default:
			// case 'v':
			// case 'z':
			// case 'Z':
				s = ".*";
//				console.log("parse of date format, pattern=" + pattern);
		}

		if(tokens){ tokens.push(match); }

		return "(" + s + ")"; // add capture
	}).replace(/[\xa0 ]/g, "[\\s\\xa0]"); // normalize whitespace.  Need explicit handling of \xa0 for IE.
}

var _customFormats = [];
dojo.date.locale.addCustomFormats = function(/*String*/packageName, /*String*/bundleName){
	// summary:
	//		Add a reference to a bundle containing localized custom formats to be
	//		used by date/time formatting and parsing routines.
	//
	// description:
	//		The user may add custom localized formats where the bundle has properties following the
	//		same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx`
	//		The pattern string should match the format used by the CLDR.
	//		See dojo.date.locale.format() for details.
	//		The resources must be loaded by dojo.requireLocalization() prior to use

	_customFormats.push({pkg:packageName,name:bundleName});
};

dojo.date.locale._getGregorianBundle = function(/*String*/locale){
	var gregorian = {};
	dojo.forEach(_customFormats, function(desc){
		var bundle = dojo.i18n.getLocalization(desc.pkg, desc.name, locale);
		gregorian = lang.mixin(gregorian, bundle);
	}, this);
	return gregorian; /*Object*/
};

dojo.date.locale.addCustomFormats("dojo.cldr","gregorian");

dojo.date.locale.getNames = function(/*String*/item, /*String*/type, /*String?*/context, /*String?*/locale){
	// summary:
	//		Used to get localized strings from dojo.cldr for day or month names.
	//
	// item:
	//	'months' || 'days'
	// type:
	//	'wide' || 'abbr' || 'narrow' (e.g. "Monday", "Mon", or "M" respectively, in English)
	// context:
	//	'standAlone' || 'format' (default)
	// locale:
	//	override locale used to find the names

	var label,
		lookup = dojo.date.locale._getGregorianBundle(locale),
		props = [item, context, type];
	if(context == 'standAlone'){
		var key = props.join('-');
		label = lookup[key];
		// Fall back to 'format' flavor of name
		if(label[0] == 1){ label = undefined; } // kludge, in the absence of real aliasing support in dojo.cldr
	}
	props[1] = 'format';

	// return by copy so changes won't be made accidentally to the in-memory model
	return (label || lookup[props.join('-')]).concat(); /*Array*/
};

dojo.date.locale.isWeekend = function(/*Date?*/dateObject, /*String?*/locale){
	// summary:
	//	Determines if the date falls on a weekend, according to local custom.

	var weekend = cldr.getWeekend(locale),
		day = (dateObject || new Date()).getDay();
	if(weekend.end < weekend.start){
		weekend.end += 7;
		if(day < weekend.start){ day += 7; }
	}
	return day >= weekend.start && day <= weekend.end; // Boolean
};

// These are used only by format and strftime.  Do they need to be public?  Which module should they go in?

dojo.date.locale._getDayOfYear = function(/*Date*/dateObject){
	// summary: gets the day of the year as represented by dateObject
	return date.difference(new Date(dateObject.getFullYear(), 0, 1, dateObject.getHours()), dateObject) + 1; // Number
};

dojo.date.locale._getWeekOfYear = function(/*Date*/dateObject, /*Number*/firstDayOfWeek){
	if(arguments.length == 1){ firstDayOfWeek = 0; } // Sunday

	var firstDayOfYear = new Date(dateObject.getFullYear(), 0, 1).getDay(),
		adj = (firstDayOfYear - firstDayOfWeek + 7) % 7,
		week = Math.floor((dojo.date.locale._getDayOfYear(dateObject) + adj - 1) / 7);

	// if year starts on the specified day, start counting weeks at 1
	if(firstDayOfYear == firstDayOfWeek){ week++; }

	return week; // Number
};

return dojo.date.locale;
});

},
'dijit/_Templated':function(){
define("dijit/_Templated", [
	"./_WidgetBase",
	"./_TemplatedMixin",
	"./_WidgetsInTemplateMixin",
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/_base/lang", // lang.extend lang.isArray
	"dojo/_base/kernel" // kernel.deprecated
], function(_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, array, declare, lang, kernel){

/*=====
	var _WidgetBase = dijit._WidgetBase;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _WidgetsInTemplateMixin = dijit._WidgetsInTemplateMixin;
=====*/

	// module:
	//		dijit/_Templated
	// summary:
	//		Deprecated mixin for widgets that are instantiated from a template.

	// These arguments can be specified for widgets which are used in templates.
	// Since any widget can be specified as sub widgets in template, mix it
	// into the base widget class.  (This is a hack, but it's effective.)
	lang.extend(_WidgetBase, {
		waiRole: "",
		waiState:""
	});

	return declare("dijit._Templated", [_TemplatedMixin, _WidgetsInTemplateMixin], {
		// summary:
		//		Deprecated mixin for widgets that are instantiated from a template.
		//		Widgets should use _TemplatedMixin plus if necessary _WidgetsInTemplateMixin instead.

		// widgetsInTemplate: [protected] Boolean
		//		Should we parse the template to find widgets that might be
		//		declared in markup inside it?  False by default.
		widgetsInTemplate: false,

		constructor: function(){
			kernel.deprecated(this.declaredClass + ": dijit._Templated deprecated, use dijit._TemplatedMixin and if necessary dijit._WidgetsInTemplateMixin", "", "2.0");
		},

		_attachTemplateNodes: function(rootNode, getAttrFunc){

			this.inherited(arguments);

			// Do deprecated waiRole and waiState
			var nodes = lang.isArray(rootNode) ? rootNode : (rootNode.all || rootNode.getElementsByTagName("*"));
			var x = lang.isArray(rootNode) ? 0 : -1;
			for(; x<nodes.length; x++){
				var baseNode = (x == -1) ? rootNode : nodes[x];

				// waiRole, waiState
				var role = getAttrFunc(baseNode, "waiRole");
				if(role){
					baseNode.setAttribute("role", role);
				}
				var values = getAttrFunc(baseNode, "waiState");
				if(values){
					array.forEach(values.split(/\s*,\s*/), function(stateValue){
						if(stateValue.indexOf('-') != -1){
							var pair = stateValue.split('-');
							baseNode.setAttribute("aria-"+pair[0], pair[1]);
						}
					});
				}
			}
		}
	});
});

},
'dojo/require':function(){
define("dojo/require", ["./_base/loader"], function(loader){
	return {
		dynamic:0,
		normalize:function(id){return id;},
		load:loader.require
	};
});

},
'dijit/MenuSeparator':function(){
require({cache:{
'url:dijit/templates/MenuSeparator.html':"<tr class=\"dijitMenuSeparator\">\n\t<td class=\"dijitMenuSeparatorIconCell\">\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n</tr>"}});
define("dijit/MenuSeparator", [
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.setSelectable
	"./_WidgetBase",
	"./_TemplatedMixin",
	"./_Contained",
	"dojo/text!./templates/MenuSeparator.html"
], function(declare, dom, _WidgetBase, _TemplatedMixin, _Contained, template){

/*=====
	var _WidgetBase = dijit._WidgetBase;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _Contained = dijit._Contained;
=====*/

	// module:
	//		dijit/MenuSeparator
	// summary:
	//		A line between two menu items

	return declare("dijit.MenuSeparator", [_WidgetBase, _TemplatedMixin, _Contained], {
		// summary:
		//		A line between two menu items

		templateString: template,

		buildRendering: function(){
			this.inherited(arguments);
			dom.setSelectable(this.domNode, false);
		},

		isFocusable: function(){
			// summary:
			//		Override to always return false
			// tags:
			//		protected

			return false; // Boolean
		}
	});
});

},
'dijit/form/ToggleButton':function(){
define("dijit/form/ToggleButton", [
	"dojo/_base/declare", // declare
	"dojo/_base/kernel", // kernel.deprecated
	"./Button",
	"./_ToggleButtonMixin"
], function(declare, kernel, Button, _ToggleButtonMixin){

/*=====
	var Button = dijit.form.Button;
	var _ToggleButtonMixin = dijit.form._ToggleButtonMixin;
=====*/

	// module:
	//		dijit/form/ToggleButton
	// summary:
	//		A templated button widget that can be in two states (checked or not).


	return declare("dijit.form.ToggleButton", [Button, _ToggleButtonMixin], {
		// summary:
		//		A templated button widget that can be in two states (checked or not).
		//		Can be base class for things like tabs or checkbox or radio buttons

		baseClass: "dijitToggleButton",

		setChecked: function(/*Boolean*/ checked){
			// summary:
			//		Deprecated.  Use set('checked', true/false) instead.
			kernel.deprecated("setChecked("+checked+") is deprecated. Use set('checked',"+checked+") instead.", "", "2.0");
			this.set('checked', checked);
		}
	});
});

},
'curam/util/Dialog':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.util.Dialog
 * @namespace Provides the ability to open arbitrary (non-UIM) content
 * in a Curam dialog.
 * 
 * It is required that the non-UIM page you are opening in a dialog resides
 * on the same Internet domain as the Curam application you are integrating
 * with.
 * <p/>
 * To open a custom page in a dialog you have to <ul>
 * <li> in the Curam application make the API call to load the custom page
 *      in a dialog </li>
 * <li> hook the custom page into the dialog API </li> </ul>
 * 
 * To hook the custom page into the dialog API, you first need to load the code,
 * preferably using <code>dojo.require("curam.util.Dialog");</code>
 * This assumes that you are using Dojo and you have access to the Curam
 * infrastructure JavaScript libraries.
 * <p/>
 * If this is not true for your pages, you will need to load the code
 * in the page header with standard <code>script</code> HTML elements.
 * The necesary script files are
 * <code>/CDEJ/jscript/curam/util/Dialog.js</code>,
 * <code>/CDEJ/jscript/curam/dialog.js</code>
 * and <code>/CDEJ/jscript/cdej.js</code>.
 * <p/>
 * The important API functions that must be called from your page are:<ul>
 * <li><code>{@link curam.util.Dialog.init}</code> in the page header.</li>
 * <li><code>{@link curam.util.Dialog.pageLoadFinished} when the page has been
 * fully loaded.</code></li></ul>
 * <p/>
 * To control the dialog size and title text you must register custom
 * functions by calling the following API in the page header:<ul>
 * <li><code>{@link curam.util.Dialog.registerGetSizeFunc}</code></li>
 * <li><code>{@link curam.util.Dialog.registerGetTitleFunc}</code></li></ul>
 * <p/>
 * Optionally you can also register custom handlers for the following events:<ul>
 * <li>AfterDisplay</li>
 * <li>BeforeClose</li></ul>
 * 
 * If linking from a dialog back into the Curam application is required,
 * this is done using the {@link curam.util.Dialog.close} function.
 */
define("curam/util/Dialog", ["curam/util",
        "curam/define",
        "curam/dialog",
        "curam/util/onLoad",
        "curam/debug",
        "curam/util/ResourceBundle"
        ], function() {

/*
 * Modification History
 * --------------------
 * 03-Jul-2013  MV  [CR00390548] Remove IEG2 specific processing.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 03-Feb-2011  MV  [CR00253193] Add special processing in case IEG2
 *    is the client of the API - will be removed later on.
 * 03-Feb-2011  MV  [CR00250687] Notify the parent of the page unload.
 * 18-Jan-2011  MV  [CR00243263] Ensure handlers are released properly. Remove
 *    the use of alias for the window object.
 * 12-Jan-2011  PK  [CR00231655] Fixed issue with registerGetSizeFunc() not
 *                    correctly registering the specified sizing function.
 * 18-Nov-2010  MV  [CR00231655] Take dialog size into account properly.
 * 29-Sep-2010  MV  [CR00221605] Refactor to enable easy change of the context
 *      the API works on.
 */
  
/**
 * Creating Resource Bundle Object to access localized resources.
 */ 
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");
  
curam.define.singleton("curam.util.Dialog",
/**
 * @lends curam.util.Dialog.prototype
 */
{  
  /**
   * Holds ID of the dialog in the current context.
   * @private
   */
  _id: null,
  
  /**
   * Holds the tokens for unsubscribing handlers on dialog close.
   * @private
   */
  _unsubscribes: [],
    
  /**
   * Opens the specified non-UIM page in a Curam dialog.
   * 
   * @param {String} path URL path to the page to display in the dialog, without
   *              the query string.
   * @param {Object} pageParameters An object containing the required page
   *      parameters, or null if no page parameters are required.
   *      The following format is expected:
   *                        <code>{ param1Name:"value", param2Name:248 }</code>
   *      The infrastructure handles URL-encoding the values so do NOT encode
   *      them yourself.
   * @param {Object} [dialogSize] An object representing the required size
   *    of the dialog in pixels. The following form is required:
   *        <code>{ width:500, height:300 }</code> If size is not specified
   *      the default size will be used instead.
   */
  open: function(path, pageParameters, dialogSize) {
    var url = path + curam.util.makeQueryString(pageParameters);
    var anchor = { href: url };
    var windowOptions = null;
    if (dialogSize) {
      windowOptions = "width=" + dialogSize.width
          + ",height=" + dialogSize.height;
    }
    window.jsModals = true;
    curam.util.openModalDialog(anchor, windowOptions);
  },
    
  /**
   * Initializes the dialog infrastructure.
   *
   * Must be called in the header of the page loaded in the dialog.
   */
  init: function() {
    // receive the dialogId for the current context
    var topWin = curam.util.getTopmostWindow();
    var unsToken = topWin.dojo.subscribe("/curam/dialog/SetId", null,
        function(dialogId) {
          curam.util.Dialog._id = dialogId;
          
          curam.debug.log(bundle.getProperty("curam.util.Dialog.id.success"), 
            curam.util.Dialog._id);

          topWin.dojo.unsubscribe(unsToken);
        });
    curam.util.Dialog._unsubscribes.push(unsToken);
    
    // publish the init event
    // this also triggers the /curam/dialog/SetId event
    // to get the ID - see above
    topWin.dojo.publish("/curam/dialog/init");
    if (!curam.util.Dialog._id) {
      curam.debug.log(bundle.getProperty("curam.util.Dialog.id.fail"));
    }
    
    dojo.addOnUnload(function() {
      // ensure any event handlers are released on page unload
      curam.util.Dialog._releaseHandlers();

      // notify interested parties of the iframe unload
      window.parent.dojo.publish(
          "/curam/dialog/iframeUnloaded", [ curam.util.Dialog._id, window ]);
    });
  },
  
  /**
   * Registers a custom function to get the dialog title text.
   *
   * Must be called in the header of the page loaded in the dialog.
   * 
   * @param {Function} getTitle A function that returns the text to be displayed
   *                  in the dialog title bar.
   */
  registerGetTitleFunc: function(getTitle) {
    curam.util.onLoad.addPublisher(function(context) {
      context.title = getTitle();
    });
  },
  
  /**
   * Registers a custom function to get the dialog size.
   *
   * Can be optioanally called in the header of the page loaded in the dialog.
   * 
   * @param {Function} getSize A function that returns an object
   *      in the following form: <code>{ width:500, height:300 }</code>
   */
  registerGetSizeFunc: function(getSize) {
    curam.util.onLoad.addPublisher(function(context) {
      context.windowOptions = getSize();
    });
  },
  
  /**
   * Registers a custom function that will be called after the dialog appears
   * on the screen.
   * 
   * Must be called in the header of the page loaded in the dialog.
   * 
   * @param {Function} handler The handler function for the AfterDisplay event.
   */
  registerAfterDisplayHandler: function(handler) {
    var topWin = curam.util.getTopmostWindow();
    curam.util.Dialog._unsubscribes.push(topWin.dojo.subscribe(
        "/curam/dialog/AfterDisplay", null, function(dialogId) {
          if (dialogId == curam.util.Dialog._id) {
            handler();
          }
        }));
  },
  
  /**
   * Registers a custom function that will be called before the dialog
   * is closed.
   *
   * Must be called in the header of the page loaded in the dialog.
   * 
   * @param {Function} handler The handler function for the BeforeClose event.
   */
  registerBeforeCloseHandler: function(handler) {
    var topWin = curam.util.getTopmostWindow();
    curam.util.Dialog._unsubscribes.push(topWin.dojo.subscribe(
        "/curam/dialog/BeforeClose", null, function(dialogId) {
          if (dialogId === curam.util.Dialog._id) {
            handler();
          }
        }));
  },
  
  /**
   * Notifies the dialog infrastructure that the page has been fully loaded.
   *
   * Must be called by the page after it finishes loading in the dialog.
   * (E.g. dojo.addOnLoad(curam.Dialog.pageLoadFinished))
   */
  pageLoadFinished: function() {
    // ensure the handlers are unregistered on dialog close
    var topWin = curam.util.getTopmostWindow();
    curam.util.Dialog._unsTokenReleaseHandlers = topWin.dojo.subscribe(
        "/curam/dialog/BeforeClose", null, function(dialogId) {
          if (dialogId == curam.util.Dialog._id) {
            curam.util.Dialog._releaseHandlers();
          }
        });
     
    // invoke the onLoad API 
    curam.util.onLoad.execute();
  },
  
  /**
   * Releases any registered handlers.
   *
   * @private
   */
  _releaseHandlers: function() {
    var topWin = curam.util.getTopmostWindow();
    dojo.forEach(curam.util.Dialog._unsubscribes, topWin.dojo.unsubscribe);
    curam.util.Dialog._unsubscribes = [];
    
    topWin.dojo.unsubscribe(curam.util.Dialog._unsTokenReleaseHandlers);
    curam.util.Dialog._unsTokenReleaseHandlers = null;
  },
  
  /**
   * Closes the dialog, optionally refreshing or redirecting the parent window.
   * 
   * Must be called in the context of the page loaded in the dialog. I.e.
   * you cannot close a dialog from an "outside" context.
   * 
   * @param {Boolean} [refreshParent=false] Should the parent be refreshed
   *              when this dialog closes?
   * @param {String} [newPageIdOrFullUrl] ID of the page the parent window
   *      should be redirected to when this dialog closes. Alternatively
   *      a full URL including the page parameters can be passed.
   * @param {Object} [pageParameters] Page parameters to be used when
   *        redirecting the parent to the new page. The following format
   *        is expected: <code>{ param1Name:"value", param2Name:248 }</code>
   *        The infrastructure handles URL-encoding the values so do NOT encode
   *        them yourself.
   *        If full URL is specified then the pageParameters are ignored.
   */
  close: function(/*optional*/ refreshParent, /*optional*/ newPageIdOrFullUrl,
      /*optional*/ pageParameters) {
    
    var parentWindow = curam.dialog.getParentWindow(window);
    if (refreshParent && !newPageIdOrFullUrl) {
      curam.dialog.forceParentRefresh();
      parentWindow.curam.util.redirectWindow(null);
      
    } else if (newPageIdOrFullUrl) {
      var newParentUrl = newPageIdOrFullUrl;
      // distinguish between pageId and full URL
      if (newPageIdOrFullUrl.indexOf("Page.do") == -1 && newPageIdOrFullUrl.indexOf("Action.do") == -1) {
        newParentUrl = newPageIdOrFullUrl + "Page.do"
            + curam.util.makeQueryString(pageParameters);
      }

      parentWindow.curam.util.redirectWindow(newParentUrl);
    }

    var topWin = curam.util.getTopmostWindow();
    topWin.dojo.publish("/curam/dialog/close", [ curam.util.Dialog._id ]);
  },
  
  /**
   * Closes the dialog and submit the parent page, where the form parameters
   * will be optionally passed to. This method is design for the senario where
   * the parent page has an <code>ACTION</code> phase.
   * 
   * Must be called in the context of the page loaded in the dialog. I.e.
   * you cannot close a dialog from an "outside" context.
   * 
   * @param {Object} [formParameters] Form parameters to be used in the form of
   *        the parent page when it is being submitted. The following format
   *        is expected: <code>{ param1Name:"value", param2Name:248 }</code>
   *        Those parameters should not be encoded. The parameter name should be
   *        the order of the input fields in the form, e.g. '1' means the first
   *        input field in the form.
   */
  closeAndSubmitParent: function(/*optional*/ formParameters) {
    var parentWindow = curam.dialog.getParentWindow(window);
    // Get the form of the parent page.
    var parentWindowForm = parentWindow.document.forms["mainForm"];
    var topWin = curam.util.getTopmostWindow();
    
    // Check if the from in the parent window exists or not. If not, simply 
    // close the modal and return. The parent page will not be submitted.
    if (parentWindowForm == null || parentWindowForm == undefined) {
      //Close the modal
      topWin.dojo.publish("/curam/dialog/close", [ curam.util.Dialog._id ]);
      return;
    }
        
    // Define the function used to check if the "formParameters" object is
    // empty or not.
    var isEmpty = function (object) {
      for (var property in object) {
        if (object.hasOwnProperty(property)) {
          return false;
        }
      }
      return true;
    };

    
    // Set the from parameters to the corresponding input fields 
    // in the form of the parent page that will be submitted.
    if (formParameters && !isEmpty(formParameters)) {
      // Reset and assign new form parameters to the input fields
      var inputFieldListUnfiltered = dojo.query(
          "input[type=text])", parentWindowForm);
	 
      var inputFieldList = dojo.filter(inputFieldListUnfiltered, function(node){
        return node.readOnly == false;
      });
	  
      dojo.forEach(inputFieldList, function(node) {
          node.value = "";
      });
    
      for (var fieldName in formParameters) {
        var inputField = inputFieldList[parseInt(fieldName)];
        
        if (inputField) {
          var hiddenInputForDropDown = dojo.query(
                   "input[name=" + inputField.id + "]", parentWindowForm)[0];
            if (hiddenInputForDropDown) {
              hiddenInputForDropDown.value = formParameters[fieldName];
            } else {
              inputField.value = formParameters[fieldName];
            }
        
        }
      }
    } else {
      // Do nothing. No form paramters are passed down. Keep the existing string
      // in the from input fields.
    }
	
    //Submit the parent page.
    parentWindow.dojo.publish("/curam/page/refresh");
    parentWindowForm.submit();
    
    //Close the modal
    topWin.dojo.publish("/curam/dialog/close", [ curam.util.Dialog._id ]);
  }

  });
  
});


},
'url:curam/widget/resources/DivButton.html':"<div id=\"${id}\" class=\"${className}\" dojoAttachEvent=\"onclick:onClick\" dojoAttachPoint=\"containerNode\"></div>\r\n\r\n {\r\n      templateString: \"<div id='${id}' class='${className}' \"\r\n            + \"dojoAttachEvent='onclick:onClick' dojoAttachPoint='containerNode'></div>\"\r\n    }\r\n\r\n",
'dijit/CheckedMenuItem':function(){
require({cache:{
'url:dijit/templates/CheckedMenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode,labelNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&#160;</td>\n</tr>\n"}});
define("dijit/CheckedMenuItem", [
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.toggle
	"./MenuItem",
	"dojo/text!./templates/CheckedMenuItem.html",
	"./hccss"
], function(declare, domClass, MenuItem, template){

/*=====
	var MenuItem = dijit.MenuItem;
=====*/

	// module:
	//		dijit/CheckedMenuItem
	// summary:
	//		A checkbox-like menu item for toggling on and off

	return declare("dijit.CheckedMenuItem", MenuItem, {
		// summary:
		//		A checkbox-like menu item for toggling on and off

		templateString: template,

		// checked: Boolean
		//		Our checked state
		checked: false,
		_setCheckedAttr: function(/*Boolean*/ checked){
			// summary:
			//		Hook so attr('checked', bool) works.
			//		Sets the class and state for the check box.
			domClass.toggle(this.domNode, "dijitCheckedMenuItemChecked", checked);
			this.domNode.setAttribute("aria-checked", checked);
			this._set("checked", checked);
		},

		iconClass: "",	// override dijitNoIcon

		onChange: function(/*Boolean*/ /*===== checked =====*/){
			// summary:
			//		User defined function to handle check/uncheck events
			// tags:
			//		callback
		},

		_onClick: function(/*Event*/ e){
			// summary:
			//		Clicking this item just toggles its state
			// tags:
			//		private
			if(!this.disabled){
				this.set("checked", !this.checked);
				this.onChange(this.checked);
			}
			this.inherited(arguments);
		}
	});
});

},
'url:dijit/form/templates/Button.html':"<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t></span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\n/></span>\n",
'dojox/html/_base':function(){
define("dojox/html/_base", [
	"dojo/_base/kernel",
	"dojo/_base/lang",
	"dojo/_base/xhr",
	"dojo/_base/window",
	"dojo/_base/sniff",
	"dojo/_base/url",
	"dojo/dom-construct",
	"dojo/html",
	"dojo/_base/declare"
], function (dojo, lang, xhrUtil, windowUtil, has, _Url, domConstruct, htmlUtil) {
/*
	Status: dont know where this will all live exactly
	Need to pull in the implementation of the various helper methods
	Some can be static method, others maybe methods of the ContentSetter (?)

	Gut the ContentPane, replace its _setContent with our own call to dojox.html.set()


*/
	var html = dojo.getObject("dojox.html", true);

	if(has("ie")){
		var alphaImageLoader = /(AlphaImageLoader\([^)]*?src=(['"]))(?![a-z]+:|\/)([^\r\n;}]+?)(\2[^)]*\)\s*[;}]?)/g;
	}

	// css at-rules must be set before any css declarations according to CSS spec
	// match:
	// @import 'http://dojotoolkit.org/dojo.css';
	// @import 'you/never/thought/' print;
	// @import url("it/would/work") tv, screen;
	// @import url(/did/you/now.css);
	// but not:
	// @namespace dojo "http://dojotoolkit.org/dojo.css"; /* namespace URL should always be a absolute URI */
	// @charset 'utf-8';
	// @media print{ #menuRoot {display:none;} }

	// we adjust all paths that dont start on '/' or contains ':'
	//(?![a-z]+:|\/)

	var cssPaths = /(?:(?:@import\s*(['"])(?![a-z]+:|\/)([^\r\n;{]+?)\1)|url\(\s*(['"]?)(?![a-z]+:|\/)([^\r\n;]+?)\3\s*\))([a-z, \s]*[;}]?)/g;

	var adjustCssPaths = html._adjustCssPaths = function(cssUrl, cssText){
		//	summary:
		//		adjusts relative paths in cssText to be relative to cssUrl
		//		a path is considered relative if it doesn't start with '/' and not contains ':'
		//	description:
		//		Say we fetch a HTML page from level1/page.html
		//		It has some inline CSS:
		//			@import "css/page.css" tv, screen;
		//			...
		//			background-image: url(images/aplhaimage.png);
		//
		//		as we fetched this HTML and therefore this CSS
		//		from level1/page.html, these paths needs to be adjusted to:
		//			@import 'level1/css/page.css' tv, screen;
		//			...
		//			background-image: url(level1/images/alphaimage.png);
		//
		//		In IE it will also adjust relative paths in AlphaImageLoader()
		//			filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/alphaimage.png');
		//		will be adjusted to:
		//			filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='level1/images/alphaimage.png');
		//
		//		Please note that any relative paths in AlphaImageLoader in external css files wont work, as
		//		the paths in AlphaImageLoader is MUST be declared relative to the HTML page,
		//		not relative to the CSS file that declares it

		if(!cssText || !cssUrl){ return; }

		// support the ImageAlphaFilter if it exists, most people use it in IE 6 for transparent PNGs
		// We are NOT going to kill it in IE 7 just because the PNGs work there. Somebody might have
		// other uses for it.
		// If user want to disable css filter in IE6  he/she should
		// unset filter in a declaration that just IE 6 doesn't understands
		// like * > .myselector { filter:none; }
		if(alphaImageLoader){
			cssText = cssText.replace(alphaImageLoader, function(ignore, pre, delim, url, post){
				return pre + (new _Url(cssUrl, './'+url).toString()) + post;
			});
		}

		return cssText.replace(cssPaths, function(ignore, delimStr, strUrl, delimUrl, urlUrl, media){
			if(strUrl){
				return '@import "' + (new _Url(cssUrl, './'+strUrl).toString()) + '"' + media;
			}else{
				return 'url(' + (new _Url(cssUrl, './'+urlUrl).toString()) + ')' + media;
			}
		});
	};

	// attributepaths one tag can have multiple paths, example:
	// <input src="..." style="url(..)"/> or <a style="url(..)" href="..">
	// <img style='filter:progid...AlphaImageLoader(src="noticeTheSrcHereRunsThroughHtmlSrc")' src="img">
	var htmlAttrPaths = /(<[a-z][a-z0-9]*\s[^>]*)(?:(href|src)=(['"]?)([^>]*?)\3|style=(['"]?)([^>]*?)\5)([^>]*>)/gi;

	var adjustHtmlPaths = html._adjustHtmlPaths = function(htmlUrl, cont){
		var url = htmlUrl || "./";

		return cont.replace(htmlAttrPaths,
			function(tag, start, name, delim, relUrl, delim2, cssText, end){
				return start + (name ?
							(name + '=' + delim + (new _Url(url, relUrl).toString()) + delim)
						: ('style=' + delim2 + adjustCssPaths(url, cssText) + delim2)
				) + end;
			}
		);
	};

	var snarfStyles = html._snarfStyles = function	(/*String*/cssUrl, /*String*/cont, /*Array*/styles){
		/****************  cut out all <style> and <link rel="stylesheet" href=".."> **************/
		// also return any attributes from this tag (might be a media attribute)
		// if cssUrl is set it will adjust paths accordingly
		styles.attributes = [];

		return cont.replace(/(?:<style([^>]*)>([\s\S]*?)<\/style>|<link\s+(?=[^>]*rel=['"]?stylesheet)([^>]*?href=(['"])([^>]*?)\4[^>\/]*)\/?>)/gi,
			function(ignore, styleAttr, cssText, linkAttr, delim, href){
				// trim attribute
				var i, attr = (styleAttr||linkAttr||"").replace(/^\s*([\s\S]*?)\s*$/i, "$1");
				if(cssText){
					i = styles.push(cssUrl ? adjustCssPaths(cssUrl, cssText) : cssText);
				}else{
					i = styles.push('@import "' + href + '";');
					attr = attr.replace(/\s*(?:rel|href)=(['"])?[^\s]*\1\s*/gi, ""); // remove rel=... and href=...
				}
				if(attr){
					attr = attr.split(/\s+/);// split on both "\n", "\t", " " etc
					var atObj = {}, tmp;
					for(var j = 0, e = attr.length; j < e; j++){
						tmp = attr[j].split('='); // split name='value'
						atObj[tmp[0]] = tmp[1].replace(/^\s*['"]?([\s\S]*?)['"]?\s*$/, "$1"); // trim and remove ''
					}
					styles.attributes[i - 1] = atObj;
				}
				return "";
			}
		);
	};

	var snarfScripts = html._snarfScripts = function(cont, byRef){
		// summary
		//		strips out script tags from cont
		// invoke with
		//	byRef = {errBack:function(){/*add your download error code here*/, downloadRemote: true(default false)}}
		//	byRef will have {code: 'jscode'} when this scope leaves
		byRef.code = "";

		//Update script tags nested in comments so that the script tag collector doesn't pick
		//them up.
		cont = cont.replace(/<[!][-][-](.|\s)*?[-][-]>/g,
			function(comment){
				return comment.replace(/<(\/?)script\b/ig,"&lt;$1Script");
			}
		);

		function download(src){
			if(byRef.downloadRemote){
				// console.debug('downloading',src);
				//Fix up src, in case there were entity character encodings in it.
				//Probably only need to worry about a subset.
				src = src.replace(/&([a-z0-9#]+);/g, function(m, name) {
					switch(name) {
						case "amp"	: return "&";
						case "gt"	: return ">";
						case "lt"	: return "<";
						default:
							return name.charAt(0)=="#" ? String.fromCharCode(name.substring(1)) : "&"+name+";";
					}
				});
				xhrUtil.get({
					url: src,
					sync: true,
					load: function(code){
						byRef.code += code+";";
					},
					error: byRef.errBack
				});
			}
		}

		// match <script>, <script type="text/..., but not <script type="dojo(/method)...
		return cont.replace(/<script\s*(?![^>]*type=['"]?(?:dojo\/|text\/html\b))(?:[^>]*?(?:src=(['"]?)([^>]*?)\1[^>]*)?)*>([\s\S]*?)<\/script>/gi,
			function(ignore, delim, src, code){
				if(src){
					download(src);
				}else{
					byRef.code += code;
				}
				return "";
			}
		);
	};

	var evalInGlobal = html.evalInGlobal = function(code, appendNode){
		// we do our own eval here as dojo.eval doesn't eval in global crossbrowser
		// This work X browser but but it relies on a DOM
		// plus it doesn't return anything, thats unrelevant here but not for dojo core
		appendNode = appendNode || windowUtil.doc.body;
		var n = appendNode.ownerDocument.createElement('script');
		n.type = "text/javascript";
		appendNode.appendChild(n);
		n.text = code; // DOM 1 says this should work
	};

	html._ContentSetter = dojo.declare(/*===== "dojox.html._ContentSetter", =====*/ htmlUtil._ContentSetter, {
		// adjustPaths: Boolean
		//		Adjust relative paths in html string content to point to this page
		//		Only useful if you grab content from a another folder than the current one
		adjustPaths: false,
		referencePath: ".",
		renderStyles: false,

		executeScripts: false,
		scriptHasHooks: false,
		scriptHookReplacement: null,

		_renderStyles: function(styles){
			// insert css from content into document head
			this._styleNodes = [];
			var st, att, cssText, doc = this.node.ownerDocument;
			var head = doc.getElementsByTagName('head')[0];

			for(var i = 0, e = styles.length; i < e; i++){
				cssText = styles[i]; att = styles.attributes[i];
				st = doc.createElement('style');
				st.setAttribute("type", "text/css"); // this is required in CSS spec!

				for(var x in att){
					st.setAttribute(x, att[x]);
				}

				this._styleNodes.push(st);
				head.appendChild(st); // must insert into DOM before setting cssText

				if(st.styleSheet){ // IE
					st.styleSheet.cssText = cssText;
				}else{ // w3c
					st.appendChild(doc.createTextNode(cssText));
				}
			}
		},

		empty: function() {
			this.inherited("empty", arguments);

			// empty out the styles array from any previous use
			this._styles = [];
		},

		onBegin: function() {
			// summary
			//		Called after instantiation, but before set();
			//		It allows modification of any of the object properties - including the node and content
			//		provided - before the set operation actually takes place
			//		This implementation extends that of dojo.html._ContentSetter
			//		to add handling for adjustPaths, renderStyles on the html string content before it is set
			this.inherited("onBegin", arguments);

			var cont = this.content,
				node = this.node;

			var styles = this._styles;// init vars

			if(lang.isString(cont)){
				if(this.adjustPaths && this.referencePath){
					cont = adjustHtmlPaths(this.referencePath, cont);
				}

				if(this.renderStyles || this.cleanContent){
					cont = snarfStyles(this.referencePath, cont, styles);
				}

				// because of a bug in IE, script tags that is first in html hierarchy doesnt make it into the DOM
				//	when content is innerHTML'ed, so we can't use dojo.query to retrieve scripts from DOM
				if(this.executeScripts){
					var _t = this;
					var byRef = {
						downloadRemote: true,
						errBack:function(e){
							_t._onError.call(_t, 'Exec', 'Error downloading remote script in "'+_t.id+'"', e);
						}
					};
					cont = snarfScripts(cont, byRef);
					this._code = byRef.code;
				}
			}
			this.content = cont;
		},

		onEnd: function() {
			// summary
			//		Called after set(), when the new content has been pushed into the node
			//		It provides an opportunity for post-processing before handing back the node to the caller
			//		This implementation extends that of dojo.html._ContentSetter

			var code = this._code,
				styles = this._styles;

			// clear old stylenodes from the DOM
			// these were added by the last set call
			// (in other words, if you dont keep and reuse the ContentSetter for a particular node
			// .. you'll have no practical way to do this)
			if(this._styleNodes && this._styleNodes.length){
				while(this._styleNodes.length){
					domConstruct.destroy(this._styleNodes.pop());
				}
			}
			// render new style nodes
			if(this.renderStyles && styles && styles.length){
				this._renderStyles(styles);
			}

			if(this.executeScripts && code){
				if(this.cleanContent){
					// clean JS from html comments and other crap that browser
					// parser takes care of in a normal page load
					code = code.replace(/(<!--|(?:\/\/)?-->|<!\[CDATA\[|\]\]>)/g, '');
				}
				if(this.scriptHasHooks){
					// replace _container_ with this.scriptHookReplace()
					// the scriptHookReplacement can be a string
					// or a function, which when invoked returns the string you want to substitute in
					code = code.replace(/_container_(?!\s*=[^=])/g, this.scriptHookReplacement);
				}
				try{
					evalInGlobal(code, this.node);
				}catch(e){
					this._onError('Exec', 'Error eval script in '+this.id+', '+e.message, e);
				}
			}
			this.inherited("onEnd", arguments);
		},
		tearDown: function() {
			this.inherited(arguments);
			delete this._styles;
			// only tear down -or another set() - will explicitly throw away the
			// references to the style nodes we added
			if(this._styleNodes && this._styleNodes.length){
				while(this._styleNodes.length){
					domConstruct.destroy(this._styleNodes.pop());
				}
			}
			delete this._styleNodes;
			// reset the defaults from the prototype
			// XXX: not sure if this is the correct intended behaviour, it was originally
			// dojo.getObject(this.declaredClass).prototype which will not work with anonymous
			// modules
			dojo.mixin(this, html._ContentSetter.prototype);
		}

	});

	html.set = function(/* DomNode */ node, /* String|DomNode|NodeList */ cont, /* Object? */ params){
		// TODO: add all the other options
			// summary:
			//		inserts (replaces) the given content into the given node
			//	node:
			//		the parent element that will receive the content
			//	cont:
			//		the content to be set on the parent element.
			//		This can be an html string, a node reference or a NodeList, dojo.NodeList, Array or other enumerable list of nodes
			//	params:
			//		Optional flags/properties to configure the content-setting. See dojo.html._ContentSetter
			//	example:
			//		A safe string/node/nodelist content replacement/injection with hooks for extension
			//		Example Usage:
			//		dojo.html.set(node, "some string");
			//		dojo.html.set(node, contentNode, {options});
			//		dojo.html.set(node, myNode.childNodes, {options});

		if(!params){
			// simple and fast
			return htmlUtil._setNodeContent(node, cont, true);
		}else{
			// more options but slower
			var op = new html._ContentSetter(dojo.mixin(
					params,
					{ content: cont, node: node }
			));
			return op.set();
		}
	};

	return html;
});
},
'dijit/_DialogMixin':function(){
define("dijit/_DialogMixin", [
	"dojo/_base/declare", // declare
	"./a11y"	// _getTabNavigable
], function(declare, a11y){

	// module:
	//		dijit/_DialogMixin
	// summary:
	//		_DialogMixin provides functions useful to Dialog and TooltipDialog

	return declare("dijit._DialogMixin", null, {
		// summary:
		//		This provides functions useful to Dialog and TooltipDialog

		execute: function(/*Object*/ /*===== formContents =====*/){
			// summary:
			//		Callback when the user hits the submit button.
			//		Override this method to handle Dialog execution.
			// description:
			//		After the user has pressed the submit button, the Dialog
			//		first calls onExecute() to notify the container to hide the
			//		dialog and restore focus to wherever it used to be.
			//
			//		*Then* this method is called.
			// type:
			//		callback
		},

		onCancel: function(){
			// summary:
			//	    Called when user has pressed the Dialog's cancel button, to notify container.
			// description:
			//	    Developer shouldn't override or connect to this method;
			//		it's a private communication device between the TooltipDialog
			//		and the thing that opened it (ex: `dijit.form.DropDownButton`)
			// type:
			//		protected
		},

		onExecute: function(){
			// summary:
			//	    Called when user has pressed the dialog's OK button, to notify container.
			// description:
			//	    Developer shouldn't override or connect to this method;
			//		it's a private communication device between the TooltipDialog
			//		and the thing that opened it (ex: `dijit.form.DropDownButton`)
			// type:
			//		protected
		},

		_onSubmit: function(){
			// summary:
			//		Callback when user hits submit button
			// type:
			//		protected
			this.onExecute();	// notify container that we are about to execute
			this.execute(this.get('value'));
		},

		_getFocusItems: function(){
			// summary:
			//		Finds focusable items in dialog,
			//		and sets this._firstFocusItem and this._lastFocusItem
			// tags:
			//		protected

			var elems = a11y._getTabNavigable(this.containerNode);
			this._firstFocusItem = elems.lowest || elems.first || this.closeButtonNode || this.domNode;
			this._lastFocusItem = elems.last || elems.highest || this._firstFocusItem;
		}
	});
});

},
'curam/widget/FilteringSelect':function(){
/*
 * Copyright 2009-2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * Override of the Dojo FilteringSelect in order to get it to display
 * items in the drop down when the associated value is the empty string.
 * 
 */
define("curam/widget/FilteringSelect", ["dijit/registry", "dojo/on", "dijit/form/FilteringSelect"
        ], function(registry, on) {
  
  /*
   * Modification History
   * --------------------
   * 10-Mar-2014  AS  [CR00415345] Modified the role of widget 
   *                    to listbox from combobox. Also handled the
   *                  enter key on open dropdown.
   * 15-Nov-2011  PK  [CR00297778] Ported to Dojo 1.7.
   * 03-Nov-2011  JY  [CR00296248] Added a blank option to the <select> element 
   *                  where there is no option
   * 31-Oct-2011  MV  [CR00289694] Fixed the superclass' method call.
   * 25-Oct-2011  JY  [CR00295925] Updated postMixInProperties() function to
   *                  ignore handling the blank option that contains a comment.
   * 19-Oct-2011  JY  [CR00295026] Overwrite _callbackSetLabel() function to set
   *                  an particular code "__o3_INVALID" for the invalid inputs.
   * 22-Oct-2010  MK  [CR00222181] Initial version.
   */
  /**
   * @name curam.widget.FilteringSelect
   * @namespace Get it to display items in the drop down when the associated
   *              value is the empty string.
   */
  var FilteringSelect = dojo.declare("curam.widget.FilteringSelect", dijit.form.FilteringSelect,
  /**
   * @lends curam.widget.FilteringSelect.prototype
   */
  {
      // Flag which indicates if the enter key is used on open dropdown
      enterKeyOnOpenDropDown: false,
    
      postMixInProperties: function(){
          /*
           * Add a blank option to the <select> element where there is no option,
           * to enable users to open a empty dropdown list in this widget.
           * 
           */
          if (!this.store) {
            if (dojo.query("> option", this.srcNodeRef)[0] == undefined) {
              dojo.create("option", {innerHTML:"<!--__o3_BLANK-->"}, this.srcNodeRef);
            }
          }
          
          
            if(!this.get("store") && this.srcNodeRef.value == '') {
              var srcNodeRef = this.srcNodeRef,
                  nodes = dojo.query("> option[value='']", srcNodeRef);
            
      
            if (nodes.length && nodes[0].innerHTML != "<!--__o3_BLANK-->") {
              this.displayedValue = dojo.trim(nodes[0].innerHTML);
            }
          }   
    
          this.inherited(arguments);
      },
  
      postCreate : function() {
        // Attached a keyboard event listener so that we can set a flag
        // indicating enter is pressed in open state of dropdown
        on(this.focusNode, "keydown",function(e){
          var widget = registry.byNode(dojo.byId("widget_" + e.target.id)); 
          if(e.keyCode == dojo.keys.ENTER && widget._opened) {
            widget.enterKeyOnOpenDropDown = true;
           }
         });
        
        this.inherited(arguments);
      },
      
      startup : function(){
        // We have to change role to listbox as Jaws do not work correctly
        // in IE when role is combobox.
        this.domNode.setAttribute("role", "listbox");
        this.inherited(arguments);
      },
  
      /**
       * Overwrite _callbackSetLabel() function to make the FilteringSelect widget
       * set a particular code "__o3_INVALID" for the invalid inputs, instead
       * of setting an empty string.
       * 
         */
        _callbackSetLabel: function(
          /*Array*/ result,
          /*Object*/ query,
          /*Object*/ options,
          /*Boolean?*/ priorityChange){
        //  summary:
          //              Callback from dojo.store after lookup of user entered value finishes
    
        //  setValue does a synchronous lookup,
        //  so it calls _callbackSetLabel directly,
        //  and so does not pass dataObject
        //  still need to test against _lastQuery in case it came too late
          if((query && query[this.searchAttr] !== this._lastQuery)
              || (!query && result.length && this.get("store").getIdentity(result[0]) != this._lastQuery)){
          return;
        }
        if(!result.length){
            //#3268: don't modify display value on bad input
          //    #3285: change CSS to indicate error
            
            // CURAM CUSTOMIZATION START - This is the only customization made to
            // the ootb _callbackSetLabel method in Dojo's FilteringSelect. The
            // specific change is:
            // The second parameter below has been changed from "" to "__o3_INVALID".
            this.set("value", "__o3_INVALID", priorityChange || (priorityChange === undefined && !this.focused), this.textbox.value, null);
            // CURAM CUSTOMIZATION END
        }else{
            this.set('item', result[0], priorityChange);
        }
      }
  });
  
  return FilteringSelect;
});

},
'dijit/_Widget':function(){
define("dijit/_Widget", [
	"dojo/aspect",	// aspect.around
	"dojo/_base/config",	// config.isDebug
	"dojo/_base/connect",	// connect.connect
	"dojo/_base/declare", // declare
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/lang", // lang.hitch
	"dojo/query",
	"dojo/ready",
	"./registry",	// registry.byNode
	"./_WidgetBase",
	"./_OnDijitClickMixin",
	"./_FocusMixin",
	"dojo/uacss",		// browser sniffing (included for back-compat; subclasses may be using)
	"./hccss"		// high contrast mode sniffing (included to set CSS classes on <body>, module ret value unused)
], function(aspect, config, connect, declare, kernel, lang, query, ready,
			registry, _WidgetBase, _OnDijitClickMixin, _FocusMixin){

/*=====
	var _WidgetBase = dijit._WidgetBase;
	var _OnDijitClickMixin = dijit._OnDijitClickMixin;
	var _FocusMixin = dijit._FocusMixin;
=====*/


// module:
//		dijit/_Widget
// summary:
//		Old base for widgets.   New widgets should extend _WidgetBase instead


function connectToDomNode(){
	// summary:
	//		If user connects to a widget method === this function, then they will
	//		instead actually be connecting the equivalent event on this.domNode
}

// Trap dojo.connect() calls to connectToDomNode methods, and redirect to _Widget.on()
function aroundAdvice(originalConnect){
	return function(obj, event, scope, method){
		if(obj && typeof event == "string" && obj[event] == connectToDomNode){
			return obj.on(event.substring(2).toLowerCase(), lang.hitch(scope, method));
		}
		return originalConnect.apply(connect, arguments);
	};
}
aspect.around(connect, "connect", aroundAdvice);
if(kernel.connect){
	aspect.around(kernel, "connect", aroundAdvice);
}

var _Widget = declare("dijit._Widget", [_WidgetBase, _OnDijitClickMixin, _FocusMixin], {
	// summary:
	//		Base class for all Dijit widgets.
	//
	//		Extends _WidgetBase, adding support for:
	//			- declaratively/programatically specifying widget initialization parameters like
	//				onMouseMove="foo" that call foo when this.domNode gets a mousemove event
	//			- ondijitclick
	//				Support new data-dojo-attach-event="ondijitclick: ..." that is triggered by a mouse click or a SPACE/ENTER keypress
	//			- focus related functions
	//				In particular, the onFocus()/onBlur() callbacks.   Driven internally by
	//				dijit/_base/focus.js.
	//			- deprecated methods
	//			- onShow(), onHide(), onClose()
	//
	//		Also, by loading code in dijit/_base, turns on:
	//			- browser sniffing (putting browser id like .dj_ie on <html> node)
	//			- high contrast mode sniffing (add .dijit_a11y class to <body> if machine is in high contrast mode)


	////////////////// DEFERRED CONNECTS ///////////////////

	onClick: connectToDomNode,
	/*=====
	onClick: function(event){
		// summary:
		//		Connect to this function to receive notifications of mouse click events.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onDblClick: connectToDomNode,
	/*=====
	onDblClick: function(event){
		// summary:
		//		Connect to this function to receive notifications of mouse double click events.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onKeyDown: connectToDomNode,
	/*=====
	onKeyDown: function(event){
		// summary:
		//		Connect to this function to receive notifications of keys being pressed down.
		// event:
		//		key Event
		// tags:
		//		callback
	},
	=====*/
	onKeyPress: connectToDomNode,
	/*=====
	onKeyPress: function(event){
		// summary:
		//		Connect to this function to receive notifications of printable keys being typed.
		// event:
		//		key Event
		// tags:
		//		callback
	},
	=====*/
	onKeyUp: connectToDomNode,
	/*=====
	onKeyUp: function(event){
		// summary:
		//		Connect to this function to receive notifications of keys being released.
		// event:
		//		key Event
		// tags:
		//		callback
	},
	=====*/
	onMouseDown: connectToDomNode,
	/*=====
	onMouseDown: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse button is pressed down.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseMove: connectToDomNode,
	/*=====
	onMouseMove: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves over nodes contained within this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseOut: connectToDomNode,
	/*=====
	onMouseOut: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves off of nodes contained within this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseOver: connectToDomNode,
	/*=====
	onMouseOver: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves onto nodes contained within this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseLeave: connectToDomNode,
	/*=====
	onMouseLeave: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves off of this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseEnter: connectToDomNode,
	/*=====
	onMouseEnter: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves onto this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseUp: connectToDomNode,
	/*=====
	onMouseUp: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse button is released.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/

	constructor: function(params){
		// extract parameters like onMouseMove that should connect directly to this.domNode
		this._toConnect = {};
		for(var name in params){
			if(this[name] === connectToDomNode){
				this._toConnect[name.replace(/^on/, "").toLowerCase()] = params[name];
				delete params[name];
			}
		}
	},

	postCreate: function(){
		this.inherited(arguments);

		// perform connection from this.domNode to user specified handlers (ex: onMouseMove)
		for(var name in this._toConnect){
			this.on(name, this._toConnect[name]);
		}
		delete this._toConnect;
	},

	on: function(/*String*/ type, /*Function*/ func){
		if(this[this._onMap(type)] === connectToDomNode){
			// Use connect.connect() rather than on() to get handling for "onmouseenter" on non-IE, etc.
			// Also, need to specify context as "this" rather than the default context of the DOMNode
			return connect.connect(this.domNode, type.toLowerCase(), this, func);
		}
		return this.inherited(arguments);
	},

	_setFocusedAttr: function(val){
		// Remove this method in 2.0 (or sooner), just here to set _focused == focused, for back compat
		// (but since it's a private variable we aren't required to keep supporting it).
		this._focused = val;
		this._set("focused", val);
	},

	////////////////// DEPRECATED METHODS ///////////////////

	setAttribute: function(/*String*/ attr, /*anything*/ value){
		// summary:
		//		Deprecated.  Use set() instead.
		// tags:
		//		deprecated
		kernel.deprecated(this.declaredClass+"::setAttribute(attr, value) is deprecated. Use set() instead.", "", "2.0");
		this.set(attr, value);
	},

	attr: function(/*String|Object*/name, /*Object?*/value){
		// summary:
		//		Set or get properties on a widget instance.
		//	name:
		//		The property to get or set. If an object is passed here and not
		//		a string, its keys are used as names of attributes to be set
		//		and the value of the object as values to set in the widget.
		//	value:
		//		Optional. If provided, attr() operates as a setter. If omitted,
		//		the current value of the named property is returned.
		// description:
		//		This method is deprecated, use get() or set() directly.

		// Print deprecation warning but only once per calling function
		if(config.isDebug){
			var alreadyCalledHash = arguments.callee._ach || (arguments.callee._ach = {}),
				caller = (arguments.callee.caller || "unknown caller").toString();
			if(!alreadyCalledHash[caller]){
				kernel.deprecated(this.declaredClass + "::attr() is deprecated. Use get() or set() instead, called from " +
				caller, "", "2.0");
				alreadyCalledHash[caller] = true;
			}
		}

		var args = arguments.length;
		if(args >= 2 || typeof name === "object"){ // setter
			return this.set.apply(this, arguments);
		}else{ // getter
			return this.get(name);
		}
	},

	getDescendants: function(){
		// summary:
		//		Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.
		//		This method should generally be avoided as it returns widgets declared in templates, which are
		//		supposed to be internal/hidden, but it's left here for back-compat reasons.

		kernel.deprecated(this.declaredClass+"::getDescendants() is deprecated. Use getChildren() instead.", "", "2.0");
		return this.containerNode ? query('[widgetId]', this.containerNode).map(registry.byNode) : []; // dijit._Widget[]
	},

	////////////////// MISCELLANEOUS METHODS ///////////////////

	_onShow: function(){
		// summary:
		//		Internal method called when this widget is made visible.
		//		See `onShow` for details.
		this.onShow();
	},

	onShow: function(){
		// summary:
		//		Called when this widget becomes the selected pane in a
		//		`dijit.layout.TabContainer`, `dijit.layout.StackContainer`,
		//		`dijit.layout.AccordionContainer`, etc.
		//
		//		Also called to indicate display of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.
		// tags:
		//		callback
	},

	onHide: function(){
		// summary:
			//		Called when another widget becomes the selected pane in a
			//		`dijit.layout.TabContainer`, `dijit.layout.StackContainer`,
			//		`dijit.layout.AccordionContainer`, etc.
			//
			//		Also called to indicate hide of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.
			// tags:
			//		callback
	},

	onClose: function(){
		// summary:
		//		Called when this widget is being displayed as a popup (ex: a Calendar popped
		//		up from a DateTextBox), and it is hidden.
		//		This is called from the dijit.popup code, and should not be called directly.
		//
		//		Also used as a parameter for children of `dijit.layout.StackContainer` or subclasses.
		//		Callback if a user tries to close the child.   Child will be closed if this function returns true.
		// tags:
		//		extension

		return true;		// Boolean
	}
});

// For back-compat, remove in 2.0.
if(!kernel.isAsync){
	ready(0, function(){
		var requires = ["dijit/_base"];
		require(requires);	// use indirection so modules not rolled into a build
	});
}
return _Widget;
});

},
'dijit/layout/AccordionContainer':function(){
require({cache:{
'url:dijit/layout/templates/AccordionButton.html':"<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n"}});
define("dijit/layout/AccordionContainer", [
	"require",
	"dojo/_base/array", // array.forEach array.map
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/_base/fx", // fx.Animation
	"dojo/dom", // dom.setSelectable
	"dojo/dom-attr", // domAttr.attr
	"dojo/dom-class", // domClass.remove
	"dojo/dom-construct", // domConstruct.place
	"dojo/dom-geometry",
	"dojo/_base/kernel",
	"dojo/keys", // keys
	"dojo/_base/lang", // lang.getObject lang.hitch
	"dojo/_base/sniff", // has("ie")
	"dojo/topic", // publish
	"../focus",			// focus.focus()
	"../_base/manager",	// manager.defaultDuration
	"dojo/ready",
	"../_Widget",
	"../_Container",
	"../_TemplatedMixin",
	"../_CssStateMixin",
	"./StackContainer",
	"./ContentPane",
	"dojo/text!./templates/AccordionButton.html"
], function(require, array, declare, event, fx, dom, domAttr, domClass, domConstruct, domGeometry,
			kernel, keys, lang, has, topic, focus, manager, ready,
			_Widget, _Container, _TemplatedMixin, _CssStateMixin, StackContainer, ContentPane, template){

/*=====
	var _Widget = dijit._Widget;
	var _Container = dijit._Container;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _CssStateMixin = dijit._CssStateMixin;
	var StackContainer = dijit.layout.StackContainer;
	var ContentPane = dijit.layout.ContentPane;
=====*/

	// module:
	//		dijit/layout/AccordionContainer
	// summary:
	//		Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time,
	//		and switching between panes is visualized by sliding the other panes up/down.


	// Design notes:
	//
	// An AccordionContainer is a StackContainer, but each child (typically ContentPane)
	// is wrapped in a _AccordionInnerContainer.   This is hidden from the caller.
	//
	// The resulting markup will look like:
	//
	//	<div class=dijitAccordionContainer>
	//		<div class=dijitAccordionInnerContainer>	(one pane)
	//				<div class=dijitAccordionTitle>		(title bar) ... </div>
	//				<div class=dijtAccordionChildWrapper>   (content pane) </div>
	//		</div>
	//	</div>
	//
	// Normally the dijtAccordionChildWrapper is hidden for all but one child (the shown
	// child), so the space for the content pane is all the title bars + the one dijtAccordionChildWrapper,
	// which on claro has a 1px border plus a 2px bottom margin.
	//
	// During animation there are two dijtAccordionChildWrapper's shown, so we need
	// to compensate for that.


	var AccordionButton = declare("dijit.layout._AccordionButton", [_Widget, _TemplatedMixin, _CssStateMixin], {
		// summary:
		//		The title bar to click to open up an accordion pane.
		//		Internal widget used by AccordionContainer.
		// tags:
		//		private

		templateString: template,

		// label: String
		//		Title of the pane
		label: "",
		_setLabelAttr: {node: "titleTextNode", type: "innerHTML" },

		// title: String
		//		Tooltip that appears on hover
		title: "",
		_setTitleAttr: {node: "titleTextNode", type: "attribute", attribute: "title"},

		// iconClassAttr: String
		//		CSS class for icon to left of label
		iconClassAttr: "",
		_setIconClassAttr: { node: "iconNode", type: "class" },

		baseClass: "dijitAccordionTitle",

		getParent: function(){
			// summary:
			//		Returns the AccordionContainer parent.
			// tags:
			//		private
			return this.parent;
		},

		buildRendering: function(){
			this.inherited(arguments);
			var titleTextNodeId = this.id.replace(' ','_');
			domAttr.set(this.titleTextNode, "id", titleTextNodeId+"_title");
			this.focusNode.setAttribute("aria-labelledby", domAttr.get(this.titleTextNode, "id"));
			dom.setSelectable(this.domNode, false);
		},

		getTitleHeight: function(){
			// summary:
			//		Returns the height of the title dom node.
			return domGeometry.getMarginSize(this.domNode).h;	// Integer
		},

		// TODO: maybe the parent should set these methods directly rather than forcing the code
		// into the button widget?
		_onTitleClick: function(){
			// summary:
			//		Callback when someone clicks my title.
			var parent = this.getParent();
				parent.selectChild(this.contentWidget, true);
				focus.focus(this.focusNode);
		},

		_onTitleKeyPress: function(/*Event*/ evt){
			return this.getParent()._onKeyPress(evt, this.contentWidget);
		},

		_setSelectedAttr: function(/*Boolean*/ isSelected){
			this._set("selected", isSelected);
			this.focusNode.setAttribute("aria-expanded", isSelected);
			this.focusNode.setAttribute("aria-selected", isSelected);
			this.focusNode.setAttribute("tabIndex", isSelected ? "0" : "-1");
		}
	});

	var AccordionInnerContainer = declare("dijit.layout._AccordionInnerContainer", [_Widget, _CssStateMixin], {
		// summary:
		//		Internal widget placed as direct child of AccordionContainer.containerNode.
		//		When other widgets are added as children to an AccordionContainer they are wrapped in
		//		this widget.

/*=====
		// buttonWidget: Function || String
		//		Class to use to instantiate title
		//		(Wish we didn't have a separate widget for just the title but maintaining it
		//		for backwards compatibility, is it worth it?)
		 buttonWidget: null,
=====*/

/*=====
		// contentWidget: dijit._Widget
		//		Pointer to the real child widget
	 	contentWidget: null,
=====*/

		baseClass: "dijitAccordionInnerContainer",

		// tell nested layout widget that we will take care of sizing
		isLayoutContainer: true,

		buildRendering: function(){
			// Builds a template like:
			//	<div class=dijitAccordionInnerContainer>
			//		Button
			//		<div class=dijitAccordionChildWrapper>
			//			ContentPane
			//		</div>
			//	</div>

			// Create wrapper div, placed where the child is now
			this.domNode = domConstruct.place("<div class='" + this.baseClass +
				"' role='presentation'>", this.contentWidget.domNode, "after");

			// wrapper div's first child is the button widget (ie, the title bar)
			var child = this.contentWidget,
				cls = lang.isString(this.buttonWidget) ? lang.getObject(this.buttonWidget) : this.buttonWidget;
			this.button = child._buttonWidget = (new cls({
				contentWidget: child,
				label: child.title,
				title: child.tooltip,
				dir: child.dir,
				lang: child.lang,
				textDir: child.textDir,
				iconClass: child.iconClass,
				id: child.id + "_button",
				parent: this.parent
			})).placeAt(this.domNode);

			// and then the actual content widget (changing it from prior-sibling to last-child),
			// wrapped by a <div class=dijitAccordionChildWrapper>
			this.containerNode = domConstruct.place("<div class='dijitAccordionChildWrapper' style='display:none'>", this.domNode);
			domConstruct.place(this.contentWidget.domNode, this.containerNode);
		},

		postCreate: function(){
			this.inherited(arguments);

			// Map changes in content widget's title etc. to changes in the button
			var button = this.button;
			this._contentWidgetWatches = [
				this.contentWidget.watch('title', lang.hitch(this, function(name, oldValue, newValue){
					button.set("label", newValue);
				})),
				this.contentWidget.watch('tooltip', lang.hitch(this, function(name, oldValue, newValue){
					button.set("title", newValue);
				})),
				this.contentWidget.watch('iconClass', lang.hitch(this, function(name, oldValue, newValue){
					button.set("iconClass", newValue);
				}))
			];
		},

		_setSelectedAttr: function(/*Boolean*/ isSelected){
			this._set("selected", isSelected);
			this.button.set("selected", isSelected);
			if(isSelected){
				var cw = this.contentWidget;
				if(cw.onSelected){ cw.onSelected(); }
			}
		},

		startup: function(){
			// Called by _Container.addChild()
			this.contentWidget.startup();
		},

		destroy: function(){
			this.button.destroyRecursive();

			array.forEach(this._contentWidgetWatches || [], function(w){ w.unwatch(); });

			delete this.contentWidget._buttonWidget;
			delete this.contentWidget._wrapperWidget;

			this.inherited(arguments);
		},

		destroyDescendants: function(/*Boolean*/ preserveDom){
			// since getChildren isn't working for me, have to code this manually
			this.contentWidget.destroyRecursive(preserveDom);
		}
	});

	var AccordionContainer = declare("dijit.layout.AccordionContainer", StackContainer, {
		// summary:
		//		Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time,
		//		and switching between panes is visualized by sliding the other panes up/down.
		// example:
		//	| 	<div data-dojo-type="dijit.layout.AccordionContainer">
		//	|		<div data-dojo-type="dijit.layout.ContentPane" title="pane 1">
		//	|		</div>
		//	|		<div data-dojo-type="dijit.layout.ContentPane" title="pane 2">
		//	|			<p>This is some text</p>
		//	|		</div>
		//	|	</div>

		// duration: Integer
		//		Amount of time (in ms) it takes to slide panes
		duration: manager.defaultDuration,

		// buttonWidget: [const] String
		//		The name of the widget used to display the title of each pane
		buttonWidget: AccordionButton,

/*=====
		// _verticalSpace: Number
		//		Pixels of space available for the open pane
		//		(my content box size minus the cumulative size of all the title bars)
		_verticalSpace: 0,
=====*/
		baseClass: "dijitAccordionContainer",

		buildRendering: function(){
			this.inherited(arguments);
			this.domNode.style.overflow = "hidden";		// TODO: put this in dijit.css
			this.domNode.setAttribute("role", "tablist");	// TODO: put this in template
		},

		startup: function(){
			if(this._started){ return; }
			this.inherited(arguments);
			if(this.selectedChildWidget){
				var style = this.selectedChildWidget.containerNode.style;
				style.display = "";
				style.overflow = "auto";
				this.selectedChildWidget._wrapperWidget.set("selected", true);
			}
		},

		layout: function(){
			// Implement _LayoutWidget.layout() virtual method.
			// Set the height of the open pane based on what room remains.

			var openPane = this.selectedChildWidget;

			if(!openPane){ return;}

			// space taken up by title, plus wrapper div (with border/margin) for open pane
			var wrapperDomNode = openPane._wrapperWidget.domNode,
				wrapperDomNodeMargin = domGeometry.getMarginExtents(wrapperDomNode),
				wrapperDomNodePadBorder = domGeometry.getPadBorderExtents(wrapperDomNode),
				wrapperContainerNode = openPane._wrapperWidget.containerNode,
				wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode),
				wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode),
				mySize = this._contentBox;

			// get cumulative height of all the unselected title bars
			var totalCollapsedHeight = 0;
			array.forEach(this.getChildren(), function(child){
	            if(child != openPane){
					// Using domGeometry.getMarginSize() rather than domGeometry.position() since claro has 1px bottom margin
					// to separate accordion panes.  Not sure that works perfectly, it's probably putting a 1px
					// margin below the bottom pane (even though we don't want one).
					totalCollapsedHeight += domGeometry.getMarginSize(child._wrapperWidget.domNode).h;
				}
			});
			this._verticalSpace = mySize.h - totalCollapsedHeight - wrapperDomNodeMargin.h
			 	- wrapperDomNodePadBorder.h - wrapperContainerNodeMargin.h - wrapperContainerNodePadBorder.h
				- openPane._buttonWidget.getTitleHeight();

			// Memo size to make displayed child
			this._containerContentBox = {
				h: this._verticalSpace,
				w: this._contentBox.w - wrapperDomNodeMargin.w - wrapperDomNodePadBorder.w
					- wrapperContainerNodeMargin.w - wrapperContainerNodePadBorder.w
			};

			if(openPane){
				openPane.resize(this._containerContentBox);
			}
		},

		_setupChild: function(child){
			// Overrides _LayoutWidget._setupChild().
			// Put wrapper widget around the child widget, showing title

			child._wrapperWidget = AccordionInnerContainer({
				contentWidget: child,
				buttonWidget: this.buttonWidget,
				id: child.id + "_wrapper",
				dir: child.dir,
				lang: child.lang,
				textDir: child.textDir,
				parent: this
			});

			this.inherited(arguments);
		},

		addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
			if(this._started){
				// Adding a child to a started Accordion is complicated because children have
				// wrapper widgets.  Default code path (calling this.inherited()) would add
				// the new child inside another child's wrapper.

				// First add in child as a direct child of this AccordionContainer
				var refNode = this.containerNode;
				if(insertIndex && typeof insertIndex == "number"){
					var children = _Widget.prototype.getChildren.call(this);	// get wrapper panes
					if(children && children.length >= insertIndex){
						refNode = children[insertIndex-1].domNode;
						insertIndex = "after";
					}
				}
				domConstruct.place(child.domNode, refNode, insertIndex);

				if(!child._started){
					child.startup();
				}

				// Then stick the wrapper widget around the child widget
				this._setupChild(child);

				// Code below copied from StackContainer
				topic.publish(this.id+"-addChild", child, insertIndex);	// publish
				this.layout();
				if(!this.selectedChildWidget){
					this.selectChild(child);
				}
			}else{
				// We haven't been started yet so just add in the child widget directly,
				// and the wrapper will be created on startup()
				this.inherited(arguments);
			}
		},

		removeChild: function(child){
			// Overrides _LayoutWidget.removeChild().

			// Destroy wrapper widget first, before StackContainer.getChildren() call.
			// Replace wrapper widget with true child widget (ContentPane etc.).
			// This step only happens if the AccordionContainer has been started; otherwise there's no wrapper.
			if(child._wrapperWidget){
				domConstruct.place(child.domNode, child._wrapperWidget.domNode, "after");
				child._wrapperWidget.destroy();
				delete child._wrapperWidget;
			}

			domClass.remove(child.domNode, "dijitHidden");

			this.inherited(arguments);
		},

		getChildren: function(){
			// Overrides _Container.getChildren() to return content panes rather than internal AccordionInnerContainer panes
			return array.map(this.inherited(arguments), function(child){
				return child.declaredClass == "dijit.layout._AccordionInnerContainer" ? child.contentWidget : child;
			}, this);
		},

		destroy: function(){
			if(this._animation){
				this._animation.stop();
			}
			array.forEach(this.getChildren(), function(child){
				// If AccordionContainer has been started, then each child has a wrapper widget which
				// also needs to be destroyed.
				if(child._wrapperWidget){
					child._wrapperWidget.destroy();
				}else{
					child.destroyRecursive();
				}
			});
			this.inherited(arguments);
		},

		_showChild: function(child){
			// Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
			child._wrapperWidget.containerNode.style.display="block";
			return this.inherited(arguments);
		},

		_hideChild: function(child){
			// Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
			child._wrapperWidget.containerNode.style.display="none";
			this.inherited(arguments);
		},

		_transition: function(/*dijit._Widget?*/ newWidget, /*dijit._Widget?*/ oldWidget, /*Boolean*/ animate){
			// Overrides StackContainer._transition() to provide sliding of title bars etc.

			if(has("ie") < 8){
				// workaround animation bugs by not animating; not worth supporting animation for IE6 & 7
				animate = false;
			}

			if(this._animation){
				// there's an in-progress animation.  speedily end it so we can do the newly requested one
				this._animation.stop(true);
				delete this._animation;
			}

			var self = this;

			if(newWidget){
				newWidget._wrapperWidget.set("selected", true);

				var d = this._showChild(newWidget);	// prepare widget to be slid in

				// Size the new widget, in case this is the first time it's being shown,
				// or I have been resized since the last time it was shown.
				// Note that page must be visible for resizing to work.
				if(this.doLayout && newWidget.resize){
					newWidget.resize(this._containerContentBox);
				}
			}

			if(oldWidget){
				oldWidget._wrapperWidget.set("selected", false);
				if(!animate){
					this._hideChild(oldWidget);
				}
			}

			if(animate){
				var newContents = newWidget._wrapperWidget.containerNode,
					oldContents = oldWidget._wrapperWidget.containerNode;

				// During the animation we will be showing two dijitAccordionChildWrapper nodes at once,
				// which on claro takes up 4px extra space (compared to stable AccordionContainer).
				// Have to compensate for that by immediately shrinking the pane being closed.
				var wrapperContainerNode = newWidget._wrapperWidget.containerNode,
					wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode),
					wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode),
					animationHeightOverhead = wrapperContainerNodeMargin.h + wrapperContainerNodePadBorder.h;

				oldContents.style.height = (self._verticalSpace - animationHeightOverhead) + "px";

				this._animation = new fx.Animation({
					node: newContents,
					duration: this.duration,
					curve: [1, this._verticalSpace - animationHeightOverhead - 1],
					onAnimate: function(value){
						value = Math.floor(value);	// avoid fractional values
						newContents.style.height = value + "px";
						oldContents.style.height = (self._verticalSpace - animationHeightOverhead - value) + "px";
					},
					onEnd: function(){
						delete self._animation;
						newContents.style.height = "auto";
						oldWidget._wrapperWidget.containerNode.style.display = "none";
						oldContents.style.height = "auto";
						self._hideChild(oldWidget);
					}
				});
				this._animation.onStop = this._animation.onEnd;
				this._animation.play();
			}

			return d;	// If child has an href, promise that fires when the widget has finished loading
		},

		// note: we are treating the container as controller here
		_onKeyPress: function(/*Event*/ e, /*dijit._Widget*/ fromTitle){
			// summary:
			//		Handle keypress events
			// description:
			//		This is called from a handler on AccordionContainer.domNode
			//		(setup in StackContainer), and is also called directly from
			//		the click handler for accordion labels
			if(this.disabled || e.altKey || !(fromTitle || e.ctrlKey)){
				return;
			}
			var c = e.charOrCode;
			if((fromTitle && (c == keys.LEFT_ARROW || c == keys.UP_ARROW)) ||
					(e.ctrlKey && c == keys.PAGE_UP)){
				this._adjacent(false)._buttonWidget._onTitleClick();
				event.stop(e);
			}else if((fromTitle && (c == keys.RIGHT_ARROW || c == keys.DOWN_ARROW)) ||
					(e.ctrlKey && (c == keys.PAGE_DOWN || c == keys.TAB))){
				this._adjacent(true)._buttonWidget._onTitleClick();
				event.stop(e);
			}
		}
	});

	// Back compat w/1.6, remove for 2.0
	if(!kernel.isAsync){
		ready(0, function(){
			var requires = ["dijit/layout/AccordionPane"];
			require(requires);	// use indirection so modules not rolled into a build
		});
	}

	// For monkey patching
	AccordionContainer._InnerContainer = AccordionInnerContainer;
	AccordionContainer._Button = AccordionButton;

	return AccordionContainer;
});

},
'url:curam/layout/resources/TabContainer.html':"<div class=\"dijitTabContainer\">\r\n\t<div class=\"dijitTabListWrapper\" data-dojo-attach-point=\"tablistNode\"></div>\r\n\t<div data-dojo-attach-point=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer dijitAlignTop\"></div>\r\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container dijitAlignClient\" data-dojo-attach-point=\"containerNode\"></div>\r\n</div>\r\n",
'dojox/storage/Provider':function(){
// wrapped by build app
define("dojox/storage/Provider", ["dijit","dojo","dojox"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage.Provider");

dojo.declare("dojox.storage.Provider", null, {
	// summary: A singleton for working with dojox.storage.
	// description:
	//		dojox.storage exposes the current available storage provider on this
	//		platform. It gives you methods such as dojox.storage.put(),
	//		dojox.storage.get(), etc.
	//
	//		For more details on dojox.storage, see the primary documentation
	//		page at
	//			http://manual.dojotoolkit.org/storage.html
	//
	//		Note for storage provider developers who are creating subclasses-
	//		This is the base class for all storage providers Specific kinds of
	//		Storage Providers should subclass this and implement these methods.
	//		You should avoid initialization in storage provider subclass's
	//		constructor; instead, perform initialization in your initialize()
	//		method.
	constructor: function(){
	},
	
	// SUCCESS: String
	//	Flag that indicates a put() call to a
	//	storage provider was succesful.
	SUCCESS: "success",
	
	// FAILED: String
	//	Flag that indicates a put() call to
	//	a storage provider failed.
	FAILED: "failed",
	
	// PENDING: String
	//	Flag that indicates a put() call to a
	//	storage provider is pending user approval.
	PENDING: "pending",
	
	// SIZE_NOT_AVAILABLE: String
	//	Returned by getMaximumSize() if this storage provider can not determine
	//	the maximum amount of data it can support.
	SIZE_NOT_AVAILABLE: "Size not available",
	
	// SIZE_NO_LIMIT: String
	//	Returned by getMaximumSize() if this storage provider has no theoretical
	//	limit on the amount of data it can store.
	SIZE_NO_LIMIT: "No size limit",

	// DEFAULT_NAMESPACE: String
	//	The namespace for all storage operations. This is useful if several
	//	applications want access to the storage system from the same domain but
	//	want different storage silos.
	DEFAULT_NAMESPACE: "default",
	
	// onHideSettingsUI: Function
	//	If a function is assigned to this property, then when the settings
	//	provider's UI is closed this function is called. Useful, for example,
	//	if the user has just cleared out all storage for this provider using
	//	the settings UI, and you want to update your UI.
	onHideSettingsUI: null,

	initialize: function(){
		// summary:
		//		Allows this storage provider to initialize itself. This is
		//		called after the page has finished loading, so you can not do
		//		document.writes(). Storage Provider subclasses should initialize
		//		themselves inside of here rather than in their function
		//		constructor.
		console.warn("dojox.storage.initialize not implemented");
	},
	
	isAvailable: function(){ /*Boolean*/
		// summary:
		//		Returns whether this storage provider is available on this
		//		platform.
		console.warn("dojox.storage.isAvailable not implemented");
	},

	put: function(	/*string*/ key,
					/*object*/ value,
					/*function*/ resultsHandler,
					/*string?*/ namespace){
		// summary:
		//		Puts a key and value into this storage system.
		// description:
		//		Example-
		//			var resultsHandler = function(status, key, message, namespace){
		//			  alert("status="+status+", key="+key+", message="+message);
		//			};
		//			dojox.storage.put("test", "hello world", resultsHandler);
		//
		//			Arguments:
		//
		//			status - The status of the put operation, given by
		//								dojox.storage.FAILED, dojox.storage.SUCCEEDED, or
		//								dojox.storage.PENDING
		//			key - The key that was used for the put
		//			message - An optional message if there was an error or things failed.
		//			namespace - The namespace of the key. This comes at the end since
		//									it was added later.
		//
		//		Important note: if you are using Dojo Storage in conjunction with
		//		Dojo Offline, then you don't need to provide
		//		a resultsHandler; this is because for Dojo Offline we
		//		use Google Gears to persist data, which has unlimited data
		//		once the user has given permission. If you are using Dojo
		//		Storage apart from Dojo Offline, then under the covers hidden
		//		Flash might be used, which is both asychronous and which might
		//		get denied; in this case you must provide a resultsHandler.
		// key:
		//		A string key to use when retrieving this value in the future.
		// value:
		//		A value to store; this can be any JavaScript type.
		// resultsHandler:
		//		A callback function that will receive three arguments. The
		//		first argument is one of three values: dojox.storage.SUCCESS,
		//		dojox.storage.FAILED, or dojox.storage.PENDING; these values
		//		determine how the put request went. In some storage systems
		//		users can deny a storage request, resulting in a
		//		dojox.storage.FAILED, while in other storage systems a storage
		//		request must wait for user approval, resulting in a
		//		dojox.storage.PENDING status until the request is either
		//		approved or denied, resulting in another call back with
		//		dojox.storage.SUCCESS.
		//		The second argument in the call back is the key name that was being stored.
		//		The third argument in the call back is an optional message that
		//		details possible error messages that might have occurred during
		//		the storage process.
		//	namespace:
		//		Optional string namespace that this value will be placed into;
		//		if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE
		
		console.warn("dojox.storage.put not implemented");
	},

	get: function(/*string*/ key, /*string?*/ namespace){ /*Object*/
		// summary:
		//		Gets the value with the given key. Returns null if this key is
		//		not in the storage system.
		// key:
		//		A string key to get the value of.
		//	namespace:
		//		Optional string namespace that this value will be retrieved from;
		//		if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE
		// return: Returns any JavaScript object type; null if the key is not present
		console.warn("dojox.storage.get not implemented");
	},

	hasKey: function(/*string*/ key, /*string?*/ namespace){
		// summary: Determines whether the storage has the given key.
		return !!this.get(key, namespace); // Boolean
	},

	getKeys: function(/*string?*/ namespace){ /*Array*/
		// summary: Enumerates all of the available keys in this storage system.
		// return: Array of available keys
		console.warn("dojox.storage.getKeys not implemented");
	},
	
	clear: function(/*string?*/ namespace){
		// summary:
		//		Completely clears this storage system of all of it's values and
		//		keys. If 'namespace' is provided just clears the keys in that
		//		namespace.
		console.warn("dojox.storage.clear not implemented");
	},
  
	remove: function(/*string*/ key, /*string?*/ namespace){
		// summary: Removes the given key from this storage system.
		console.warn("dojox.storage.remove not implemented");
	},
	
	getNamespaces: function(){ /*string[]*/
		console.warn("dojox.storage.getNamespaces not implemented");
	},

	isPermanent: function(){ /*Boolean*/
		// summary:
		//		Returns whether this storage provider's values are persisted
		//		when this platform is shutdown.
		console.warn("dojox.storage.isPermanent not implemented");
	},

	getMaximumSize: function(){ /* mixed */
		// summary: The maximum storage allowed by this provider
		// returns:
		//	Returns the maximum storage size
		//	supported by this provider, in
		//	thousands of bytes (i.e., if it
		//	returns 60 then this means that 60K
		//	of storage is supported).
		//
		//	If this provider can not determine
		//	it's maximum size, then
		//	dojox.storage.SIZE_NOT_AVAILABLE is
		//	returned; if there is no theoretical
		//	limit on the amount of storage
		//	this provider can return, then
		//	dojox.storage.SIZE_NO_LIMIT is
		//	returned
		console.warn("dojox.storage.getMaximumSize not implemented");
	},
		
	putMultiple: function(	/*array*/ keys,
							/*array*/ values,
							/*function*/ resultsHandler,
							/*string?*/ namespace){
		// summary:
		//		Puts multiple keys and values into this storage system.
		// description:
		//		Example-
		//			var resultsHandler = function(status, key, message){
		//			  alert("status="+status+", key="+key+", message="+message);
		//			};
		//			dojox.storage.put(["test"], ["hello world"], resultsHandler);
		//
		//		Important note: if you are using Dojo Storage in conjunction with
		//		Dojo Offline, then you don't need to provide
		//		a resultsHandler; this is because for Dojo Offline we
		//		use Google Gears to persist data, which has unlimited data
		//		once the user has given permission. If you are using Dojo
		//		Storage apart from Dojo Offline, then under the covers hidden
		//		Flash might be used, which is both asychronous and which might
		//		get denied; in this case you must provide a resultsHandler.
		// keys:
		//		An array of string keys to use when retrieving this value in the future,
		//		one per value to be stored
		// values:
		//		An array of values to store; this can be any JavaScript type, though the
		//		performance of plain strings is considerably better
		// resultsHandler:
		//		A callback function that will receive three arguments. The
		//		first argument is one of three values: dojox.storage.SUCCESS,
		//		dojox.storage.FAILED, or dojox.storage.PENDING; these values
		//		determine how the put request went. In some storage systems
		//		users can deny a storage request, resulting in a
		//		dojox.storage.FAILED, while in other storage systems a storage
		//		request must wait for user approval, resulting in a
		//		dojox.storage.PENDING status until the request is either
		//		approved or denied, resulting in another call back with
		//		dojox.storage.SUCCESS.
		//		The second argument in the call back is the key name that was being stored.
		//		The third argument in the call back is an optional message that
		//		details possible error messages that might have occurred during
		//		the storage process.
		//	namespace:
		//		Optional string namespace that this value will be placed into;
		//		if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE
		
		for(var i = 0; i < keys.length; i++){
			dojox.storage.put(keys[i], values[i], resultsHandler, namespace);
		}
	},

	getMultiple: function(/*array*/ keys, /*string?*/ namespace){ /*Object*/
		// summary:
		//		Gets the valuse corresponding to each of the given keys.
		//		Returns a null array element for each given key that is
		//		not in the storage system.
		// keys:
		//		An array of string keys to get the value of.
		//	namespace:
		//		Optional string namespace that this value will be retrieved from;
		//		if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE
		// return: Returns any JavaScript object type; null if the key is not present
		
		var results = [];
		for(var i = 0; i < keys.length; i++){
			results.push(dojox.storage.get(keys[i], namespace));
		}
		
		return results;
	},

	removeMultiple: function(/*array*/ keys, /*string?*/ namespace) {
		// summary: Removes the given keys from this storage system.
		
		for(var i = 0; i < keys.length; i++){
			dojox.storage.remove(keys[i], namespace);
		}
	},
	
	isValidKeyArray: function( keys) {
		if(keys === null || keys === undefined || !dojo.isArray(keys)){
			return false;
		}

		//	JAC: This could be optimized by running the key validity test
		//  directly over a joined string
		return !dojo.some(keys, function(key){
			return !this.isValidKey(key);
		}, this); // Boolean
	},

	hasSettingsUI: function(){ /*Boolean*/
		// summary: Determines whether this provider has a settings UI.
		return false;
	},

	showSettingsUI: function(){
		// summary: If this provider has a settings UI, determined
		// by calling hasSettingsUI(), it is shown.
		console.warn("dojox.storage.showSettingsUI not implemented");
	},

	hideSettingsUI: function(){
		// summary: If this provider has a settings UI, hides it.
		console.warn("dojox.storage.hideSettingsUI not implemented");
	},
	
	isValidKey: function(/*string*/ keyName){ /*Boolean*/
		// summary:
		//		Subclasses can call this to ensure that the key given is valid
		//		in a consistent way across different storage providers. We use
		//		the lowest common denominator for key values allowed: only
		//		letters, numbers, and underscores are allowed. No spaces.
		if(keyName === null || keyName === undefined){
			return false;
		}
			
		return /^[0-9A-Za-z_]*$/.test(keyName);
	},
	
	getResourceList: function(){ /* Array[] */
		// summary:
		//	Returns a list of URLs that this
		//	storage provider might depend on.
		// description:
		//	This method returns a list of URLs that this
		//	storage provider depends on to do its work.
		//	This list is used by the Dojo Offline Toolkit
		//	to cache these resources to ensure the machinery
		//	used by this storage provider is available offline.
		//	What is returned is an array of URLs.
		//  Note that Dojo Offline uses Gears as its native
		//  storage provider, and does not support using other
		//  kinds of storage providers while offline anymore.
		
		return [];
	}
});

});

},
'curam/lnf':function(){
define("curam/lnf", ["curam/define"
        ], function() {
  
  /*
    All javascript functions that alter the look and feel of a page
    should be added here. Examples of this are functions that may 
    add a new class name or inline styling to a node.
  */
  curam.define.singleton("curam.lnf", {
    /* 
      The setCTParent function adds a class name of "codetable" to the table cell
      that contains a drop-down or multi-select box which is populated by arbitary
      list data. This class is added so different CSS can be applied to the cell
      so text input boxes will align correctly with drop-down or multi-select boxes.
    */
    setCTParent: function(id) {
      var selectNode = dojo.byId(id);
      var selectParentNode = selectNode.parentNode;
      if(selectParentNode.tagName == "TD") {
        dojo.addClass(selectParentNode, "codetable");
      }
    }
  });
  
  return curam.lnf;
});

},
'dojo/data/util/filter':function(){
define("dojo/data/util/filter", ["dojo/_base/lang"], function(lang) {
	// module:
	//		dojo/data/util/filter
	// summary:
	//		TODOC

var filter = lang.getObject("dojo.data.util.filter", true);

filter.patternToRegExp = function(/*String*/pattern, /*boolean?*/ ignoreCase){
	//	summary:
	//		Helper function to convert a simple pattern to a regular expression for matching.
	//	description:
	//		Returns a regular expression object that conforms to the defined conversion rules.
	//		For example:
	//			ca*   -> /^ca.*$/
	//			*ca*  -> /^.*ca.*$/
	//			*c\*a*  -> /^.*c\*a.*$/
	//			*c\*a?*  -> /^.*c\*a..*$/
	//			and so on.
	//
	//	pattern: string
	//		A simple matching pattern to convert that follows basic rules:
	//			* Means match anything, so ca* means match anything starting with ca
	//			? Means match single character.  So, b?b will match to bob and bab, and so on.
	//      	\ is an escape character.  So for example, \* means do not treat * as a match, but literal character *.
	//				To use a \ as a character in the string, it must be escaped.  So in the pattern it should be
	//				represented by \\ to be treated as an ordinary \ character instead of an escape.
	//
	//	ignoreCase:
	//		An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing
	//		By default, it is assumed case sensitive.

	var rxp = "^";
	var c = null;
	for(var i = 0; i < pattern.length; i++){
		c = pattern.charAt(i);
		switch(c){
			case '\\':
				rxp += c;
				i++;
				rxp += pattern.charAt(i);
				break;
			case '*':
				rxp += ".*"; break;
			case '?':
				rxp += "."; break;
			case '$':
			case '^':
			case '/':
			case '+':
			case '.':
			case '|':
			case '(':
			case ')':
			case '{':
			case '}':
			case '[':
			case ']':
				rxp += "\\"; //fallthrough
			default:
				rxp += c;
		}
	}
	rxp += "$";
	if(ignoreCase){
		return new RegExp(rxp,"mi"); //RegExp
	}else{
		return new RegExp(rxp,"m"); //RegExp
	}

};

return filter;
});

},
'dojo/dnd/common':function(){
define("dojo/dnd/common", ["../main"], function(dojo) {
	// module:
	//		dojo/dnd/common
	// summary:
	//		TODOC

dojo.getObject("dnd", true, dojo);

dojo.dnd.getCopyKeyState = dojo.isCopyKey;

dojo.dnd._uniqueId = 0;
dojo.dnd.getUniqueId = function(){
	// summary:
	//		returns a unique string for use with any DOM element
	var id;
	do{
		id = dojo._scopeName + "Unique" + (++dojo.dnd._uniqueId);
	}while(dojo.byId(id));
	return id;
};

dojo.dnd._empty = {};

dojo.dnd.isFormElement = function(/*Event*/ e){
	// summary:
	//		returns true if user clicked on a form element
	var t = e.target;
	if(t.nodeType == 3 /*TEXT_NODE*/){
		t = t.parentNode;
	}
	return " button textarea input select option ".indexOf(" " + t.tagName.toLowerCase() + " ") >= 0;	// Boolean
};

return dojo.dnd;
});

},
'dijit/tree/ForestStoreModel':function(){
define("dijit/tree/ForestStoreModel", [
	"dojo/_base/array", // array.indexOf array.some
	"dojo/_base/declare", // declare
	"dojo/_base/lang", // lang.hitch
	"dojo/_base/window", // win.global
	"./TreeStoreModel"
], function(array, declare, lang, win, TreeStoreModel){

/*=====
var TreeStoreModel = dijit.tree.TreeStoreModel;
=====*/

// module:
//		dijit/tree/ForestStoreModel
// summary:
//		Interface between a dijit.Tree and a dojo.data store that doesn't have a root item,
//		a.k.a. a store that has multiple "top level" items.

return declare("dijit.tree.ForestStoreModel", TreeStoreModel, {
	// summary:
	//		Interface between a dijit.Tree and a dojo.data store that doesn't have a root item,
	//		a.k.a. a store that has multiple "top level" items.
	//
	// description
	//		Use this class to wrap a dojo.data store, making all the items matching the specified query
	//		appear as children of a fabricated "root item".  If no query is specified then all the
	//		items returned by fetch() on the underlying store become children of the root item.
	//		This class allows dijit.Tree to assume a single root item, even if the store doesn't have one.
	//
	//		When using this class the developer must override a number of methods according to their app and
	//		data, including:
	//			- onNewRootItem
	//			- onAddToRoot
	//			- onLeaveRoot
	//			- onNewItem
	//			- onSetItem

	// Parameters to constructor

	// rootId: String
	//		ID of fabricated root item
	rootId: "$root$",

	// rootLabel: String
	//		Label of fabricated root item
	rootLabel: "ROOT",

	// query: String
	//		Specifies the set of children of the root item.
	// example:
	//	|	{type:'continent'}
	query: null,

	// End of parameters to constructor

	constructor: function(params){
		// summary:
		//		Sets up variables, etc.
		// tags:
		//		private

		// Make dummy root item
		this.root = {
			store: this,
			root: true,
			id: params.rootId,
			label: params.rootLabel,
			children: params.rootChildren	// optional param
		};
	},

	// =======================================================================
	// Methods for traversing hierarchy

	mayHaveChildren: function(/*dojo.data.Item*/ item){
		// summary:
		//		Tells if an item has or may have children.  Implementing logic here
		//		avoids showing +/- expando icon for nodes that we know don't have children.
		//		(For efficiency reasons we may not want to check if an element actually
		//		has children until user clicks the expando node)
		// tags:
		//		extension
		return item === this.root || this.inherited(arguments);
	},

	getChildren: function(/*dojo.data.Item*/ parentItem, /*function(items)*/ callback, /*function*/ onError){
		// summary:
		// 		Calls onComplete() with array of child items of given parent item, all loaded.
		if(parentItem === this.root){
			if(this.root.children){
				// already loaded, just return
				callback(this.root.children);
			}else{
				this.store.fetch({
					query: this.query,
					onComplete: lang.hitch(this, function(items){
						this.root.children = items;
						callback(items);
					}),
					onError: onError
				});
			}
		}else{
			this.inherited(arguments);
		}
	},

	// =======================================================================
	// Inspecting items

	isItem: function(/* anything */ something){
		return (something === this.root) ? true : this.inherited(arguments);
	},

	fetchItemByIdentity: function(/* object */ keywordArgs){
		if(keywordArgs.identity == this.root.id){
			var scope = keywordArgs.scope?keywordArgs.scope:win.global;
			if(keywordArgs.onItem){
				keywordArgs.onItem.call(scope, this.root);
			}
		}else{
			this.inherited(arguments);
		}
	},

	getIdentity: function(/* item */ item){
		return (item === this.root) ? this.root.id : this.inherited(arguments);
	},

	getLabel: function(/* item */ item){
		return	(item === this.root) ? this.root.label : this.inherited(arguments);
	},

	// =======================================================================
	// Write interface

	newItem: function(/* dojo.dnd.Item */ args, /*Item*/ parent, /*int?*/ insertIndex){
		// summary:
		//		Creates a new item.   See dojo.data.api.Write for details on args.
		//		Used in drag & drop when item from external source dropped onto tree.
		if(parent === this.root){
			this.onNewRootItem(args);
			return this.store.newItem(args);
		}else{
			return this.inherited(arguments);
		}
	},

	onNewRootItem: function(/* dojo.dnd.Item */ /*===== args =====*/){
		// summary:
		//		User can override this method to modify a new element that's being
		//		added to the root of the tree, for example to add a flag like root=true
	},

	pasteItem: function(/*Item*/ childItem, /*Item*/ oldParentItem, /*Item*/ newParentItem, /*Boolean*/ bCopy, /*int?*/ insertIndex){
		// summary:
		//		Move or copy an item from one parent item to another.
		//		Used in drag & drop
		if(oldParentItem === this.root){
			if(!bCopy){
				// It's onLeaveRoot()'s responsibility to modify the item so it no longer matches
				// this.query... thus triggering an onChildrenChange() event to notify the Tree
				// that this element is no longer a child of the root node
				this.onLeaveRoot(childItem);
			}
		}
		this.inherited(arguments, [childItem,
			oldParentItem === this.root ? null : oldParentItem,
			newParentItem === this.root ? null : newParentItem,
			bCopy,
			insertIndex
		]);
		if(newParentItem === this.root){
			// It's onAddToRoot()'s responsibility to modify the item so it matches
			// this.query... thus triggering an onChildrenChange() event to notify the Tree
			// that this element is now a child of the root node
			this.onAddToRoot(childItem);
		}
	},

	// =======================================================================
	// Handling for top level children

	onAddToRoot: function(/* item */ item){
		// summary:
		//		Called when item added to root of tree; user must override this method
		//		to modify the item so that it matches the query for top level items
		// example:
		//	|	store.setValue(item, "root", true);
		// tags:
		//		extension
		console.log(this, ": item ", item, " added to root");
	},

	onLeaveRoot: function(/* item */ item){
		// summary:
		//		Called when item removed from root of tree; user must override this method
		//		to modify the item so it doesn't match the query for top level items
		// example:
		// 	|	store.unsetAttribute(item, "root");
		// tags:
		//		extension
		console.log(this, ": item ", item, " removed from root");
	},

	// =======================================================================
	// Events from data store

	_requeryTop: function(){
		// reruns the query for the children of the root node,
		// sending out an onSet notification if those children have changed
		var oldChildren = this.root.children || [];
		this.store.fetch({
			query: this.query,
			onComplete: lang.hitch(this, function(newChildren){
				this.root.children = newChildren;

				// If the list of children or the order of children has changed...
				if(oldChildren.length != newChildren.length ||
					array.some(oldChildren, function(item, idx){ return newChildren[idx] != item;})){
					this.onChildrenChange(this.root, newChildren);
				}
			})
		});
	},

	onNewItem: function(/* dojo.data.Item */ item, /* Object */ parentInfo){
		// summary:
		//		Handler for when new items appear in the store.  Developers should override this
		//		method to be more efficient based on their app/data.
		// description:
		//		Note that the default implementation requeries the top level items every time
		//		a new item is created, since any new item could be a top level item (even in
		//		addition to being a child of another item, since items can have multiple parents).
		//
		//		If developers can detect which items are possible top level items (based on the item and the
		//		parentInfo parameters), they should override this method to only call _requeryTop() for top
		//		level items.  Often all top level items have parentInfo==null, but
		//		that will depend on which store you use and what your data is like.
		// tags:
		//		extension
		this._requeryTop();

		this.inherited(arguments);
	},

	onDeleteItem: function(/*Object*/ item){
		// summary:
		//		Handler for delete notifications from underlying store

		// check if this was a child of root, and if so send notification that root's children
		// have changed
		if(array.indexOf(this.root.children, item) != -1){
			this._requeryTop();
		}

		this.inherited(arguments);
	},

	onSetItem: function(/* item */ item,
					/* attribute-name-string */ attribute,
					/* object | array */ oldValue,
					/* object | array */ newValue){
		// summary:
		//		Updates the tree view according to changes to an item in the data store.
		//		Developers should override this method to be more efficient based on their app/data.
		// description:
		//		Handles updates to an item's children by calling onChildrenChange(), and
		//		other updates to an item by calling onChange().
		//
		//		Also, any change to any item re-executes the query for the tree's top-level items,
		//		since this modified item may have started/stopped matching the query for top level items.
		//
		//		If possible, developers should override this function to only call _requeryTop() when
		//		the change to the item has caused it to stop/start being a top level item in the tree.
		// tags:
		//		extension

		this._requeryTop();
		this.inherited(arguments);
	}

});

});

},
'curam/util/ResourceBundle':function(){
/*
 * Copyright 2012 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */
define("curam/util/ResourceBundle", ["dojo/i18n",
        "dojo/string"
        ], function(i18n, string) {

/*
 * Modification History
 * --------------------
 * 20-May-2013  MV  [CR00383012] Fail if there are no properties loaded.
 * 19-May-2012  BOS [CR00346368] Use new Dojo AMD format.
 * 15-Jun-2012  MV  [CR00329034] Added proper documentation.
 * 11-Jun-2012  MV  [CR00328689] Initial version.
 */

/**
 * @name curam.util.ResourceBundle
 * @namespace Provides access to localizable resources.
 * <p/>
 * The process for getting localized messaged from a resource bundle consists
 * of two steps: <ol>
 * <li>Load the resources using <code>dojo.requireLocalization()</code></li>
 * <li>Create an instance of <code>curam.util.ResourceBunlde</code> class
 *      to access the localized resources.</li>
 * </ol>
 *
 * <h2>Loading Resources</h2>
 * In most cases the call to load resources should look like this:
 * <code><pre>dojo.requireLocalization("curam.application", "MyResources")</pre></code>
 * <p/>
 * "curam.application" is the default package into which all localizable
 * resources are placed by Curam infrastructure.
 * <p/>
 * "MyResources" is an example of a resource bundle name. Resource bundle name
 * will be specific to your own JavaScript code and it is derived from the name
 * of the related resource bundle *.properties file.
 *
 * <h2>Accessing Localized Resources</h2>
 * Previously loaded localized resources can be accessed in the following way:
 * <code><pre>dojo.require("curam.util.ResourceBundle");
 * var bundle = new curam.util.ResourceBundle("MyResources");
 * var localizedMessage = bundle.getProperty("myPropertyKey");
 * </pre></code>
 * Note in the above example there is no need to specify the default package
 * name "curam.appliciation" - the infrastructure will use the default
 * if no package is specified. This should be the case in most normal
 * situations.
 *
 * <h2>Resource File Naming and Content</h2>
 * The localizable resources for your JavaScript are expected in the standard
 * Java Properties format.
 * <p/>
 * By convention the name of the resource file for your JavaScript should be
 * derived from name of the JavaScript file itself. For example if your
 * JavaScript file is called "MyJavaScript.js" then related localizable
 * resources should be placed in <code>MyJavaScript.js.properties</code> file.
 * This .properties file can be placed anywhere in the component directory, but
 * by convention it should be in the same directory as the related *.js file.
 * The only exception to this, is that a *.js file within a WebContent directory
 * cannot have it's associated .properties file within the same directory - the
 * associated .properties file must be placed within a directory outside of the
 * WebContent directory.
 * <p/>
 * The tranlations of the resource bundle should then be placed in files named
 * in the following way (again following the Java standard naming):
 * <code>MyJavaScript.js_fr_CA.properties</code>,
 * <code>MyJavaScript.js_fr.properties</code>,
 * <code>MyJavaScript.js_cs_CZ.properties</code>, etc.
 * <p/>
 * Sample content of a resource file is as follows:
 * <code><pre>myPropertyKey=A localizable message.
 * another.property.key=Another localizable message.
 * propertyKey3=A message with %s value placeholders %s.
 * </pre></code>
 * Please note property keys with dots are allowed and string value
 * substitution into mesages is supported.
 */
 var ResourceBundle = dojo.declare("curam.util.ResourceBundle", null,
/**
 * @lends curam.util.ResourceBundle.prototype
 */
{
  _bundle: undefined,

  /**
   * Constructor takes bundle name and optionally locale.
   *
   * @param {String} possiblyQualifiedBundleName Bundle name. Optionally
   *           qualified with package name. E.g. "my.package.MyResourceBundle".
   * @param {String} [locale] Locale string in the following format:
   *            <code> en-US</code> where "en" is language code and "US"
   *            is variant as per IETF specification.
   */
  constructor: function(possiblyQualifiedBundleName, locale) {
    var parts = possiblyQualifiedBundleName.split(".");
    var bundleName = parts[parts.length - 1];
    var packageName = parts.length == 1 ? "curam.application"
        : possiblyQualifiedBundleName.slice(0,
            possiblyQualifiedBundleName.length - bundleName.length - 1);
    try {
      var b = i18n.getLocalization(packageName, bundleName, locale);
      if (this._isEmpty(b)) {
        throw new Error("Empty resource bundle.");

      } else {
        this._bundle = b;
      }

    } catch (e) {
      throw new Error("Unable to access resource bundle: " + packageName + "."
          + bundleName + ": " + e.message);
    }
  },
  
  /**
   * Checks if the passed bundle is empty or has some properties.
   * @param bundle The bundle object to check.
   * @returns {Boolean} True if the bundle if empty, false if it contains
   *            properties.
   */
  _isEmpty: function(bundle) {
    for (var prop in bundle) {
      // if it has at least one property, return false - it is not empty
      return false;
    }
    // no properties - return true as it is empty
    return true;
  },

  /**
   * Gets the localized value of a specified property, optionally replacing any
   * placeholders with appropriate values from specified array.
   *
   * @param {String} key The property key of the required message.
   * @param {Array} [values] An array of values to be used for replacing
   *            placeholders within the specified message.
   * @returns {String} Value of the requested localized property from
   *            the bundle.
   */
  getProperty: function(key, values) {
    var msg = this._bundle[key];

    var result = msg;
    if (values) {
      result = string.substitute(msg, values);
    }

    return result;
  }
  });
 return ResourceBundle;
});
},
'dijit/Menu':function(){
define("dijit/Menu", [
	"require",
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/dom", // dom.byId dom.isDescendant
	"dojo/dom-attr", // domAttr.get domAttr.set domAttr.has domAttr.remove
	"dojo/dom-geometry", // domStyle.getComputedStyle domGeometry.position
	"dojo/dom-style", // domStyle.getComputedStyle
	"dojo/_base/kernel",
	"dojo/keys",	// keys.F10
	"dojo/_base/lang", // lang.hitch
	"dojo/on",
	"dojo/_base/sniff", // has("ie"), has("quirks")
	"dojo/_base/window", // win.body win.doc.documentElement win.doc.frames win.withGlobal
	"dojo/window", // winUtils.get
	"./popup",
	"./DropDownMenu",
	"dojo/ready"
], function(require, array, declare, event, dom, domAttr, domGeometry, domStyle, kernel, keys, lang, on,
			has, win, winUtils, pm, DropDownMenu, ready){

/*=====
	var DropDownMenu = dijit.DropDownMenu;
=====*/

// module:
//		dijit/Menu
// summary:
//		Includes dijit.Menu widget and base class dijit._MenuBase

// Back compat w/1.6, remove for 2.0
if(!kernel.isAsync){
	ready(0, function(){
		var requires = ["dijit/MenuItem", "dijit/PopupMenuItem", "dijit/CheckedMenuItem", "dijit/MenuSeparator"];
		require(requires);	// use indirection so modules not rolled into a build
	});
}

return declare("dijit.Menu", DropDownMenu, {
	// summary:
	//		A context menu you can assign to multiple elements

	constructor: function(){
		this._bindings = [];
	},

	// targetNodeIds: [const] String[]
	//		Array of dom node ids of nodes to attach to.
	//		Fill this with nodeIds upon widget creation and it becomes context menu for those nodes.
	targetNodeIds: [],

	// contextMenuForWindow: [const] Boolean
	//		If true, right clicking anywhere on the window will cause this context menu to open.
	//		If false, must specify targetNodeIds.
	contextMenuForWindow: false,

	// leftClickToOpen: [const] Boolean
	//		If true, menu will open on left click instead of right click, similar to a file menu.
	leftClickToOpen: false,

	// refocus: Boolean
	// 		When this menu closes, re-focus the element which had focus before it was opened.
	refocus: true,

	postCreate: function(){
		if(this.contextMenuForWindow){
			this.bindDomNode(win.body());
		}else{
			// TODO: should have _setTargetNodeIds() method to handle initialization and a possible
			// later set('targetNodeIds', ...) call.  There's also a problem that targetNodeIds[]
			// gets stale after calls to bindDomNode()/unBindDomNode() as it still is just the original list (see #9610)
			array.forEach(this.targetNodeIds, this.bindDomNode, this);
		}
		this.inherited(arguments);
	},

	// thanks burstlib!
	_iframeContentWindow: function(/* HTMLIFrameElement */iframe_el){
		// summary:
		//		Returns the window reference of the passed iframe
		// tags:
		//		private
		return winUtils.get(this._iframeContentDocument(iframe_el)) ||
			// Moz. TODO: is this available when defaultView isn't?
			this._iframeContentDocument(iframe_el)['__parent__'] ||
			(iframe_el.name && win.doc.frames[iframe_el.name]) || null;	//	Window
	},

	_iframeContentDocument: function(/* HTMLIFrameElement */iframe_el){
		// summary:
		//		Returns a reference to the document object inside iframe_el
		// tags:
		//		protected
		return iframe_el.contentDocument // W3
			|| (iframe_el.contentWindow && iframe_el.contentWindow.document) // IE
			|| (iframe_el.name && win.doc.frames[iframe_el.name] && win.doc.frames[iframe_el.name].document)
			|| null;	//	HTMLDocument
	},

	bindDomNode: function(/*String|DomNode*/ node){
		// summary:
		//		Attach menu to given node
		node = dom.byId(node);

		var cn;	// Connect node

		// Support context menus on iframes.  Rather than binding to the iframe itself we need
		// to bind to the <body> node inside the iframe.
		if(node.tagName.toLowerCase() == "iframe"){
			var iframe = node,
				window = this._iframeContentWindow(iframe);
			cn = win.withGlobal(window, win.body);
		}else{

			// To capture these events at the top level, attach to <html>, not <body>.
			// Otherwise right-click context menu just doesn't work.
			cn = (node == win.body() ? win.doc.documentElement : node);
		}


		// "binding" is the object to track our connection to the node (ie, the parameter to bindDomNode())
		var binding = {
			node: node,
			iframe: iframe
		};

		// Save info about binding in _bindings[], and make node itself record index(+1) into
		// _bindings[] array.  Prefix w/_dijitMenu to avoid setting an attribute that may
		// start with a number, which fails on FF/safari.
		domAttr.set(node, "_dijitMenu" + this.id, this._bindings.push(binding));

		// Setup the connections to monitor click etc., unless we are connecting to an iframe which hasn't finished
		// loading yet, in which case we need to wait for the onload event first, and then connect
		// On linux Shift-F10 produces the oncontextmenu event, but on Windows it doesn't, so
		// we need to monitor keyboard events in addition to the oncontextmenu event.
		var doConnects = lang.hitch(this, function(cn){
			return [
				// TODO: when leftClickToOpen is true then shouldn't space/enter key trigger the menu,
				// rather than shift-F10?
				on(cn, this.leftClickToOpen ? "click" : "contextmenu", lang.hitch(this, function(evt){
					// Schedule context menu to be opened unless it's already been scheduled from onkeydown handler
					event.stop(evt);
					this._scheduleOpen(evt.target, iframe, {x: evt.pageX, y: evt.pageY});
				})),
				on(cn, "keydown", lang.hitch(this, function(evt){
					if(evt.shiftKey && evt.keyCode == keys.F10){
						event.stop(evt);
						this._scheduleOpen(evt.target, iframe);	// no coords - open near target node
					}
				}))
			];
		});
		binding.connects = cn ? doConnects(cn) : [];

		if(iframe){
			// Setup handler to [re]bind to the iframe when the contents are initially loaded,
			// and every time the contents change.
			// Need to do this b/c we are actually binding to the iframe's <body> node.
			// Note: can't use connect.connect(), see #9609.

			binding.onloadHandler = lang.hitch(this, function(){
				// want to remove old connections, but IE throws exceptions when trying to
				// access the <body> node because it's already gone, or at least in a state of limbo

				var window = this._iframeContentWindow(iframe);
					cn = win.withGlobal(window, win.body);
				binding.connects = doConnects(cn);
			});
			if(iframe.addEventListener){
				iframe.addEventListener("load", binding.onloadHandler, false);
			}else{
				iframe.attachEvent("onload", binding.onloadHandler);
			}
		}
	},

	unBindDomNode: function(/*String|DomNode*/ nodeName){
		// summary:
		//		Detach menu from given node

		var node;
		try{
			node = dom.byId(nodeName);
		}catch(e){
			// On IE the dom.byId() call will get an exception if the attach point was
			// the <body> node of an <iframe> that has since been reloaded (and thus the
			// <body> node is in a limbo state of destruction.
			return;
		}

		// node["_dijitMenu" + this.id] contains index(+1) into my _bindings[] array
		var attrName = "_dijitMenu" + this.id;
		if(node && domAttr.has(node, attrName)){
			var bid = domAttr.get(node, attrName)-1, b = this._bindings[bid], h;
			while(h = b.connects.pop()){
				h.remove();
			}

			// Remove listener for iframe onload events
			var iframe = b.iframe;
			if(iframe){
				if(iframe.removeEventListener){
					iframe.removeEventListener("load", b.onloadHandler, false);
				}else{
					iframe.detachEvent("onload", b.onloadHandler);
				}
			}

			domAttr.remove(node, attrName);
			delete this._bindings[bid];
		}
	},

	_scheduleOpen: function(/*DomNode?*/ target, /*DomNode?*/ iframe, /*Object?*/ coords){
		// summary:
		//		Set timer to display myself.  Using a timer rather than displaying immediately solves
		//		two problems:
		//
		//		1. IE: without the delay, focus work in "open" causes the system
		//		context menu to appear in spite of stopEvent.
		//
		//		2. Avoid double-shows on linux, where shift-F10 generates an oncontextmenu event
		//		even after a event.stop(e).  (Shift-F10 on windows doesn't generate the
		//		oncontextmenu event.)

		if(!this._openTimer){
			this._openTimer = setTimeout(lang.hitch(this, function(){
				delete this._openTimer;
				this._openMyself({
					target: target,
					iframe: iframe,
					coords: coords
				});
			}), 1);
		}
	},

	_openMyself: function(args){
		// summary:
		//		Internal function for opening myself when the user does a right-click or something similar.
		// args:
		//		This is an Object containing:
		//		* target:
		//			The node that is being clicked
		//		* iframe:
		//			If an <iframe> is being clicked, iframe points to that iframe
		//		* coords:
		//			Put menu at specified x/y position in viewport, or if iframe is
		//			specified, then relative to iframe.
		//
		//		_openMyself() formerly took the event object, and since various code references
		//		evt.target (after connecting to _openMyself()), using an Object for parameters
		//		(so that old code still works).

		var target = args.target,
			iframe = args.iframe,
			coords = args.coords;

		// Get coordinates to open menu, either at specified (mouse) position or (if triggered via keyboard)
		// then near the node the menu is assigned to.
		if(coords){
			if(iframe){
				// Specified coordinates are on <body> node of an <iframe>, convert to match main document
				var ifc = domGeometry.position(iframe, true),
					window = this._iframeContentWindow(iframe),
					scroll = win.withGlobal(window, "_docScroll", dojo);

				var cs = domStyle.getComputedStyle(iframe),
					tp = domStyle.toPixelValue,
					left = (has("ie") && has("quirks") ? 0 : tp(iframe, cs.paddingLeft)) + (has("ie") && has("quirks") ? tp(iframe, cs.borderLeftWidth) : 0),
					top = (has("ie") && has("quirks") ? 0 : tp(iframe, cs.paddingTop)) + (has("ie") && has("quirks") ? tp(iframe, cs.borderTopWidth) : 0);

				coords.x += ifc.x + left - scroll.x;
				coords.y += ifc.y + top - scroll.y;
			}
		}else{
			coords = domGeometry.position(target, true);
			coords.x += 10;
			coords.y += 10;
		}

		var self=this;
		var prevFocusNode = this._focusManager.get("prevNode");
		var curFocusNode = this._focusManager.get("curNode");
		var savedFocusNode = !curFocusNode || (dom.isDescendant(curFocusNode, this.domNode)) ? prevFocusNode : curFocusNode;

		function closeAndRestoreFocus(){
			// user has clicked on a menu or popup
			if(self.refocus && savedFocusNode){
				savedFocusNode.focus();
			}
			pm.close(self);
		}
		pm.open({
			popup: this,
			x: coords.x,
			y: coords.y,
			onExecute: closeAndRestoreFocus,
			onCancel: closeAndRestoreFocus,
			orient: this.isLeftToRight() ? 'L' : 'R'
		});
		this.focus();

		this._onBlur = function(){
			this.inherited('_onBlur', arguments);
			// Usually the parent closes the child widget but if this is a context
			// menu then there is no parent
			pm.close(this);
			// don't try to restore focus; user has clicked another part of the screen
			// and set focus there
		};
	},

	uninitialize: function(){
 		array.forEach(this._bindings, function(b){ if(b){ this.unBindDomNode(b.node); } }, this);
 		this.inherited(arguments);
	}
});

});

},
'curam/util/TabNavigation':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/TabNavigation", ["curam/debug",
        "curam/define",
        "curam/util",
        "curam/tab",
        "curam/util/Refresh",
        "curam/util/ResourceBundle"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 18-Oct-2012  SK [CR00346419] Additional memory clean-up when closing a tab.
   * 10-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 31-Jul-2012  MV  [CR00336202] Migrate to take on Dojo 1.7.3
   * 07-Oct-2011  PK  [CR00289859] Dojo 1.6.1 upgrade and IE9+ support. 
   * 29-Jul-2011  MV  [CR00269970] Renaming class and event related to UI refresh.
   * 14-Feb-2011  MV  [CR00251754] Support re-displaying navigation tabs
   *    at a correct position.
   * 24-Jan-2011  JY  [CR00244068] Fix the border lines on the lists when flicking
   *                               between navigation tabs.
   * 08-Dec-2010  SC  [CR00232831] Updated to resolve issue with highlighting
   * 03-Dec-2010  MV  [CR00232963] Fix hiding and disabling of navigation items. 
   * 29-Nov-2010  MV  [CR00232623] Blank out child navigation buttons
   *    when switching tabs.
   * 23-Nov-2010  MV  [CR00232063] Rename tab navigation JavaScript to follow
   *   conventions. Only display child navs after the content has loaded.
   * 26-Aug-2010 MV  [CR00217499] Replace the use of escape() with the proper
   *      function to encode URL parameters. 
   * 19-Aug-2010  SJ [CR00213476] Removed the support that parses page parameter in URL  
   *                              from here and moved the same functionality to renderer.
   * 19-Jul-2010 AF  [CR00210899] Modified toggleChildMenu method so that it no
   *                              longer references dojo components.
   * 12-Jul-2010 MV  [CR00210064] Use CSS classes for styling navigation items.
   *                  Add further comments. Fix first level dynamic nav items.
   * 07-Jul-2010 MV  [CR00180694] Implement dynamic state update for navigation
   *                  items. Move JavaScript code from renderer to here.
   */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  /**
   * Manages the Navigation widget for the content area of the a Tab workspace.
   * 
   */
  curam.define.singleton("curam.util.TabNavigation", {
    CACHE_BUSTER: 0,
    CACHE_BUSTER_PARAM_NAME: "o3nocache",
    
    /**
     * Holds the ids of navigation items that should be disabled, i.e. not react
     * to the onclick events.
     */
    disabledItems: {},
    
    /**
     * Holds the list of navigation tabs for each object tab. To be used for
     * ordering of navigation tabs.
     */
    tabLists: {},
        
    /**
     * Initialize for a specific tab.
     */
    init: function(tabId, tabWidgetId) {
      // Subscribe to the select event on the Stack container.
      // Note, even though it is called child-nav-selectChild what has really happened is 
      // a parent menu item has been selected, which selects a child in the StackContainer.
      var childNav = tabId + "child-nav-selectChild";
      var parentSelectF = dojo.subscribe(childNav, "", function() {
        curam.util.TabNavigation.onParentSelect(null, tabId);
      });
      curam.tab.unsubscribeOnTabClose(parentSelectF, tabWidgetId);
    },
    
    /**
     * Re-act to a parent menu item being selected.
     * 
     * When a parent is selected find the related stack representing
     * the child menus and bring that one to the front. If it 
     * contains a set of child menus display it. Finally load
     * the page that is referenced from the child stack in the iframe.
     * 
     * @param parentMenuItem The object selected in the parent menu.
     *
     */
    onParentSelect: function(parentMenuItem, tabId) {
      // Get the child stack
      var childStackContainerId = tabId  + "-child-nav";   
      var childStackContainer = dijit.byId(childStackContainerId);
      var loadPage = true;

      // If no parent menu item was passed to this function then
      // just get the currently selected one.
      if (!parentMenuItem){
        var loadPage = false;
        var parentTabContainerId = tabId  + "-parent-nav";
        var parentTabContainer = dijit.byId(parentTabContainerId);
        parentMenuItem = parentTabContainer.selectedChildWidget;
      }

      // If the link was selected via a manual call to selectChild,
      // This attribute will be set and no call should be made to reload
      // the page - it has already been loaded by a content area link.
      if (parentMenuItem.curamDoNoReload) {
        loadPage = false;
        parentMenuItem.setAttribute("curamDoNoReload", null);
      }

      var childStackId = parentMenuItem.id + "-Stack";
      var childStack = dijit.byId(childStackId);
        
      // Get the related child stack
      var href = dojo.attr(childStack.get("srcNodeRef"), "page-ref");
      
      // If the parent menu item does not have a direct page link find its child 
      // item that is selected and use that. If none found throw an error.
      if (!href) {
        var selectedChild = childStack;

        if(selectedChild) {
          var link = dojo.query("li.selected > div.link", selectedChild.id)[0];
          href = dojo.attr(link, "page-ref");
          
        } else {
          throw new Error("Could not find a page reference. The menu item '" 
           + parentMenuItem.id 
           + "' has no page reference and no selected child item was found.");       
        }
      }
      
      if(loadPage) {
        var ifr = curam.util.TabNavigation.getIframe(tabId);
        
        //Get the dom node 'body' inside the iframe
        if(dojo.isIE && dojo.isIE < 9) {
          ifrBody = ifr.contentWindow.document.body;
        } else {
          ifrBody = ifr.contentDocument.activeElement;
        }

        // run the following after the page has loaded in the iframe
        var postIframeLoadHandler = function() {
          childStackContainer.selectChild(childStack);
          dojo.style(childStackContainer.domNode, "visibility", "visible");
          dojo.style(ifr, "visibility", "visible");
        };

        // now the onload event handling machinery, different for IE
        // and other browsers
        if (dojo.isIE && dojo.isIE < 9) {
          var lh = function() {
            if (ifr.readyState == "complete") {
              ifr.detachEvent('onreadystatechange', lh);
              postIframeLoadHandler();
            }
          };
          ifr.attachEvent('onreadystatechange', lh);
        
        } else {
          var dt = dojo.connect(ifr, "onload", null, function() {
            dojo.disconnect(dt);
            postIframeLoadHandler();
          });
        }
      
        // Load the target page in the iframe.
        
        //Hidden the borders in the lists by adding a specific CSS class
        dojo.query("div.list", ifrBody).forEach(function(node){
          dojo.addClass(node, "hidden");
        });
        
        dojo.style(ifr, "visibility", "hidden");
        dojo.style(childStackContainer.domNode, "visibility", "hidden");
        curam.util.TabNavigation.loadIframe(href, tabId);
      }
      
      // If there are no child menu items for the new page then hide the child menu.
      var open = curam.util.TabNavigation.childMenuExists(parentMenuItem);
      curam.util.TabNavigation.toggleChildMenu(open, tabId);
    },
    
    /**
     * Check if a child menu exists for the given parent menu item.
     *
     * @param parentMenuItem The object selected in the parent menu.
     *
     * @return True if the parent menu item has a child menu.
     */
    childMenuExists: function(parentMenuItem) {
      var stackId = parentMenuItem.id + "-Stack";
      var childMenus = dojo.query("#" + stackId + " ul");
      if(childMenus.length == 0) {
        return false;
      
      } else {
        return true;
      }
    },
    
    /**
     * Show or Hide the child menu panel.
     * 
     * Uses the "child-menu-width" attribute of the navigator widget to 
     * decide the width of the open panel.
     *
     * @param open A boolean value indicating whether the child menu panel
     * is to be displayed or hidden.
     */
    toggleChildMenu: function (open, tabId) {
      var navigationTabId = tabId + "-navigation-tab";
      var navigationTab = dojo.byId(navigationTabId);
      var contentPanel = dojo.query(".content-area-container", navigationTab)[0];
      var childNavPanel = dojo.query(".child-nav", navigationTab)[0]; 

      if(!open) {
        var closedWidth = "0px";
        var leftObj = { left: closedWidth };
        var widthObj = { width: closedWidth };
        dojo.style(contentPanel, leftObj);
        dojo.style(childNavPanel, widthObj);

      } else {
        var openWidth = dojo.attr(navigationTab, "child-menu-width");
        var leftObj = { left: openWidth };
        var widthObj = { width: openWidth };
        dojo.style(contentPanel, leftObj);
        dojo.style(childNavPanel, widthObj);
      }
    },
    
    /**
     * Handle selection of a child menu item.
     *
     * Given the selected item...
     * <ol>
     *  <li>load the referenced page in the iframe.</li>
     *  <li>clear the highlight on all child menu items.</li> 
     *  <li>highlight the selected child.</li>
     * </ol>
     * @param selectedItem the selected child item.
     */
    handleChildSelect: function (selectedItem, tabId, event) {
      if (!curam.util.TabNavigation.isSelectable(selectedItem.parentNode.id)) {
        dojo.stopEvent(dojo.fixEvent(event));
        return false;
      }
       
      var ul = curam.util.TabNavigation.getNext(selectedItem,"UL");
      
      var menuItems = ul.childNodes;
      
      // Reset all
      for(var i=0;i<menuItems.length;i++) {
        dojo.replaceClass(menuItems[i], "not-selected", "selected");
      }
      // Set selected
      dojo.replaceClass(selectedItem.parentNode, "selected", "not-selected");
      
      // Load the target
      var href = dojo.attr(selectedItem,"page-ref");
      curam.util.TabNavigation.loadIframe(href, tabId);
      
      return true;
    },
    
    isSelectable: function(tabId) {
      // Summary:
      //    Checks if the specified item should be processed as enabled.

      return !curam.util.TabNavigation.disabledItems[tabId];
    },
    
    getNext: function(startingNode, targetNodeName) {
       // Summary:
       //   Search UP from the given Node for the first instance of the target
       //   Node.
       //@param startingNode The Node from which the search will start.
       //@param targetNodeName The tag name of the node being sought.
       //@return The target Node.

      var parent = startingNode.parentNode;
      if(parent == null) {
        curam.debug.log(bundle.getProperty("curam.util.TabNavigation.error",
                                           [targetNodeName]));
        return null;
      }

      if (parent.nodeName===targetNodeName) {
        return parent;
      
      } else {
        var parent = curam.util.TabNavigation.getNext(parent, targetNodeName);
        return parent;
      }
    },
   
    /**
     * Load the Iframe with the target page.
     */
    loadIframe: function(href, tabId) {
      var iframe = curam.util.TabNavigation.getIframe(tabId);
      dojo.attr(iframe, "src", href + "&" + this.getCacheBusterParameter());
    },
    
    /**
     * Return the Iframe for the navigator.
     */
    getIframe: function(tabId) {
      var navigationTabId = tabId + "-navigation-tab";
      var navigationTab = dojo.byId(navigationTabId);
      var iframes = dojo.query('iframe', navigationTab);
      return iframes[0];
    },
   
    getCacheBusterParameter: function() {
      return this.CACHE_BUSTER_PARAM_NAME + "=" 
          + new Date().getTime() + "_" 
          + this.CACHE_BUSTER++;
    },
   
    /**
     * 
     * Summary:
     * The listener calls the handler function when the page is loaded.
     * The listener is attached to the ContentPane widget. This has the
     * advantage that the listener is destroyed with the ContentPane.
     * (i.e. when the tab is closed.)
     * A second listener re-acts to selection of a tab.
     * 
     * @param dojoTabID The dojo tab ID
     * @param channel The navigation tab channel
     * @param invisible The list of tab IDs that should be hidden by default
     */
    setupOnParentSelect: function(dojoTabID, channel, hiddenTabs) {

      var widgetNode = dojo.byId(dojoTabID + "-navigation-tab");
      var contentPane = curam.tab.getContainerTab(widgetNode);
      contentPane.subscribe(dojoTabID + "-child-nav-startup", function() {
        curam.util.TabNavigation.onParentSelect(null, dojoTabID);
        
        // For the listed tabs, ensure they are hidden by default
        var tabs = hiddenTabs.split(',');
        for (tabID in tabs) {
          var widget = 
            curam.util.TabNavigation.findNavItem("navItem_" 
                + this.id + "_" + tabs[tabID]);
          if (widget != null) {
            // Only if the widget exist, set to false to hide
            widget.set("curamVisible", false);
          }
        }                
      });
      
      contentPane.subscribe(channel, function(selected) {
        curam.util.TabNavigation.onParentSelect(selected, dojoTabID);
      });
    },

    setupRefresh: function(tabWidgetId) {
      // Summary:
      //    Setup the data and handlers necessary for dynamically updating
      //    the tab navigation.

      curam.util.Refresh.setNavigationCallbacks(
          curam.util.TabNavigation.updateNavItemStates,
          curam.util.TabNavigation.getRefreshParams);
      
      var registerTabOpenHandler = function() {
        var refreshHandler = function(pageId, tabWidgetId) {
          return curam.util.Refresh.refreshMenuAndNavigation(
              tabWidgetId, true, true, true);
        };
        var handlerForTab = curam.tab.getHandlerForTab(
            refreshHandler, tabWidgetId);
        var topmostWin = curam.util.getTopmostWindow();
        var unsubscribeNavRefresh = topmostWin.dojo.subscribe("curam.tabOpened",
            null,
            function(pageId, actualWidgetId) {
              handlerForTab(pageId ,actualWidgetId);
              topmostWin.dojo.unsubscribe(unsubscribeNavRefresh);
            });
      };
      var navData = curam.util.TabNavigation.dynamicNavigationData[tabWidgetId];
      navData.registerTabOpenHandler = registerTabOpenHandler;
      navData.registerTabOpenHandler();
    },
   
    getRefreshParams: function(tabWidgetId) {
      // Summary:
      //    Returns URL parameters for getting updated state of navigation items.

      curam.debug.log("curam.util.TabNavigation.getRefreshParams(%s)", tabWidgetId);

      var navData = curam.util.TabNavigation.dynamicNavigationData[tabWidgetId];
      if (!navData) {
        curam.debug
          .log(bundle.getProperty("curam.util.TabNavigation.no.dynamic"));
        return null;
      }

      // create the parameters required by the loaders code on the server side
      var params = "navId=" + navData.navigationId;
      params += "&navItemIds="
          + curam.util.toCommaSeparatedList(navData.dynamicNavItemIds);

      params += "&navLoaders="
          + curam.util.toCommaSeparatedList(navData.dynamicNavLoaders);

      params += "&navPageParameters=" + navData.pageParameters;
      
       return params;
    },
    
    updateNavItemStates: function(tabWidetId, data) {
      // Summary:
      //    Loops through the nav items in the result structure and updates
      //    the corresponding widgets.

      var result = data.navData;
      for (var i = 0; i < result.itemStates.length; i++) {
        curam.util.TabNavigation.updateNavItemState(result.itemStates[i], tabWidetId);
      }
    },

    /**
     * Updates the state (visibility and availability) of the specified
     * navigation item for the specified tab.
     */
    updateNavItemState: function(navItem, tabWidgetId) {

      var widget = curam.util.TabNavigation.findNavItem(
          "navItem_" + tabWidgetId + "_" + navItem.id);

      if (widget != null) {
        // handle side buttons (second level navigation)
        if (!widget.domNode) {
          // set the item as enabled/disabled for later use in the onclick handler
          curam.util.TabNavigation.disabledItems[widget.id] = !navItem.enabled;
          
          // set the appropriate visual styling for disabled items
          curam.util.swapState(widget, navItem.enabled, "enabled", "disabled");
          
          // show/hide items
          curam.util.swapState(widget, navItem.visible, "visible", "hidden");
          
        // handle Dojo tabs (first level navigation)
        } else {
          // set the item as enabled/disabled
          widget.set("curamDisabled", !navItem.enabled);
          widget.set("curamVisible",  navItem.visible);
        }
      }
    },
    
    findNavItem: function(className) {
      // Summary:
      //    Finds a navigation item by ID.
      // Distinguishes between navigation tabs and side buttons and returns
      // the appropriate one for the given ID.

      var nodes = dojo.query("." + className);
      if (nodes.length == 1) {
        var node = nodes[0];
        var widget = dijit.byNode(node);
        
        if (!widget) {
          // it is a side button
          return node;
        
        } else {
          // it is a Dijit tab, return its control button
          return widget.controlButton;
        }
      
      } else {
        curam.debug.log(bundle
          .getProperty("curam.util.TabNavigation.item", [className]));
        return null;
      }
    },
    
    addRollOverClass: function (event) {
      // Summary:
      //   Adds hover class name to page group navigation items. This
      //   class name is then removed when the mouse moves off the item.
      dojo.addClass(event.target,"hover");
      curam.util.connect(event.target, "onmouseout", function(){
        dojo.removeClass(event.target,"hover");
      });
    },
    
    /**
     * Setup a listener for the page loaded event which can ensure
     * the correct tab is selected. This is called from the NavigationTabRenderer.
     */
    setupOnLoadListener: function(tabWidgetId, jsonPageToIdMap) {

      var pageToIdMap = dojo.fromJson(jsonPageToIdMap);
      var functionNavMap = function(pageId, tabWidgetId) {
        curam.util.TabNavigation.handleContentAreaUpdate(
          pageId, tabWidgetId, pageToIdMap);
      };
      var handler = curam.tab.getHandlerForTab(functionNavMap, tabWidgetId);
      var topWin = curam.util.getTopmostWindow();
      var unsubToken =
        topWin.dojo.subscribe("/curam/main-content/page/loaded", null, handler);
      curam.tab.unsubscribeOnTabClose(unsubToken, tabWidgetId);
    },
    
    /**
     * Sets up a tab list to be used for correct reordering of tabs when
     * they are hidden/redisplayed.
     * 
     * @param tabWidgetId
     *    The tab id for which the data is setup.
     * @param tabList
     *    An array of tab IDs in the right order. 
     */
    setupTabList: function(tabWidgetId, tabList) {
      if (!curam.util.TabNavigation.tabLists[tabWidgetId]) {
        curam.tab.executeOnTabClose(function() {
          delete curam.util.TabNavigation.tabLists[tabWidgetId];
        }, tabWidgetId);
      }
      delete curam.util.TabNavigation.tabLists[tabWidgetId];
      curam.util.TabNavigation.tabLists[tabWidgetId] = tabList;
    },
    
    /**
     * Correctly highlight the selected tab, as per the page loaded.
     * 
     * @param pageId The id of the page loaded in the content area.
     * @param tabWidgetId The id of the tab the content area is part of.
     */
    handleContentAreaUpdate: function(pageId, tabWidgetId, jsonPageToIdMap) {
      // Get the IDs of the relevant elements associated with the page id
      // If not found, the page is not associated with anything in the
      // tab and nothing is done
      var ids = jsonPageToIdMap[pageId];
      if (ids) {
        var dojoTabId = ids["dojoTabId"];
        var parentNavId = dojoTabId + "-parent-nav";
        var tabId = ids["tabId"];
        var childId = ids["childId"];

        // Get the widgets using the IDs
        var tabWidget = dijit.byId(tabId);
        var navTabContainer = dijit.byId(parentNavId);
        if (tabWidget) {
          if (navTabContainer.selectedChildWidget != tabWidget) {
            // Only set selected child if not already
            // curamDoNoReload indicates that the content area page should not be 
            // updated. See TabNavigation.onParentSelect for usage.
            tabWidget.setAttribute("curamDoNoReload", true);
            navTabContainer.selectChild(tabWidget);
          }

          // If there is a child Id defined, ensure it is selected and buttons
          // are displayed
          if (childId) {
            // Ensure the child menus are displayed
            var childStackId = tabId + "-Stack";
            var childStackContainerId = dojoTabId  + "-child-nav";   
            var childStackContainer = dijit.byId(childStackContainerId);
            var childStack = dijit.byId(childStackId);
            childStackContainer.selectChild(childStack);

            // Original query was not working consistently.
            // var childWidget = dojo.query('li#' + childId, childStack.domNode)[0];
            var liElements = dojo.query('li', childStack.domNode);
            for (var i = 0; i < liElements.length; i++) {
              var liElement = liElements[i];
              if (liElement.id == childId) {
                var childWidget = liElement;
              }
            }
            if (childWidget) {
              if (!dojo.hasClass(childWidget, "selected")) {
                // Reset current selected button
                var menuItems = childWidget.parentNode.childNodes;
                // Reset all to not selected
                for(var i=0; i < menuItems.length; i++) {
                  dojo.replaceClass(menuItems[i], "not-selected", "selected");
                }
                // Set current one to selected
                dojo.replaceClass(childWidget, "selected", "not-selected");
              }
            }
          }
        }
      }
    },
    
    /**
     * Works out the position at which a tab control button should be inserted
     * when it is being redisplayed.
     * 
     * @param tabWidgetId
     *    Id of the parent Object tab.
     * @param actualNavTabIds
     *    List of ids of the currently visible navigation tabs.
     * @param navTabId
     *    Id of the navigation tab the position is needed for.
     */
    getInsertIndex: function(tabWidgetId, actualNavTabIds, navTabId) {
      var tabList = curam.util.TabNavigation.tabLists[tabWidgetId];
      var initialIndex = dojo.indexOf(tabList, navTabId);
      var actualIndex = initialIndex;
      for (var i = initialIndex - 1; i >= 0; i--) {
        if (dojo.indexOf(actualNavTabIds, tabList[i]) < 0) {
          actualIndex--;
        }
      }
      return actualIndex;
    }
  });
  
  return curam.util.TabNavigation;
});

},
'curam/pagination/ControlPanel':function(){
/*
 * Modification History
 * --------------------
 * 08-Aug-2013  AW [CR00394139] Added date and time object to make unique identifier
 *                              for paginated list labels
 * 07-Jun-2013 NLH [CR00385557] Replace contrast images for Pagination item 
 *                      when high contrast mode is turned on.
 * 09-Oct-2012 BOS [CR00346368] Localized debug messages to console.
 * 02-May-2012 MK [CR00323691] Use new Dojo AMD format.
 * 04-Apr-2012 MK [CR00316488] Replaced call to dojo.connect and 
 *     dojo.disconnect to use the curam.util.connect and curam.util.disconnect.
 * 26-Sep-2011 NLH [CR00282407] Generate IMG tag for arrows which can be 
 *      accessed by user.
 * 09-Jun-2011 MV [CR00269409] Stop event in click handlers to avoid side
 *     effects.
 * 21-Jan-2011 DG [CR00243540] Changed "console.log" to "curam.debug.log".
 * 13-Dec-2010 MV [CR00237821] Miscellaneous bug fixes.
 * 29-Apr-2010 MV [CR00195109] Initialize variables properly per instance.
 * 13-Apr-2010 MV [CR00192550] Moved styling to a *.css file, externalized
 *                              localizable strings, added page size dropdown.
 * 10-Apr-2010 OK [CR00193314] Alterations to createLinkControl and createDropdownControl
 *                                                              functions to allow for a class name and title to be passed
 * 18-Mar-2010 MV [CR00136536] Initial version.
 */

/**
 * @name curam.pagination.ControlPanel
 * 
 * @namespace ControlPanel generates a GUI control panel for list pagination.
 */
define("curam/pagination/ControlPanel", ["curam/pagination", 
        "curam/debug", 
        "curam/util"
        ], function() {

var ControlPanel = dojo.declare("curam.pagination.ControlPanel", null, 
/**
 * @lends uram.pagination.ControlPanel
 */    
{
  /** Control identifier constants. */
  first: "FIRST",
  last: "LAST",
  previous: "PREV",
  next: "NEXT",
  page: "GOTO_PAGE",
  pageSize: "PAGE_SIZE",
  rowInfo: "ROW_INFO",
  classFirst: "first",
  classLast: "last",
  classPrevious: "previous",
  classNext:"next",
  classPage:"page",
  classDisplayInfo:"display_info",
  

  /** The actual DOM nodes of the controls. Using object as an associative
   *  array, controls identified by the above identifiers.
   */
  _controls: undefined,
  
  currentPage: 0,
  
  lastPage: 9999,
  
  currentPageSize: 0,
  
  directLinkRangeWidth: 3,
  
  parentNode: undefined,
  
  handlers: undefined,
  
  directLinksDisconnects: undefined,

  constructor: function(parentNode) {
    this._controls = {};
    this.handlers = {};
    this.directLinksDisconnects = [];

    var loc = this._localize;
    
    // we need to create the HTML representation here so that after this function
    // finishes, the GUI can respond to state updates
    var ul = dojo.create("ul", null, parentNode);
    dojo.addClass(ul, "pagination-control-list");
    
    this._controls[this.pageSize] =
        this._createDropdownControl(this.pageSize, loc("pageSize_title"), ul);
    this._controls[this.rowInfo] =
        this._createDisplayControl(this.rowInfo, loc("pagination_info",
            ["$dummy$", "$dummy$", "$dummy$"]), ul,null,null);
    
    this._controls[this.first] = this._createLinkControl(this.first,
                loc("firstPage_btn"), ul, null, this.classFirst,loc("firstPage_title"));
    this._controls[this.previous] = this._createLinkControl(
        this.previous, loc("prevPage_btn"), ul, null, this.classPrevious,loc("prevPage_title"));

    this._controls[this.page] = [];
    this._controls[this.page].push(this._createLinkControl(this.page,
        "direct-page-links-section", ul, null, this.classPage,loc("page_title")));

    this._controls[this.next] = this._createLinkControl(this.next,
                loc("nextPage_btn"), ul, null, this.classNext,loc("nextPage_title"));
    this._controls[this.last] = this._createLinkControl(this.last,
                loc("lastPage_btn"), ul, null, this.classLast,loc("lastPage_title"));
    
    this.parentNode = parentNode;
    
    // display the control panel
    dojo.style(parentNode, { "display":"" });
  },
  
  /**
   * Retrieves localized string for the given msgId and replaces any %s with
   * a corresponding value from the values array.
   */ 
  _localize: function(msgId, values) {
    var result = curam.pagination.localizedStrings[msgId];
    if (!values) {
      return result;
    }
    for (var i = 0; i < values.length; i++) {
      result = result.replace(/%s/i, values[i]);
    }
    return result;
  },
  
  _createLinkControl: function(identifier, text, refNode, position, cssName, title) {
    var cls = cssName != null ? cssName : "";
    var li = dojo.create("li", {
      "id": identifier,
      "class": cls
    }, refNode, position);
    dojo.addClass(li, "pagination-control-list-item enabled");
    
    var a = dojo.create("a", { "innerHTML": text, "href":"#", "title": title}, li);
    
    dojo.addClass(a, "pagination-link");
    
    // Generate a IMG element instead of a P element.This is done for accessibility reason.
    if (identifier == this.first || 
          identifier == this.last || 
          identifier == this.previous ||
          identifier == this.next ) {
      if(curam.util.highContrastModeType()){
        var imageName = "../CDEJ/themes/v6/images/high-contrast/" + identifier +"-contrast" + ".png";
        dojo.create("img", { "src": imageName, 
                                 "alt": title }, a);
      }else{
        
        var imageName = "../CDEJ/themes/v6/images/" + identifier + ".png";
        dojo.create("img", { "src": imageName, 
                                 "alt": title }, a);
      }
      } else {
        var text = dojo.create("p", {"innerHTML": text}, li);
        dojo.addClass(text, "pagination-text");
      }

    return li;
  },

  _createDropdownControl: function(identifier, text, refNode, position) {
    var li = dojo.create("li", { "id": identifier }, refNode, position);
    dojo.addClass(li, "pagination-control-list-item");
    
    //Adding a date and time object that takes in the current date and time to make a unique id
    var selectIdentifier="page-size-select" + new Date().getTime();
    var label = dojo.create("label", { "innerHTML":text + ": ",
                                       "for":selectIdentifier}, li);
    dojo.addClass(label, "pagination-page-size-dropdown-label");
    var select = dojo.create("select", { "title":text,
                                       "id":selectIdentifier}, li);

    li._type = "dropdown";
    
    return li;
  },
  
  _createDisplayControl: function(identifier, text, refNode, position, cssName) {
    var cls = cssName != null ? cssName : "";
    var li = dojo.create("li", {
      "id": identifier,
      "class":cls
    }, refNode, position);
    dojo.addClass(li, "pagination-control-list-item");


    var text = dojo.create("p", { "innerHTML": "[" + text + "]" }, li);
    
    return li;
  },

  /*
   * state.pageSizeOptions :: Array of page size options to show
   * state.currentPageSize :: Number
   * state.first :: Boolean
   * state.previous :: Boolean
   * state.next :: Boolean
   * state.last :: Boolean
   * state.currentPage :: Number
   * state.lastPage :: Number
   * state.rowInfo :: Array (triple of Numbers) -> [rowFrom, rowTo, totalRows]
   * state.directLinkRangeWidth :: Number signifying the number of links to show
   *                                           on each side of the current page.
   */
  updateState: function(state) {
    curam.debug.log("curam.pagination.ControlPanel.updateState: ", state);
    if (typeof(state.first) != "undefined") {
      this._setEnabled(this._controls[this.first], state.first);
    }
    if (typeof(state.previous) != "undefined") {
      this._setEnabled(this._controls[this.previous], state.previous);
    }
    if (typeof(state.next) != "undefined") {
      this._setEnabled(this._controls[this.next], state.next);
    }
    if (typeof(state.last) != "undefined") {
      this._setEnabled(this._controls[this.last], state.last);
    }
    if (typeof(state.currentPage) != "undefined") {
      this.currentPage = state.currentPage;
    }
    if (typeof(state.lastPage) != "undefined") {
      this.lastPage = state.lastPage;
    }
    if (typeof(state.currentPageSize) != "undefined") {
      this.currentPageSize = state.currentPageSize;
    }
    if (typeof(state.directLinkRangeWidth) != "undefined") {
      this.directLinkRangeWidth = state.directLinkRangeWidth;
    }
    if (typeof(state.rowInfo) != "undefined") {
      var refNode = this._controls[this.rowInfo].previousSibling;
      dojo.destroy(this._controls[this.rowInfo]);
      var start = state.rowInfo[0];
      var end = state.rowInfo[1];
      var numRows = state.rowInfo[2];
      var infoText = this._localize("pagination_info", [start, end, numRows])
      this._controls[this.rowInfo] = this._createDisplayControl(this.rowInfo,
          infoText, refNode, "after",this.classDisplayInfo);
    }
    if (typeof(state.pageSizeOptions) != "undefined") {
      var select = dojo.query("select", this._controls[this.pageSize])[0];
      // remove all options
      dojo.forEach(select.childNodes, function(item) {
        dojo.destroy(item);
      });
      // add new ones based on new state
      for (var i = 0; i < state.pageSizeOptions.length; i++) {
        var optionValue = state.pageSizeOptions[i];
        var option = dojo.create("option",
            { "value":optionValue, "innerHTML":optionValue }, select);
        if (optionValue == this.currentPageSize) {
          dojo.attr(option, "selected", "selected");
        }
      }
    }
    this._updateDirectLinks();
    
    // Force Redraw of content area, due to no scroll bars appearing in IE
    var contentNode = dijit.byId("content");
    if (contentNode) {
      contentNode.resize();
    }
  },

  /**
   * handlers.first = this.gotoFirst;
   * handlers.last = this.gotoLast;
   * handlers.previous = this.gotoPrevious;
   * handlers.next = this.gotoNext;
   * handlers.page = this.gotoPage;
   * handlers.pageSize = this.changePageSize;
   */
  setHandlers: function(handlers) {
    curam.debug.log("curam.pagination.ControlPanel.setHandlers: ", handlers);
    // save them for later use
    this.handlers = handlers;
    
    if (handlers.first) {
      this._connectSimpleHandler(this._controls[this.first], handlers.first);
    }
    if (handlers.previous) {
      this._connectSimpleHandler(this._controls[this.previous], handlers.previous);
    }
    if (handlers.next) {
      this._connectSimpleHandler(this._controls[this.next], handlers.next);
    }
    if (handlers.last) {
      this._connectSimpleHandler(this._controls[this.last], handlers.last);
    }
    if (handlers.page) {
      this._connectDirectLinkHandlers(handlers.page);
    }
    if (handlers.pageSize) {
      var select = dojo.query("select", this._controls[this.pageSize])[0];
      dojo.connect(select, "onchange",
          dojo.hitch(this, function(event) {
            var newPageSize = event.target.value
            this.currentPageSize = newPageSize;
            handlers.pageSize(this.currentPageSize);
            var options = dojo.query("option", select);
            options.forEach(function(option) {
              if (dojo.attr(option, "value") == newPageSize) {
                dojo.attr(option, "selected", "selected");
              } else {
                dojo.removeAttr(option, "selected");
              }
            });
          }));
    }
  },
  
  _connectSimpleHandler: function(control, handler) {
    var h = handler ? handler : control._handler;
    this._removeSimpleHandler(control);
    var disconnect = curam.util.connect(control, "onclick", function(event) {
      dojo.stopEvent(event);
      h();
    });
    control._handler = h;
    control._disconnect = disconnect;
  },
  
  _removeSimpleHandler: function(control) {
    if (control._disconnect) {
      curam.util.disconnect(control._disconnect);
    }
  },

  reset: function() {
    curam.debug.log("curam.pagination.ControlPanel.reset");
  },

  _getDirectLinkPageNumbers: function() {
    // We will show this.directLinkRangeWidth direct links on each side
    // of the current page.
    var numLinks = 2 * this.directLinkRangeWidth + 1; // +1 for the current page number in the middle
    var p = this.currentPage;
    var numbers = [];
    
    var num = p > this.directLinkRangeWidth ? p - this.directLinkRangeWidth : 1;
    for (var i = 0; i < numLinks; i++) {
      numbers[i] = num++;
      if (num > this.lastPage) {
        // break early if the last page was reached
        break;
      }
    }

    return numbers;
  },
  
  _updateDirectLinks: function() {
    curam.debug.log("curam.pagination.ControlPanel._updateDirectLinks");
    var loc = this._localize;
    var directLinks = this._controls[this.page];
    dojo.query("div.pagination-direct-links-dots").forEach(dojo.destroy);
    var referenceNode = directLinks[0].previousSibling;
    dojo.style(this.parentNode, "display", "none");
    // remove all the links
    for (var i = 0; i < directLinks.length; i++) {
      if (directLinks._dots) {
        dojo.destroy(directLinks._dots);
      }
      dojo.destroy(directLinks[i]);
      directLinks[i] = undefined;
    }
      
    this._controls[this.page] = [];
    directLinks = this._controls[this.page];
    var pageNums = this._getDirectLinkPageNumbers();
    for (var i = 0; i < pageNums.length; i++) {
      var pageNum = pageNums[i];
      directLinks[i] = this._createLinkControl(
          this.page + "(" + pageNum + ")", pageNum, referenceNode, "after", null, loc("page_title") + " " + pageNum);
      dojo.addClass(directLinks[i], "pagination-direct-link");
      if (pageNum == this.currentPage) {
        dojo.addClass(directLinks[i], "selected");
      }
      referenceNode = directLinks[i];
      // set this for later use by the handler function
      directLinks[i]._pageNum = pageNum;
    }
    
    var firstDirectLink = directLinks[0];
    dojo.addClass(firstDirectLink, "firstDirectLink");
    if (pageNums[0] > 1) {
      dojo.addClass(firstDirectLink, "has-previous");
      var dots = dojo.create("div", { innerHTML:"..." }, firstDirectLink, "before");
      dojo.addClass(dots, "pagination-direct-links-dots");
    }
    var lastDirectLink = directLinks[directLinks.length - 1];
    dojo.addClass(lastDirectLink, "lastDirectLink");
    if (pageNums[pageNums.length - 1] < this.lastPage) {
      dojo.addClass(lastDirectLink, "has-next");
      var dots = dojo.create("div", { innerHTML:"..." }, lastDirectLink, "after");
      dojo.addClass(dots, "pagination-direct-links-dots");
    }
    
    if (this.handlers.page) {
      this._connectDirectLinkHandlers(this.handlers.page);
    }
    
    dojo.style(this.parentNode, "display", "");
  },
  
  _connectDirectLinkHandlers: function(handler) {
    dojo.forEach(this.directLinksDisconnects, dojo.disconnect);
    this.directLinksDisconnects = [];
    
    var directPageLinks = this._controls[this.page];
    for (var i = 0; i < directPageLinks.length; i++) {
      var dLink = directPageLinks[i];
      // the following code is a trick to allow access to the page number
      // after the loop has finished
      var h = function(event) {
        dojo.stopEvent(event);

        // this._pageNum accesses the page number set by the code after this
        // function is created below
        handler(this._pageNum);
      };
      // now set the page number to be accessed from within the function
      h._pageNum = dLink._pageNum;
      this.directLinksDisconnects.push(dojo.connect(dLink, "onclick", h));
    }
  },
  
  _setEnabled: function(control, enabled) {
    if (enabled) {
      this._connectSimpleHandler(control);
      dojo.replaceClass(control, "enabled", "disabled");
    
    } else {
      this._removeSimpleHandler(control);
      dojo.replaceClass(control, "disabled", "enabled");
    }
  }

});

return ControlPanel;
});

},
'url:dijit/templates/Tooltip.html':"<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" data-dojo-attach-point=\"containerNode\" role='alert'></div\n\t><div class=\"dijitTooltipConnector\" data-dojo-attach-point=\"connectorNode\"></div\n></div>\n",
'dijit/form/MappedTextBox':function(){
define("dijit/form/MappedTextBox", [
	"dojo/_base/declare", // declare
	"dojo/dom-construct", // domConstruct.place
	"./ValidationTextBox"
], function(declare, domConstruct, ValidationTextBox){

/*=====
	var ValidationTextBox = dijit.form.ValidationTextBox;
=====*/

	// module:
	//		dijit/form/MappedTextBox
	// summary:
	//		A dijit.form.ValidationTextBox subclass which provides a base class for widgets that have
	//		a visible formatted display value, and a serializable
	//		value in a hidden input field which is actually sent to the server.

	return declare("dijit.form.MappedTextBox", ValidationTextBox, {
		// summary:
		//		A dijit.form.ValidationTextBox subclass which provides a base class for widgets that have
		//		a visible formatted display value, and a serializable
		//		value in a hidden input field which is actually sent to the server.
		// description:
		//		The visible display may
		//		be locale-dependent and interactive.  The value sent to the server is stored in a hidden
		//		input field which uses the `name` attribute declared by the original widget.  That value sent
		//		to the server is defined by the dijit.form.MappedTextBox.serialize method and is typically
		//		locale-neutral.
		// tags:
		//		protected

		postMixInProperties: function(){
			this.inherited(arguments);

			// we want the name attribute to go to the hidden <input>, not the displayed <input>,
			// so override _FormWidget.postMixInProperties() setting of nameAttrSetting
			this.nameAttrSetting = "";
		},

		// Override default behavior to assign name to focusNode
		_setNameAttr: null,

		serialize: function(val /*=====, options =====*/){
			// summary:
			//		Overridable function used to convert the get('value') result to a canonical
			//		(non-localized) string.  For example, will print dates in ISO format, and
			//		numbers the same way as they are represented in javascript.
			// val: anything
			// options: Object?
			// tags:
			//		protected extension
			return val.toString ? val.toString() : ""; // String
		},

		toString: function(){
			// summary:
			//		Returns widget as a printable string using the widget's value
			// tags:
			//		protected
			var val = this.filter(this.get('value')); // call filter in case value is nonstring and filter has been customized
			return val != null ? (typeof val == "string" ? val : this.serialize(val, this.constraints)) : ""; // String
		},

		validate: function(){
			// Overrides `dijit.form.TextBox.validate`
			this.valueNode.value = this.toString();
			return this.inherited(arguments);
		},

		buildRendering: function(){
			// Overrides `dijit._TemplatedMixin.buildRendering`

			this.inherited(arguments);

			// Create a hidden <input> node with the serialized value used for submit
			// (as opposed to the displayed value).
			// Passing in name as markup rather than calling domConstruct.create() with an attrs argument
			// to make query(input[name=...]) work on IE. (see #8660)
			this.valueNode = domConstruct.place("<input type='hidden'" + (this.name ? " name='" + this.name.replace(/'/g, "&quot;") + "'" : "") + "/>", this.textbox, "after");
		},

		reset: function(){
			// Overrides `dijit.form.ValidationTextBox.reset` to
			// reset the hidden textbox value to ''
			this.valueNode.value = '';
			this.inherited(arguments);
		}
	});
});

},
'url:dijit/form/templates/Select.html':"<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tdata-dojo-attach-point=\"_buttonNode,tableNode,focusNode\" cellspacing='0' cellpadding='0'\n\trole=\"combobox\" aria-haspopup=\"true\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents dijitButtonNode\" role=\"presentation\"\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"  data-dojo-attach-point=\"containerNode,_popupStateNode\"></span\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} data-dojo-attach-point=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\n\t\t/></td><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton\"\n\t\t\t\tdata-dojo-attach-point=\"titleNode\" role=\"presentation\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t></tr></tbody\n></table>\n",
'dojox/layout/ContentPane':function(){
define("dojox/layout/ContentPane", [
	"dojo/_base/lang",
	"dojo/_base/xhr",
	"dijit/layout/ContentPane",
	"dojox/html/_base",
	"dojo/_base/declare"
], function (lang, xhrUtil, ContentPane, htmlUtil, declare) {

/*===== var ContentPane = dijit.layout.ContentPane =====*/
return declare("dojox.layout.ContentPane", ContentPane, {
	// summary:
	//		An extended version of dijit.layout.ContentPane.
	//		Supports infile scripts and external ones declared by <script src=''
	//		relative path adjustments (content fetched from a different folder)
	//		<style> and <link rel='stylesheet' href='..'> tags,
	//		css paths inside cssText is adjusted (if you set adjustPaths = true)
	//
	//		NOTE that dojo.require in script in the fetched file isn't recommended
	//		Many widgets need to be required at page load to work properly

	// adjustPaths: Boolean
	//		Adjust relative paths in html string content to point to this page.
	//		Only useful if you grab content from a another folder then the current one
	adjustPaths: false,

	// cleanContent: Boolean
	//	summary:
	//		cleans content to make it less likely to generate DOM/JS errors.
	//	description:
	//		useful if you send ContentPane a complete page, instead of a html fragment
	//		scans for
	//
	//			* title Node, remove
	//			* DOCTYPE tag, remove
	cleanContent: false,

	// renderStyles: Boolean
	//		trigger/load styles in the content
	renderStyles: false,

	// executeScripts: Boolean
	//		Execute (eval) scripts that is found in the content
	executeScripts: true,

	// scriptHasHooks: Boolean
	//		replace keyword '_container_' in scripts with 'dijit.byId(this.id)'
	// NOTE this name might change in the near future
	scriptHasHooks: false,

	constructor: function(){
		// init per instance properties, initializer doesn't work here because how things is hooked up in dijit._Widget
		this.ioArgs = {};
		this.ioMethod = xhrUtil.get;
	},

	onExecError: function(e){
		// summary:
		//		event callback, called on script error or on java handler error
		//		overide and return your own html string if you want a some text
		//		displayed within the ContentPane
	},

	_setContent: function(cont){
		// override dijit.layout.ContentPane._setContent, to enable path adjustments
		
		var setter = this._contentSetter;
		if(! (setter && setter instanceof htmlUtil._ContentSetter)) {
			setter = this._contentSetter = new htmlUtil._ContentSetter({
				node: this.containerNode,
				_onError: lang.hitch(this, this._onError),
				onContentError: lang.hitch(this, function(e){
					// fires if a domfault occurs when we are appending this.errorMessage
					// like for instance if domNode is a UL and we try append a DIV
					var errMess = this.onContentError(e);
					try{
						this.containerNode.innerHTML = errMess;
					}catch(e){
						console.error('Fatal '+this.id+' could not change content due to '+e.message, e);
					}
				})/*,
				_onError */
			});
		};

		// stash the params for the contentSetter to allow inheritance to work for _setContent
		this._contentSetterParams = {
			adjustPaths: Boolean(this.adjustPaths && (this.href||this.referencePath)),
			referencePath: this.href || this.referencePath,
			renderStyles: this.renderStyles,
			executeScripts: this.executeScripts,
			scriptHasHooks: this.scriptHasHooks,
			scriptHookReplacement: "dijit.byId('"+this.id+"')"
		};

		this.inherited("_setContent", arguments);
	}
	// could put back _renderStyles by wrapping/aliasing dojox.html._ContentSetter.prototype._renderStyles
});
});
},
'curam/date/locale':function(){
/* Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2014. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * --------------------
   * 10-Jan-2014 SK  [CR00411875] Month names override implemented.
   * 08-Jan-2014 MV  [CR00411875] Initial version.
   */

define("curam/date/locale", ['curam/define',
        'dojo/_base/lang',
        'dojo/date/locale'
        ], function(define, lang, dojoDateLib) {
  var origGetGregorianBundle = dojoDateLib._getGregorianBundle;
  function getCuramGregorianBundle(/*String*/ locale) {
    var origBundle = origGetGregorianBundle(locale);
    // override values
    if(LOCALIZED_MONTH_NAMES){
      origBundle["months-format-abbr"]=LOCALIZED_SHORT_MONTH_NAMES;
      origBundle["months-format-wide"]=LOCALIZED_MONTH_NAMES;
    }
    return origBundle;
  };
  
  define.singleton("curam.date.locale", {});
  // creating our own version of dojo/date/locale
  lang.mixin(curam.date.locale, dojoDateLib);
  
  curam.date.locale.format = function(/*Date*/ dateObject,
      /*__FormatOptions?*/ options) {
    dojoDateLib._getGregorianBundle = getCuramGregorianBundle;
    var result = dojoDateLib.format(dateObject, options);
    dojoDateLib._getGregorianBundle = origGetGregorianBundle;
    return result;
  };
  
  curam.date.locale.parse = function(/*String*/ value,
      /*__FormatOptions?*/ options) {
    dojoDateLib._getGregorianBundle = getCuramGregorianBundle;
    var result = dojoDateLib.parse(value, options);
    dojoDateLib._getGregorianBundle = origGetGregorianBundle;
    return result;
  };

  return curam.date.locale;
});

},
'curam/util/WordFileEdit':function(){
/*
 * Copyright 2009-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/WordFileEdit", ["curam/define",
        "dijit/DialogUnderlay",
        "curam/util/ResourceBundle"
        ], function() {

/*
 * Modification History
 * --------------------
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 12-Apr-2013  MV [CR00381021] Extend IE version detection to v10 and beyond
 *      for allowed URL handling.
 * 20-Feb-2013  MV [CR00367709] Extend IE version detection to v9 for allowed
 *      URL handling.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 15-Dec-2011  MV [CR00299726] Skip the plugin detection for Chrome.
 * 12-Jul-2011  MV [CR00269970] Add extra tracing to applet initialization.
 * 15-Dec-2010  MV [CR00238518] Add support for IE8, fix the way elements were
 *    being searched for in the document.
 * 26-Oct-2010  MV [CR00223441] JavaScript refactoring.
 * 06-Sep-2010  MV [CR00219321] Fixed problems with returning to the application
 *    after Word closes. Added overlay to stop user from clicking the parent
 *    window while Word is open. Renamed and moved to follow
 *    the JS code standards.
 */

/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");

/**
 * @namespace Contains the Word File Edit related code.
 */
  curam.define.singleton("curam.util.WordFileEdit", {
  /**
   * Has the user finished the Word Edit?
   * @private
   */
  _clickedFinish: false,

  /**
   * Used to force the submit button to be clicked when finished editing.
   * @private
   */
  _buttonIdPart: "__o3btn.",

  /** The optional search window associated with a word integration session. */
  searchWindow: null,

  /** Holds a localizable error message. */
  cantLoadControlMsg: "$unlocalized$ cannot load Word integration control",

  /** Holds a localizable error message. */
  cantSubmitMsg: "$unlocalized$ cannot submit data",
  
  /** Holds a localizable window title prefix. */
  searchWindowTitlePrefix: "SEARCH",
  
  useApplet: (function() {return typeof dojo.isIE == "undefined";})(),
  controlAttributes: {},
  controlParameters: {},

  /**
   * The Word document in a base64 string is passed back to IE.
   * Put the info in the textarea and submit the form to save.
   *
   * @param textareaName
   *                Name of textarea field in HTML document.
   * @param textareaValue
   *                Base64 encoded string to be put into textareaName.
   */
  submitSaveWordFileEdit: function(textareaName, textareaValue) {
    try {
      var parent = curam.util.WordFileEdit.getParentWindow();
      var input = curam.util.WordFileEdit._findTextArea(parent, textareaName);
      input.value = textareaValue;
      parent.document.forms[0].submit();

    } catch(e) {
      alert("Error saving: " +dojo.toJson(e));
    }

    return;
  },
  
  /**
   * Start the WordFileEdit ActiveX control.
   *
   * @param wfeId
   *          The unique ID generated each time the widget is run.
   * @param documentField
   *          The textarea field holding the encoded word document or template.
   * @param detailsField
   *          The encoded XML string containing the name/value pairs
   *          to be populated into the word template.
   */
  openWordFileEditWindow: function(wfeId, documentField, detailsField) {
    // Display the search window if an associated search URL has been defined.
    if (curam.util.WordFileEdit.getSearchPage().length>0) {
      curam.util.WordFileEdit.displaySearchWindow(
          wfeId, documentField, detailsField);

    } else {
      curam.util.WordFileEdit.doOpenWordFileEditWindow(
          wfeId,documentField,detailsField);
    }
  },
  
  /**
   * Launch the Word ActiveX control in a separate window.
   *
   * @param wfeId
   *          The unique ID generated each time the widget is run.
   * @param documentField
   *          The textarea field holding the encoded word document or template.
   * @param detailsField
   *          The encoded XML string containing the name/value pairs
   *          to be populated into the word template.
   */
  doOpenWordFileEditWindow: function(wfeId, documentField, detailsField) {
    var activeXWindowWidth = 100;  // width of ActiveX control window
    var activeXWindowHeight = 100; // height of ActiveX control window
    var activeXWindowLeft = Math.floor(
        (screen.width - activeXWindowWidth)/2);  // Find center of screen
    var activeXWindowTop = Math.floor(
        (screen.height - activeXWindowHeight)/2); // co-ords for new window
  
    window.open("../word-file-edit.jsp?id="
        + wfeId + "&document-field="
        + documentField + "&details-field="
        + detailsField, 
      new Date().valueOf(),
      "toolbar=no,menubar=no,location=no,scrollbars=no,"
        + "resizable=no,top=" 
        + activeXWindowTop 
        + ",left=" 
        + activeXWindowLeft 
        + ",width="
        + activeXWindowWidth 
        + ",height=" 
        + activeXWindowHeight);
  },
  
  /**
   * Launch the Curam Search window associated with the Word Document
   *
   * @param wfeId
   *          The unique ID generated each time the widget is run.
   * @param documentField
   *          The textarea field holding the encoded word document or template.
   * @param detailsField
   *          The encoded XML string containing the name/value pairs
   *          to be populated into the word template.
   * @param attempt
   *          The number of attempts made to relaunch the window.
   */
  displaySearchWindow: function(wfeId, documentField, detailsField, attempt) {
    if (!attempt) {
      attempt = 0;
    }
    if (attempt > 3 ) {
      return;
    }
    if (attempt == 0) {
      curam.util.WordFileEdit.searchWindow = window.open(
          "about:blank",
          'searchWindow',
          'left=40000,top=40000,scrollbars=yes');
    }
    var titleChanged = false;
    try {
      var searchWindowTitle = curam.util.WordFileEdit.searchWindow.document.title;
      if (searchWindowTitle.indexOf(searchWindowTitlePrefix + ":")==-1) {
        curam.util.WordFileEdit.searchWindow.document.title = 
                                    searchWindowTitlePrefix + ':' + wfeId;
      } else {
        titleChanged = true;
      }
      searchWindowTitle = curam.util.WordFileEdit.searchWindow.document.title;
      if (!titleChanged && 
            searchWindowTitle.indexOf(searchWindowTitlePrefix + ":")!=-1) {
        titleChanged = true;
      }
    } catch (e) {
    } // Cannot set title of new search window

    if (!titleChanged) {
      attempt++;
      window.setTimeout('displaySearchWindow(\'' + wfeId + '\',\''
          + documentField + '\',\'' + detailsField
          + '\',' + attempt + ')', 500);

    } else {
      curam.util.WordFileEdit.doOpenWordFileEditWindow(
          wfeId, documentField, detailsField);
    }
  },
  
  /**
   * Re-launch the Curam Search window associated with the Word Document
   *
   * @param wfeId
   *          The unique ID generated each time the widget is run.
   * @param attempt
   *          The number of attempts made to relaunch the window.
   */
  redisplaySearchWindow: function(wfeId, attempt) {
    if (!attempt) attempt = 0;
    if (attempt > 3 ) return;
    if (attempt == 0) {
      curam.util.WordFileEdit.searchWindow = window.open(
          "about:blank",'searchWindow','left=40000,top=40000');
    }
    var titleChanged = false;
    try {
      var searchWindowTitle = curam.util.WordFileEdit.searchWindow.document.title;
      if (searchWindowTitle.indexOf(searchWindowTitlePrefix + ":")==-1) {
        curam.util.WordFileEdit.searchWindow.document.title = 
                                searchWindowTitlePrefix + ':' + wfeId;
      } else {
        titleChanged = true;
      }
      searchWindowTitle = curam.util.WordFileEdit.searchWindow.document.title;
      if (!titleChanged && 
            searchWindowTitle.indexOf(searchWindowTitlePrefix + ":")!=-1) {
        titleChanged = true;
      }
    } catch (e) {
    } // Cannot set title of new search window
    if (!titleChanged) {
      attempt++;
      window.setTimeout('redisplaySearchWindow(\'' + wfeId + '\','
          + attempt + ')', 500);
    }
  },
  
  /**
   * Retreives the name of the search page associated with a Word
   * Integration session.
   *
   * @param isParent
   *            Indicates whether the parent window should contain the search
   *            page value.
   */
  getSearchPage: function(isParent) {
    var searchPage = "";
    try {
      if(!isParent) {
          searchPage = document.getElementById('searchPage').value;

        } else {
          var parentWin = curam.util.WordFileEdit.getParentWindow();
          searchPage = parentWin.document.getElementById('searchPage').value;
        }
    } catch (e) {} // Cannot retrieve search page value from HTML
    return searchPage;
  },
  
  /**
   * Initialize the integration component.
   * 
   * If using ActiveX control, then call its openDocument Sub.
   * If it can't be called, the control didn't install successfully.
   * 
   * If using applet, register handlers for the parent frame events.
   * 
   * @param wfeId
   *          The unique ID generated each time the widget is run.
   */
  initialize: function(wfeId) {
    var parentWindow = curam.util.WordFileEdit.getParentWindow();
    try {
      var integrationControl = dojo.byId(wfeId);
      if (typeof integrationControl != "undefined") {
        curam.util.WordFileEdit._setOverlay(true);

        if (curam.util.WordFileEdit.useApplet) {
          // Applet - it is started automatically, no need to call openDocument()
          // Connect required event handlers
          if (!dojo.isIE) {
            var iframe = parentWindow.frameElement;
            curam.util.connect(iframe, "onload", function(evt) {
              var event = dojo.fixEvent(evt, iframe);
              var url = iframe.contentWindow.location.href;
              try {
                integrationControl.mainApplicationPageLoaded(url);
    
              } catch (e) {
                alert("Error calling mainApplicationPageLoaded on applet: "
                    + e.message);
              }
            });
            
            parentWindow.top.dojo.addOnUnload(function() {
              integrationControl.mainApplicationPageUnloaded();
            });
          } // else for IE the event will be caught by the applet via COM
            // this is to get around the opener.frameElement not working in IE
          
        } else {
          integrationControl.openDocument();
        }
      
      } else {
        curam.util.WordFileEdit._setOverlay(false);
        curam.util.WordFileEdit.closeAppletWindow();
      }
    
    } catch(e) { // Cannot call method of activeX control
      curam.util.WordFileEdit._setOverlay(false);
      curam.util.WordFileEdit.closeAppletWindow();
      parentWindow.curam.util.WordFileEdit.cannotLoadControl(e);
    }
  },
  
  /**
   * Sets overlay on the main application window while the Word document
   * is being edited.
   * 
   * @param {Boolean} displayOverlay
   *                   Specifies whether the overlay should be shown or hidden.
   * 
   * @private
   */
  _setOverlay: function(displayOverlay) {
     try {
       var openerWin = curam.util.WordFileEdit.getParentWindow();
       var topWin = (openerWin != null)
           ? openerWin.curam.util.getTopmostWindow() : curam.util.getTopmostWindow();
       if (topWin != window) {
         topWin.dojo.require("curam/util/WordFileEdit");
         topWin.curam.util.WordFileEdit._setOverlay(displayOverlay);
         return;
       }
       
       if (!curam.util.WordFileEdit._overlay) {
         curam.util.WordFileEdit._overlay = new dijit.DialogUnderlay({
             dialogId: "dummy", "class": "word-file-edit-overlay" });
       }
  
       var ovr = curam.util.WordFileEdit._overlay;
       if (displayOverlay) {
         dojo.style(ovr.domNode, 'zIndex', 9999);
         ovr.show();
       
       } else {
         ovr.hide();
       }
     
     } catch(e) {
       alert("_setOverlay ERROR: " + e.message);
     }
  },
  
  /**
   * Either the user has declined to install the ActiveX control, or the
   * required dlls (contained within Word) aren't installed on the target
   * machine.  Dislay a message and return to the previous page.
   */
  cannotLoadControl: function(e) {
    var msg = dojo.isIE && !curam.util.WordFileEdit.useApplet ?
        curam.util.WordFileEdit.cantLoadControlMsgIE
        : curam.util.WordFileEdit.cantLoadControlMsg;
    alert(msg + "\rERROR: " + e.message);
    history.go(-1);
  },
  
  
  /**
   * Change the text in the ActiveX window to let the user
   * know the status of the Control
   * (e.g. 'loading activex', 'launching word', etc).
   *
   * @param text
   *          The status text to be displayed.
   */
  setStatusTextWordFileEditWindow: function(text) {
    try {
      document.getElementById('statustext').innerHTML = text;
    } catch (e) {} // Cannot find statustext element
  },
  
  /**
   * Returns the base64 encoded string which has been loaded into
   * the textareaName textarea.
   *
   * @param textareaName
   *                The textarea holding the base 64 encoded string.
   */
  getWordFileEditParentTextareaValue: function(textareaName) {
    var returnValue = "";
    try {
      var parentWin = curam.util.WordFileEdit.getParentWindow();
      var input = curam.util.WordFileEdit._findTextArea(parentWin, textareaName);
      returnValue = input.value;
      
    } catch (e) {
      alert("getWordFileEditParentTextareaValue('"+ textareaName +"'): \r"
          + e.message);
    }
    
    return returnValue;
  },
  
  _findTextArea: function(context, textareaName, partial) {
    var result = null;
    if (!partial) {
      result = context.dojo.query(
          "input[name='" + textareaName + "']", context.dojo.body())[0];

    } else {
      result = context.dojo.query(
          "input[name$='" + textareaName + "']", context.dojo.body())[0];
    }
    
    return result;
  },
  
  /**
   * Called from ActiveX control when finished editing.
   * It only passes textareaName and textareaValue through where
   * the Word document needs to be saved whilst closing.
   *
   * @param returnText
   *          Text to be displayed to user while form is being submitted.
   * @param textareaName
   *          Name of textarea_field to pass in base64 string.
   * @param textareaValue
   *          The base64 encoded string to be submitted.
   */
  finishedWordFileEditWindow: function(returnText, textareaName, textareaValue) {
    if(!curam.util.WordFileEdit._clickedFinish) {
      // Ensure this function is only called once
      curam.util.WordFileEdit.doFinishWordFileEditWindow(returnText,
          textareaName, textareaValue);

      curam.util.WordFileEdit._clickedFinish = true;
    }
  },
  
  /**
   * Finds the submit button on the page and sends click command to it.
   * The click causes the widget to finish.
   * It only passes textareaName and textareaValue through where
   * the Word document needs to be saved whilst closing.
   *
   * @param returnText
   *          Text to be displayed to user while form is being submitted.
   * @param textareaName
   *          Name of textarea_field to pass in base64 string.
   * @param textareaValue
   *          The base64 encoded string to be submitted.
   */
  doFinishWordFileEditWindow: function(returnText, textareaName, textareaValue) {
    var foundSubmitButton = false;
  
    // Indicates whether the document is being saved as it is closed.
    var savingAndClosing = false;
  
    try {
      var parent = curam.util.WordFileEdit.getParentWindow();
      if (textareaName && textareaValue) {
        savingAndClosing = true;
        var input = curam.util.WordFileEdit._findTextArea(parent, textareaName);
        input.value = textareaValue;
      }
      var elements = parent.dojo.query("form input");
      for (var i = 0; i < elements.length && !foundSubmitButton; i++) {
        if (elements[i].id.substring(
            0, curam.util.WordFileEdit._buttonIdPart.length).toLowerCase() ==
            curam.util.WordFileEdit._buttonIdPart.toLowerCase()) {
          foundSubmitButton = true;
  
          // Check and see if the document has to be saved whilst closing.  If
          // not, add a new hidden form element to indicate that the document is
          // not to be saved, and also wipe the textarea encoded document.
  
          if (!savingAndClosing) {
            // Wipe the textarea encoded string, no need to save it back again.
            var input = curam.util.WordFileEdit._findTextArea(parent, textareaName);
            input.value = '';
  
            var foundWordIntegrationForm = false;
            var formElement;
            var element = elements[i];
            // Find the form associated with this word integration session.
            try {
              while (element.tagName.toUpperCase() != "BODY"
                  && !foundWordIntegrationForm) {
                
                if (element.tagName.toUpperCase() == "FORM") {
                  foundWordIntegrationForm = true;
                  formElement = element;
                
                } else {
                  element = element.parentElement;
                }
              }
            
            } catch (e) {
              // Could not find associated Form.
              alert("doFinishWordFileEditWindow: " + e.message);
            }
            if (foundWordIntegrationForm) {
              var newElement = '<input type="hidden" name="__o3NoSave" value="true"/>';
              formElement.innerHTML += newElement;
            }
          }
          parent.curam.util.clickButton(elements[i].id);
          if (returnText.length > 0) {
            parent.document.body.innerHTML = returnText;
          }
          curam.util.WordFileEdit._setOverlay(false);
          return;
        }
      }
      if (!foundSubmitButton) {
        alert(curam.util.WordFileEdit.cantSubmitMsg);
        try {
          curam.util.WordFileEdit._setOverlay(false);
          curam.util.WordFileEdit.closeAppletWindow();
        } catch (e) { } // Cannot close ActiveX control
      }
    
    } catch (e) {
      alert("doFinishWordFileEditWindow: " + e.message);
      curam.util.WordFileEdit._setOverlay(false);
      curam.util.WordFileEdit.closeAppletWindow(); // Cannot find base64 textarea
    }
  },
  
  /**
   * Send a JavaScript alert to the user from the ActiveX control.
   *
   * @param alertText
   *            Text to be displayed in alert.
   */
  screenAlertWordFileEditWindow: function(alertText) {
    try {
      curam.util.WordFileEdit.getParentWindow().alert(alertText);
    } catch (e) {} // Cannot Alert from parent window
  },

  /**
   * This function is used to hide submit buttons on pages with
   * word integration controls. gen-jsp.xsl adds a call to this
   * function on pages that contain a MS Word control.
   */
  hideSubmitButtons: function() {
    dojo.query("a.ac").forEach(function(item) {
      item.style.display = "none";
    });
  },

  /**
   * Returns the <code>window</code> object of the page that opened
   * the ActiveX window. For the tabbed UI it is usualy the content panel
   * iframe, but it can also be a modal window if ActiveX window was opened
   * from a modal.
   *
   * This function is expected to be called in the context of the ActiveX
   * window.
   */
  getParentWindow: function() {
    return window.opener;
  },
  
  /**
   * Returns two URLs required by the WordFileEdit ActiveX control.
   * This function is caled on the control startup ind is expected
   * to be called in the context of the ActiveX window.
   * 
   * @returns An array of Strings where first element represents urlPath
   *    and second element represents allowed URL.
   */
  getUrls: function() {
    try {
      var parentWin = curam.util.WordFileEdit.getParentWindow();
      var doc = parentWin.document;
      var fullUrl = doc.URL;
    
      var firstForm = parentWin.dojo.query("form", doc)[0];
      var action = firstForm.action;
      var urlpath = fullUrl.substr(0, fullUrl.lastIndexOf("/") + 1);
    
      // Write the values in the window object for the ActiveX control
      // to read from. This a workaround to the problem of the ActiveX not being
      // able to pick return values of some JavaScript functions.
      window.curam.util.WordFileEdit.urlPath_return_value = urlpath;
      var allowedUrl = (dojo.isIE >= 8) ? action : urlpath + action;
      window.curam.util.WordFileEdit.allowedUrl_return_value = 
        // IE8 returns the full URL in the form action
        allowedUrl;
      
      return [urlpath, allowedUrl];
     
     } catch (e) {
       alert("getUrls: " + dojo.toJson(e));
     }
  },

  /**
   * Returns the title of the topmost browser window that hat the tabbed
   * UI loaded in it.
   *
   * This function is expected to be called in the context of the ActiveX
   * window.
   */
  getTitle: function() {
    var title = curam.util.WordFileEdit.getParentWindow().top.document.title;
    
    // also write the title in the window object for the ActiveX control
    // to read from. This a workaround to the problem of the ActiveX not being
    // able to pick return values of some JavaScript functions.
    curam.util.WordFileEdit.title_return_value = title;
    // there is an also issue accesing the above qualified object variable
    // from ActiveX - temporarily using the following global variable.
    window.curam_wordIntegration_title_return_value = title;
    
    return title;
  },
  
  /**
   * Sets the title of the topmost browser window that hat the tabbed
   * UI loaded in it. The title is set to be the text passed as the title
   * function argument.
   *
   * @param title
   *          The text to be used as window title.
   *
   * This function is expected to be called in the context of the ActiveX
   * window.
   */
  setTitle: function(title) {
    curam.util.WordFileEdit.getParentWindow().top.document.title = title;
  },

  /**
   * Returns true if the parent window page contains an input control
   * with the name specified as inputName function argument.
   *
   * @param inputNameEnd
   *              The end part of name of the input element to search for,
   *              preceded with an asterisk.
   *
   * This function is expected to be called in the context of the ActiveX
   * window.
   */
  hasNamedInput: function(inputNameEnd) {
    var parent = curam.util.WordFileEdit.getParentWindow();
    // only the last part of the name is passed into this function
    // with an asterisk wildcard at the start - remove the asterisk
    // and do partial search
    var namePart = inputNameEnd.slice(1);
    var input = curam.util.WordFileEdit._findTextArea(parent, namePart, true);
    return input ? true : false;
  },
  
  /**
   * Closes the applet window.
   */
  closeAppletWindow: function() {
    self.close();
  },
  
  /**
   * Outputs the applet code into page.
   * 
   * This function must be called BEFORE the page has finished loading,
   * otherwise the complete contents of the page will be overwritten with
   * the applet code.
   */
  runApplet: function(id) {
    // some diagnostic output
    if (typeof deployJava != "undefined") {
      var plugin = deployJava.getPlugin();
      if (plugin) {
        curam.debug.log(bundle.getProperty("curam.util.WordFileEdit.version"),
            plugin.version);

      } else {
        curam.debug
          .log(bundle.getProperty("curam.util.WordFileEdit.no.plugin"));
      }

    } else {
      curam.debug.log(bundle.getProperty("curam.util.WordFileEdit.no.java"));
    }

    if (typeof deployJava == "undefined"
        // Skip the plugin check for Chrome as there is a bug:
        // http://code.google.com/p/chromium/issues/detail?id=76207
        || (!dojo.isChrome && !deployJava.isPlugin2())) {

      alert(curam.util.WordFileEdit.noJavaInstalled);

    } else { // carry on starting the applet
      dojo.mixin(curam.util.WordFileEdit.controlAttributes, {
        id: id
      });

      var hiddenDiv = dojo.create("div", {style:"display:none"});
      var appletTag = dojo.create("applet",
          curam.util.WordFileEdit.controlAttributes, hiddenDiv);
      
      var params = curam.util.WordFileEdit.controlParameters;
      for (property in params) {
        dojo.create("param", {name: property, value: params[property]},
            appletTag);
      }
      
      var appletHTML = hiddenDiv.innerHTML;
      dojo.destroy(hiddenDiv);
      
      // now put the applet in the page
      document.write(appletHTML);
    }
  }
  });
  
  return curam.util.WordFileEdit;
});

},
'dojo/dnd/Moveable':function(){
define("dojo/dnd/Moveable", ["../main", "../Evented", "../touch", "./Mover"], function(dojo, Evented, touch) {
	// module:
	//		dojo/dnd/Moveable
	// summary:
	//		TODOC


/*=====
dojo.declare("dojo.dnd.__MoveableArgs", [], {
	// handle: Node||String
	//		A node (or node's id), which is used as a mouse handle.
	//		If omitted, the node itself is used as a handle.
	handle: null,

	// delay: Number
	//		delay move by this number of pixels
	delay: 0,

	// skip: Boolean
	//		skip move of form elements
	skip: false,

	// mover: Object
	//		a constructor of custom Mover
	mover: dojo.dnd.Mover
});
=====*/

dojo.declare("dojo.dnd.Moveable", [Evented], {
	// object attributes (for markup)
	handle: "",
	delay: 0,
	skip: false,

	constructor: function(node, params){
		// summary:
		//		an object, which makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.__MoveableArgs?
		//		optional parameters
		this.node = dojo.byId(node);
		if(!params){ params = {}; }
		this.handle = params.handle ? dojo.byId(params.handle) : null;
		if(!this.handle){ this.handle = this.node; }
		this.delay = params.delay > 0 ? params.delay : 0;
		this.skip  = params.skip;
		this.mover = params.mover ? params.mover : dojo.dnd.Mover;
		this.events = [
			dojo.connect(this.handle, touch.press, this, "onMouseDown"),
			// cancel text selection and text dragging
			dojo.connect(this.handle, "ondragstart",   this, "onSelectStart"),
			dojo.connect(this.handle, "onselectstart", this, "onSelectStart")
		];
	},

	// markup methods
	markupFactory: function(params, node, ctor){
		return new ctor(node, params);
	},

	// methods
	destroy: function(){
		// summary:
		//		stops watching for possible move, deletes all references, so the object can be garbage-collected
		dojo.forEach(this.events, dojo.disconnect);
		this.events = this.node = this.handle = null;
	},

	// mouse event processors
	onMouseDown: function(e){
		// summary:
		//		event processor for onmousedown/ontouchstart, creates a Mover for the node
		// e: Event
		//		mouse/touch event
		if(this.skip && dojo.dnd.isFormElement(e)){ return; }
		if(this.delay){
			this.events.push(
				dojo.connect(this.handle, touch.move, this, "onMouseMove"),
				dojo.connect(this.handle, touch.release, this, "onMouseUp")
			);
			this._lastX = e.pageX;
			this._lastY = e.pageY;
		}else{
			this.onDragDetected(e);
		}
		dojo.stopEvent(e);
	},
	onMouseMove: function(e){
		// summary:
		//		event processor for onmousemove/ontouchmove, used only for delayed drags
		// e: Event
		//		mouse/touch event
		if(Math.abs(e.pageX - this._lastX) > this.delay || Math.abs(e.pageY - this._lastY) > this.delay){
			this.onMouseUp(e);
			this.onDragDetected(e);
		}
		dojo.stopEvent(e);
	},
	onMouseUp: function(e){
		// summary:
		//		event processor for onmouseup, used only for delayed drags
		// e: Event
		//		mouse event
		for(var i = 0; i < 2; ++i){
			dojo.disconnect(this.events.pop());
		}
		dojo.stopEvent(e);
	},
	onSelectStart: function(e){
		// summary:
		//		event processor for onselectevent and ondragevent
		// e: Event
		//		mouse event
		if(!this.skip || !dojo.dnd.isFormElement(e)){
			dojo.stopEvent(e);
		}
	},

	// local events
	onDragDetected: function(/* Event */ e){
		// summary:
		//		called when the drag is detected;
		//		responsible for creation of the mover
		new this.mover(this.node, e, this);
	},
	onMoveStart: function(/* dojo.dnd.Mover */ mover){
		// summary:
		//		called before every move operation
		dojo.publish("/dnd/move/start", [mover]);
		dojo.addClass(dojo.body(), "dojoMove");
		dojo.addClass(this.node, "dojoMoveItem");
	},
	onMoveStop: function(/* dojo.dnd.Mover */ mover){
		// summary:
		//		called after every move operation
		dojo.publish("/dnd/move/stop", [mover]);
		dojo.removeClass(dojo.body(), "dojoMove");
		dojo.removeClass(this.node, "dojoMoveItem");
	},
	onFirstMove: function(/* dojo.dnd.Mover */ mover, /* Event */ e){
		// summary:
		//		called during the very first move notification;
		//		can be used to initialize coordinates, can be overwritten.

		// default implementation does nothing
	},
	onMove: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop, /* Event */ e){
		// summary:
		//		called during every move notification;
		//		should actually move the node; can be overwritten.
		this.onMoving(mover, leftTop);
		var s = mover.node.style;
		s.left = leftTop.l + "px";
		s.top  = leftTop.t + "px";
		this.onMoved(mover, leftTop);
	},
	onMoving: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
		// summary:
		//		called before every incremental move; can be overwritten.

		// default implementation does nothing
	},
	onMoved: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
		// summary:
		//		called after every incremental move; can be overwritten.

		// default implementation does nothing
	}
});

return dojo.dnd.Moveable;
});

},
'dojo/store/util/QueryResults':function(){
define("dojo/store/util/QueryResults", ["../../_base/array", "../../_base/lang", "../../_base/Deferred"
], function(array, lang, Deferred) {
  //  module:
  //    dojo/store/util/QueryResults
  //  summary:
  //    The module defines a query results wrapper

var util = lang.getObject("dojo.store.util", true);

util.QueryResults = function(results){
	// summary:
	//		A function that wraps the results of a store query with additional
	//		methods.
	//
	// description:
	//		QueryResults is a basic wrapper that allows for array-like iteration
	//		over any kind of returned data from a query.  While the simplest store
	//		will return a plain array of data, other stores may return deferreds or
	//		promises; this wrapper makes sure that *all* results can be treated
	//		the same.
	//
	//		Additional methods include `forEach`, `filter` and `map`.
	//
	// returns: Object
	//		An array-like object that can be used for iterating over.
	//
	// example:
	//		Query a store and iterate over the results.
	//
	//	|	store.query({ prime: true }).forEach(function(item){
	//	|		//	do something
	//	|	});

	if(!results){
		return results;
	}
	// if it is a promise it may be frozen
	if(results.then){
		results = lang.delegate(results);
	}
	function addIterativeMethod(method){
		if(!results[method]){
			results[method] = function(){
				var args = arguments;
				return Deferred.when(results, function(results){
					Array.prototype.unshift.call(args, results);
					return util.QueryResults(array[method].apply(array, args));
				});
			};
		}
	}
	addIterativeMethod("forEach");
	addIterativeMethod("filter");
	addIterativeMethod("map");
	if(!results.total){
		results.total = Deferred.when(results, function(results){
			return results.length;
		});
	}
	return results;
};

return util.QueryResults;
});

},
'url:dijit/layout/templates/_ScrollingTabControllerButton.html':"<div data-dojo-attach-event=\"onclick:_onClick\">\n\t<div role=\"presentation\" class=\"dijitTabInnerDiv\" data-dojo-attach-point=\"innerDiv,focusNode\">\n\t\t<div role=\"presentation\" class=\"dijitTabContent dijitButtonContents\" data-dojo-attach-point=\"tabContent\">\n\t\t\t<img role=\"presentation\" alt=\"\" src=\"${_blankGif}\" class=\"dijitTabStripIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t\t<span data-dojo-attach-point=\"containerNode,titleNode\" class=\"dijitButtonText\"></span>\n\t\t</div>\n\t</div>\n</div>",
'curam/pagination/DefaultListModel':function(){
/*
 * Modification History
 * --------------------
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 22-Dec-2010  MV  [CR00239864] Handle the case when the associated list table
 *    is not found. 
 * 20-Dec-2010 MV  [CR00239063] Move common function to pagination.js
 * 13-Dec-2010 MV [CR00237821] Performance improvement - the list rows now
 *    come packed in script tags - unpack before using.
 * 11-May-2010 MV [CR00196066] Cleanup the code, name variables properly.
 * 26-Apr-2010 MV [CR00194538] Force Redraw of content area after showing rows.
 *                            Due to no scrollbars appearing in IE
 * 23-Apr-2010 MV [CR00194352] Fix an array-index-related bug in hideRange().
 * 10-Apr-2010 OK [CR00193314] Added check on last row of fragmented list,
 *                 to add correct rounded edges to bottom
 * 20-Apr-2010 MV [CR00193983] Make the model API's row indexes 1-based
 *                            as per the design.
 * 18-Mar-2010 MV [CR00136536] Initial version.
 * 
 */

/**
 * @name curam.pagination.DefaultListModel
 * 
 * @namespace DefaultListModel provides access to a list rendered as a HTML table.
 * The rendering is done in gen-jsp.xsl.
 *
 */
define("curam/pagination/DefaultListModel", ["curam/debug",
        "curam/pagination",
        "curam/util/ResourceBundle"
        ], function() {

/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");  
var bundle = new curam.util.ResourceBundle("Debug");
  
var DefaultListModel = dojo.declare("curam.pagination.DefaultListModel", null, 

/**
 * @lends curam.pagination.DefaultListModel.prototype
 */    
{
  _rowCount: null,

  /**
   * Instantiate the model and intialize with the corresponding table node. 
   */
  constructor: function(tableId) {
    this.tableNode = dojo.query("table.paginated-list-id-" + tableId)[0];
    if (!this.tableNode) {
      throw "Table node for ID " + tableId + " not found - failing!";
    }
    curam.debug.log("curam.pagination.DefaultListModel " 
      + bundle.getProperty("curam.pagination.DefaultListModel"), 
      this.tableNode);
    this._id = tableId;
  },

  getId: function() {
    return this._id;
  },

  getRowCount: function() {
    if (this._rowCount == null) {
      this._rowCount = 0;
      // count the rows in script blocks
      var scripts = dojo.query("tbody > script.hidden-list-rows", this.tableNode);
      for (var i = 0; i < scripts.length; i++) {
        var script = scripts[i];
        var isLastScript = (i == scripts.length - 1);
        if (!isLastScript) {
          // for most script blocks, rely on the page size
          this._rowCount += curam.pagination.getNumRowsInBlock(script);
        
        } else {
          // for the last page we must load the contents as it may contain smaller
          // number of rows than page size. These will be counted below.
          curam.pagination.unpackRows(script);
        }
      };
      // now count the row nodes
      var rowNodesCount = dojo.query("tbody > tr", this.tableNode).length;
      this._rowCount += rowNodesCount;
    }
    
    return this._rowCount;
  },

  hideRange: function(startIndex, endIndex) {
    var rows = this._getRowNodes(startIndex, endIndex);
    for (var i = startIndex; i <= endIndex; i++) {
      dojo.style(rows[i - 1], {"display":"none"});
      dojo.removeClass(rows[i - 1],"even-last-row");
      dojo.removeClass(rows[i - 1],"odd-last-row");
    }
  },

  showRange: function(startIndex, endIndex) {
    var rows = this._getRowNodes(startIndex, endIndex);
   
    // set the proper CSS class for the last row
    var lastRowCssClass =
        (endIndex % 2 == 0) ? "even-last-row" : "odd-last-row";
    dojo.addClass(rows[endIndex - 1], lastRowCssClass);
    
    // show the required rows
    for (var i = startIndex; i <= endIndex; i++) {
      dojo.style(rows[i - 1], {"display":""});
    }
  },

  _getRowNodes: function(startIndex, endIndex) {
    // read the list content - any rows and script blocks
    var listContent = curam.pagination.readListContent(this.tableNode);

    // go through the required range and expand any script blocks in the way
    for(var i = 1; i <= endIndex && i <= listContent.length; i++) {
      var node = listContent[i - 1];
      if (node.tagName == "SCRIPT") {
        // at least part of the required row range is packed in a script tag
        // expand it now
        curam.pagination.unpackRows(node);
        
        // re-read content
        listContent = curam.pagination.readListContent(this.tableNode);
        // and skip the script block in the count
        i--;
      }
    }

    // now return all the existing row nodes
    return dojo.query("tbody > tr", this.tableNode);
  }
});

return DefaultListModel;
});

},
'dijit/form/DropDownButton':function(){
require({cache:{
'url:dijit/form/templates/DropDownButton.html':"<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\" role=\"presentation\"\n/></span>\n"}});
define("dijit/form/DropDownButton", [
	"dojo/_base/declare", // declare
	"dojo/_base/lang",	// hitch
	"dojo/query", // query
	"../registry",	// registry.byNode
	"../popup",		// dijit.popup2.hide
	"./Button",
	"../_Container",
	"../_HasDropDown",
	"dojo/text!./templates/DropDownButton.html"
], function(declare, lang, query, registry, popup, Button, _Container, _HasDropDown, template){

/*=====
	Button = dijit.form.Button;
	_Container = dijit._Container;
	_HasDropDown = dijit._HasDropDown;
=====*/

// module:
//		dijit/form/DropDownButton
// summary:
//		A button with a drop down


return declare("dijit.form.DropDownButton", [Button, _Container, _HasDropDown], {
	// summary:
	//		A button with a drop down
	//
	// example:
	// |	<button data-dojo-type="dijit.form.DropDownButton">
	// |		Hello world
	// |		<div data-dojo-type="dijit.Menu">...</div>
	// |	</button>
	//
	// example:
	// |	var button1 = new dijit.form.DropDownButton({ label: "hi", dropDown: new dijit.Menu(...) });
	// |	win.body().appendChild(button1);
	//

	baseClass : "dijitDropDownButton",

	templateString: template,

	_fillContent: function(){
		// Overrides Button._fillContent().
		//
		// My inner HTML contains both the button contents and a drop down widget, like
		// <DropDownButton>  <span>push me</span>  <Menu> ... </Menu> </DropDownButton>
		// The first node is assumed to be the button content. The widget is the popup.

		if(this.srcNodeRef){ // programatically created buttons might not define srcNodeRef
			//FIXME: figure out how to filter out the widget and use all remaining nodes as button
			//	content, not just nodes[0]
			var nodes = query("*", this.srcNodeRef);
			this.inherited(arguments, [nodes[0]]);

			// save pointer to srcNode so we can grab the drop down widget after it's instantiated
			this.dropDownContainer = this.srcNodeRef;
		}
	},

	startup: function(){
		if(this._started){ return; }

		// the child widget from srcNodeRef is the dropdown widget.  Insert it in the page DOM,
		// make it invisible, and store a reference to pass to the popup code.
		if(!this.dropDown && this.dropDownContainer){
			var dropDownNode = query("[widgetId]", this.dropDownContainer)[0];
			this.dropDown = registry.byNode(dropDownNode);
			delete this.dropDownContainer;
		}
		if(this.dropDown){
			popup.hide(this.dropDown);
		}

		this.inherited(arguments);
	},

	isLoaded: function(){
		// Returns whether or not we are loaded - if our dropdown has an href,
		// then we want to check that.
		var dropDown = this.dropDown;
		return (!!dropDown && (!dropDown.href || dropDown.isLoaded));
	},

	loadDropDown: function(/*Function*/ callback){
		// Default implementation assumes that drop down already exists,
		// but hasn't loaded it's data (ex: ContentPane w/href).
		// App must override if the drop down is lazy-created.
		var dropDown = this.dropDown;
		var handler = dropDown.on("load", lang.hitch(this, function(){
			handler.remove();
			callback();
		}));
		dropDown.refresh();		// tell it to load
	},

	isFocusable: function(){
		// Overridden so that focus is handled by the _HasDropDown mixin, not by
		// the _FormWidget mixin.
		return this.inherited(arguments) && !this._mouseDown;
	}
});

});

},
'dojo/regexp':function(){
define("dojo/regexp", ["./_base/kernel", "./_base/lang"], function(dojo, lang) {
	// module:
	//		dojo/regexp
	// summary:
	//		TODOC

lang.getObject("regexp", true, dojo);

/*=====
dojo.regexp = {
	// summary: Regular expressions and Builder resources
};
=====*/

dojo.regexp.escapeString = function(/*String*/str, /*String?*/except){
	//	summary:
	//		Adds escape sequences for special characters in regular expressions
	// except:
	//		a String with special characters to be left unescaped

	return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, function(ch){
		if(except && except.indexOf(ch) != -1){
			return ch;
		}
		return "\\" + ch;
	}); // String
};

dojo.regexp.buildGroupRE = function(/*Object|Array*/arr, /*Function*/re, /*Boolean?*/nonCapture){
	//	summary:
	//		Builds a regular expression that groups subexpressions
	//	description:
	//		A utility function used by some of the RE generators. The
	//		subexpressions are constructed by the function, re, in the second
	//		parameter.  re builds one subexpression for each elem in the array
	//		a, in the first parameter. Returns a string for a regular
	//		expression that groups all the subexpressions.
	// arr:
	//		A single value or an array of values.
	// re:
	//		A function. Takes one parameter and converts it to a regular
	//		expression.
	// nonCapture:
	//		If true, uses non-capturing match, otherwise matches are retained
	//		by regular expression. Defaults to false

	// case 1: a is a single value.
	if(!(arr instanceof Array)){
		return re(arr); // String
	}

	// case 2: a is an array
	var b = [];
	for(var i = 0; i < arr.length; i++){
		// convert each elem to a RE
		b.push(re(arr[i]));
	}

	 // join the REs as alternatives in a RE group.
	return dojo.regexp.group(b.join("|"), nonCapture); // String
};

dojo.regexp.group = function(/*String*/expression, /*Boolean?*/nonCapture){
	// summary:
	//		adds group match to expression
	// nonCapture:
	//		If true, uses non-capturing match, otherwise matches are retained
	//		by regular expression.
	return "(" + (nonCapture ? "?:":"") + expression + ")"; // String
};

return dojo.regexp;
});

},
'curam/layout/TabContainer':function(){
require({cache:{
'url:curam/layout/resources/TabContainer.html':"<div class=\"dijitTabContainer\">\r\n\t<div class=\"dijitTabListWrapper\" data-dojo-attach-point=\"tablistNode\"></div>\r\n\t<div data-dojo-attach-point=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer dijitAlignTop\"></div>\r\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container dijitAlignClient\" data-dojo-attach-point=\"containerNode\"></div>\r\n</div>\r\n"}});
/*
 * Copyright 2010 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.layout.TabContainer
 * @namespace Customized dijit.layout.TabContainer class in order to change the
 * behavior when a tab is closed.
 */
define("curam/layout/TabContainer", ["dijit/layout/TabContainer",
        "dojo/text!curam/layout/resources/TabContainer.html"
        ], function(TabContainer, template) {
        
/*
 * Modification History
 * --------------------
 * 24-Oct-2012  SK  [CR00346419] Now destroys the unnecessary references to avoid
 *                    holding memory.
 * 09-Aug-2012  MV  [CR00337714] Load HTML template using the new mechanism. 
 * 31-Jul-2012  MV  [CR00336202] Migrate to take on Dojo 1.7.3
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format. 
 * 17-Dec-2010  DG  [CR00239200] Do not select tabs when destroying container.
 * 29-Sep-2010  MK  [CR00221781] Revised to change tab by responding to
 *                    the onRemoveChild event.
 * 03-Aug-2010  MK  [CR00211743] Initial Version.
 */
 
var CuramTabContainer = dojo.declare("curam.layout.TabContainer", TabContainer,
  /**
   * @lends curam.layout.TabContainer
   */
{
  // The "dijitAlingTop" CSS class has been added to the "tablistSpacer" div in the template string.
  // The template string is actually defined in _TabContainerBase.js. No information on why this is needed
  // but it is obviously it was an alignment issue with the ootb Dojo widget. However, it "looks wrong".
  // If there was a bug with the ootb alignment (e.g. it didn't align to the center), then we should have fixed that
  // instaead of using "dijitAlignTop" to "push up" the contents to the center. It sounds to me like we are using
  // "align top" to make something "align center" !! Needs more investigation.  
  templateString: template,
  
  /**
   * The index of the currently selected tab.
   * @private
   */
  _theSelectedTabIndex: 0,

  /**
   * The page associated with the currently selected tab.
   * @private
   */
  _thePage: null,

  /**
   * The list of tabs.
   * @private
   */
  _theChildren: null,

  /**
   * Override of the superclass method in order to connect
   * the _changeTab function to the onRemoveChild event.
   */
  postCreate: function() {
    this.inherited(arguments);
    var tl = this.tablist;
    this.connect(tl, 'onRemoveChild', '_changeTab');
  },

  /**
    * This method implements the Curam specific behavior to
    * be executed when a tab is closed.
    *
    * @private
    */
  _changeTab: function(){
    // Do not do anything if the tab container is being destroyed. The tabs
    // will be removed one-by-one and we do not want to accidentally trigger
    // any unwanted selection events that might break tab session management.
    if (this._beingDestroyed) {
      this._thePage = null;
      this._theChildren = null;
      return;
    }
    if (this._theChildren == null) {
      return;
    }
    // if the tab currently being closed is not the one in display
    // then we don't want to change focus
    if (this._theChildren[this._theSelectedTabIndex] != this._thePage) {
      this.selectChild(this._theChildren[this._theSelectedTabIndex]);
      this._thePage = null;
      this._theChildren = null;
      return;
    }

    // display correct tab.
    if (this._theChildren.length < 1 ) { // no tabs open
      this._thePage = null;
      return;
    } else if (this._theChildren.length == 1 ) { // only one tab open
      this.selectChild(this._theChildren[this._theChildren.length-1]);
      this._thePage = null;
      this._theChildren = null;
    } else { // more than one tab open

      if (this._theSelectedTabIndex == (this._theChildren.length - 1)){
        // closing the right most tab
        this.selectChild(this._theChildren[this._theChildren.length-2]);

      } else if (this._theSelectedTabIndex == 0) {
        // closing the left most tab
       this.selectChild(this._theChildren[1]);

      } else {
        // closing a tab that is neither the left or right most tab
        // we can be guaranteed there is at least three tabs
        if (this._theChildren.length > 2) {
          this.selectChild(this._theChildren[this._theSelectedTabIndex + 1]);
        }
      }
      this._thePage = null;
      this._theChildren = null;
    }
  },

  /**
   * Override of the parent method.
   */
  removeChild: function(/*dijit._Widget*/ page){
    // Overrides dijit.layout.TabContainer.removeChild()

    // Do not do anything if the tab container is being destroyed. The tabs
    // will be removed one-by-one and we do not want to accidentally trigger
    // any unwanted selection events that might break tab session management.
    if (this._started && !this._beingDestroyed) {
      // find the index of the selected tab
      // need to find this before the call to inherited as the call to
      // inherited reset the selected tab.
      var children = this.getChildren();
      var i = 0;
      var selectedTabIndex = 0;
      for (i = 0; i < children.length; i++){
        if (children[i].get('selected')) {
          selectedTabIndex = i;
          break;
        }
      }

      // store the values so that they will be accessible by
      // _changeTab method when it responds to the firing.
      // of the onRemoveChild event
      this._theSelectedTabIndex = selectedTabIndex;
      this._thePage = page;
      this._theChildren = children;
    }

    // Call the superclass. It can handle destruction cleanly on its own.
    this.inherited(arguments);
  }
});

return CuramTabContainer;
});
},
'url:curam/layout/resources/ModalUIMController.html':"<div id=\"uimcontroller_${uid}\" class=\"uimcontroller_${uid} uimController ${classList}\" data-dojo-attach-point=\"uimController\">\r\n  <div style=\"display:none;\" \r\n       id=\"uimcontroller_tc_${uid}\" \r\n       class=\"ipnTabController in-page-nav-tabContainer\"\r\n       data-dojo-attach-point=\"tabController\" \r\n       data-dojo-type=\"curam.layout.TabContainer\">\r\n  </div>\r\n  <div class=\"contentPanelFrameWrapper3\"  \r\n        data-dojo-attach-point=\"frameWrapper\">\r\n    <iframe frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\"\r\n             allowTransparency=\"true\" \r\n             id=\"${iframeId}\" \r\n             data-dojo-attach-point=\"frame\"                 \r\n             class=\"${iframeId} ${iframeClassList}\"\r\n             iscpiframe=\"${iscpiframe}\"\r\n             title=\"${title}\" >\r\n    </iframe>\r\n    <span tabIndex=\"0\" class=\"hidden\" id=\"end-${uid}\">${endModalUIMController}</span>\r\n  </div> \r\n</div>",
'curam/ui/SectionShortcutsPanel':function(){
/*
 * Copyright 2010 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.ui.SectionShortcutsPanel
 * 
 * @namespace Functions for the section shortcuts panel.
 */
define("curam/ui/SectionShortcutsPanel", ["curam/define",
        "curam/tab",
        "curam/util",
        "curam/ui/UIController"
        ], function() {
/*
 * Modification History
 * --------------------
 * 23-Oct-2012  MV  [CR00347543] Refer to top level UIController.
 * 02-May-2012 MK [CR00323691] Use new Dojo AMD format.
 * 17-Nov-2010 MK [CR00230397] added additional function for handling non-dojo
 *                    links that simply use an anchor HTML element. 
 * 22-Nov-2010 MV [CR00231655] Added code to cleanup storage on page unload.
 * 27-Oct-2010 SK [CR00224193] changed function for opening
 *                    shortcut in modal dialog.
 * 28-Jul-2010  PK  [CR00211736] Updated due to re-factoring of
 *                    tab-app-controller.js and tab-app-common.js.
 * 20-Jul-2010  MV  [CR00211031] Initial version.
 */
var SectionShortcutsPanel = curam.define.singleton("curam.ui.SectionShortcutsPanel",
/**
  * @lends curam.ui.SectionShortcutsPanel.prototype
  */
{  
  handleClickOnAnchorElement: function(pageId, openInModal) {			    
    if (!openInModal) {
      curam.tab.getTabController().handleUIMPageID(pageId);

    } else {
      curam.ui.SectionShortcutsPanel.openInModal(pageId);
    }
  },
			  
  handleClick: function(sourceID, item) {
    var jsonStore = eval(sourceID + "JsonStore");
    var pageId = jsonStore.getValue(item, 'pageID');
    var openInModal = jsonStore.getValue(item, 'openInModal');

    if (!openInModal) {
      curam.tab.getTabController().handleUIMPageID(pageId);

    } else {
      curam.ui.SectionShortcutsPanel.openInModal(pageId);
    }
  },

  openInModal: function(pageId) {
    var baseUrl = pageId + "Page.do";
    var modalObject = {};
    curam.tab.getTabController().handleLinkClick(baseUrl, modalObject);
  },
  
  setupCleanupScript: function(sourceID) {
    dojo.ready(function() {
      var jsonStore = eval(sourceID + "JsonStore");
      dojo.addOnWindowUnload(function() {
        jsonStore.close();
      });
    });
  }
});

return SectionShortcutsPanel;
});

},
'dojo/string':function(){
define("dojo/string", ["./_base/kernel", "./_base/lang"], function(dojo, lang) {
	// module:
	//		dojo/string
	// summary:
	//		TODOC

lang.getObject("string", true, dojo);

/*=====
dojo.string = {
	// summary: String utilities for Dojo
};
=====*/

dojo.string.rep = function(/*String*/str, /*Integer*/num){
	// summary:
	//		Efficiently replicate a string `n` times.
	// str:
	//		the string to replicate
	// num:
	//		number of times to replicate the string

	if(num <= 0 || !str){ return ""; }

	var buf = [];
	for(;;){
		if(num & 1){
			buf.push(str);
		}
		if(!(num >>= 1)){ break; }
		str += str;
	}
	return buf.join("");	// String
};

dojo.string.pad = function(/*String*/text, /*Integer*/size, /*String?*/ch, /*Boolean?*/end){
	// summary:
	//		Pad a string to guarantee that it is at least `size` length by
	//		filling with the character `ch` at either the start or end of the
	//		string. Pads at the start, by default.
	// text:
	//		the string to pad
	// size:
	//		length to provide padding
	// ch:
	//		character to pad, defaults to '0'
	// end:
	//		adds padding at the end if true, otherwise pads at start
	// example:
	//	|	// Fill the string to length 10 with "+" characters on the right.  Yields "Dojo++++++".
	//	|	dojo.string.pad("Dojo", 10, "+", true);

	if(!ch){
		ch = '0';
	}
	var out = String(text),
		pad = dojo.string.rep(ch, Math.ceil((size - out.length) / ch.length));
	return end ? out + pad : pad + out;	// String
};

dojo.string.substitute = function(	/*String*/		template,
									/*Object|Array*/map,
									/*Function?*/	transform,
									/*Object?*/		thisObject){
	// summary:
	//		Performs parameterized substitutions on a string. Throws an
	//		exception if any parameter is unmatched.
	// template:
	//		a string with expressions in the form `${key}` to be replaced or
	//		`${key:format}` which specifies a format function. keys are case-sensitive.
	// map:
	//		hash to search for substitutions
	// transform:
	//		a function to process all parameters before substitution takes
	//		place, e.g. mylib.encodeXML
	// thisObject:
	//		where to look for optional format function; default to the global
	//		namespace
	// example:
	//		Substitutes two expressions in a string from an Array or Object
	//	|	// returns "File 'foo.html' is not found in directory '/temp'."
	//	|	// by providing substitution data in an Array
	//	|	dojo.string.substitute(
	//	|		"File '${0}' is not found in directory '${1}'.",
	//	|		["foo.html","/temp"]
	//	|	);
	//	|
	//	|	// also returns "File 'foo.html' is not found in directory '/temp'."
	//	|	// but provides substitution data in an Object structure.  Dotted
	//	|	// notation may be used to traverse the structure.
	//	|	dojo.string.substitute(
	//	|		"File '${name}' is not found in directory '${info.dir}'.",
	//	|		{ name: "foo.html", info: { dir: "/temp" } }
	//	|	);
	// example:
	//		Use a transform function to modify the values:
	//	|	// returns "file 'foo.html' is not found in directory '/temp'."
	//	|	dojo.string.substitute(
	//	|		"${0} is not found in ${1}.",
	//	|		["foo.html","/temp"],
	//	|		function(str){
	//	|			// try to figure out the type
	//	|			var prefix = (str.charAt(0) == "/") ? "directory": "file";
	//	|			return prefix + " '" + str + "'";
	//	|		}
	//	|	);
	// example:
	//		Use a formatter
	//	|	// returns "thinger -- howdy"
	//	|	dojo.string.substitute(
	//	|		"${0:postfix}", ["thinger"], null, {
	//	|			postfix: function(value, key){
	//	|				return value + " -- howdy";
	//	|			}
	//	|		}
	//	|	);

	thisObject = thisObject || dojo.global;
	transform = transform ?
		lang.hitch(thisObject, transform) : function(v){ return v; };

	return template.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g,
		function(match, key, format){
			var value = lang.getObject(key, false, map);
			if(format){
				value = lang.getObject(format, false, thisObject).call(thisObject, value, key);
			}
			return transform(value, key).toString();
		}); // String
};

/*=====
dojo.string.trim = function(str){
	// summary:
	//		Trims whitespace from both sides of the string
	// str: String
	//		String to be trimmed
	// returns: String
	//		Returns the trimmed string
	// description:
	//		This version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript).
	//		The short yet performant version of this function is dojo.trim(),
	//		which is part of Dojo base.  Uses String.prototype.trim instead, if available.
	return "";	// String
}
=====*/

dojo.string.trim = String.prototype.trim ?
	lang.trim : // aliasing to the native function
	function(str){
		str = str.replace(/^\s+/, '');
		for(var i = str.length - 1; i >= 0; i--){
			if(/\S/.test(str.charAt(i))){
				str = str.substring(0, i + 1);
				break;
			}
		}
		return str;
	};

return dojo.string;
});

},
'dijit/_Contained':function(){
define("dijit/_Contained", [
	"dojo/_base/declare", // declare
	"./registry"	// registry.getEnclosingWidget(), registry.byNode()
], function(declare, registry){

	// module:
	//		dijit/_Contained
	// summary:
	//		Mixin for widgets that are children of a container widget

	return declare("dijit._Contained", null, {
		// summary:
		//		Mixin for widgets that are children of a container widget
		//
		// example:
		// | 	// make a basic custom widget that knows about it's parents
		// |	declare("my.customClass",[dijit._Widget,dijit._Contained],{});

		_getSibling: function(/*String*/ which){
			// summary:
			//      Returns next or previous sibling
			// which:
			//      Either "next" or "previous"
			// tags:
			//      private
			var node = this.domNode;
			do{
				node = node[which+"Sibling"];
			}while(node && node.nodeType != 1);
			return node && registry.byNode(node);	// dijit._Widget
		},

		getPreviousSibling: function(){
			// summary:
			//		Returns null if this is the first child of the parent,
			//		otherwise returns the next element sibling to the "left".

			return this._getSibling("previous"); // dijit._Widget
		},

		getNextSibling: function(){
			// summary:
			//		Returns null if this is the last child of the parent,
			//		otherwise returns the next element sibling to the "right".

			return this._getSibling("next"); // dijit._Widget
		},

		getIndexInParent: function(){
			// summary:
			//		Returns the index of this widget within its container parent.
			//		It returns -1 if the parent does not exist, or if the parent
			//		is not a dijit._Container

			var p = this.getParent();
			if(!p || !p.getIndexOfChild){
				return -1; // int
			}
			return p.getIndexOfChild(this); // int
		}
	});
});

},
'curam/util/UIMFragment':function(){
/*
 * Copyright 2012 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/UIMFragment", ['curam/util/Request',
        "curam/define",
        "curam/debug",
        "curam/util/ScreenContext"],
       function(curamRequest) {
  /*
   * Modification History
   * --------------------
   * 11-Apr-2014  MV  [CR00424825] Move to common AJAX request API.
   * 23-Aug-2012  KW  [CR00339169] Initial Version
   */
  /**
   * @name curam.util.UIMFragment
   * @namespace Allows interaction with fragment UIMs.
   *
   * A "fragment UIM" is a special type of UIM which generates a HTML fragment
   * rather than a full page. It is defined by setting the UIM PAGE element's
   * COMPONENT_TYPE attribute to "PAGE_FRAGMENT". The UIM will then contain a
   * single FIELD which is mapped to a renderer. The output of this renderer will
   * be returned when the UIM is requested. No other HTML (e.g. html, head, body
   * elements) will be returned.
   * 
   * This API provides methods to interact with these types of UIMs.
   * 
   */
  
  curam.define.singleton("curam.util.UIMFragment", {

    /** 
     * Requests a fragment UIM.
     * 
     * @param (Object) args An object containing the following properties:
     * <ul>
     *   <li>pageID : The UIM page id. This is mandatory.</li>
     *   <li>params : A Object with name-value pairs specifying request
     *   parameters. This method will URL encode the parameter values before
     *   making the request. This is optional.</li>
     *   <li>contentPaneID : The ID of the dijit.layout.ContentPane to load the
     *   HTML fragment into. This is mandatory.</li>
     *   <li>onDownloadEnd : The function which will be invoked when the
     *   ContentPane is loaded. This is optional.</li>
     *   <li>onDownloadEnd : The function which will be invoked if there was an
     *   error retrieving the HTML fragment. This is optional.</li>  
     * </ul>
     */
    get: function(args) {

      var pageID = args && args.pageID;
      var url = args && args.url;
      var params = args && args.params;
      var onLoad = args && args.onLoad;
      var onDownloadError = args && args.onDownloadError;

      var targetID = args && args.targetID;


      if (targetID === "" || typeof targetID === "undefined") {
        throw "UIMFragment: targetID must be set.";
      }

      var requestPath = null;
      if (url) {
        //var locale = "en";
        //var topWindow = window.top;
        //if (topWindow.curam && topWindow.curam.config
        //    && topWindow.curam.config.locale) {
        //  locale = topWindow.curam.config.locale;
        //}
        requestPath = url;
      } else {
        // The "_addCDEJParameters()" method adds the "?" to the query string, and
        // the "_encodeParameters()" method assumes this. So, do not change the
        // order of the methods here.
        requestPath = curam.util.UIMFragment._constructPath(pageID)
                          + curam.util.UIMFragment._addCDEJParameters()
                          + curam.util.UIMFragment._encodeParameters(params);
      }
      curam.debug.log("UIMFragment: GET to " + requestPath);

      curam.util.UIMFragment._doService(requestPath, targetID, args,
                                  onLoad, onDownloadError);
    },
    
    /**
     * 
     * @param args
     */
    submitForm: function(onSubmitEvent) {
      var onSubmitEvent = dojo.fixEvent(onSubmitEvent);
      var theForm = onSubmitEvent.target;
      dojo.stopEvent(onSubmitEvent);
      
      // TODO: prevent multiple submits.....
      // if this form has already been submitted just return so the xhrPost
      // below isn't executed multiple times.
      //if (theForm._isSubmitted) {
      //  return false;
      //}
      // Set a flag to indicate this form has been submitted.
      //theForm._isSubmitted = true;
      
      var xhrPostArgs = {
          url: curam.util.UIMFragment._constructFormActionPath(theForm),
          form: theForm,
          load: function(data) 
            { 
              var cp = dijit.getEnclosingWidget(theForm);
              cp.set("content", data);
            },
          error: function(error){alert('form error: error!!')}
        };
        
      curamRequest.post(xhrPostArgs);
      
      console.log(onSubmitEvent + " " + theForm);
    },
    
    _constructFormActionPath: function(theForm) {
      var prefix = "";
      if (window === window.top) {
        // top level window so prefix locale:
        prefix = curam.config.locale + "/";
      }
      return prefix + theForm.getAttribute("action"); 
    },
    
    /**
     * 
     * @param pageID The UIM Page ID.
     */
    _initForm: function(contentPaneID) {
      var theForm = dojo.query("form", dijit.byId(contentPaneID).domNode)[0];
      if (theForm) {
        dojo.connect(theForm, "onsubmit", curam.util.UIMFragment.submitForm);
      }
    },

    /**
     * Construct the Url Path. If the function is called from the top most
     * window, we need to prefix the locale to the pathname.
     * 
     * @param {String} pageID The UIM page ID.
     * @Returns {String} Pathname used to create ajax request.
     */
    _constructPath: function(pageID) {
      var currentWindow = window;
      var topWindow = window.top;
      return curam.util.UIMFragment._constructPathValue(
          pageID, currentWindow, topWindow);
    },

    _constructPathValue: function(pageID, currentWindow, topWindow) {
      if (pageID === "" || typeof pageID === "undefined") {
        throw "UIMFragment: pageID must be set.";
      }
      var pathPrefix = "";
      // TODO: can we just use currentWindow === topWindow ?
      if (currentWindow.location.pathname === topWindow.location.pathname) {
        // it's the "top level" window so we need to add the locale to the Path.
        var locale = topWindow.curam && topWindow.curam.config
                                                && topWindow.curam.config.locale;
        // should always be set, but have included default case just to be safe.
        pathPrefix = (locale || "en") + "/";
      }
      return pathPrefix + pageID + "Page.do";
    },

    /** 
     * Encode the parameters and appended them to the request Path.
     * 
     * @param {Object} params
     *        Parameters to append to path,
     *        expected format: { name:"value", ... }.
     * @Returns {String}
     *        Encoded request parameters prefixed with question mark.
     */
    _encodeParameters: function(params) {

      if (typeof params === "undefined" || dojo.toJson(params) === "{}") {
        curam.debug.log("UIMFragment: No params included in request.");
        return "";
      }
   
      var result = [];
      for (var paramName in params) {
        result.push(paramName + "=" + encodeURIComponent(params[paramName]));
      }
      // This method assumes that _addCDEJParameters() as been called which
      // guarantees that a parameter has been already added. Therefore, this
      // string starts with an "&". 
      return "&" + result.join("&");
    },
    
    /**
     * Adds CDEJ parameters to the request string. This function assumes it is
     * called directly after _constructPath() so it always starts with a "?".
     * The screen context parameter is the only one required for "fragment"
     * requests.
     */
    _addCDEJParameters: function() {
      return "?" + jsScreenContext.toRequestString();
    },

    /**
     * Creates a Ajax post request using the dojo api. Any parameters to be sent
     * with the request are included as per a normal get|post request.
     *
     * @param {String} method
     *        The method of the request, either "GET" or "POST".
     * @param {String} path
     *        The path to invoke on the web-tier.
     * @param {Object} params
     *        The parameters to be included with the post.
     * @param {Function} onDownloadEnd
     *        The function to invoke for handling the returned data.
     * @param {Function} onDownloadError
     *        The function to invoke on failure of resolving the path.
     * @param {String} targetID
     *        Dictates what format the response will be in, e.g. Text or JSON.
     */
    _doService: function(url, targetID, args, onLoad, onDownloadError) {

      var cp = dijit.byId(targetID);
      
      //cp.onDownloadError = dojo.hitch(
      //    this, curam.util.UIMFragment._handleDownloadError, onDownloadError);
      
      //cp.onDownloadEnd = dojo.hitch(
      //    cp, curam.util.UIMFragment._handleDownloadSuccess, args, onDownloadEnd);

      // onLoad is called after either setHref or setContent.....
      cp.onLoad = dojo.hitch(
          cp, curam.util.UIMFragment._handleLoadSuccess, args, onLoad);
      
      // Set defaults if not defined
      //if (typeof onDownloadError === "undefined") {
        //onDownloadError = dojo.hitch(this, this._handleDownloadError);
        //cp.set("onDownloadError", this._handleDownloadError);
        //cp.onDownloadError = curam.util.UIMFragment._handleDownloadError;
      //} else {
        //cp.set("onDownloadError", onDownloadError);
        //cp.onDownloadError = onDownloadError;
      //}
      
      //if (typeof onDownloadEnd === "undefined" || onDownloadEnd == null) {
        //onDownloadEnd = dojo.hitch(this, this._handleDownloadSuccess);
        //cp.set("onDownloadEnd ", this._handleDownloadSuccess);
        //cp.onDownloadEnd = curam.util.UIMFragment._handleDownloadSuccess;
      //} else {
        //cp.onDownloadEnd = onDownloadEnd;
      //}
      
      cp.preventCache = true;
      cp.set("href", url);
    },


    /**
     * Generic handler for when the UIMFragment fails.
     *
     * @param {Object} error
     *        Containing all information on the error
     * @param {Object} ioargs
     *        Contains all arguments passed to the web tier in the call, for
     *        debugging purposes.
     */
    _handleDownloadError: function(error) {
      curam.debug.log("Error invoking the UIMFragment: " + error);  
      return "UIMFragment: Generic Error Handler";
    },

    /**
     * When content is loaded into a ContentPane by this class, a number of 
     * actions have to take place:
     * 1. Search the HTML fragment for a form and setup event handlers
     * 2. Invoke the developer specified callback if specified.  
     * 
     * This method will always be called in the scope of the ContentPane that has
     * just been loaded i.e. The "this" keyword will point to a ContentPane.
     *  
     * @param {Object} fragmentArgs The original arguments to the
     * "UIMFragment.get" call.
     * @param {Function} customCallback The developers specified call back.
     */
    _handleLoadSuccess: function(fragmentArgs, customCallback) {
      
      curam.util.UIMFragment._initForm(fragmentArgs.targetID);
      if (customCallback) {
        customCallback(this);
      }
      curam.debug.log("");  
      return "UIMFragment: Generic Success Handler";
    }
  });
  
  return curam.util.UIMFragment;
  
});
},
'curam/tab/TabDescriptor':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.tab.TabDescriptor
 * 
 * @namespace <p>
 * Information that provides a unique descriptor for an open tab. This may be
 * used to save and restore the state of the tab. A tab is identified by its
 * "signature" (see below) which makes it unique with respect to other open
 * tabs with the same tab ID.
 * </p>
 * <p>
 * A <code>TabDescriptor</code> may also maintain an object that provides more
 * information about the page contained within the tab. This "tabContent"
 * property is used when constructing URLs for the content, etc.
 * </p>
 * <p>
 * The tab descriptor also tracks the state of the tab. When a tab is created,
 * the descriptor must be saved to the tab session. However, it must first have
 * a tab name assigned and a signature set. If those are set, then the tab can
 * be saved. If a tab has been restored from the session, then it does not need
 * to be saved, as the session already records its presence.
 * </p>
 *
 */
define("curam/tab/TabDescriptor", ["curam/tab/TabSessionManager",
        "curam/debug",
        "curam/util/ResourceBundle"
        ], function(TabSessionManager) {
/*
 * Modification History
 * --------------------
 * 18-Jul-2013  SB  [CR00388308] Added publish event for tab context.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 15-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 26-Jan-2011  MV  [CR00244801] Fixed check for DEBUG flag.
 * 14-Jan-2011  DG  [CR00242400] Improved support for updating tab content by
 *                    not removing the tab name if one is already set.
 * 17-Dec-2010  DG  [CR00239200] Option not to select tab on setting signature. 
 * 24-Oct-2010  DG  [CR00217921] Initial version.
 */
/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");

var TabDescriptor = dojo.declare("curam.tab.TabDescriptor", null, 
  /** @lends curam.tab.TabDescriptor.prototype */ {
  
  /**
   * Creates a new tab descriptor for the given section and tab configuration
   * ID. The tab signature will be set to null. Until the signature is set,
   * the singleton status of the tab cannot be determined.
   *
   * @param {String} sectionID The section ID for the tab.
   * @param {String} tabID     The configuration ID of the tab.
   */
  constructor: function(sectionID, tabID) {
    this.sectionID = sectionID ? sectionID : null;
    this.tabID = tabID ? tabID : null;
    this.tabSignature = null;
    this.tabContent = null;
    this.tabParamNames = null;
    // Home pages may not be closed. By default, other tabs can be closed.
    this.isHomePage = false;
  },

  /**
   * Converts this tab content description to JSON form, suitable for saving
   * and restoring later.
   *
   * @return The JSON string form of this tab descriptor.
   */
  toJson: function() {
    // NOTE: Do not call "_log" from here, as it calls this function back!

    var value = {"sectionID": this.sectionID,
                 "tabID": this.tabID,
                 "tabSignature": this.tabSignature,
                 "tabParamNames" : this.tabParamNames,
                 "isHomePage": this.isHomePage};

    // This property is optional. Set it to null if it is missing.
    value.tabContent = this.tabContent ? this.tabContent : null;
    return dojo.toJson(value);
  },

  /**
   * Sets the tab content. This function should be used in preference to setting
   * properties of the tab content in an ad hoc manner, as it ensures that all
   * of the necessary values are set correctly. The tab name (title) may be set
   * independently, if required. If no tab name is given, then the tab name will
   * not be changed, unless it is not already set, in which case it will be
   * initialized to an empty string.
   *
   * @param {curam.ui.PageRequest} uimPageRequest The request detailing the
   *   content of the tab: its page ID, parameters, etc.
   * @param {String} tabName The name (title) of the tab.
   */
  setTabContent: function(uimPageRequest, tabName) {
    if (this.tabContent) {
      this._log(bundle.getProperty("curam.tab.TabDescriptor.content.changed"));
    } else {
      this._log(bundle.getProperty("curam.tab.TabDescriptor.content.set"));
    }

    // Blend the page parameters with the "system" parameters.
    var contentParameters = dojo.clone(uimPageRequest.parameters);
    dojo.mixin(contentParameters, uimPageRequest.cdejParameters);

    if (!this.tabContent) {
      // Create the content and populate it, or overwrite the existing content.
      this.tabContent = {};
    }
    this.tabContent.parameters = contentParameters;
    this.tabContent.pageID = uimPageRequest.pageID;

    if (tabName) {
      this.tabContent.tabName = tabName;
    } else if (!this.tabContent.tabName) {
      this.tabContent.tabName = "";
    }
    // else we leave the tab name unchanged, as no new name was given. This
    // can be the case when the content page is changed. We only get notified
    // of the new page request details, not the page title.

    this._save();
    dojo.publish("/curam/tab/labelUpdated");
  },

  /**
   * <p>
   * Sets the "signature" of the tab. The signature combines the tab ID with
   * the set of parameters and their values that uniquely identity an instance
   * of a tab. The signature is stored as a string, allowing quick and efficient
   * comparison. To ensure that signatures are comparable, the parameters are
   * added to the signature in the lexicographical order of their names. Once
   * set, signatures are never parsed, they are simply compared as strings.
   * </p>
   * <p>
   * Only the parameters in the page request that are named in the tab
   * configuration are used in the signature. All of the other parameters,
   * including the CDEJ "system" parameters are ignored. The full parameter
   * list is maintained as part of the tab content, not the signature.
   * </p>
   * <p>
   * If the tab requires no parameters, the signature will be just the tab ID.
   * It can then be treated as a "singleton" tab instance. If the signature has
   * not yet been set, it will be null. It is usually set by a call to the
   * UIController generated by the TabRenderer.
   * </p>
   *
   * @param {Array} tabParamNames The names of the tab parameters to be
   *   extracted from the request parameters. This may be empty, but not null.
   * @param {curam.ui.PageRequest} uimPageRequest The request containing all
   *   of the parameters and their values.
   * @param {Boolean} openInBackground "true" to avoid recording the tab as the
   *   currently selected tab in local storage, "false" (or undefined) is the
   *   more typical case for a newly created tab.
   */
  setTabSignature: function(tabParamNames, uimPageRequest, openInBackground) {
    // Note: the format for the tab signature is deliberately not JSON or a
    // URL. This is to discourage any inclination to parse it, as that would
    // suggest the developer has missed he point of the signature: it is just
    // a unique token.
    if (!this.tabSignature) {
      // The tab param names are saved to allow them to be used again when
      // trying to match this tab to another uimPageRequest. We simply generate
      // the signature from the new request and see if it matches this
      // signature. The "slice(0)" call makes a full copy of the array before
      // sorting to avoid any unwanted side effects.
      this.tabParamNames = tabParamNames.slice(0);
      this.tabParamNames.sort();
      this.tabSignature = this._generateSignature(
          this.tabID, this.tabParamNames, uimPageRequest);
      this._log(bundle.getProperty("curam.tab.TabDescriptor.signature.set"));
      this._save();
      // When a new tab is created in the foreground, it is selected. However,
      // the tab signature is only set after the content page has loaded. Until
      // then, we cannot record the tab as selected, as the signature is not
      // complete and comparisons will fail. Therefore, when the signature is
      // set, we record the tab as the selected one unless instructed otherwise.
      if (!openInBackground) {
        this._select();
      }
    } else {
      // The signature can only be set once, as the identity of a tab must not
      // change, even if its content changes. The content is tracked separately.
      this._log(bundle
        .getProperty("curam.tab.TabDescriptor.signature.not.set"));
    }
  },

  /**
   * Indicates if this tab descriptor matches a page request. As this tab
   * descriptor is associated with an open tab, a request to open a page must
   * be checked to see if that page is already open in a tab. This function
   * makes that match. This function should not be called before this tab's
   * signature has been set.
   *
   * @param {curam.ui.PageRequest} uimPageRequest The new page request that
   *   should be tested to see if it matches this tab.
   * @return {Boolean} true if the page request matches this tab.
   */
  matchesPageRequest: function(uimPageRequest) {
    return this.tabSignature
        && this.tabSignature == this._generateSignature(
               this.tabID, this.tabParamNames, uimPageRequest);
  },

  /**
   * Generates a "signature" for a tab. See above for details.
   *
   * @param {String} tabID The ID of the tab.
   * @param {Array} tabParamNames A sorted list of the names of the parameters
   *   to take from the request when generating the signature.
   * @param {curam.ui.PageRequest} uimPageRequest The request containing all
   *   of the parameters and their values.
   * @return {String} The tab signature string.
   *
   * @private
   */
  _generateSignature: function(tabID, tabParamNames, uimPageRequest) {
    // The tab ID is the base of the signature. The parameters are added if
    // they are available.
    var newSig = tabID;

    if (tabParamNames) {
      for (var i = 0; i < tabParamNames.length; i++) {
        var name = tabParamNames[i];
        if (uimPageRequest.parameters[name]) {
          newSig += "|" + name + "=" + uimPageRequest.parameters[name];
        }
      }
    }
    return newSig;
  },

  /**
   * Saves the tab to the tab session if the tab information is complete and if
   * it has not already been saved.
   *
   * @private
   */
  _save: function() {
    if (this.tabContent && this.tabSignature) {
      this._log(bundle.getProperty("curam.tab.TabDescriptor.saving"));
      new TabSessionManager().tabUpdated(this);
    }
  },

  /**
   * <p>
   * Records the tab as the selected tab in the tab session. This is
   * complicated. After a tab loads for the first time, it communicates its
   * tab signature parameters in a call-back to the "UIController" and then
   * "TabDescriptor.setTabSignature" is called. It is only at this time that
   * the tab descriptor has enough information to allow it to be recorded as
   * the selected tab. Therefore, when the tab was opened, and before it
   * completed loading, the selection event had to be discarded. Only now can
   * the selection be saved, as we assume that we are being called back to set
   * the signature.
   * </p>
   * <p>
   * For the selection of already loaded tabs, this is not a problem and the
   * normal selection handler in the "TabSessionManager" is called in response
   * to that event.
   * </p>
   *
   * @private
   */
  _select: function() {
    // TODO: Probably need to add a check that this tab is still the selected
    // tab, as the selection may have changed while this tab was loading. -- DG
    if (this.tabSignature) {
      this._log(bundle.getProperty("curam.tab.TabDescriptor.selecting"));
      new TabSessionManager().tabSelected(this);
    }
  },

  /**
   * Simplifies the production of consistent log messages for this class.
   *
   * @param {String} msg The message to be logged.
   * @private
   */
  _log: function(msg) {
    // If debug logging is turned off, then we do not want to keep the overhead
    // of converting objects to JSON form to create the log message, so we
    // check the DEBUG switch even before calling "curam.debug.log".
    if (curam.debug.enabled()) {
      curam.debug.log("TAB DESCRIPTOR: " + msg + " [" + this.toJson() + "]");
    }
  }
});

/*
 * Add a "static" method to the above class that can be used as a factory
 * method for creating tab descriptors from JSON strings. This avoids the
 * need to instantiate a TabDescriptor object before calling "fromJson".
 * This can be called as: <code>curam.tab.TabDescriptor.fromJson(String)</code>,
 * i.e., without any "new" keyword or parentheses after the class name.
 */
dojo.mixin(curam.tab.TabDescriptor, {
  /**
   * Creates a new tab descriptor from a previously serialized descriptor
   * represented as a JSON string. The JSON string must have been created
   * using the "toJson" method of this class.
   *
   * @param {String} jsonTabDescriptor The JSON tab descriptor string, if this
   *                                     is not set, null will be returned.
   * @return A tab descriptor parsed from the JSON string, or null.
   */
  fromJson: function(jsonTabDescriptor) {
    var result = null;

    if (jsonTabDescriptor) {
      var rawTD = dojo.fromJson(jsonTabDescriptor);
      var result = new curam.tab.TabDescriptor(rawTD.sectionID, rawTD.tabID);

      // Values are set if available, otherwise the default values assigned in
      // the constructor are preserved.
      if (rawTD.tabSignature) {
        result.tabSignature = rawTD.tabSignature;
      }
      if (rawTD.tabContent) {
        result.tabContent = rawTD.tabContent;
      }
      if (rawTD.tabParamNames) {
        result.tabParamNames = rawTD.tabParamNames;
      }
      if (rawTD.isHomePage) {
        result.isHomePage = rawTD.isHomePage;
      }
    }
    return result;
  }
});

return TabDescriptor;
});

},
'dojox/storage/manager':function(){
// wrapped by build app
define("dojox/storage/manager", ["dijit","dojo","dojox"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage.manager");
//dojo.require("dojo.AdapterRegistry");
// FIXME: refactor this to use an AdapterRegistry

dojox.storage.manager = new function(){
	// summary: A singleton class in charge of the dojox.storage system
	// description:
	//		Initializes the storage systems and figures out the best available
	//		storage options on this platform.

	// currentProvider: Object
	//	The storage provider that was automagically chosen to do storage
	//	on this platform, such as dojox.storage.FlashStorageProvider.
	this.currentProvider = null;

	// available: Boolean
	//	Whether storage of some kind is available.
	this.available = false;

  // providers: Array
  //  Array of all the static provider instances, useful if you want to
  //  loop through and see what providers have been registered.
  this.providers = [];

	this._initialized = false;

	this._onLoadListeners = [];

	this.initialize = function(){
		// summary:
		//		Initializes the storage system and autodetects the best storage
		//		provider we can provide on this platform
		this.autodetect();
	};

	this.register = function(/*string*/ name, /*Object*/ instance){
		// summary:
		//		Registers the existence of a new storage provider; used by
		//		subclasses to inform the manager of their existence. The
		//		storage manager will select storage providers based on
		//		their ordering, so the order in which you call this method
		//		matters.
		// name:
		//		The full class name of this provider, such as
		//		"dojox.storage.FlashStorageProvider".
		// instance:
		//		An instance of this provider, which we will use to call
		//		isAvailable() on.

		// keep list of providers as a list so that we can know what order
		// storage providers are preferred; also, store the providers hashed
		// by name in case someone wants to get a provider that uses
		// a particular storage backend
		this.providers.push(instance);
		this.providers[name] = instance;
	};

	this.setProvider = function(storageClass){
		// summary:
		//		Instructs the storageManager to use the given storage class for
		//		all storage requests.
		// description:
		//		Example-
		//			dojox.storage.setProvider(
		//				dojox.storage.IEStorageProvider)

	};

	this.autodetect = function(){
		// summary:
		//		Autodetects the best possible persistent storage provider
		//		available on this platform.

		//console.debug("dojox.storage.manager.autodetect");

		if(this._initialized){ // already finished
			return;
		}

		// a flag to force the storage manager to use a particular
		// storage provider type, such as
		// djConfig = {forceStorageProvider: "dojox.storage.WhatWGStorageProvider"};
		var forceProvider = dojo.config["forceStorageProvider"] || false;

		// go through each provider, seeing if it can be used
		var providerToUse;
		//FIXME: use dojo.some
		for(var i = 0; i < this.providers.length; i++){
			providerToUse = this.providers[i];
			if(forceProvider && forceProvider == providerToUse.declaredClass){
				// still call isAvailable for this provider, since this helps some
				// providers internally figure out if they are available
				// FIXME: This should be refactored since it is non-intuitive
				// that isAvailable() would initialize some state
				providerToUse.isAvailable();
				break;
			}else if(!forceProvider && providerToUse.isAvailable()){
				break;
			}
		}

		if(!providerToUse){ // no provider available
			this._initialized = true;
			this.available = false;
			this.currentProvider = null;
			console.warn("No storage provider found for this platform");
			this.loaded();
			return;
		}

		// create this provider and mix in it's properties
		// so that developers can do dojox.storage.put rather
		// than dojox.storage.currentProvider.put, for example
		this.currentProvider = providerToUse;
		dojo.mixin(dojox.storage, this.currentProvider);

		// have the provider initialize itself
		dojox.storage.initialize();

		this._initialized = true;
		this.available = true;
	};

	this.isAvailable = function(){ /*Boolean*/
		// summary: Returns whether any storage options are available.
		return this.available;
	};

	this.addOnLoad = function(func){ /* void */
		// summary:
		//		Adds an onload listener to know when Dojo Offline can be used.
		// description:
		//		Adds a listener to know when Dojo Offline can be used. This
		//		ensures that the Dojo Offline framework is loaded and that the
		//		local dojox.storage system is ready to be used. This method is
		//		useful if you don't want to have a dependency on Dojo Events
		//		when using dojox.storage.
		// func: Function
		//		A function to call when Dojo Offline is ready to go
		this._onLoadListeners.push(func);

		if(this.isInitialized()){
			this._fireLoaded();
		}
	};

	this.removeOnLoad = function(func){ /* void */
		// summary: Removes the given onLoad listener
		for(var i = 0; i < this._onLoadListeners.length; i++){
			if(func == this._onLoadListeners[i]){
				this._onLoadListeners.splice(i, 1);
				break;
			}
		}
	};

	this.isInitialized = function(){ /*Boolean*/
	 	// summary:
		//		Returns whether the storage system is initialized and ready to
		//		be used.

		// FIXME: This should REALLY not be in here, but it fixes a tricky
		// Flash timing bug.
		// Confirm that this is still needed with the newly refactored Dojo
		// Flash. Used to be for Internet Explorer. -- Brad Neuberg
		if(this.currentProvider != null
			&& this.currentProvider.declaredClass == "dojox.storage.FlashStorageProvider"
			&& dojox.flash.ready == false){
			return false;
		}else{
			return this._initialized;
		}
	};

	this.supportsProvider = function(/*string*/ storageClass){ /* Boolean */
		// summary: Determines if this platform supports the given storage provider.
		// description:
		//		Example-
		//			dojox.storage.manager.supportsProvider(
		//				"dojox.storage.InternetExplorerStorageProvider");

		// construct this class dynamically
		try{
			// dynamically call the given providers class level isAvailable()
			// method
			var provider = eval("new " + storageClass + "()");
			var results = provider.isAvailable();
			if(!results){ return false; }
			return results;
		}catch(e){
			return false;
		}
	};

	this.getProvider = function(){ /* Object */
		// summary: Gets the current provider
		return this.currentProvider;
	};

	this.loaded = function(){
		// summary:
		//		The storage provider should call this method when it is loaded
		//		and ready to be used. Clients who will use the provider will
		//		connect to this method to know when they can use the storage
		//		system. You can either use dojo.connect to connect to this
		//		function, or can use dojox.storage.manager.addOnLoad() to add
		//		a listener that does not depend on the dojo.event package.
		// description:
		//		Example 1-
		//			if(dojox.storage.manager.isInitialized() == false){
		//				dojo.connect(dojox.storage.manager, "loaded", TestStorage, "initialize");
		//			}else{
		//				dojo.connect(dojo, "loaded", TestStorage, "initialize");
		//			}
		//		Example 2-
		//			dojox.storage.manager.addOnLoad(someFunction);


		// FIXME: we should just provide a Deferred for this. That way you
		// don't care when this happens or has happened. Deferreds are in Base
		this._fireLoaded();
	};

	this._fireLoaded = function(){
		//console.debug("dojox.storage.manager._fireLoaded");

		dojo.forEach(this._onLoadListeners, function(i){
			try{
				i();
			}catch(e){ console.debug(e); }
		});
	};

	this.getResourceList = function(){
		// summary:
		//		Returns a list of whatever resources are necessary for storage
		//		providers to work.
		// description:
		//		This will return all files needed by all storage providers for
		//		this particular environment type. For example, if we are in the
		//		browser environment, then this will return the hidden SWF files
		//		needed by the FlashStorageProvider, even if we don't need them
		//		for the particular browser we are working within. This is meant
		//		to faciliate Dojo Offline, which must retrieve all resources we
		//		need offline into the offline cache -- we retrieve everything
		//		needed, in case another browser that requires different storage
		//		mechanisms hits the local offline cache. For example, if we
		//		were to sync against Dojo Offline on Firefox 2, then we would
		//		not grab the FlashStorageProvider resources needed for Safari.
		var results = [];
		dojo.forEach(dojox.storage.manager.providers, function(currentProvider){
			results = results.concat(currentProvider.getResourceList());
		});

		return results;
	}
};

});

},
'dijit/_Container':function(){
define("dijit/_Container", [
	"dojo/_base/array", // array.forEach array.indexOf
	"dojo/_base/declare", // declare
	"dojo/dom-construct", // domConstruct.place
	"./registry"	// registry.byNode()
], function(array, declare, domConstruct, registry){

	// module:
	//		dijit/_Container
	// summary:
	//		Mixin for widgets that contain a set of widget children.

	return declare("dijit._Container", null, {
		// summary:
		//		Mixin for widgets that contain a set of widget children.
		// description:
		//		Use this mixin for widgets that needs to know about and
		//		keep track of their widget children. Suitable for widgets like BorderContainer
		//		and TabContainer which contain (only) a set of child widgets.
		//
		//		It's not suitable for widgets like ContentPane
		//		which contains mixed HTML (plain DOM nodes in addition to widgets),
		//		and where contained widgets are not necessarily directly below
		//		this.containerNode.   In that case calls like addChild(node, position)
		//		wouldn't make sense.

		buildRendering: function(){
			this.inherited(arguments);
			if(!this.containerNode){
				// all widgets with descendants must set containerNode
	 			this.containerNode = this.domNode;
			}
		},

		addChild: function(/*dijit._Widget*/ widget, /*int?*/ insertIndex){
			// summary:
			//		Makes the given widget a child of this widget.
			// description:
			//		Inserts specified child widget's dom node as a child of this widget's
			//		container node, and possibly does other processing (such as layout).

			var refNode = this.containerNode;
			if(insertIndex && typeof insertIndex == "number"){
				var children = this.getChildren();
				if(children && children.length >= insertIndex){
					refNode = children[insertIndex-1].domNode;
					insertIndex = "after";
				}
			}
			domConstruct.place(widget.domNode, refNode, insertIndex);

			// If I've been started but the child widget hasn't been started,
			// start it now.  Make sure to do this after widget has been
			// inserted into the DOM tree, so it can see that it's being controlled by me,
			// so it doesn't try to size itself.
			if(this._started && !widget._started){
				widget.startup();
			}
		},

		removeChild: function(/*Widget|int*/ widget){
			// summary:
			//		Removes the passed widget instance from this widget but does
			//		not destroy it.  You can also pass in an integer indicating
			//		the index within the container to remove

			if(typeof widget == "number"){
				widget = this.getChildren()[widget];
			}

			if(widget){
				var node = widget.domNode;
				if(node && node.parentNode){
					node.parentNode.removeChild(node); // detach but don't destroy
				}
			}
		},

		hasChildren: function(){
			// summary:
			//		Returns true if widget has children, i.e. if this.containerNode contains something.
			return this.getChildren().length > 0;	// Boolean
		},

		_getSiblingOfChild: function(/*dijit._Widget*/ child, /*int*/ dir){
			// summary:
			//		Get the next or previous widget sibling of child
			// dir:
			//		if 1, get the next sibling
			//		if -1, get the previous sibling
			// tags:
			//      private
			var node = child.domNode,
				which = (dir>0 ? "nextSibling" : "previousSibling");
			do{
				node = node[which];
			}while(node && (node.nodeType != 1 || !registry.byNode(node)));
			return node && registry.byNode(node);	// dijit._Widget
		},

		getIndexOfChild: function(/*dijit._Widget*/ child){
			// summary:
			//		Gets the index of the child in this container or -1 if not found
			return array.indexOf(this.getChildren(), child);	// int
		}
	});
});

},
'dijit/layout/BorderContainer':function(){
define("dijit/layout/BorderContainer", [
	"dojo/_base/array", // array.filter array.forEach array.map
	"dojo/cookie", // cookie
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.add domClass.remove domClass.toggle
	"dojo/dom-construct", // domConstruct.destroy domConstruct.place
	"dojo/dom-geometry", // domGeometry.marginBox
	"dojo/dom-style", // domStyle.style
	"dojo/_base/event", // event.stop
	"dojo/keys",
	"dojo/_base/lang", // lang.getObject lang.hitch
	"dojo/on",
	"dojo/touch",
	"dojo/_base/window", // win.body win.doc win.doc.createElement
	"../_WidgetBase",
	"../_Widget",
	"../_TemplatedMixin",
	"./_LayoutWidget",
	"./utils"		// layoutUtils.layoutChildren
], function(array, cookie, declare, domClass, domConstruct, domGeometry, domStyle, event, keys, lang, on, touch, win,
			_WidgetBase, _Widget, _TemplatedMixin, _LayoutWidget, layoutUtils){

/*=====
	var _WidgetBase = dijit._WidgetBase;
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _LayoutWidget = dijit.layout._LayoutWidget;
=====*/

// module:
//		dijit/layout/BorderContainer
// summary:
//		Provides layout in up to 5 regions, a mandatory center with optional borders along its 4 sides.

var _Splitter = declare("dijit.layout._Splitter", [_Widget, _TemplatedMixin ],
{
	// summary:
	//		A draggable spacer between two items in a `dijit.layout.BorderContainer`.
	// description:
	//		This is instantiated by `dijit.layout.BorderContainer`.  Users should not
	//		create it directly.
	// tags:
	//		private

/*=====
 	// container: [const] dijit.layout.BorderContainer
 	//		Pointer to the parent BorderContainer
	container: null,

	// child: [const] dijit.layout._LayoutWidget
	//		Pointer to the pane associated with this splitter
	child: null,

	// region: [const] String
	//		Region of pane associated with this splitter.
	//		"top", "bottom", "left", "right".
	region: null,
=====*/

	// live: [const] Boolean
	//		If true, the child's size changes and the child widget is redrawn as you drag the splitter;
	//		otherwise, the size doesn't change until you drop the splitter (by mouse-up)
	live: true,

	templateString: '<div class="dijitSplitter" data-dojo-attach-event="onkeypress:_onKeyPress,press:_startDrag,onmouseenter:_onMouse,onmouseleave:_onMouse" tabIndex="0" role="separator"><div class="dijitSplitterThumb"></div></div>',

	constructor: function(){
		this._handlers = [];
	},

	postMixInProperties: function(){
		this.inherited(arguments);

		this.horizontal = /top|bottom/.test(this.region);
		this._factor = /top|left/.test(this.region) ? 1 : -1;
		this._cookieName = this.container.id + "_" + this.region;
	},

	buildRendering: function(){
		this.inherited(arguments);

		domClass.add(this.domNode, "dijitSplitter" + (this.horizontal ? "H" : "V"));

		if(this.container.persist){
			// restore old size
			var persistSize = cookie(this._cookieName);
			if(persistSize){
				this.child.domNode.style[this.horizontal ? "height" : "width"] = persistSize;
			}
		}
	},

	_computeMaxSize: function(){
		// summary:
		//		Return the maximum size that my corresponding pane can be set to

		var dim = this.horizontal ? 'h' : 'w',
			childSize = domGeometry.getMarginBox(this.child.domNode)[dim],
			center = array.filter(this.container.getChildren(), function(child){ return child.region == "center";})[0],
			spaceAvailable = domGeometry.getMarginBox(center.domNode)[dim];	// can expand until center is crushed to 0

		return Math.min(this.child.maxSize, childSize + spaceAvailable);
	},

	_startDrag: function(e){
		if(!this.cover){
			this.cover = win.doc.createElement('div');
			domClass.add(this.cover, "dijitSplitterCover");
			domConstruct.place(this.cover, this.child.domNode, "after");
		}
		domClass.add(this.cover, "dijitSplitterCoverActive");

		// Safeguard in case the stop event was missed.  Shouldn't be necessary if we always get the mouse up.
		if(this.fake){ domConstruct.destroy(this.fake); }
		if(!(this._resize = this.live)){ //TODO: disable live for IE6?
			// create fake splitter to display at old position while we drag
			(this.fake = this.domNode.cloneNode(true)).removeAttribute("id");
			domClass.add(this.domNode, "dijitSplitterShadow");
			domConstruct.place(this.fake, this.domNode, "after");
		}
		domClass.add(this.domNode, "dijitSplitterActive dijitSplitter" + (this.horizontal ? "H" : "V") + "Active");
		if(this.fake){
			domClass.remove(this.fake, "dijitSplitterHover dijitSplitter" + (this.horizontal ? "H" : "V") + "Hover");
		}

		//Performance: load data info local vars for onmousevent function closure
		var factor = this._factor,
			isHorizontal = this.horizontal,
			axis = isHorizontal ? "pageY" : "pageX",
			pageStart = e[axis],
			splitterStyle = this.domNode.style,
			dim = isHorizontal ? 'h' : 'w',
			childStart = domGeometry.getMarginBox(this.child.domNode)[dim],
			max = this._computeMaxSize(),
			min = this.child.minSize || 20,
			region = this.region,
			splitterAttr = region == "top" || region == "bottom" ? "top" : "left",	// style attribute of splitter to adjust
			splitterStart = parseInt(splitterStyle[splitterAttr], 10),
			resize = this._resize,
			layoutFunc = lang.hitch(this.container, "_layoutChildren", this.child.id),
			de = win.doc;

		this._handlers = this._handlers.concat([
			on(de, touch.move, this._drag = function(e, forceResize){
				var delta = e[axis] - pageStart,
					childSize = factor * delta + childStart,
					boundChildSize = Math.max(Math.min(childSize, max), min);

				if(resize || forceResize){
					layoutFunc(boundChildSize);
				}
				// TODO: setting style directly (usually) sets content box size, need to set margin box size
				splitterStyle[splitterAttr] = delta + splitterStart + factor*(boundChildSize - childSize) + "px";
			}),
			on(de, "dragstart", event.stop),
			on(win.body(), "selectstart", event.stop),
			on(de, touch.release, lang.hitch(this, "_stopDrag"))
		]);
		event.stop(e);
	},

	_onMouse: function(e){
		// summary:
		//		Handler for onmouseenter / onmouseleave events
		var o = (e.type == "mouseover" || e.type == "mouseenter");
		domClass.toggle(this.domNode, "dijitSplitterHover", o);
		domClass.toggle(this.domNode, "dijitSplitter" + (this.horizontal ? "H" : "V") + "Hover", o);
	},

	_stopDrag: function(e){
		try{
			if(this.cover){
				domClass.remove(this.cover, "dijitSplitterCoverActive");
			}
			if(this.fake){ domConstruct.destroy(this.fake); }
			domClass.remove(this.domNode, "dijitSplitterActive dijitSplitter"
				+ (this.horizontal ? "H" : "V") + "Active dijitSplitterShadow");
			this._drag(e); //TODO: redundant with onmousemove?
			this._drag(e, true);
		}finally{
			this._cleanupHandlers();
			delete this._drag;
		}

		if(this.container.persist){
			cookie(this._cookieName, this.child.domNode.style[this.horizontal ? "height" : "width"], {expires:365});
		}
	},

	_cleanupHandlers: function(){
		var h;
		while(h = this._handlers.pop()){ h.remove(); }
	},

	_onKeyPress: function(/*Event*/ e){
		// should we apply typematic to this?
		this._resize = true;
		var horizontal = this.horizontal;
		var tick = 1;
		switch(e.charOrCode){
			case horizontal ? keys.UP_ARROW : keys.LEFT_ARROW:
				tick *= -1;
//				break;
			case horizontal ? keys.DOWN_ARROW : keys.RIGHT_ARROW:
				break;
			default:
//				this.inherited(arguments);
				return;
		}
		var childSize = domGeometry.getMarginSize(this.child.domNode)[ horizontal ? 'h' : 'w' ] + this._factor * tick;
		this.container._layoutChildren(this.child.id, Math.max(Math.min(childSize, this._computeMaxSize()), this.child.minSize));
		event.stop(e);
	},

	destroy: function(){
		this._cleanupHandlers();
		delete this.child;
		delete this.container;
		delete this.cover;
		delete this.fake;
		this.inherited(arguments);
	}
});

var _Gutter = declare("dijit.layout._Gutter", [_Widget, _TemplatedMixin],
{
	// summary:
	// 		Just a spacer div to separate side pane from center pane.
	//		Basically a trick to lookup the gutter/splitter width from the theme.
	// description:
	//		Instantiated by `dijit.layout.BorderContainer`.  Users should not
	//		create directly.
	// tags:
	//		private

	templateString: '<div class="dijitGutter" role="presentation"></div>',

	postMixInProperties: function(){
		this.inherited(arguments);
		this.horizontal = /top|bottom/.test(this.region);
	},

	buildRendering: function(){
		this.inherited(arguments);
		domClass.add(this.domNode, "dijitGutter" + (this.horizontal ? "H" : "V"));
	}
});

var BorderContainer = declare("dijit.layout.BorderContainer", _LayoutWidget, {
	// summary:
	//		Provides layout in up to 5 regions, a mandatory center with optional borders along its 4 sides.
	//
	// description:
	//		A BorderContainer is a box with a specified size, such as style="width: 500px; height: 500px;",
	//		that contains a child widget marked region="center" and optionally children widgets marked
	//		region equal to "top", "bottom", "leading", "trailing", "left" or "right".
	//		Children along the edges will be laid out according to width or height dimensions and may
	//		include optional splitters (splitter="true") to make them resizable by the user.  The remaining
	//		space is designated for the center region.
	//
	//		The outer size must be specified on the BorderContainer node.  Width must be specified for the sides
	//		and height for the top and bottom, respectively.  No dimensions should be specified on the center;
	//		it will fill the remaining space.  Regions named "leading" and "trailing" may be used just like
	//		"left" and "right" except that they will be reversed in right-to-left environments.
	//
	//		For complex layouts, multiple children can be specified for a single region.   In this case, the
	//		layoutPriority flag on the children determines which child is closer to the edge (low layoutPriority)
	//		and which child is closer to the center (high layoutPriority).   layoutPriority can also be used
	//		instead of the design attribute to control layout precedence of horizontal vs. vertical panes.
	// example:
	// |	<div data-dojo-type="dijit.layout.BorderContainer" data-dojo-props="design: 'sidebar', gutters: false"
	// |            style="width: 400px; height: 300px;">
	// |		<div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'top'">header text</div>
	// |		<div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'right', splitter: true" style="width: 200px;">table of contents</div>
	// |		<div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'center'">client area</div>
	// |	</div>

	// design: String
	//		Which design is used for the layout:
	//			- "headline" (default) where the top and bottom extend
	//				the full width of the container
	//			- "sidebar" where the left and right sides extend from top to bottom.
	design: "headline",

	// gutters: [const] Boolean
	//		Give each pane a border and margin.
	//		Margin determined by domNode.paddingLeft.
	//		When false, only resizable panes have a gutter (i.e. draggable splitter) for resizing.
	gutters: true,

	// liveSplitters: [const] Boolean
	//		Specifies whether splitters resize as you drag (true) or only upon mouseup (false)
	liveSplitters: true,

	// persist: Boolean
	//		Save splitter positions in a cookie.
	persist: false,

	baseClass: "dijitBorderContainer",

	// _splitterClass: Function||String
	// 		Optional hook to override the default Splitter widget used by BorderContainer
	_splitterClass: _Splitter,

	postMixInProperties: function(){
		// change class name to indicate that BorderContainer is being used purely for
		// layout (like LayoutContainer) rather than for pretty formatting.
		if(!this.gutters){
			this.baseClass += "NoGutter";
		}
		this.inherited(arguments);
	},

	startup: function(){
		if(this._started){ return; }
		array.forEach(this.getChildren(), this._setupChild, this);
		this.inherited(arguments);
	},

	_setupChild: function(/*dijit._Widget*/ child){
		// Override _LayoutWidget._setupChild().

		var region = child.region;
		if(region){
			this.inherited(arguments);

			domClass.add(child.domNode, this.baseClass+"Pane");

			var ltr = this.isLeftToRight();
			if(region == "leading"){ region = ltr ? "left" : "right"; }
			if(region == "trailing"){ region = ltr ? "right" : "left"; }

			// Create draggable splitter for resizing pane,
			// or alternately if splitter=false but BorderContainer.gutters=true then
			// insert dummy div just for spacing
			if(region != "center" && (child.splitter || this.gutters) && !child._splitterWidget){
				var _Splitter = child.splitter ? this._splitterClass : _Gutter;
				if(lang.isString(_Splitter)){
					_Splitter = lang.getObject(_Splitter);	// for back-compat, remove in 2.0
				}
				var splitter = new _Splitter({
					id: child.id + "_splitter",
					container: this,
					child: child,
					region: region,
					live: this.liveSplitters
				});
				splitter.isSplitter = true;
				child._splitterWidget = splitter;

				domConstruct.place(splitter.domNode, child.domNode, "after");

				// Splitters aren't added as Contained children, so we need to call startup explicitly
				splitter.startup();
			}
			child.region = region;	// TODO: technically wrong since it overwrites "trailing" with "left" etc.
		}
	},

	layout: function(){
		// Implement _LayoutWidget.layout() virtual method.
		this._layoutChildren();
	},

	addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
		// Override _LayoutWidget.addChild().
		this.inherited(arguments);
		if(this._started){
			this.layout(); //OPT
		}
	},

	removeChild: function(/*dijit._Widget*/ child){
		// Override _LayoutWidget.removeChild().

		var region = child.region;
		var splitter = child._splitterWidget;
		if(splitter){
			splitter.destroy();
			delete child._splitterWidget;
		}
		this.inherited(arguments);

		if(this._started){
			this._layoutChildren();
		}
		// Clean up whatever style changes we made to the child pane.
		// Unclear how height and width should be handled.
		domClass.remove(child.domNode, this.baseClass+"Pane");
		domStyle.set(child.domNode, {
			top: "auto",
			bottom: "auto",
			left: "auto",
			right: "auto",
			position: "static"
		});
		domStyle.set(child.domNode, region == "top" || region == "bottom" ? "width" : "height", "auto");
	},

	getChildren: function(){
		// Override _LayoutWidget.getChildren() to only return real children, not the splitters.
		return array.filter(this.inherited(arguments), function(widget){
			return !widget.isSplitter;
		});
	},

	// TODO: remove in 2.0
	getSplitter: function(/*String*/region){
		// summary:
		//		Returns the widget responsible for rendering the splitter associated with region
		// tags:
		//		deprecated
		return array.filter(this.getChildren(), function(child){
			return child.region == region;
		})[0]._splitterWidget;
	},

	resize: function(newSize, currentSize){
		// Overrides _LayoutWidget.resize().

		// resetting potential padding to 0px to provide support for 100% width/height + padding
		// TODO: this hack doesn't respect the box model and is a temporary fix
		if(!this.cs || !this.pe){
			var node = this.domNode;
			this.cs = domStyle.getComputedStyle(node);
			this.pe = domGeometry.getPadExtents(node, this.cs);
			this.pe.r = domStyle.toPixelValue(node, this.cs.paddingRight);
			this.pe.b = domStyle.toPixelValue(node, this.cs.paddingBottom);

			domStyle.set(node, "padding", "0px");
		}

		this.inherited(arguments);
	},

	_layoutChildren: function(/*String?*/ changedChildId, /*Number?*/ changedChildSize){
		// summary:
		//		This is the main routine for setting size/position of each child.
		// description:
		//		With no arguments, measures the height of top/bottom panes, the width
		//		of left/right panes, and then sizes all panes accordingly.
		//
		//		With changedRegion specified (as "left", "top", "bottom", or "right"),
		//		it changes that region's width/height to changedRegionSize and
		//		then resizes other regions that were affected.
		// changedChildId:
		//		Id of the child which should be resized because splitter was dragged.
		// changedChildSize:
		//		The new width/height (in pixels) to make specified child

		if(!this._borderBox || !this._borderBox.h){
			// We are currently hidden, or we haven't been sized by our parent yet.
			// Abort.   Someone will resize us later.
			return;
		}

		// Generate list of wrappers of my children in the order that I want layoutChildren()
		// to process them (i.e. from the outside to the inside)
		var wrappers = array.map(this.getChildren(), function(child, idx){
			return {
				pane: child,
				weight: [
					child.region == "center" ? Infinity : 0,
					child.layoutPriority,
					(this.design == "sidebar" ? 1 : -1) * (/top|bottom/.test(child.region) ? 1 : -1),
					idx
				]
			};
		}, this);
		wrappers.sort(function(a, b){
			var aw = a.weight, bw = b.weight;
			for(var i=0; i<aw.length; i++){
				if(aw[i] != bw[i]){
					return aw[i] - bw[i];
				}
			}
			return 0;
		});

		// Make new list, combining the externally specified children with splitters and gutters
		var childrenAndSplitters = [];
		array.forEach(wrappers, function(wrapper){
			var pane = wrapper.pane;
			childrenAndSplitters.push(pane);
			if(pane._splitterWidget){
				childrenAndSplitters.push(pane._splitterWidget);
			}
		});

		// Compute the box in which to lay out my children
		var dim = {
			l: this.pe.l,
			t: this.pe.t,
			w: this._borderBox.w - this.pe.w,
			h: this._borderBox.h - this.pe.h
		};

		// Layout the children, possibly changing size due to a splitter drag
		layoutUtils.layoutChildren(this.domNode, dim, childrenAndSplitters,
			changedChildId, changedChildSize);
	},

	destroyRecursive: function(){
		// Destroy splitters first, while getChildren() still works
		array.forEach(this.getChildren(), function(child){
			var splitter = child._splitterWidget;
			if(splitter){
				splitter.destroy();
			}
			delete child._splitterWidget;
		});

		// Then destroy the real children, and myself
		this.inherited(arguments);
	}
});

// This argument can be specified for the children of a BorderContainer.
// Since any widget can be specified as a LayoutContainer child, mix it
// into the base widget class.  (This is a hack, but it's effective.)
lang.extend(_WidgetBase, {
	// region: [const] String
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Values: "top", "bottom", "leading", "trailing", "left", "right", "center".
	//		See the `dijit.layout.BorderContainer` description for details.
	region: '',

	// layoutPriority: [const] Number
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Children with a higher layoutPriority will be placed closer to the BorderContainer center,
	//		between children with a lower layoutPriority.
	layoutPriority: 0,

	// splitter: [const] Boolean
	//		Parameter for child of `dijit.layout.BorderContainer` where region != "center".
	//		If true, enables user to resize the widget by putting a draggable splitter between
	//		this widget and the region=center widget.
	splitter: false,

	// minSize: [const] Number
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Specifies a minimum size (in pixels) for this widget when resized by a splitter.
	minSize: 0,

	// maxSize: [const] Number
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Specifies a maximum size (in pixels) for this widget when resized by a splitter.
	maxSize: Infinity
});

// For monkey patching
BorderContainer._Splitter = _Splitter;
BorderContainer._Gutter = _Gutter;

return BorderContainer;
});

},
'dojo/dnd/Mover':function(){
define("dojo/dnd/Mover", ["../main", "../Evented", "../touch", "./common", "./autoscroll"], function(dojo, Evented, touch) {
	// module:
	//		dojo/dnd/Mover
	// summary:
	//		TODOC


dojo.declare("dojo.dnd.Mover", [Evented], {
	constructor: function(node, e, host){
		// summary:
		//		an object which makes a node follow the mouse, or touch-drag on touch devices.
		//		Used as a default mover, and as a base class for custom movers.
		// node: Node
		//		a node (or node's id) to be moved
		// e: Event
		//		a mouse event, which started the move;
		//		only pageX and pageY properties are used
		// host: Object?
		//		object which implements the functionality of the move,
		//	 	and defines proper events (onMoveStart and onMoveStop)
		this.node = dojo.byId(node);
		this.marginBox = {l: e.pageX, t: e.pageY};
		this.mouseButton = e.button;
		var h = (this.host = host), d = node.ownerDocument;
		this.events = [
			// At the start of a drag, onFirstMove is called, and then the following two
			// connects are disconnected
			dojo.connect(d, touch.move, this, "onFirstMove"),

			// These are called continually during the drag
			dojo.connect(d, touch.move, this, "onMouseMove"),

			// And these are called at the end of the drag
			dojo.connect(d, touch.release,   this, "onMouseUp"),

			// cancel text selection and text dragging
			dojo.connect(d, "ondragstart",   dojo.stopEvent),
			dojo.connect(d.body, "onselectstart", dojo.stopEvent)
		];
		// notify that the move has started
		if(h && h.onMoveStart){
			h.onMoveStart(this);
		}
	},
	// mouse event processors
	onMouseMove: function(e){
		// summary:
		//		event processor for onmousemove/ontouchmove
		// e: Event
		//		mouse/touch event
		dojo.dnd.autoScroll(e);
		var m = this.marginBox;
		this.host.onMove(this, {l: m.l + e.pageX, t: m.t + e.pageY}, e);
		dojo.stopEvent(e);
	},
	onMouseUp: function(e){
		if(dojo.isWebKit && dojo.isMac && this.mouseButton == 2 ?
				e.button == 0 : this.mouseButton == e.button){ // TODO Should condition be met for touch devices, too?
			this.destroy();
		}
		dojo.stopEvent(e);
	},
	// utilities
	onFirstMove: function(e){
		// summary:
		//		makes the node absolute; it is meant to be called only once.
		// 		relative and absolutely positioned nodes are assumed to use pixel units
		var s = this.node.style, l, t, h = this.host;
		switch(s.position){
			case "relative":
			case "absolute":
				// assume that left and top values are in pixels already
				l = Math.round(parseFloat(s.left)) || 0;
				t = Math.round(parseFloat(s.top)) || 0;
				break;
			default:
				s.position = "absolute";	// enforcing the absolute mode
				var m = dojo.marginBox(this.node);
				// event.pageX/pageY (which we used to generate the initial
				// margin box) includes padding and margin set on the body.
				// However, setting the node's position to absolute and then
				// doing dojo.marginBox on it *doesn't* take that additional
				// space into account - so we need to subtract the combined
				// padding and margin.  We use getComputedStyle and
				// _getMarginBox/_getContentBox to avoid the extra lookup of
				// the computed style.
				var b = dojo.doc.body;
				var bs = dojo.getComputedStyle(b);
				var bm = dojo._getMarginBox(b, bs);
				var bc = dojo._getContentBox(b, bs);
				l = m.l - (bc.l - bm.l);
				t = m.t - (bc.t - bm.t);
				break;
		}
		this.marginBox.l = l - this.marginBox.l;
		this.marginBox.t = t - this.marginBox.t;
		if(h && h.onFirstMove){
			h.onFirstMove(this, e);
		}

		// Disconnect onmousemove and ontouchmove events that call this function
		dojo.disconnect(this.events.shift());
	},
	destroy: function(){
		// summary:
		//		stops the move, deletes all references, so the object can be garbage-collected
		dojo.forEach(this.events, dojo.disconnect);
		// undo global settings
		var h = this.host;
		if(h && h.onMoveStop){
			h.onMoveStop(this);
		}
		// destroy objects
		this.events = this.node = this.host = null;
	}
});

return dojo.dnd.Mover;
});

},
'dijit/form/ComboBoxMixin':function(){
require({cache:{
'url:dijit/form/templates/DropDownBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n"}});
define("dijit/form/ComboBoxMixin", [
	"dojo/_base/declare", // declare
	"dojo/_base/Deferred",
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/lang", // lang.mixin
	"dojo/store/util/QueryResults",	// dojo.store.util.QueryResults
	"./_AutoCompleterMixin",
	"./_ComboBoxMenu",
	"../_HasDropDown",
	"dojo/text!./templates/DropDownBox.html"
], function(declare, Deferred, kernel, lang, QueryResults, _AutoCompleterMixin, _ComboBoxMenu, _HasDropDown, template){

/*=====
	var _AutoCompleterMixin = dijit.form._AutoCompleterMixin;
	var _ComboBoxMenu = dijit.form._ComboBoxMenu;
	var _HasDropDown = dijit._HasDropDown;
=====*/

	// module:
	//		dijit/form/ComboBoxMixin
	// summary:
	//		Provides main functionality of ComboBox widget

	return declare("dijit.form.ComboBoxMixin", [_HasDropDown, _AutoCompleterMixin], {
		// summary:
		//		Provides main functionality of ComboBox widget

		// dropDownClass: [protected extension] Function String
		//		Dropdown widget class used to select a date/time.
		//		Subclasses should specify this.
		dropDownClass: _ComboBoxMenu,

		// hasDownArrow: Boolean
		//		Set this textbox to have a down arrow button, to display the drop down list.
		//		Defaults to true.
		hasDownArrow: true,

		templateString: template,

		baseClass: "dijitTextBox dijitComboBox",

		/*=====
		// store: [const] dojo.store.api.Store || dojo.data.api.Read
		//		Reference to data provider object used by this ComboBox.
		//
		//		Should be dojo.store.api.Store, but dojo.data.api.Read supported
		//		for backwards compatibility.
		store: null,
		=====*/

		// Set classes like dijitDownArrowButtonHover depending on
		// mouse action over button node
		cssStateNodes: {
			"_buttonNode": "dijitDownArrowButton"
		},

		_setHasDownArrowAttr: function(/*Boolean*/ val){
			this._set("hasDownArrow", val);
			this._buttonNode.style.display = val ? "" : "none";
		},

		_showResultList: function(){
			// hide the tooltip
			this.displayMessage("");
			this.inherited(arguments);
		},

		_setStoreAttr: function(store){
			// For backwards-compatibility, accept dojo.data store in addition to dojo.store.store.  Remove in 2.0.
			if(!store.get){
				lang.mixin(store, {
					_oldAPI: true,
					get: function(id){
						// summary:
						//		Retrieves an object by it's identity. This will trigger a fetchItemByIdentity.
						//		Like dojo.store.DataStore.get() except returns native item.
						var deferred = new Deferred();
						this.fetchItemByIdentity({
							identity: id,
							onItem: function(object){
								deferred.resolve(object);
							},
							onError: function(error){
								deferred.reject(error);
							}
						});
						return deferred.promise;
					},
					query: function(query, options){
						// summary:
						//		Queries the store for objects.   Like dojo.store.DataStore.query()
						//		except returned Deferred contains array of native items.
						var deferred = new Deferred(function(){ fetchHandle.abort && fetchHandle.abort(); });
						var fetchHandle = this.fetch(lang.mixin({
							query: query,
							onBegin: function(count){
								deferred.total = count;
							},
							onComplete: function(results){
								deferred.resolve(results);
							},
							onError: function(error){
								deferred.reject(error);
							}
						}, options));
						return QueryResults(deferred);
					}
				});
			}
			this._set("store", store);
		},

		postMixInProperties: function(){
			// Since _setValueAttr() depends on this.store, _setStoreAttr() needs to execute first.
			// Unfortunately, without special code, it ends up executing second.
			if(this.params.store){
				this._setStoreAttr(this.params.store);
			}

			this.inherited(arguments);

			// User may try to access this.store.getValue() etc.  in a custom labelFunc() function.
			// It's not available with the new data store for handling inline <option> tags, so add it.
			if(!this.params.store){
				var clazz = this.declaredClass;
				lang.mixin(this.store, {
					getValue: function(item, attr){
						kernel.deprecated(clazz + ".store.getValue(item, attr) is deprecated for builtin store.  Use item.attr directly", "", "2.0");
						return item[attr];
					},
					getLabel: function(item){
						kernel.deprecated(clazz + ".store.getLabel(item) is deprecated for builtin store.  Use item.label directly", "", "2.0");
						return item.name;
					},
					fetch: function(args){
						kernel.deprecated(clazz + ".store.fetch() is deprecated for builtin store.", "Use store.query()", "2.0");
						var shim = ["dojo/data/ObjectStore"];	// indirection so it doesn't get rolled into a build
						require(shim, lang.hitch(this, function(ObjectStore){
							new ObjectStore({objectStore: this}).fetch(args);
						}));
					}
				});
			}
		}
	});
});

},
'dijit/form/Select':function(){
require({cache:{
'url:dijit/form/templates/Select.html':"<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tdata-dojo-attach-point=\"_buttonNode,tableNode,focusNode\" cellspacing='0' cellpadding='0'\n\trole=\"combobox\" aria-haspopup=\"true\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents dijitButtonNode\" role=\"presentation\"\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"  data-dojo-attach-point=\"containerNode,_popupStateNode\"></span\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} data-dojo-attach-point=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\n\t\t/></td><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton\"\n\t\t\t\tdata-dojo-attach-point=\"titleNode\" role=\"presentation\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t></tr></tbody\n></table>\n"}});
define("dijit/form/Select", [
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom-attr", // domAttr.set
	"dojo/dom-class", // domClass.add domClass.remove domClass.toggle
	"dojo/dom-construct", // domConstruct.create
	"dojo/dom-geometry", // domGeometry.setMarginBox
	"dojo/_base/event", // event.stop
	"dojo/i18n", // i18n.getLocalization
	"dojo/_base/lang", // lang.hitch
	"./_FormSelectWidget",
	"../_HasDropDown",
	"../Menu",
	"../MenuItem",
	"../MenuSeparator",
	"../Tooltip",
	"dojo/text!./templates/Select.html",
	"dojo/i18n!./nls/validate"
], function(array, declare, domAttr, domClass, domConstruct, domGeometry, event, i18n, lang,
			_FormSelectWidget, _HasDropDown, Menu, MenuItem, MenuSeparator, Tooltip, template){

/*=====
	var _FormSelectWidget = dijit.form._FormSelectWidget;
	var _HasDropDown = dijit._HasDropDown;
	var _FormSelectWidget = dijit._FormSelectWidget;
	var Menu = dijit.Menu;
	var MenuItem = dijit.MenuItem;
	var MenuSeparator = dijit.MenuSeparator;
	var Tooltip = dijit.Tooltip;
=====*/

// module:
//		dijit/form/Select
// summary:
//		This is a "styleable" select box - it is basically a DropDownButton which
//		can take a <select> as its input.


var _SelectMenu = declare("dijit.form._SelectMenu", Menu, {
	// summary:
	//		An internally-used menu for dropdown that allows us a vertical scrollbar
	buildRendering: function(){
		// summary:
		//		Stub in our own changes, so that our domNode is not a table
		//		otherwise, we won't respond correctly to heights/overflows
		this.inherited(arguments);
		var o = (this.menuTableNode = this.domNode);
		var n = (this.domNode = domConstruct.create("div", {style: {overflowX: "hidden", overflowY: "scroll"}}));
		if(o.parentNode){
			o.parentNode.replaceChild(n, o);
		}
		domClass.remove(o, "dijitMenuTable");
		n.className = o.className + " dijitSelectMenu";
		o.className = "dijitReset dijitMenuTable";
		o.setAttribute("role", "listbox");
		n.setAttribute("role", "presentation");
		n.appendChild(o);
	},

	postCreate: function(){
		// summary:
		//		stop mousemove from selecting text on IE to be consistent with other browsers

		this.inherited(arguments);

		this.connect(this.domNode, "onmousemove", event.stop);
	},

	resize: function(/*Object*/ mb){
		// summary:
		//		Overridden so that we are able to handle resizing our
		//		internal widget.  Note that this is not a "full" resize
		//		implementation - it only works correctly if you pass it a
		//		marginBox.
		//
		// mb: Object
		//		The margin box to set this dropdown to.
		if(mb){
			domGeometry.setMarginBox(this.domNode, mb);
			if("w" in mb){
				// We've explicitly set the wrapper <div>'s width, so set <table> width to match.
				// 100% is safer than a pixel value because there may be a scroll bar with
				// browser/OS specific width.
				this.menuTableNode.style.width = "100%";
			}
		}
	}
});

var Select = declare("dijit.form.Select", [_FormSelectWidget, _HasDropDown], {
	// summary:
	//		This is a "styleable" select box - it is basically a DropDownButton which
	//		can take a <select> as its input.

	baseClass: "dijitSelect",

	templateString: template,

	// required: Boolean
	//		Can be true or false, default is false.
	required: false,

	// state: [readonly] String
	//		"Incomplete" if this select is required but unset (i.e. blank value), "" otherwise
	state: "",

	// message: String
	//		Currently displayed error/prompt message
	message: "",

	//	tooltipPosition: String[]
	//		See description of dijit.Tooltip.defaultPosition for details on this parameter.
	tooltipPosition: [],

	// emptyLabel: string
	//		What to display in an "empty" dropdown
	emptyLabel: "&#160;",	// &nbsp;

	// _isLoaded: Boolean
	//		Whether or not we have been loaded
	_isLoaded: false,

	// _childrenLoaded: Boolean
	//		Whether or not our children have been loaded
	_childrenLoaded: false,

	_fillContent: function(){
		// summary:
		//		Set the value to be the first, or the selected index
		this.inherited(arguments);
		// set value from selected option
		if(this.options.length && !this.value && this.srcNodeRef){
			var si = this.srcNodeRef.selectedIndex || 0; // || 0 needed for when srcNodeRef is not a SELECT
			this.value = this.options[si >= 0 ? si : 0].value;
		}
		// Create the dropDown widget
		this.dropDown = new _SelectMenu({id: this.id + "_menu"});
		domClass.add(this.dropDown.domNode, this.baseClass + "Menu");
	},

	_getMenuItemForOption: function(/*dijit.form.__SelectOption*/ option){
		// summary:
		//		For the given option, return the menu item that should be
		//		used to display it.  This can be overridden as needed
		if(!option.value && !option.label){
			// We are a separator (no label set for it)
			return new MenuSeparator();
		}else{
			// Just a regular menu option
			var click = lang.hitch(this, "_setValueAttr", option);
			var item = new MenuItem({
				option: option,
				label: option.label || this.emptyLabel,
				onClick: click,
				disabled: option.disabled || false
			});
			item.focusNode.setAttribute("role", "listitem");
			return item;
		}
	},

	_addOptionItem: function(/*dijit.form.__SelectOption*/ option){
		// summary:
		//		For the given option, add an option to our dropdown.
		//		If the option doesn't have a value, then a separator is added
		//		in that place.
		if(this.dropDown){
			this.dropDown.addChild(this._getMenuItemForOption(option));
		}
	},

	_getChildren: function(){
		if(!this.dropDown){
			return [];
		}
		return this.dropDown.getChildren();
	},

	_loadChildren: function(/*Boolean*/ loadMenuItems){
		// summary:
		//		Resets the menu and the length attribute of the button - and
		//		ensures that the label is appropriately set.
		//	loadMenuItems: Boolean
		//		actually loads the child menu items - we only do this when we are
		//		populating for showing the dropdown.

		if(loadMenuItems === true){
			// this.inherited destroys this.dropDown's child widgets (MenuItems).
			// Avoid this.dropDown (Menu widget) having a pointer to a destroyed widget (which will cause
			// issues later in _setSelected). (see #10296)
			if(this.dropDown){
				delete this.dropDown.focusedChild;
			}
			if(this.options.length){
				this.inherited(arguments);
			}else{
				// Drop down menu is blank but add one blank entry just so something appears on the screen
				// to let users know that they are no choices (mimicing native select behavior)
				array.forEach(this._getChildren(), function(child){ child.destroyRecursive(); });
				var item = new MenuItem({label: "&#160;"});
				this.dropDown.addChild(item);
			}
		}else{
			this._updateSelection();
		}

		this._isLoaded = false;
		this._childrenLoaded = true;

		if(!this._loadingStore){
			// Don't call this if we are loading - since we will handle it later
			this._setValueAttr(this.value);
		}
	},

	_setValueAttr: function(value){
		this.inherited(arguments);
		domAttr.set(this.valueNode, "value", this.get("value"));
		this.validate(this.focused);	// to update this.state
	},

	_setDisabledAttr: function(/*Boolean*/ value){
		this.inherited(arguments);
		this.validate(this.focused);	// to update this.state
	},

	_setRequiredAttr: function(/*Boolean*/ value){
		this._set("required", value);
		this.focusNode.setAttribute("aria-required", value);
		this.validate(this.focused);	// to update this.state
	},

	_setDisplay: function(/*String*/ newDisplay){
		// summary:
		//		sets the display for the given value (or values)
		var lbl = newDisplay || this.emptyLabel;
		this.containerNode.innerHTML = '<span class="dijitReset dijitInline ' + this.baseClass + 'Label">' + lbl + '</span>';
		this.focusNode.setAttribute("aria-valuetext", lbl);
	},

	validate: function(/*Boolean*/ isFocused){
		// summary:
		//		Called by oninit, onblur, and onkeypress, and whenever required/disabled state changes
		// description:
		//		Show missing or invalid messages if appropriate, and highlight textbox field.
		//		Used when a select is initially set to no value and the user is required to
		//		set the value.

		var isValid = this.disabled || this.isValid(isFocused);
		this._set("state", isValid ? "" : "Incomplete");
		this.focusNode.setAttribute("aria-invalid", isValid ? "false" : "true");
		var message = isValid ? "" : this._missingMsg;
		if(message && this.focused && this._hasBeenBlurred){
			Tooltip.show(message, this.domNode, this.tooltipPosition, !this.isLeftToRight());
		}else{
			Tooltip.hide(this.domNode);
		}
		this._set("message", message);
		return isValid;
	},

	isValid: function(/*Boolean*/ /*===== isFocused =====*/){
		// summary:
		//		Whether or not this is a valid value.  The only way a Select
		//		can be invalid is when it's required but nothing is selected.
		return (!this.required || this.value === 0 || !(/^\s*$/.test(this.value || ""))); // handle value is null or undefined
	},

	reset: function(){
		// summary:
		//		Overridden so that the state will be cleared.
		this.inherited(arguments);
		Tooltip.hide(this.domNode);
		this.validate(this.focused);	// to update this.state
	},

	postMixInProperties: function(){
		// summary:
		//		set the missing message
		this.inherited(arguments);
		this._missingMsg = i18n.getLocalization("dijit.form", "validate",
									this.lang).missingMessage;
	},

	postCreate: function(){
		// summary:
		//		stop mousemove from selecting text on IE to be consistent with other browsers

		this.inherited(arguments);

		this.connect(this.domNode, "onmousemove", event.stop);
	},

	_setStyleAttr: function(/*String||Object*/ value){
		this.inherited(arguments);
		domClass.toggle(this.domNode, this.baseClass + "FixedWidth", !!this.domNode.style.width);
	},

	isLoaded: function(){
		return this._isLoaded;
	},

	loadDropDown: function(/*Function*/ loadCallback){
		// summary:
		//		populates the menu
		this._loadChildren(true);
		this._isLoaded = true;
		loadCallback();
	},

	closeDropDown: function(){
		// overriding _HasDropDown.closeDropDown()
		this.inherited(arguments);

		if(this.dropDown && this.dropDown.menuTableNode){
			// Erase possible width: 100% setting from _SelectMenu.resize().
			// Leaving it would interfere with the next openDropDown() call, which
			// queries the natural size of the drop down.
			this.dropDown.menuTableNode.style.width = "";
		}
	},

	uninitialize: function(preserveDom){
		if(this.dropDown && !this.dropDown._destroyed){
			this.dropDown.destroyRecursive(preserveDom);
			delete this.dropDown;
		}
		this.inherited(arguments);
	},

	_onFocus: function(){
		this.validate(true);	// show tooltip if second focus of required tooltip, but no selection
		this.inherited(arguments);
	},

	_onBlur: function(){
		Tooltip.hide(this.domNode);
		this.inherited(arguments);
	}
});

Select._Menu = _SelectMenu;	// for monkey patching

return Select;
});

},
'dijit/_base/manager':function(){
define("dijit/_base/manager", [
	"dojo/_base/array",
	"dojo/_base/config", // defaultDuration
	"../registry",
	".."	// for setting exports to dijit namespace
], function(array, config, registry, dijit){

	// module:
	//		dijit/_base/manager
	// summary:
	//		Shim to methods on registry, plus a few other declarations.
	//		New code should access dijit/registry directly when possible.

	/*=====
	dijit.byId = function(id){
		// summary:
		//		Returns a widget by it's id, or if passed a widget, no-op (like dom.byId())
		// id: String|dijit._Widget
		return registry.byId(id); // dijit._Widget
	};

	dijit.getUniqueId = function(widgetType){
		// summary:
		//		Generates a unique id for a given widgetType
		// widgetType: String
		return registry.getUniqueId(widgetType); // String
	};

	dijit.findWidgets = function(root){
		// summary:
		//		Search subtree under root returning widgets found.
		//		Doesn't search for nested widgets (ie, widgets inside other widgets).
		// root: DOMNode
		return registry.findWidgets(root);
	};

	dijit._destroyAll = function(){
		// summary:
		//		Code to destroy all widgets and do other cleanup on page unload

		return registry._destroyAll();
	};

	dijit.byNode = function(node){
		// summary:
		//		Returns the widget corresponding to the given DOMNode
		// node: DOMNode
		return registry.byNode(node); // dijit._Widget
	};

	dijit.getEnclosingWidget = function(node){
		// summary:
		//		Returns the widget whose DOM tree contains the specified DOMNode, or null if
		//		the node is not contained within the DOM tree of any widget
		// node: DOMNode
		return registry.getEnclosingWidget(node);
	};
	=====*/
	array.forEach(["byId", "getUniqueId", "findWidgets", "_destroyAll", "byNode", "getEnclosingWidget"], function(name){
		dijit[name] = registry[name];
	});

	/*=====
	dojo.mixin(dijit, {
		// defaultDuration: Integer
		//		The default fx.animation speed (in ms) to use for all Dijit
		//		transitional fx.animations, unless otherwise specified
		//		on a per-instance basis. Defaults to 200, overrided by
		//		`djConfig.defaultDuration`
		defaultDuration: 200
	});
	=====*/
	dijit.defaultDuration = config["defaultDuration"] || 200;

	return dijit;
});

},
'dojo/data/ItemFileReadStore':function(){
define("dojo/data/ItemFileReadStore", ["../_base/kernel", "../_base/lang", "../_base/declare", "../_base/array", "../_base/xhr", 
	"../Evented", "../_base/window", "./util/filter", "./util/simpleFetch", "../date/stamp"
], function(kernel, lang, declare, array, xhr, Evented, window, filterUtil, simpleFetch, dateStamp) {
	// module:
	//		dojo/data/ItemFileReadStore
	// summary:
	//		TODOC


var ItemFileReadStore = declare("dojo.data.ItemFileReadStore", [Evented],{
	//	summary:
	//		The ItemFileReadStore implements the dojo.data.api.Read API and reads
	//		data from JSON files that have contents in this format --
	//		{ items: [
	//			{ name:'Kermit', color:'green', age:12, friends:['Gonzo', {_reference:{name:'Fozzie Bear'}}]},
	//			{ name:'Fozzie Bear', wears:['hat', 'tie']},
	//			{ name:'Miss Piggy', pets:'Foo-Foo'}
	//		]}
	//		Note that it can also contain an 'identifer' property that specified which attribute on the items
	//		in the array of items that acts as the unique identifier for that item.
	//
	constructor: function(/* Object */ keywordParameters){
		//	summary: constructor
		//	keywordParameters: {url: String}
		//	keywordParameters: {data: jsonObject}
		//	keywordParameters: {typeMap: object)
		//		The structure of the typeMap object is as follows:
		//		{
		//			type0: function || object,
		//			type1: function || object,
		//			...
		//			typeN: function || object
		//		}
		//		Where if it is a function, it is assumed to be an object constructor that takes the
		//		value of _value as the initialization parameters.  If it is an object, then it is assumed
		//		to be an object of general form:
		//		{
		//			type: function, //constructor.
		//			deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.
		//		}

		this._arrayOfAllItems = [];
		this._arrayOfTopLevelItems = [];
		this._loadFinished = false;
		this._jsonFileUrl = keywordParameters.url;
		this._ccUrl = keywordParameters.url;
		this.url = keywordParameters.url;
		this._jsonData = keywordParameters.data;
		this.data = null;
		this._datatypeMap = keywordParameters.typeMap || {};
		if(!this._datatypeMap['Date']){
			//If no default mapping for dates, then set this as default.
			//We use the dojo.date.stamp here because the ISO format is the 'dojo way'
			//of generically representing dates.
			this._datatypeMap['Date'] = {
											type: Date,
											deserialize: function(value){
												return dateStamp.fromISOString(value);
											}
										};
		}
		this._features = {'dojo.data.api.Read':true, 'dojo.data.api.Identity':true};
		this._itemsByIdentity = null;
		this._storeRefPropName = "_S"; // Default name for the store reference to attach to every item.
		this._itemNumPropName = "_0"; // Default Item Id for isItem to attach to every item.
		this._rootItemPropName = "_RI"; // Default Item Id for isItem to attach to every item.
		this._reverseRefMap = "_RRM"; // Default attribute for constructing a reverse reference map for use with reference integrity
		this._loadInProgress = false; //Got to track the initial load to prevent duelling loads of the dataset.
		this._queuedFetches = [];
		if(keywordParameters.urlPreventCache !== undefined){
			this.urlPreventCache = keywordParameters.urlPreventCache?true:false;
		}
		if(keywordParameters.hierarchical !== undefined){
			this.hierarchical = keywordParameters.hierarchical?true:false;
		}
		if(keywordParameters.clearOnClose){
			this.clearOnClose = true;
		}
		if("failOk" in keywordParameters){
			this.failOk = keywordParameters.failOk?true:false;
		}
	},

	url: "",	// use "" rather than undefined for the benefit of the parser (#3539)

	//Internal var, crossCheckUrl.  Used so that setting either url or _jsonFileUrl, can still trigger a reload
	//when clearOnClose and close is used.
	_ccUrl: "",

	data: null,	// define this so that the parser can populate it

	typeMap: null, //Define so parser can populate.

	//Parameter to allow users to specify if a close call should force a reload or not.
	//By default, it retains the old behavior of not clearing if close is called.  But
	//if set true, the store will be reset to default state.  Note that by doing this,
	//all item handles will become invalid and a new fetch must be issued.
	clearOnClose: false,

	//Parameter to allow specifying if preventCache should be passed to the xhrGet call or not when loading data from a url.
	//Note this does not mean the store calls the server on each fetch, only that the data load has preventCache set as an option.
	//Added for tracker: #6072
	urlPreventCache: false,

	//Parameter for specifying that it is OK for the xhrGet call to fail silently.
	failOk: false,

	//Parameter to indicate to process data from the url as hierarchical
	//(data items can contain other data items in js form).  Default is true
	//for backwards compatibility.  False means only root items are processed
	//as items, all child objects outside of type-mapped objects and those in
	//specific reference format, are left straight JS data objects.
	hierarchical: true,

	_assertIsItem: function(/* item */ item){
		//	summary:
		//		This function tests whether the item passed in is indeed an item in the store.
		//	item:
		//		The item to test for being contained by the store.
		if(!this.isItem(item)){
			throw new Error("dojo.data.ItemFileReadStore: Invalid item argument.");
		}
	},

	_assertIsAttribute: function(/* attribute-name-string */ attribute){
		//	summary:
		//		This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.
		//	attribute:
		//		The attribute to test for being contained by the store.
		if(typeof attribute !== "string"){
			throw new Error("dojo.data.ItemFileReadStore: Invalid attribute argument.");
		}
	},

	getValue: function(	/* item */ item,
						/* attribute-name-string */ attribute,
						/* value? */ defaultValue){
		//	summary:
		//		See dojo.data.api.Read.getValue()
		var values = this.getValues(item, attribute);
		return (values.length > 0)?values[0]:defaultValue; // mixed
	},

	getValues: function(/* item */ item,
						/* attribute-name-string */ attribute){
		//	summary:
		//		See dojo.data.api.Read.getValues()

		this._assertIsItem(item);
		this._assertIsAttribute(attribute);
		// Clone it before returning.  refs: #10474
		return (item[attribute] || []).slice(0); // Array
	},

	getAttributes: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Read.getAttributes()
		this._assertIsItem(item);
		var attributes = [];
		for(var key in item){
			// Save off only the real item attributes, not the special id marks for O(1) isItem.
			if((key !== this._storeRefPropName) && (key !== this._itemNumPropName) && (key !== this._rootItemPropName) && (key !== this._reverseRefMap)){
				attributes.push(key);
			}
		}
		return attributes; // Array
	},

	hasAttribute: function(	/* item */ item,
							/* attribute-name-string */ attribute){
		//	summary:
		//		See dojo.data.api.Read.hasAttribute()
		this._assertIsItem(item);
		this._assertIsAttribute(attribute);
		return (attribute in item);
	},

	containsValue: function(/* item */ item,
							/* attribute-name-string */ attribute,
							/* anything */ value){
		//	summary:
		//		See dojo.data.api.Read.containsValue()
		var regexp = undefined;
		if(typeof value === "string"){
			regexp = filterUtil.patternToRegExp(value, false);
		}
		return this._containsValue(item, attribute, value, regexp); //boolean.
	},

	_containsValue: function(	/* item */ item,
								/* attribute-name-string */ attribute,
								/* anything */ value,
								/* RegExp?*/ regexp){
		//	summary:
		//		Internal function for looking at the values contained by the item.
		//	description:
		//		Internal function for looking at the values contained by the item.  This
		//		function allows for denoting if the comparison should be case sensitive for
		//		strings or not (for handling filtering cases where string case should not matter)
		//
		//	item:
		//		The data item to examine for attribute values.
		//	attribute:
		//		The attribute to inspect.
		//	value:
		//		The value to match.
		//	regexp:
		//		Optional regular expression generated off value if value was of string type to handle wildcarding.
		//		If present and attribute values are string, then it can be used for comparison instead of 'value'
		return array.some(this.getValues(item, attribute), function(possibleValue){
			if(possibleValue !== null && !lang.isObject(possibleValue) && regexp){
				if(possibleValue.toString().match(regexp)){
					return true; // Boolean
				}
			}else if(value === possibleValue){
				return true; // Boolean
			}
		});
	},

	isItem: function(/* anything */ something){
		//	summary:
		//		See dojo.data.api.Read.isItem()
		if(something && something[this._storeRefPropName] === this){
			if(this._arrayOfAllItems[something[this._itemNumPropName]] === something){
				return true;
			}
		}
		return false; // Boolean
	},

	isItemLoaded: function(/* anything */ something){
		//	summary:
		//		See dojo.data.api.Read.isItemLoaded()
		return this.isItem(something); //boolean
	},

	loadItem: function(/* object */ keywordArgs){
		//	summary:
		//		See dojo.data.api.Read.loadItem()
		this._assertIsItem(keywordArgs.item);
	},

	getFeatures: function(){
		//	summary:
		//		See dojo.data.api.Read.getFeatures()
		return this._features; //Object
	},

	getLabel: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Read.getLabel()
		if(this._labelAttr && this.isItem(item)){
			return this.getValue(item,this._labelAttr); //String
		}
		return undefined; //undefined
	},

	getLabelAttributes: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Read.getLabelAttributes()
		if(this._labelAttr){
			return [this._labelAttr]; //array
		}
		return null; //null
	},

	_fetchItems: function(	/* Object */ keywordArgs,
							/* Function */ findCallback,
							/* Function */ errorCallback){
		//	summary:
		//		See dojo.data.util.simpleFetch.fetch()
		var self = this,
		    filter = function(requestArgs, arrayOfItems){
			var items = [],
			    i, key;
			if(requestArgs.query){
				var value,
				    ignoreCase = requestArgs.queryOptions ? requestArgs.queryOptions.ignoreCase : false;

				//See if there are any string values that can be regexp parsed first to avoid multiple regexp gens on the
				//same value for each item examined.  Much more efficient.
				var regexpList = {};
				for(key in requestArgs.query){
					value = requestArgs.query[key];
					if(typeof value === "string"){
						regexpList[key] = filterUtil.patternToRegExp(value, ignoreCase);
					}else if(value instanceof RegExp){
						regexpList[key] = value;
					}
				}
				for(i = 0; i < arrayOfItems.length; ++i){
					var match = true;
					var candidateItem = arrayOfItems[i];
					if(candidateItem === null){
						match = false;
					}else{
						for(key in requestArgs.query){
							value = requestArgs.query[key];
							if(!self._containsValue(candidateItem, key, value, regexpList[key])){
								match = false;
							}
						}
					}
					if(match){
						items.push(candidateItem);
					}
				}
				findCallback(items, requestArgs);
			}else{
				// We want a copy to pass back in case the parent wishes to sort the array.
				// We shouldn't allow resort of the internal list, so that multiple callers
				// can get lists and sort without affecting each other.  We also need to
				// filter out any null values that have been left as a result of deleteItem()
				// calls in ItemFileWriteStore.
				for(i = 0; i < arrayOfItems.length; ++i){
					var item = arrayOfItems[i];
					if(item !== null){
						items.push(item);
					}
				}
				findCallback(items, requestArgs);
			}
		};

		if(this._loadFinished){
			filter(keywordArgs, this._getItemsArray(keywordArgs.queryOptions));
		}else{
			//Do a check on the JsonFileUrl and crosscheck it.
			//If it doesn't match the cross-check, it needs to be updated
			//This allows for either url or _jsonFileUrl to he changed to
			//reset the store load location.  Done this way for backwards
			//compatibility.  People use _jsonFileUrl (even though officially
			//private.
			if(this._jsonFileUrl !== this._ccUrl){
				kernel.deprecated("dojo.data.ItemFileReadStore: ",
					"To change the url, set the url property of the store," +
					" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
				this._ccUrl = this._jsonFileUrl;
				this.url = this._jsonFileUrl;
			}else if(this.url !== this._ccUrl){
				this._jsonFileUrl = this.url;
				this._ccUrl = this.url;
			}

			//See if there was any forced reset of data.
			if(this.data != null){
				this._jsonData = this.data;
				this.data = null;
			}

			if(this._jsonFileUrl){
				//If fetches come in before the loading has finished, but while
				//a load is in progress, we have to defer the fetching to be
				//invoked in the callback.
				if(this._loadInProgress){
					this._queuedFetches.push({args: keywordArgs, filter: filter});
				}else{
					this._loadInProgress = true;
					var getArgs = {
							url: self._jsonFileUrl,
							handleAs: "json-comment-optional",
							preventCache: this.urlPreventCache,
							failOk: this.failOk
						};
					var getHandler = xhr.get(getArgs);
					getHandler.addCallback(function(data){
						try{
							self._getItemsFromLoadedData(data);
							self._loadFinished = true;
							self._loadInProgress = false;

							filter(keywordArgs, self._getItemsArray(keywordArgs.queryOptions));
							self._handleQueuedFetches();
						}catch(e){
							self._loadFinished = true;
							self._loadInProgress = false;
							errorCallback(e, keywordArgs);
						}
					});
					getHandler.addErrback(function(error){
						self._loadInProgress = false;
						errorCallback(error, keywordArgs);
					});

					//Wire up the cancel to abort of the request
					//This call cancel on the deferred if it hasn't been called
					//yet and then will chain to the simple abort of the
					//simpleFetch keywordArgs
					var oldAbort = null;
					if(keywordArgs.abort){
						oldAbort = keywordArgs.abort;
					}
					keywordArgs.abort = function(){
						var df = getHandler;
						if(df && df.fired === -1){
							df.cancel();
							df = null;
						}
						if(oldAbort){
							oldAbort.call(keywordArgs);
						}
					};
				}
			}else if(this._jsonData){
				try{
					this._loadFinished = true;
					this._getItemsFromLoadedData(this._jsonData);
					this._jsonData = null;
					filter(keywordArgs, this._getItemsArray(keywordArgs.queryOptions));
				}catch(e){
					errorCallback(e, keywordArgs);
				}
			}else{
				errorCallback(new Error("dojo.data.ItemFileReadStore: No JSON source data was provided as either URL or a nested Javascript object."), keywordArgs);
			}
		}
	},

	_handleQueuedFetches: function(){
		//	summary:
		//		Internal function to execute delayed request in the store.
		//Execute any deferred fetches now.
		if(this._queuedFetches.length > 0){
			for(var i = 0; i < this._queuedFetches.length; i++){
				var fData = this._queuedFetches[i],
				    delayedQuery = fData.args,
				    delayedFilter = fData.filter;
				if(delayedFilter){
					delayedFilter(delayedQuery, this._getItemsArray(delayedQuery.queryOptions));
				}else{
					this.fetchItemByIdentity(delayedQuery);
				}
			}
			this._queuedFetches = [];
		}
	},

	_getItemsArray: function(/*object?*/queryOptions){
		//	summary:
		//		Internal function to determine which list of items to search over.
		//	queryOptions: The query options parameter, if any.
		if(queryOptions && queryOptions.deep){
			return this._arrayOfAllItems;
		}
		return this._arrayOfTopLevelItems;
	},

	close: function(/*dojo.data.api.Request || keywordArgs || null */ request){
		 //	summary:
		 //		See dojo.data.api.Read.close()
		 if(this.clearOnClose &&
			this._loadFinished &&
			!this._loadInProgress){
			 //Reset all internalsback to default state.  This will force a reload
			 //on next fetch.  This also checks that the data or url param was set
			 //so that the store knows it can get data.  Without one of those being set,
			 //the next fetch will trigger an error.

			 if(((this._jsonFileUrl == "" || this._jsonFileUrl == null) &&
				 (this.url == "" || this.url == null)
				) && this.data == null){
				 console.debug("dojo.data.ItemFileReadStore: WARNING!  Data reload " +
					" information has not been provided." +
					"  Please set 'url' or 'data' to the appropriate value before" +
					" the next fetch");
			 }
			 this._arrayOfAllItems = [];
			 this._arrayOfTopLevelItems = [];
			 this._loadFinished = false;
			 this._itemsByIdentity = null;
			 this._loadInProgress = false;
			 this._queuedFetches = [];
		 }
	},

	_getItemsFromLoadedData: function(/* Object */ dataObject){
		//	summary:
		//		Function to parse the loaded data into item format and build the internal items array.
		//	description:
		//		Function to parse the loaded data into item format and build the internal items array.
		//
		//	dataObject:
		//		The JS data object containing the raw data to convery into item format.
		//
		// 	returns: array
		//		Array of items in store item format.

		// First, we define a couple little utility functions...
		var addingArrays = false,
		    self = this;

		function valueIsAnItem(/* anything */ aValue){
			// summary:
			//		Given any sort of value that could be in the raw json data,
			//		return true if we should interpret the value as being an
			//		item itself, rather than a literal value or a reference.
			// example:
			// 	|	false == valueIsAnItem("Kermit");
			// 	|	false == valueIsAnItem(42);
			// 	|	false == valueIsAnItem(new Date());
			// 	|	false == valueIsAnItem({_type:'Date', _value:'1802-05-14'});
			// 	|	false == valueIsAnItem({_reference:'Kermit'});
			// 	|	true == valueIsAnItem({name:'Kermit', color:'green'});
			// 	|	true == valueIsAnItem({iggy:'pop'});
			// 	|	true == valueIsAnItem({foo:42});
			return (aValue !== null) &&
				(typeof aValue === "object") &&
				(!lang.isArray(aValue) || addingArrays) &&
				(!lang.isFunction(aValue)) &&
				(aValue.constructor == Object || lang.isArray(aValue)) &&
				(typeof aValue._reference === "undefined") &&
				(typeof aValue._type === "undefined") &&
				(typeof aValue._value === "undefined") &&
				self.hierarchical;
		}

		function addItemAndSubItemsToArrayOfAllItems(/* Item */ anItem){
			self._arrayOfAllItems.push(anItem);
			for(var attribute in anItem){
				var valueForAttribute = anItem[attribute];
				if(valueForAttribute){
					if(lang.isArray(valueForAttribute)){
						var valueArray = valueForAttribute;
						for(var k = 0; k < valueArray.length; ++k){
							var singleValue = valueArray[k];
							if(valueIsAnItem(singleValue)){
								addItemAndSubItemsToArrayOfAllItems(singleValue);
							}
						}
					}else{
						if(valueIsAnItem(valueForAttribute)){
							addItemAndSubItemsToArrayOfAllItems(valueForAttribute);
						}
					}
				}
			}
		}

		this._labelAttr = dataObject.label;

		// We need to do some transformations to convert the data structure
		// that we read from the file into a format that will be convenient
		// to work with in memory.

		// Step 1: Walk through the object hierarchy and build a list of all items
		var i,
		    item;
		this._arrayOfAllItems = [];
		this._arrayOfTopLevelItems = dataObject.items;

		for(i = 0; i < this._arrayOfTopLevelItems.length; ++i){
			item = this._arrayOfTopLevelItems[i];
			if(lang.isArray(item)){
				addingArrays = true;
			}
			addItemAndSubItemsToArrayOfAllItems(item);
			item[this._rootItemPropName]=true;
		}

		// Step 2: Walk through all the attribute values of all the items,
		// and replace single values with arrays.  For example, we change this:
		//		{ name:'Miss Piggy', pets:'Foo-Foo'}
		// into this:
		//		{ name:['Miss Piggy'], pets:['Foo-Foo']}
		//
		// We also store the attribute names so we can validate our store
		// reference and item id special properties for the O(1) isItem
		var allAttributeNames = {},
		    key;

		for(i = 0; i < this._arrayOfAllItems.length; ++i){
			item = this._arrayOfAllItems[i];
			for(key in item){
				if(key !== this._rootItemPropName){
					var value = item[key];
					if(value !== null){
						if(!lang.isArray(value)){
							item[key] = [value];
						}
					}else{
						item[key] = [null];
					}
				}
				allAttributeNames[key]=key;
			}
		}

		// Step 3: Build unique property names to use for the _storeRefPropName and _itemNumPropName
		// This should go really fast, it will generally never even run the loop.
		while(allAttributeNames[this._storeRefPropName]){
			this._storeRefPropName += "_";
		}
		while(allAttributeNames[this._itemNumPropName]){
			this._itemNumPropName += "_";
		}
		while(allAttributeNames[this._reverseRefMap]){
			this._reverseRefMap += "_";
		}

		// Step 4: Some data files specify an optional 'identifier', which is
		// the name of an attribute that holds the identity of each item.
		// If this data file specified an identifier attribute, then build a
		// hash table of items keyed by the identity of the items.
		var arrayOfValues;

		var identifier = dataObject.identifier;
		if(identifier){
			this._itemsByIdentity = {};
			this._features['dojo.data.api.Identity'] = identifier;
			for(i = 0; i < this._arrayOfAllItems.length; ++i){
				item = this._arrayOfAllItems[i];
				arrayOfValues = item[identifier];
				var identity = arrayOfValues[0];
				if(!Object.hasOwnProperty.call(this._itemsByIdentity, identity)){
					this._itemsByIdentity[identity] = item;
				}else{
					if(this._jsonFileUrl){
						throw new Error("dojo.data.ItemFileReadStore:  The json data as specified by: [" + this._jsonFileUrl + "] is malformed.  Items within the list have identifier: [" + identifier + "].  Value collided: [" + identity + "]");
					}else if(this._jsonData){
						throw new Error("dojo.data.ItemFileReadStore:  The json data provided by the creation arguments is malformed.  Items within the list have identifier: [" + identifier + "].  Value collided: [" + identity + "]");
					}
				}
			}
		}else{
			this._features['dojo.data.api.Identity'] = Number;
		}

		// Step 5: Walk through all the items, and set each item's properties
		// for _storeRefPropName and _itemNumPropName, so that store.isItem() will return true.
		for(i = 0; i < this._arrayOfAllItems.length; ++i){
			item = this._arrayOfAllItems[i];
			item[this._storeRefPropName] = this;
			item[this._itemNumPropName] = i;
		}

		// Step 6: We walk through all the attribute values of all the items,
		// looking for type/value literals and item-references.
		//
		// We replace item-references with pointers to items.  For example, we change:
		//		{ name:['Kermit'], friends:[{_reference:{name:'Miss Piggy'}}] }
		// into this:
		//		{ name:['Kermit'], friends:[miss_piggy] }
		// (where miss_piggy is the object representing the 'Miss Piggy' item).
		//
		// We replace type/value pairs with typed-literals.  For example, we change:
		//		{ name:['Nelson Mandela'], born:[{_type:'Date', _value:'1918-07-18'}] }
		// into this:
		//		{ name:['Kermit'], born:(new Date(1918, 6, 18)) }
		//
		// We also generate the associate map for all items for the O(1) isItem function.
		for(i = 0; i < this._arrayOfAllItems.length; ++i){
			item = this._arrayOfAllItems[i]; // example: { name:['Kermit'], friends:[{_reference:{name:'Miss Piggy'}}] }
			for(key in item){
				arrayOfValues = item[key]; // example: [{_reference:{name:'Miss Piggy'}}]
				for(var j = 0; j < arrayOfValues.length; ++j){
					value = arrayOfValues[j]; // example: {_reference:{name:'Miss Piggy'}}
					if(value !== null && typeof value == "object"){
						if(("_type" in value) && ("_value" in value)){
							var type = value._type; // examples: 'Date', 'Color', or 'ComplexNumber'
							var mappingObj = this._datatypeMap[type]; // examples: Date, dojo.Color, foo.math.ComplexNumber, {type: dojo.Color, deserialize(value){ return new dojo.Color(value)}}
							if(!mappingObj){
								throw new Error("dojo.data.ItemFileReadStore: in the typeMap constructor arg, no object class was specified for the datatype '" + type + "'");
							}else if(lang.isFunction(mappingObj)){
								arrayOfValues[j] = new mappingObj(value._value);
							}else if(lang.isFunction(mappingObj.deserialize)){
								arrayOfValues[j] = mappingObj.deserialize(value._value);
							}else{
								throw new Error("dojo.data.ItemFileReadStore: Value provided in typeMap was neither a constructor, nor a an object with a deserialize function");
							}
						}
						if(value._reference){
							var referenceDescription = value._reference; // example: {name:'Miss Piggy'}
							if(!lang.isObject(referenceDescription)){
								// example: 'Miss Piggy'
								// from an item like: { name:['Kermit'], friends:[{_reference:'Miss Piggy'}]}
								arrayOfValues[j] = this._getItemByIdentity(referenceDescription);
							}else{
								// example: {name:'Miss Piggy'}
								// from an item like: { name:['Kermit'], friends:[{_reference:{name:'Miss Piggy'}}] }
								for(var k = 0; k < this._arrayOfAllItems.length; ++k){
									var candidateItem = this._arrayOfAllItems[k],
									    found = true;
									for(var refKey in referenceDescription){
										if(candidateItem[refKey] != referenceDescription[refKey]){
											found = false;
										}
									}
									if(found){
										arrayOfValues[j] = candidateItem;
									}
								}
							}
							if(this.referenceIntegrity){
								var refItem = arrayOfValues[j];
								if(this.isItem(refItem)){
									this._addReferenceToMap(refItem, item, key);
								}
							}
						}else if(this.isItem(value)){
							//It's a child item (not one referenced through _reference).
							//We need to treat this as a referenced item, so it can be cleaned up
							//in a write store easily.
							if(this.referenceIntegrity){
								this._addReferenceToMap(value, item, key);
							}
						}
					}
				}
			}
		}
	},

	_addReferenceToMap: function(/*item*/ refItem, /*item*/ parentItem, /*string*/ attribute){
		 //	summary:
		 //		Method to add an reference map entry for an item and attribute.
		 //	description:
		 //		Method to add an reference map entry for an item and attribute. 		 //
		 //	refItem:
		 //		The item that is referenced.
		 //	parentItem:
		 //		The item that holds the new reference to refItem.
		 //	attribute:
		 //		The attribute on parentItem that contains the new reference.

		 //Stub function, does nothing.  Real processing is in ItemFileWriteStore.
	},

	getIdentity: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Identity.getIdentity()
		var identifier = this._features['dojo.data.api.Identity'];
		if(identifier === Number){
			return item[this._itemNumPropName]; // Number
		}else{
			var arrayOfValues = item[identifier];
			if(arrayOfValues){
				return arrayOfValues[0]; // Object || String
			}
		}
		return null; // null
	},

	fetchItemByIdentity: function(/* Object */ keywordArgs){
		//	summary:
		//		See dojo.data.api.Identity.fetchItemByIdentity()

		// Hasn't loaded yet, we have to trigger the load.
		var item,
		    scope;
		if(!this._loadFinished){
			var self = this;
			//Do a check on the JsonFileUrl and crosscheck it.
			//If it doesn't match the cross-check, it needs to be updated
			//This allows for either url or _jsonFileUrl to he changed to
			//reset the store load location.  Done this way for backwards
			//compatibility.  People use _jsonFileUrl (even though officially
			//private.
			if(this._jsonFileUrl !== this._ccUrl){
				kernel.deprecated("dojo.data.ItemFileReadStore: ",
					"To change the url, set the url property of the store," +
					" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
				this._ccUrl = this._jsonFileUrl;
				this.url = this._jsonFileUrl;
			}else if(this.url !== this._ccUrl){
				this._jsonFileUrl = this.url;
				this._ccUrl = this.url;
			}

			//See if there was any forced reset of data.
			if(this.data != null && this._jsonData == null){
				this._jsonData = this.data;
				this.data = null;
			}

			if(this._jsonFileUrl){

				if(this._loadInProgress){
					this._queuedFetches.push({args: keywordArgs});
				}else{
					this._loadInProgress = true;
					var getArgs = {
							url: self._jsonFileUrl,
							handleAs: "json-comment-optional",
							preventCache: this.urlPreventCache,
							failOk: this.failOk
					};
					var getHandler = xhr.get(getArgs);
					getHandler.addCallback(function(data){
						var scope = keywordArgs.scope?keywordArgs.scope:window.global;
						try{
							self._getItemsFromLoadedData(data);
							self._loadFinished = true;
							self._loadInProgress = false;
							item = self._getItemByIdentity(keywordArgs.identity);
							if(keywordArgs.onItem){
								keywordArgs.onItem.call(scope, item);
							}
							self._handleQueuedFetches();
						}catch(error){
							self._loadInProgress = false;
							if(keywordArgs.onError){
								keywordArgs.onError.call(scope, error);
							}
						}
					});
					getHandler.addErrback(function(error){
						self._loadInProgress = false;
						if(keywordArgs.onError){
							var scope = keywordArgs.scope?keywordArgs.scope:window.global;
							keywordArgs.onError.call(scope, error);
						}
					});
				}

			}else if(this._jsonData){
				// Passed in data, no need to xhr.
				self._getItemsFromLoadedData(self._jsonData);
				self._jsonData = null;
				self._loadFinished = true;
				item = self._getItemByIdentity(keywordArgs.identity);
				if(keywordArgs.onItem){
					scope = keywordArgs.scope?keywordArgs.scope:window.global;
					keywordArgs.onItem.call(scope, item);
				}
			}
		}else{
			// Already loaded.  We can just look it up and call back.
			item = this._getItemByIdentity(keywordArgs.identity);
			if(keywordArgs.onItem){
				scope = keywordArgs.scope?keywordArgs.scope:window.global;
				keywordArgs.onItem.call(scope, item);
			}
		}
	},

	_getItemByIdentity: function(/* Object */ identity){
		//	summary:
		//		Internal function to look an item up by its identity map.
		var item = null;
		if(this._itemsByIdentity){
			// If this map is defined, we need to just try to get it.  If it fails
			// the item does not exist.
			if(Object.hasOwnProperty.call(this._itemsByIdentity, identity)){
				item = this._itemsByIdentity[identity];
			}
		}else if (Object.hasOwnProperty.call(this._arrayOfAllItems, identity)){
			item = this._arrayOfAllItems[identity];
		}
		if(item === undefined){
			item = null;
		}
		return item; // Object
	},

	getIdentityAttributes: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Identity.getIdentityAttributes()

		var identifier = this._features['dojo.data.api.Identity'];
		if(identifier === Number){
			// If (identifier === Number) it means getIdentity() just returns
			// an integer item-number for each item.  The dojo.data.api.Identity
			// spec says we need to return null if the identity is not composed
			// of attributes
			return null; // null
		}else{
			return [identifier]; // Array
		}
	},

	_forceLoad: function(){
		//	summary:
		//		Internal function to force a load of the store if it hasn't occurred yet.  This is required
		//		for specific functions to work properly.
		var self = this;
		//Do a check on the JsonFileUrl and crosscheck it.
		//If it doesn't match the cross-check, it needs to be updated
		//This allows for either url or _jsonFileUrl to he changed to
		//reset the store load location.  Done this way for backwards
		//compatibility.  People use _jsonFileUrl (even though officially
		//private.
		if(this._jsonFileUrl !== this._ccUrl){
			kernel.deprecated("dojo.data.ItemFileReadStore: ",
				"To change the url, set the url property of the store," +
				" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
			this._ccUrl = this._jsonFileUrl;
			this.url = this._jsonFileUrl;
		}else if(this.url !== this._ccUrl){
			this._jsonFileUrl = this.url;
			this._ccUrl = this.url;
		}

		//See if there was any forced reset of data.
		if(this.data != null){
			this._jsonData = this.data;
			this.data = null;
		}

		if(this._jsonFileUrl){
				var getArgs = {
					url: this._jsonFileUrl,
					handleAs: "json-comment-optional",
					preventCache: this.urlPreventCache,
					failOk: this.failOk,
					sync: true
				};
			var getHandler = xhr.get(getArgs);
			getHandler.addCallback(function(data){
				try{
					//Check to be sure there wasn't another load going on concurrently
					//So we don't clobber data that comes in on it.  If there is a load going on
					//then do not save this data.  It will potentially clobber current data.
					//We mainly wanted to sync/wait here.
					//TODO:  Revisit the loading scheme of this store to improve multi-initial
					//request handling.
					if(self._loadInProgress !== true && !self._loadFinished){
						self._getItemsFromLoadedData(data);
						self._loadFinished = true;
					}else if(self._loadInProgress){
						//Okay, we hit an error state we can't recover from.  A forced load occurred
						//while an async load was occurring.  Since we cannot block at this point, the best
						//that can be managed is to throw an error.
						throw new Error("dojo.data.ItemFileReadStore:  Unable to perform a synchronous load, an async load is in progress.");
					}
				}catch(e){
					console.log(e);
					throw e;
				}
			});
			getHandler.addErrback(function(error){
				throw error;
			});
		}else if(this._jsonData){
			self._getItemsFromLoadedData(self._jsonData);
			self._jsonData = null;
			self._loadFinished = true;
		}
	}
});
//Mix in the simple fetch implementation to this class.
lang.extend(ItemFileReadStore,simpleFetch);

return ItemFileReadStore;
});

},
'curam/validation/calendar':function(){
define("curam/validation/calendar", ["curam/define"
        ], function() {
  
  curam.define.singleton("curam.validation.calendar", {
    /* This will be initialized with a localized message by the generated code. */
    invalidGotoDateEntered: null
  });
  
  return curam.validation.calendar;
});

},
'curam/widget/_TabButton':function(){
require({cache:{
'url:curam/widget/templates/_TabButton.html':"<div role=\"presentation\" data-dojo-attach-point=\"titleNode\" data-dojo-attach-event='onclick:onClick' class='dijitTab'>\r\n    <div role=\"presentation\" class='dijitTabInnerDiv' data-dojo-attach-point='innerDiv'>\r\n        <div role=\"presentation\" class='dijitTabContent' data-dojo-attach-point='tabContent'>\r\n          <div role=\"presentation\" aria-labelledby='${id}_tabLabel'>\r\n            <img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" data-dojo-attach-point='iconNode' />\r\n            <span data-dojo-attach-point='containerNode,focusNode' class='tabLabel' id='${id}_tabLabel'></span>\r\n            <span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" data-dojo-attach-point='closeNode'\r\n                data-dojo-attach-event='onclick: onClickCloseButton' role=\"presentation\">\r\n                <span data-dojo-attach-point='closeText' class='dijitTabCloseText'>Close Tab</span\r\n            ></span>\r\n      </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"}});
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.widget._TabButton
 * @namespace Customized dijit.layout._TabButton class.
 *
 * This code has been taken from Dojo 1.4.0 source and small improvements
 * have been made to it. There are number of TODOs in the code, but they
 * belong to Dojo people and there's no need for us to worry about them.
 *
 */
define("curam/widget/_TabButton", ["dojo/dom-attr",
        "dojo/dom-class",
        "dojo/i18n",
        "dojo/_base/lang",
        "dojo/text!curam/widget/templates/_TabButton.html",
        "dojo/_base/connect",
        "dijit/layout/StackController", // to load the base class dijit.layout._StackButton
        "dijit/Menu",
        "dijit/MenuItem",
        "curam/widget/MenuItem",
        "curam/util/ResourceBundle"
        ], function(domAttr, domClass, i18n, lang, template, connect) {
/*
 * Modification History
 * --------------------
 * 04-Feb-2014  MV  [CR00418064] Refactor tab context info handler for better
 *      performance.
 * 04-Aug-2013  NLH  [CR00388987] Toggle button on context panel disappears.
 * 18-Jul-2013  SB  [CR00388308] Added tab context event handler.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 06-Feb-2013  SB  [CR00368739] Updated id of the focusNode.
 * 14-Aug-2012  MV  [CR00338135] Remove dependency on full Dojo API.
 * 09-Aug-2012  MV  [CR00337714] Load HTML template using the new mechanism. 
 * 16-Mar-2012  BOS [TEC-9823]   Localizing the tooltip for closing a tab
 * 30-Nov-2011  SB  [CR00293890] Updated span tag inner text for close tab.
 * 03-Dec-2010  MV [CR00232963] Add ability to disable and hide the button.
 */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "TabMenu");
  var bundle = new curam.util.ResourceBundle("TabMenu");
  
  /**
   * Adds tab context string to each tab, e.g 'Tab 1 of 4'.
   */
  connect.subscribe("/curam/tab/labelUpdated", function() {
    var tabs,
        tabLists = dojo.query(".dijitTabContainerTop-tabs");
    
    tabLists.forEach(function(tabList) {
      tabs = dojo.query('.tabLabel', tabList);

      tabs.forEach(function(tab, index) {
        var tabContext = "  [" + (index + 1) + " "
            + LOCALISED_TABCONTAINER_CONTEXT_OF + " " + tabs.length + "]";
        var label = tabs[index].innerHTML;
        tab.setAttribute("aria-label", label + tabContext);
        tab.setAttribute("title", label);
      }); 
    });
  });
  
  var _TabButton = dojo.declare("curam.widget._TabButton", dijit.layout._StackButton,
 
/**
 * A tab (the thing you click to select a pane).
 * Contains the title of the pane, and optionally a close-button to destroy
 * the pane. This is an internal widget and should not be instantiated
 * directly.
 *
 * @private
 *
 * @lends curam.widget._TabButton.prototype
 */
{
  //>>> Override the templateString to add the class 'dijitTab' to the
  //>>> outer div of each tab button
  templateString: template,

  // Override _FormWidget.scrollOnFocus.
  // Don't scroll the whole tab container into view when the button is focused.
  scrollOnFocus: false,

  curamDisabled: false,
  curamVisible: true,

  // baseClass: String
  //    The CSS class applied to the domNode.
  baseClass: "dijitTab",

  postMixInProperties: function(){
    // Override blank iconClass from Button to do tab height adjustment on IE6,
    // to make sure that tabs with and w/out close icons are same height
    if(!this.iconClass){
      this.iconClass = "dijitTabButtonIcon";
    }
  },

  postCreate: function(){
    this.inherited(arguments);
    dojo.setSelectable(this.containerNode, false);

    // If a custom icon class has not been set for the
    // tab icon, set its width to one pixel. This ensures
    // that the height styling of the tab is maintained,
    // as it is based on the height of the icon.
    // TODO: I still think we can just set dijitTabButtonIcon to 1px in CSS <Bill>
    if(this.iconNode.className == "dijitTabButtonIcon"){
      dojo.style(this.iconNode, "width", "1px");
    }
    
    domAttr.set(this.focusNode, "id", this.id + "_tabLabel");
  },

  startup: function(){
    if (dojo.isIE == 6) {
      //>>> execute the superclass' IE6 specific function
      this.inherited(arguments);

    } else {
      //>>> otherwise skip it and call super-superclass' function
      dijit.layout._StackButton.prototype.startup.apply(this, arguments);
    }
  },

  _setCloseButtonAttr: function(/*Boolean*/ disp) {
    this._set("closeButton", disp);
    domClass.toggle(this.innerDiv, "dijitClosable", disp);
    this.closeNode.style.display = disp ? "" : "none";
    
    if(disp){
      var _nlsResources = i18n.getLocalization("dijit", "common");

      if(this.closeNode){
        domAttr.set(this.closeNode, "title", _nlsResources.itemClose);
      }
      // add context menu onto title button
              //>>> addition next line had to add "dijit."
      this._closeMenu = new dijit.Menu({
        id: this.id+"_Menu",
                      dir: this.dir,
                      lang: this.lang,
                      textDir: this.textDir,
        targetNodeIds: [this.domNode]
      });

      //>>> addition next line had to add "dijit."
      // menu item to close single tab.
      var closeMI = new curam.widget.MenuItem({
        onClickValue: "_onClick",
        label: _nlsResources.itemClose,
        dir: this.dir,
        lang: this.lang,
        textDir: this.textDir,
        onClick: lang.hitch(this, "onClickCloseButton")
      });
      var closeAllMI = new curam.widget.MenuItem({
        onClickValue: "_onClickAll",
        label: bundle.getProperty("close.all.tabs.text"),
        dir: this.dir,
        lang: this.lang,
        textDir: this.textDir,
        onClick: lang.hitch(this, "onClickCloseButton")});
      this._closeMenu.addChild(closeMI);
      this._closeMenu.addChild(closeAllMI);
    }else{
        //>>> addition next line only
      dojo.addClass(this.titleNode,"hasNoCloseButton");
      if(this._closeMenu){
        this._closeMenu.destroyRecursive();
        delete this._closeMenu;
      }
    }
  },
  
  /**
   * Hook for attr('disabled', ...) to work.
   * Enable or disable this button.
   */
  _setCuramDisabledAttr: function(/*Boolean*/ value) {
    this.curamDisabled = value;
    this._swapState(this.domNode, this.curamDisabled, "disabled", "enabled");
  },
  
  /**
   * Hook for attr('visible', ...) to work.
   * Show or hide this button.
   */
  _setCuramVisibleAttr: function(/*Boolean*/ value) {
    this.curamVisible = value;
    this._swapState(this.domNode, this.curamVisible, "visible", "hidden");
  },
  
  /**
   * Given a DOM node, boolean state and class names for true and false
   * alternatives, the function sets the appropriate classes on the node.
   */
  _swapState: function(node, state, classTrue, classFalse) {
    if (state) {
      dojo.replaceClass(node, classTrue, classFalse);

    } else {
      dojo.replaceClass(node, classFalse, classTrue);
    }
  },
  
  destroy: function() {
    connect.publish("/curam/tab/labelUpdated");

    if (this._closeMenu) {
      this._closeMenu.destroyRecursive();
      delete this._closeMenu;
    }
    this.inherited(arguments);
  }
  });
  
  return _TabButton;
});

},
'dijit/form/ComboButton':function(){
require({cache:{
'url:dijit/form/templates/ComboButton.html':"<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tcellspacing='0' cellpadding='0' role=\"presentation\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonNode\" data-dojo-attach-point=\"buttonNode\" data-dojo-attach-event=\"ondijitclick:_onClick,onkeypress:_onButtonKeyPress\"\n\t\t><div id=\"${id}_button\" class=\"dijitReset dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><div class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitInline dijitButtonText\" id=\"${id}_label\" data-dojo-attach-point=\"containerNode\" role=\"presentation\"></div\n\t\t></div\n\t\t></td\n\t\t><td id=\"${id}_arrow\" class='dijitReset dijitRight dijitButtonNode dijitArrowButton'\n\t\t\tdata-dojo-attach-point=\"_popupStateNode,focusNode,_buttonNode\"\n\t\t\tdata-dojo-attach-event=\"onkeypress:_onArrowKeyPress\"\n\t\t\ttitle=\"${optionsTitle}\"\n\t\t\trole=\"button\" aria-haspopup=\"true\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t\t><td style=\"display:none !important;\"\n\t\t\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" data-dojo-attach-point=\"valueNode\"\n\t\t/></td></tr></tbody\n></table>\n"}});
define("dijit/form/ComboButton", [
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/keys", // keys
	"../focus",		// focus.focus()
	"./DropDownButton",
	"dojo/text!./templates/ComboButton.html"
], function(declare, event, keys, focus, DropDownButton, template){

/*=====
	var DropDownButton = dijit.form.DropDownButton;
=====*/

// module:
//		dijit/form/ComboButton
// summary:
//		A combination button and drop-down button.

return declare("dijit.form.ComboButton", DropDownButton, {
	// summary:
	//		A combination button and drop-down button.
	//		Users can click one side to "press" the button, or click an arrow
	//		icon to display the drop down.
	//
	// example:
	// |	<button data-dojo-type="dijit.form.ComboButton" onClick="...">
	// |		<span>Hello world</span>
	// |		<div data-dojo-type="dijit.Menu">...</div>
	// |	</button>
	//
	// example:
	// |	var button1 = new dijit.form.ComboButton({label: "hello world", onClick: foo, dropDown: "myMenu"});
	// |	dojo.body().appendChild(button1.domNode);
	//

	templateString: template,

	// Map widget attributes to DOMNode attributes.
	_setIdAttr: "",	// override _FormWidgetMixin which puts id on the focusNode
	_setTabIndexAttr: ["focusNode", "titleNode"],
	_setTitleAttr: "titleNode",

	// optionsTitle: String
	//		Text that describes the options menu (accessibility)
	optionsTitle: "",

	baseClass: "dijitComboButton",

	// Set classes like dijitButtonContentsHover or dijitArrowButtonActive depending on
	// mouse action over specified node
	cssStateNodes: {
		"buttonNode": "dijitButtonNode",
		"titleNode": "dijitButtonContents",
		"_popupStateNode": "dijitDownArrowButton"
	},

	_focusedNode: null,

	_onButtonKeyPress: function(/*Event*/ evt){
		// summary:
		//		Handler for right arrow key when focus is on left part of button
		if(evt.charOrCode == keys[this.isLeftToRight() ? "RIGHT_ARROW" : "LEFT_ARROW"]){
			focus.focus(this._popupStateNode);
			event.stop(evt);
		}
	},

	_onArrowKeyPress: function(/*Event*/ evt){
		// summary:
		//		Handler for left arrow key when focus is on right part of button
		if(evt.charOrCode == keys[this.isLeftToRight() ? "LEFT_ARROW" : "RIGHT_ARROW"]){
			focus.focus(this.titleNode);
			event.stop(evt);
		}
	},

	focus: function(/*String*/ position){
		// summary:
		//		Focuses this widget to according to position, if specified,
		//		otherwise on arrow node
		// position:
		//		"start" or "end"
		if(!this.disabled){
			focus.focus(position == "start" ? this.titleNode : this._popupStateNode);
		}
	}
});

});

},
'curam/pagination/ExpandableListModel':function(){
/*
 * Modification History
 * --------------------
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 05-Jun-2012  MV  [CR00327652] Remove incorrect colon after dependency list.
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 23-Dec-2010  MV  [CR00239961] Fix the row counting function.
 * 22-Dec-2010 MV  [CR00239864] Handle the case when the associated list table
 *    is not found. 
 * 20-Dec-2010  MV  [CR00239063] Move common function to pagination.js
 * 13-Dec-2010  MV  [CR00237821] Performance improvement - the list rows now
 *    come packed in script tags - unpack before using.
 * 26-Oct-2010  MV  [CR00223441] JavaScript refactoring.
 * 11-May-2010 MV [CR00196066] Cleanup the code, name variables properly.
 * 26-Mar-2010 MV [CR.....] Initial version.
 * 
 */


/**
 * @name curam.pagination.ExpandableListModel
 * 
 * @namespace ExpandableListModel provides access to expandable lists rendered as a HTML
 * table with each logical row being represented by multiple actual rows in DOM. 
 * The rendering is done in gen-jsp.xsl.
 *
 */
define("curam/pagination/ExpandableListModel", ["curam/util/ExpandableLists",
        "curam/debug",
        "curam/pagination",
        "curam/util/ResourceBundle"
        ], function() {

/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");

var ExpandableListModel = dojo.declare("curam.pagination.ExpandableListModel", null, 
/** @lends curam.pagination.ExpandableListModel.prototype */    
{
  _rowCount: null,
  
  /**
   * Instantiate the model and intialize with the corresponding table node. 
   */
  constructor: function(tableId) {
    this.tableNode = dojo.query("table.paginated-list-id-" + tableId)[0];
    if (!this.tableNode) {
      throw "Table node for ID " + tableId + " not found - failing!";
    }
    curam.debug.log("curam.pagination.ExpandableListModel " 
      + bundle.getProperty("curam.pagination.ExpandableListModel"), 
      this.tableNode);
    this._id = tableId;
  },

  getId: function() {
    return this._id;
  },

  getRowCount: function() {
    if (this._rowCount == null) {
      this._rowCount = 0;
      // count the rows in script blocks
      var scripts = dojo.query("tbody > script.hidden-list-rows", this.tableNode);
      for (var i = 0; i < scripts.length; i++) {
        var script = scripts[i];
        var isLastScript = (i == scripts.length - 1);
        if (!isLastScript) {
          // for most script blocks, rely on the page size
          // multiply by 2 as every logical row is represented by 2 TRs
          this._rowCount += (curam.pagination.getNumRowsInBlock(script) * 2);
        
        } else {
          // for the last page we must load the contents as it may contain smaller
          // number of rows than page size. These will be counted below.
          curam.pagination.unpackRows(script);
        }
      };
      // now count the row nodes
      var rowNodesCount = dojo.query("tbody > tr", this.tableNode).length;
      this._rowCount += rowNodesCount;
    }
    
    if (this._rowCount <= 1) {
      // gen-jsp.xsl always adds a single dummy row for empty lists.
      return 1;

    } else {
      // divide by 2 as every logical row is represented by 2 TRs
      return this._rowCount / 2;
    }
  },

  hideRange: function(startIndex, endIndex) {
    var rows = this._getRowNodes(startIndex, endIndex);
    
    for (var i = startIndex; i <= endIndex; i++) {
      var realRowIndex = (2 * i) - 2;
      var detailRowIndex = (2 * i) - 1;
      
      dojo.style(rows[realRowIndex], "display", "none");
      dojo.removeClass(rows[realRowIndex],"even-last-row");
      dojo.removeClass(rows[realRowIndex],"odd-last-row");
      if (rows.length > detailRowIndex) {
        var detailsRow = rows[detailRowIndex];
        if (detailsRow) {
          detailsRow._curam_pagination_expanded =
              curam.util.ExpandableLists.isDetailsRowExpanded(detailsRow);
          curam.util.ExpandableLists.setDetailsRowExpandedState(
            rows[realRowIndex], detailsRow, false);
        }
      }
    }
  },

  showRange: function(startIndex, endIndex) {
    var rows = this._getRowNodes(startIndex, endIndex);
    
    // set the proper CSS class for the last row
    var lastRowCssClass =
        (endIndex % 2 == 0) ? "even-last-row" : "odd-last-row";
    // Multiplying by 2 as expanded list takes into account 
    // the detail row, subtract 2 to get the last displayed row.
    dojo.addClass(rows[(endIndex * 2) - 2], lastRowCssClass);
    
    for (var i = startIndex; i <= endIndex; i++) {
      var realRowIndex = (2 * i) - 2;
      var detailRowIndex = (2 * i) - 1;
      dojo.style(rows[realRowIndex], "display", "");
      if (rows.length > detailRowIndex) {
        var detailsRow = rows[detailRowIndex];
        if (detailsRow) {
          curam.util.ExpandableLists.setDetailsRowExpandedState(
              rows[realRowIndex], detailsRow,
              detailsRow._curam_pagination_expanded);
        }
      }
    }
  },

  _getRowNodes: function(startIndex, endIndex) {
    // read the list content - any rows and script blocks
    var listContent = curam.pagination.readListContent(this.tableNode);

    // go through the required range and expand any script blocks in the way
    for(var i = 1; i <= (endIndex * 2) && i <= listContent.length; i++) {
      var node = listContent[i - 1];
      if (node.tagName == "SCRIPT") {
        // at least part of the required row range is packed in a script tag
        // expand it now
        curam.pagination.unpackRows(node);
        
        // re-read content
        listContent = curam.pagination.readListContent(this.tableNode);
        // and skip the script block in the count
        i--;
      }
    }
    
    return dojo.query("tbody > tr", this.tableNode);
  }
});

return ExpandableListModel;
});

},
'dojo/touch':function(){
define("dojo/touch", ["./_base/kernel", "./on", "./has", "./mouse"], function(dojo, on, has, mouse){
// module:
//		dojo/touch

/*=====
	dojo.touch = {
		// summary:
		//		This module provides unified touch event handlers by exporting
		//		press, move, release and cancel which can also run well on desktop.
		//		Based on http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html
		//
		// example:
		//		1. Used with dojo.connect()
		//		|	dojo.connect(node, dojo.touch.press, function(e){});
		//		|	dojo.connect(node, dojo.touch.move, function(e){});
		//		|	dojo.connect(node, dojo.touch.release, function(e){});
		//		|	dojo.connect(node, dojo.touch.cancel, function(e){});
		//
		//		2. Used with dojo.on
		//		|	define(["dojo/on", "dojo/touch"], function(on, touch){
		//		|		on(node, touch.press, function(e){});
		//		|		on(node, touch.move, function(e){});
		//		|		on(node, touch.release, function(e){});
		//		|		on(node, touch.cancel, function(e){});
		//
		//		3. Used with dojo.touch.* directly
		//		|	dojo.touch.press(node, function(e){});
		//		|	dojo.touch.move(node, function(e){});
		//		|	dojo.touch.release(node, function(e){});
		//		|	dojo.touch.cancel(node, function(e){});
		
		press: function(node, listener){
			// summary:
			//		Register a listener to 'touchstart'|'mousedown' for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		move: function(node, listener){
			// summary:
			//		Register a listener to 'touchmove'|'mousemove' for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		release: function(node, listener){
			// summary:
			//		Register a listener to 'touchend'|'mouseup' for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		cancel: function(node, listener){
			// summary:
			//		Register a listener to 'touchcancel'|'mouseleave' for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		}
	};
=====*/

	function _handle(/*String - press | move | release | cancel*/type){
		return function(node, listener){//called by on(), see dojo.on
			return on(node, type, listener);
		};
	}
	var touch = has("touch");
	//device neutral events - dojo.touch.press|move|release|cancel
	dojo.touch = {
		press: _handle(touch ? "touchstart": "mousedown"),
		move: _handle(touch ? "touchmove": "mousemove"),
		release: _handle(touch ? "touchend": "mouseup"),
		cancel: touch ? _handle("touchcancel") : mouse.leave
	};
	return dojo.touch;
});
},
'dojo/cache':function(){
define("dojo/cache", ["./_base/kernel", "./text"], function(dojo, text){
	// module:
	//		dojo/cache
	// summary:
	//		The module defines dojo.cache by loading dojo/text.

	//dojo.cache is defined in dojo/text
	return dojo.cache;
});

},
'dijit/DialogUnderlay':function(){
define("dijit/DialogUnderlay", [
	"dojo/_base/declare", // declare
	"dojo/dom-attr", // domAttr.set
	"dojo/_base/window", // win.body
	"dojo/window", // winUtils.getBox
	"./_Widget",
	"./_TemplatedMixin",
	"./BackgroundIframe"
], function(declare, domAttr, win, winUtils, _Widget, _TemplatedMixin, BackgroundIframe){

/*=====
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
=====*/

	// module:
	//		dijit/DialogUnderlay
	// summary:
	//		The component that blocks the screen behind a `dijit.Dialog`

	return declare("dijit.DialogUnderlay", [_Widget, _TemplatedMixin], {
		// summary:
		//		The component that blocks the screen behind a `dijit.Dialog`
		//
		// description:
		// 		A component used to block input behind a `dijit.Dialog`. Only a single
		//		instance of this widget is created by `dijit.Dialog`, and saved as
		//		a reference to be shared between all Dialogs as `dijit._underlay`
		//
		//		The underlay itself can be styled based on and id:
		//	|	#myDialog_underlay { background-color:red; }
		//
		//		In the case of `dijit.Dialog`, this id is based on the id of the Dialog,
		//		suffixed with _underlay.

		// Template has two divs; outer div is used for fade-in/fade-out, and also to hold background iframe.
		// Inner div has opacity specified in CSS file.
		templateString: "<div class='dijitDialogUnderlayWrapper'><div class='dijitDialogUnderlay' data-dojo-attach-point='node'></div></div>",

		// Parameters on creation or updatable later

		// dialogId: String
		//		Id of the dialog.... DialogUnderlay's id is based on this id
		dialogId: "",

		// class: String
		//		This class name is used on the DialogUnderlay node, in addition to dijitDialogUnderlay
		"class": "",

		_setDialogIdAttr: function(id){
			domAttr.set(this.node, "id", id + "_underlay");
			this._set("dialogId", id);
		},

		_setClassAttr: function(clazz){
			this.node.className = "dijitDialogUnderlay " + clazz;
			this._set("class", clazz);
		},

		postCreate: function(){
			// summary:
			//		Append the underlay to the body
			win.body().appendChild(this.domNode);
		},

		layout: function(){
			// summary:
			//		Sets the background to the size of the viewport
			//
			// description:
			//		Sets the background to the size of the viewport (rather than the size
			//		of the document) since we need to cover the whole browser window, even
			//		if the document is only a few lines long.
			// tags:
			//		private

			var is = this.node.style,
				os = this.domNode.style;

			// hide the background temporarily, so that the background itself isn't
			// causing scrollbars to appear (might happen when user shrinks browser
			// window and then we are called to resize)
			os.display = "none";

			// then resize and show
			var viewport = winUtils.getBox();
			os.top = viewport.t + "px";
			os.left = viewport.l + "px";
			is.width = viewport.w + "px";
			is.height = viewport.h + "px";
			os.display = "block";
		},

		show: function(){
			// summary:
			//		Show the dialog underlay
			this.domNode.style.display = "block";
			this.layout();
			this.bgIframe = new BackgroundIframe(this.domNode);
		},

		hide: function(){
			// summary:
			//		Hides the dialog underlay
			this.bgIframe.destroy();
			delete this.bgIframe;
			this.domNode.style.display = "none";
		}
	});
});

},
'dijit/form/_ToggleButtonMixin':function(){
define("dijit/form/_ToggleButtonMixin", [
	"dojo/_base/declare", // declare
	"dojo/dom-attr" // domAttr.set
], function(declare, domAttr){

// module:
//		dijit/form/_ToggleButtonMixin
// summary:
//		A mixin to provide functionality to allow a button that can be in two states (checked or not).

return declare("dijit.form._ToggleButtonMixin", null, {
	// summary:
	//		A mixin to provide functionality to allow a button that can be in two states (checked or not).

	// checked: Boolean
	//		Corresponds to the native HTML <input> element's attribute.
	//		In markup, specified as "checked='checked'" or just "checked".
	//		True if the button is depressed, or the checkbox is checked,
	//		or the radio button is selected, etc.
	checked: false,

	// aria-pressed for toggle buttons, and aria-checked for checkboxes
	_aria_attr: "aria-pressed",

	_onClick: function(/*Event*/ evt){
		var original = this.checked;
		this._set('checked', !original); // partially set the toggled value, assuming the toggle will work, so it can be overridden in the onclick handler
		var ret = this.inherited(arguments); // the user could reset the value here
		this.set('checked', ret ? this.checked : original); // officially set the toggled or user value, or reset it back
		return ret;
	},

	_setCheckedAttr: function(/*Boolean*/ value, /*Boolean?*/ priorityChange){
		this._set("checked", value);
		domAttr.set(this.focusNode || this.domNode, "checked", value);
		(this.focusNode || this.domNode).setAttribute(this._aria_attr, value ? "true" : "false"); // aria values should be strings
		this._handleOnChange(value, priorityChange);
	},

	reset: function(){
		// summary:
		//		Reset the widget's value to what it was at initialization time

		this._hasBeenBlurred = false;

		// set checked state to original setting
		this.set('checked', this.params.checked || false);
	}
});

});

},
'dojo/store/util/SimpleQueryEngine':function(){
define("dojo/store/util/SimpleQueryEngine", ["../../_base/array"], function(arrayUtil) {
  //  module:
  //    dojo/store/util/SimpleQueryEngine
  //  summary:
  //    The module defines a simple filtering query engine for object stores. 

return function(query, options){
	// summary:
	//		Simple query engine that matches using filter functions, named filter
	//		functions or objects by name-value on a query object hash
	//
	// description:
	//		The SimpleQueryEngine provides a way of getting a QueryResults through
	//		the use of a simple object hash as a filter.  The hash will be used to
	//		match properties on data objects with the corresponding value given. In
	//		other words, only exact matches will be returned.
	//
	//		This function can be used as a template for more complex query engines;
	//		for example, an engine can be created that accepts an object hash that
	//		contains filtering functions, or a string that gets evaluated, etc.
	//
	//		When creating a new dojo.store, simply set the store's queryEngine
	//		field as a reference to this function.
	//
	// query: Object
	//		An object hash with fields that may match fields of items in the store.
	//		Values in the hash will be compared by normal == operator, but regular expressions
	//		or any object that provides a test() method are also supported and can be
	// 		used to match strings by more complex expressions
	// 		(and then the regex's or object's test() method will be used to match values).
	//
	// options: dojo.store.util.SimpleQueryEngine.__queryOptions?
	//		An object that contains optional information such as sort, start, and count.
	//
	// returns: Function
	//		A function that caches the passed query under the field "matches".  See any
	//		of the "query" methods on dojo.stores.
	//
	// example:
	//		Define a store with a reference to this engine, and set up a query method.
	//
	//	|	var myStore = function(options){
	//	|		//	...more properties here
	//	|		this.queryEngine = dojo.store.util.SimpleQueryEngine;
	//	|		//	define our query method
	//	|		this.query = function(query, options){
	//	|			return dojo.store.util.QueryResults(this.queryEngine(query, options)(this.data));
	//	|		};
	//	|	};

	// create our matching query function
	switch(typeof query){
		default:
			throw new Error("Can not query with a " + typeof query);
		case "object": case "undefined":
			var queryObject = query;
			query = function(object){
				for(var key in queryObject){
					var required = queryObject[key];
					if(required && required.test){
						if(!required.test(object[key])){
							return false;
						}
					}else if(required != object[key]){
						return false;
					}
				}
				return true;
			};
			break;
		case "string":
			// named query
			if(!this[query]){
				throw new Error("No filter function " + query + " was found in store");
			}
			query = this[query];
			// fall through
		case "function":
			// fall through
	}
	function execute(array){
		// execute the whole query, first we filter
		var results = arrayUtil.filter(array, query);
		// next we sort
		if(options && options.sort){
			results.sort(function(a, b){
				for(var sort, i=0; sort = options.sort[i]; i++){
					var aValue = a[sort.attribute];
					var bValue = b[sort.attribute];
					if (aValue != bValue) {
						return !!sort.descending == aValue > bValue ? -1 : 1;
					}
				}
				return 0;
			});
		}
		// now we paginate
		if(options && (options.start || options.count)){
			var total = results.length;
			results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));
			results.total = total;
		}
		return results;
	}
	execute.matches = query;
	return execute;
};
});

},
'dijit/_TemplatedMixin':function(){
define("dijit/_TemplatedMixin", [
	"dojo/_base/lang", // lang.getObject
	"dojo/touch",
	"./_WidgetBase",
	"dojo/string", // string.substitute string.trim
	"dojo/cache",	// dojo.cache
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom-construct", // domConstruct.destroy, domConstruct.toDom
	"dojo/_base/sniff", // has("ie")
	"dojo/_base/unload", // unload.addOnWindowUnload
	"dojo/_base/window" // win.doc
], function(lang, touch, _WidgetBase, string, cache, array, declare, domConstruct, has, unload, win) {

/*=====
	var _WidgetBase = dijit._WidgetBase;
=====*/

	// module:
	//		dijit/_TemplatedMixin
	// summary:
	//		Mixin for widgets that are instantiated from a template

	var _TemplatedMixin = declare("dijit._TemplatedMixin", null, {
		// summary:
		//		Mixin for widgets that are instantiated from a template

		// templateString: [protected] String
		//		A string that represents the widget template.
		//		Use in conjunction with dojo.cache() to load from a file.
		templateString: null,

		// templatePath: [protected deprecated] String
		//		Path to template (HTML file) for this widget relative to dojo.baseUrl.
		//		Deprecated: use templateString with require([... "dojo/text!..."], ...) instead
		templatePath: null,

		// skipNodeCache: [protected] Boolean
		//		If using a cached widget template nodes poses issues for a
		//		particular widget class, it can set this property to ensure
		//		that its template is always re-built from a string
		_skipNodeCache: false,

		// _earlyTemplatedStartup: Boolean
		//		A fallback to preserve the 1.0 - 1.3 behavior of children in
		//		templates having their startup called before the parent widget
		//		fires postCreate. Defaults to 'false', causing child widgets to
		//		have their .startup() called immediately before a parent widget
		//		.startup(), but always after the parent .postCreate(). Set to
		//		'true' to re-enable to previous, arguably broken, behavior.
		_earlyTemplatedStartup: false,

/*=====
		// _attachPoints: [private] String[]
		//		List of widget attribute names associated with data-dojo-attach-point=... in the
		//		template, ex: ["containerNode", "labelNode"]
 		_attachPoints: [],
 =====*/

/*=====
		// _attachEvents: [private] Handle[]
		//		List of connections associated with data-dojo-attach-event=... in the
		//		template
 		_attachEvents: [],
 =====*/

		constructor: function(){
			this._attachPoints = [];
			this._attachEvents = [];
		},

		_stringRepl: function(tmpl){
			// summary:
			//		Does substitution of ${foo} type properties in template string
			// tags:
			//		private
			var className = this.declaredClass, _this = this;
			// Cache contains a string because we need to do property replacement
			// do the property replacement
			return string.substitute(tmpl, this, function(value, key){
				if(key.charAt(0) == '!'){ value = lang.getObject(key.substr(1), false, _this); }
				if(typeof value == "undefined"){ throw new Error(className+" template:"+key); } // a debugging aide
				if(value == null){ return ""; }

				// Substitution keys beginning with ! will skip the transform step,
				// in case a user wishes to insert unescaped markup, e.g. ${!foo}
				return key.charAt(0) == "!" ? value :
					// Safer substitution, see heading "Attribute values" in
					// http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.3.2
					value.toString().replace(/"/g,"&quot;"); //TODO: add &amp? use encodeXML method?
			}, this);
		},

		buildRendering: function(){
			// summary:
			//		Construct the UI for this widget from a template, setting this.domNode.
			// tags:
			//		protected

			if(!this.templateString){
				this.templateString = cache(this.templatePath, {sanitize: true});
			}

			// Lookup cached version of template, and download to cache if it
			// isn't there already.  Returns either a DomNode or a string, depending on
			// whether or not the template contains ${foo} replacement parameters.
			var cached = _TemplatedMixin.getCachedTemplate(this.templateString, this._skipNodeCache);

			var node;
			if(lang.isString(cached)){
				node = domConstruct.toDom(this._stringRepl(cached));
				if(node.nodeType != 1){
					// Flag common problems such as templates with multiple top level nodes (nodeType == 11)
					throw new Error("Invalid template: " + cached);
				}
			}else{
				// if it's a node, all we have to do is clone it
				node = cached.cloneNode(true);
			}

			this.domNode = node;

			// Call down to _Widget.buildRendering() to get base classes assigned
			// TODO: change the baseClass assignment to _setBaseClassAttr
			this.inherited(arguments);

			// recurse through the node, looking for, and attaching to, our
			// attachment points and events, which should be defined on the template node.
			this._attachTemplateNodes(node, function(n,p){ return n.getAttribute(p); });

			this._beforeFillContent();		// hook for _WidgetsInTemplateMixin

			this._fillContent(this.srcNodeRef);
		},

		_beforeFillContent: function(){
		},

		_fillContent: function(/*DomNode*/ source){
			// summary:
			//		Relocate source contents to templated container node.
			//		this.containerNode must be able to receive children, or exceptions will be thrown.
			// tags:
			//		protected
			var dest = this.containerNode;
			if(source && dest){
				while(source.hasChildNodes()){
					dest.appendChild(source.firstChild);
				}
			}
		},

		_attachTemplateNodes: function(rootNode, getAttrFunc){
			// summary:
			//		Iterate through the template and attach functions and nodes accordingly.
			//		Alternately, if rootNode is an array of widgets, then will process data-dojo-attach-point
			//		etc. for those widgets.
			// description:
			//		Map widget properties and functions to the handlers specified in
			//		the dom node and it's descendants. This function iterates over all
			//		nodes and looks for these properties:
			//			* dojoAttachPoint/data-dojo-attach-point
			//			* dojoAttachEvent/data-dojo-attach-event
			// rootNode: DomNode|Widget[]
			//		the node to search for properties. All children will be searched.
			// getAttrFunc: Function
			//		a function which will be used to obtain property for a given
			//		DomNode/Widget
			// tags:
			//		private

			var nodes = lang.isArray(rootNode) ? rootNode : (rootNode.all || rootNode.getElementsByTagName("*"));
			var x = lang.isArray(rootNode) ? 0 : -1;
			for(; x<nodes.length; x++){
				var baseNode = (x == -1) ? rootNode : nodes[x];
				if(this.widgetsInTemplate && (getAttrFunc(baseNode, "dojoType") || getAttrFunc(baseNode, "data-dojo-type"))){
					continue;
				}
				// Process data-dojo-attach-point
				var attachPoint = getAttrFunc(baseNode, "dojoAttachPoint") || getAttrFunc(baseNode, "data-dojo-attach-point");
				if(attachPoint){
					var point, points = attachPoint.split(/\s*,\s*/);
					while((point = points.shift())){
						if(lang.isArray(this[point])){
							this[point].push(baseNode);
						}else{
							this[point]=baseNode;
						}
						this._attachPoints.push(point);
					}
				}

				// Process data-dojo-attach-event
				var attachEvent = getAttrFunc(baseNode, "dojoAttachEvent") || getAttrFunc(baseNode, "data-dojo-attach-event");
				if(attachEvent){
					// NOTE: we want to support attributes that have the form
					// "domEvent: nativeEvent; ..."
					var event, events = attachEvent.split(/\s*,\s*/);
					var trim = lang.trim;
					while((event = events.shift())){
						if(event){
							var thisFunc = null;
							if(event.indexOf(":") != -1){
								// oh, if only JS had tuple assignment
								var funcNameArr = event.split(":");
								event = trim(funcNameArr[0]);
								thisFunc = trim(funcNameArr[1]);
							}else{
								event = trim(event);
							}
							if(!thisFunc){
								thisFunc = event;
							}
							// Map "press", "move" and "release" to keys.touch, keys.move, keys.release
							this._attachEvents.push(this.connect(baseNode, touch[event] || event, thisFunc));
						}
					}
				}
			}
		},

		destroyRendering: function(){
			// Delete all attach points to prevent IE6 memory leaks.
			array.forEach(this._attachPoints, function(point){
				delete this[point];
			}, this);
			this._attachPoints = [];

			// And same for event handlers
			array.forEach(this._attachEvents, this.disconnect, this);
			this._attachEvents = [];

			this.inherited(arguments);
		}
	});

	// key is templateString; object is either string or DOM tree
	_TemplatedMixin._templateCache = {};

	_TemplatedMixin.getCachedTemplate = function(templateString, alwaysUseString){
		// summary:
		//		Static method to get a template based on the templatePath or
		//		templateString key
		// templateString: String
		//		The template
		// alwaysUseString: Boolean
		//		Don't cache the DOM tree for this template, even if it doesn't have any variables
		// returns: Mixed
		//		Either string (if there are ${} variables that need to be replaced) or just
		//		a DOM tree (if the node can be cloned directly)

		// is it already cached?
		var tmplts = _TemplatedMixin._templateCache;
		var key = templateString;
		var cached = tmplts[key];
		if(cached){
			try{
				// if the cached value is an innerHTML string (no ownerDocument) or a DOM tree created within the current document, then use the current cached value
				if(!cached.ownerDocument || cached.ownerDocument == win.doc){
					// string or node of the same document
					return cached;
				}
			}catch(e){ /* squelch */ } // IE can throw an exception if cached.ownerDocument was reloaded
			domConstruct.destroy(cached);
		}

		templateString = string.trim(templateString);

		if(alwaysUseString || templateString.match(/\$\{([^\}]+)\}/g)){
			// there are variables in the template so all we can do is cache the string
			return (tmplts[key] = templateString); //String
		}else{
			// there are no variables in the template so we can cache the DOM tree
			var node = domConstruct.toDom(templateString);
			if(node.nodeType != 1){
				throw new Error("Invalid template: " + templateString);
			}
			return (tmplts[key] = node); //Node
		}
	};

	if(has("ie")){
		unload.addOnWindowUnload(function(){
			var cache = _TemplatedMixin._templateCache;
			for(var key in cache){
				var value = cache[key];
				if(typeof value == "object"){ // value is either a string or a DOM node template
					domConstruct.destroy(value);
				}
				delete cache[key];
			}
		});
	}

	// These arguments can be specified for widgets which are used in templates.
	// Since any widget can be specified as sub widgets in template, mix it
	// into the base widget class.  (This is a hack, but it's effective.)
	lang.extend(_WidgetBase,{
		dojoAttachEvent: "",
		dojoAttachPoint: ""
	});

	return _TemplatedMixin;
});

},
'curam/smartPanel':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
define("curam/smartPanel", ["curam/tab",
        "curam/util/onLoad",
        "curam/define"
        ], function() {

/*
 * Modification History
 * --------------------
 * 07-Oct-2013 BOS [CR00396277] Refactoring to take account of the fact that
 *                   the selected tab may not be defined. 
 * 21-Nov-2011 MV  [CR00298138] Make the smart panel update inner flag correctly
 *                   and fire events when its content is loaded.
 * 24-Aug-2011 JK  [TEC-7914]   Added more context to smart panel
 *                              title for screen readers
 * 13-Apr-2011 KW  [CR00263687] Correctly handle renderer pages inside
 *                                                              Smart Panel 
 * 23-Nov-2010 SD  [CR00231550] Lazy loading of Smart Panel.
 * 28-Jun-2010 SD  [CR00204622] Initial version.
 */

/**
 * Contains functions for the smart panel.
 */
  curam.define.singleton("curam.smartPanel", {
  setupOnLoad: function(smartPanelIframeID) {
    // register this handler early or it might miss the onLoad event.
    curam.util.onLoad.addSubscriber(smartPanelIframeID,
        curam.smartPanel._handleSmartPanelLoad);

    dojo.ready(function() {
      var smartPanel = dojo.query("." + smartPanelIframeID)[0];
      if (!dojo.attr(smartPanel, "src")) {
        // add a listener to the splitter event and lazy load smart panel
        // iframe contents

        // find the correct border container containing the smart panel
        var navTabBcNode = dojo.query(".outer-navigation-tab")[0];
        var navTabBC = navTabBcNode ? dijit.byNode(navTabBcNode) : null;
        
        if (navTabBC) {
          // find the correct splitter object
          var spSplitter = navTabBC.getSplitter("right");

          // when the user drags the splitter bar open and then releases, attach
          // a function call to lazy load the smart panel contents
          spSplitter.connect(
              spSplitter , "onMouseUp", curam.smartPanel.loadSmartPanelIframe);
        }
      }
    });
  },
  
  _handleSmartPanelLoad: function(smartPanelIframeID, context) {
    var smartPanel = dojo.query("." + smartPanelIframeID)[0];
    var src = dojo.attr(smartPanel, "src");

    curam.smartPanel.addTitle(smartPanelIframeID);
    
    //listen for Smart Panel content page to be ready
    var topic = "smartpanel.content.loaded"; 

    // lazy load the contents of the smart panel iframe when its it first
    // expanded or revealed by dragging the splitter.
    if(src) {
      // update loaded flag for iFrame
      smartPanel.setAttribute("iframeLoaded", "true");
      
      //make sure the Smart Panel content is loaded before we notify that the
      //Smart Panel is loaded.
      if(dojo.attr(smartPanel, "_SPContentLoaded") === "true"){
          dojo.publish("smartPanel.loaded", [smartPanel]);

      } else {
          dojo.subscribe(topic, function(iframe) {
                  if(iframe != smartPanel) {
                                                return;
                  }
                  dojo.publish("smartPanel.loaded", [smartPanel]);
          });
      }

    }
  },

  /**
   * Loads the contents of the iFrame within the Smart Panel.
   *
   */
  loadSmartPanelIframe: function() {
    // find value of _srcContents attribute of Smart Panel iFrame
    var spIframe = curam.tab.getSmartPanelIframe();
    if (spIframe) {
      var src = dojo.attr(spIframe, "src");

      // explicitly check for an empty string for src attribute
      if(src == "") {
        var src = dojo.attr(spIframe, "_srcContents");
          dojo.attr(spIframe, "src", src);
      } 
    }
  },
  
  /**
   *  Add the title to the iframe after the content has been
   *  loaded so the title can have more context.
   */
  addTitle: function(iframeId) {
    var iframe = dojo.query("." + iframeId)[0];
    var pageTitle = SMART_PANEL_TITLE + " - " + iframe.contentWindow.document.title;
    iframe.setAttribute("title", pageTitle);
  }
  });
  
  return curam.smartPanel;
});

},
'curam/util/ui/refresh/RefreshEvent':function(){
/*
 * Copyright 2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/ui/refresh/RefreshEvent", [], function() {
  
  /*
   * Modification History
   * --------------------
   * 04-Jul-2011  MV  [CR00269970] Initial version.
   */

  /**
   * @name curam.util.ui.refresh.RefreshEvent
   * @namespace Represents a UI element refresh event.
   * 
   */
  var RefreshEvent = dojo.declare("curam.util.ui.refresh.RefreshEvent", null,
  /**
   * @lends curam.util.ui.refresh.RefreshEvent.prototype
   */
  {
    /** Event type constant. */
    TYPE_ONLOAD: "onload",
    
    /** Event type constant. */
    TYPE_ONSUBMIT: "onsubmit",
    
    /** Event context constant. */
    SOURCE_CONTEXT_MAIN: "main-content",
    
    /** Event context constant. */
    SOURCE_CONTEXT_DIALOG: "dialog",
    
    /** Event context constant. */
    SOURCE_CONTEXT_INLINE: "inline",

    /** Holds the type of the event. */
    _type: null,
    
    /** Holds the context of the event. */
    _context: null,
    
    /**
     * Creates an instance of the refresh event.
     * 
     * @param {String}
     *                type The event type. Only accepted values will be the ones
     *                provided as constants in this class.
     * @param {String}
     *                context The event context. Only accepted values will be the
     *                ones provided as constants in this class.
     */
    constructor: function(type, context) {
      if (!type || !context) {
        throw "Required parameters missing.";
      }
      if (!(type == this.TYPE_ONLOAD || type == this.TYPE_ONSUBMIT)) {
        throw "Unknown type: " + type;
      }
      if (!(context == this.SOURCE_CONTEXT_DIALOG
          || context == this.SOURCE_CONTEXT_INLINE
          || context == this.SOURCE_CONTEXT_MAIN)) {
        throw "Unknown context: " + context;
      }

      this._type = type;
      this._context = context;
    },
    
    /**
     * Determines if the specified event is the same as this one.
     * 
     * @param other
     *                The event to check.
     * @returns {Boolean} True if the other event is the same, otherwise false.
     */
    equals: function(other) {
      // check for undefined, null and variable types other than object
      if (typeof other != "object") {
        return false;
      }
      
      // check for Dojo class name
      if (other.declaredClass != this.declaredClass) {
        return false;
      }
      
      return this._type === other._type
          && this._context === other._context;
    }
  });
  
  return RefreshEvent;
});

},
'url:dijit/templates/Tree.html':"<div class=\"dijitTree dijitTreeContainer\" role=\"tree\"\n\tdata-dojo-attach-event=\"onkeypress:_onKeyPress\">\n\t<div class=\"dijitInline dijitTreeIndent\" style=\"position: absolute; top: -9999px\" data-dojo-attach-point=\"indentDetector\"></div>\n</div>\n",
'url:dijit/form/templates/ComboButton.html':"<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tcellspacing='0' cellpadding='0' role=\"presentation\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonNode\" data-dojo-attach-point=\"buttonNode\" data-dojo-attach-event=\"ondijitclick:_onClick,onkeypress:_onButtonKeyPress\"\n\t\t><div id=\"${id}_button\" class=\"dijitReset dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><div class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitInline dijitButtonText\" id=\"${id}_label\" data-dojo-attach-point=\"containerNode\" role=\"presentation\"></div\n\t\t></div\n\t\t></td\n\t\t><td id=\"${id}_arrow\" class='dijitReset dijitRight dijitButtonNode dijitArrowButton'\n\t\t\tdata-dojo-attach-point=\"_popupStateNode,focusNode,_buttonNode\"\n\t\t\tdata-dojo-attach-event=\"onkeypress:_onArrowKeyPress\"\n\t\t\ttitle=\"${optionsTitle}\"\n\t\t\trole=\"button\" aria-haspopup=\"true\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t\t><td style=\"display:none !important;\"\n\t\t\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" data-dojo-attach-point=\"valueNode\"\n\t\t/></td></tr></tbody\n></table>\n",
'curam/ui/UIMPageAdaptor':function(){
/*
 * Copyright 2009-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/ui/UIMPageAdaptor", ["curam/tab",
        "curam/define",
        "curam/debug",
        "curam/util",
        "curam/ui/PageRequest",
        "curam/util/ResourceBundle"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 16-Jan-2011  DG  [CR00242400] Changed order of tab title and name value in
   *                    event to match event name, function name, etc.
   * 18-Nov-2010 MV [CR00231387] Connect to DOM event with a function that will
   *    automatically disconnect on page unload.
   * 18-Nov-2010 SJ [CR00228391]Fixed the issue with OPEN_NEW attribute on link.
   * 24-Nov-2010  PK  [TEC-XXXX] Added NESTED_UIM context.
   * 08-Sep-2010  MV  [CR00219540] Move the click handler for the list actions menu
   *                    items to curam.util.
   * 29-Jul-2010  PK  [CR00211736] Moved tab-app-adaptor.js to
   *                    curam.ui.UIMPageAdaptor.
   * 27-Jul-2010  PK  [CR00211464] Fixed issue when accessing the "tab controller".
   * 27-Jul-2010  MV  [CR00211474] Publish generic iframe-loaded event on top ofcuram
   *                    the page-specific one.
   * 26-Jun-2010  MV  [CR00204069] Moved getPageHeight() function to util.js
   * 23-Jun-2010  AF  [CR00202526] Removed content panel references in page height
   *                    method.
   * 22-Apr-2010  AF  [CR00194043] Modified height of a frame that contains
   *                    in-page navigation. This removes unnecessary extra space
   *                    appearing at the bottom of the in-page navigation
   *                    container.
   * 02-Apr-2010  PK  [CR00192620] Added listRowFrameLoaded method to handle
   *                    auto-height calculation for an expanded list row.
   * 25-Mar-2010  PA  [CR00187654] Changes required to implement the List Action
   *                    Menu.
   * 24-Feb-2010  BD  [CR00189322] Add onload functionality to publish an event.
   *                    The published event contains the height of the page which
   *                    can be used for sizing.
   * 23-Dec-2009  MV  [CR00181822] Code cleanup in setTabTitleAndName() function.
   */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  /**
   * Adapts "normal" pages to function in the v6 tabbed user interface. Pages
   * are opened up embedded in an iframe. We have to handle clicks which open
   * up new tabs etc.
   */
  curam.define.singleton("curam.ui.UIMPageAdaptor", {
    /**
     * This function must be called from the onload event of the UIM page that
     * has to be "adapted". gen-jsp.xsl will generate the call to this script.
     */
    initialize: function() {
      if (jsScreenContext.hasContextBits("MODAL")) {
        // UIM pages opened in modals should not be "adapted". The modal
        // infrastructure has it's on event management, click handlers etc.
        return;
      }
      curam.util.connect(
          dojo.body(), "onclick", curam.ui.UIMPageAdaptor.clickHandler);

      var dojoInstance = null;
      var channel = null;
      if (!jsScreenContext.hasContextBits("LIST_ROW_INLINE_PAGE")) {
        dojoInstance = curam.util.getTopmostWindow().dojo;
        channel = "/iframe-loaded/" + window.jsPageID;
        curam.debug.log(bundle.getProperty("curam.ui.UIMPageAdaptor.event")
            + channel);
        dojoInstance.publish(channel);
      }
    },
    
    /**
     * Initialize function output only for external style client.s
     */
    externalInitialize:function() {
      if (jsScreenContext.hasContextBits("MODAL")) {
        // UIM pages opened in modals should not be "adapted". The modal
        // infrastructure has it's on event management, click handlers etc.
        return;
      }
      curam.util.connect(
        dojo.body(), "onclick", curam.ui.UIMPageAdaptor.clickHandler);
    },
    
    /**
     * Handler for clicks for external style applications.
     * @param event The event.
     * @param anchor The anchor value.
     */
    externalClickHandler:function(event, anchor) {
      
      // Click handling for external applications
      var uimPageRequest = new curam.ui.PageRequest(anchor.href);
      var externalApp = window.top.dijit.byId("curam-app");
      if (externalApp != null) {

        // Convert the parameters into expected array. 
        // TODO: Consider changing the format of the parameters, but
        // this will have impact on HCR and NPG.
        var params = [];
        var i = 0;
        for (param in uimPageRequest.parameters) {
          params[i] = {paramKey: param, paramValue: 
            uimPageRequest.parameters[param]};
          i = i + 1;
        }
        
        var args = {pageID: uimPageRequest.pageID, param: params};
        
        if (externalApp._isNavBarItem(uimPageRequest.pageID)) {
          // If the page is in a navigation bar, open using displayContent
          // This is to ensure navigation item is displayed
          dojo.stopEvent(event || window.event);
          window.top.displayContent(args);        
        } else if (externalApp._isUIMFragment(uimPageRequest.pageID)) {
          // If the page is a fragment, open using displayContent
          // This is to ensure styling is correct
          dojo.stopEvent(event || window.event);
          window.top.displayContent(args);
        }
        // Otherwise, let normal click handling commence - event not stopped
      }
    },

    clickHandler:function(event) {
      // TODO: Also, *some* of the code in this method is duplicated
      // in the "clickHandlerForListActionMenu" method of "util.js". AS LONG AS
      // THESE METHODS ARE SEPARATE, ANY UPDATES TO THE LOGIC BELOW MUST BE
      // ANALYZED TO SEE IF THEY NEED TO BE APPLIED IN THE "util.js" ALSO.
      var anchor = null;
      if (event.target.nodeName == "A") {
        if (curam.ui.UIMPageAdaptor.allowLinkToContinue(event.target)) {
          // allow the event to continue by just returning.
          return;
        }
        anchor = event.target;
      } else if ((event.target.nodeName == "IMG" && !dojo.hasClass(event.target.parentNode, "file-download")) ||
          (event.target.nodeName == "SPAN" && event.target.className == "middle")) {
        // TODO: check html schema, what inline elements are allowed in an
        // anchor element....can they be nested etc. this check probably needs
        // search for an ancestor anchor element rather than parent.
        anchor = cm.getParentByType(event.target, "A");
      }
      
      // if we have an anchor, stop the click event and perform standard tab
      // processing (i.e. should it open in a new tab etc.)
      if (anchor != null) {
        if (!anchor.href || anchor.href.length == 0) {
          dojo.stopEvent(event || window.event);
          // the event has been stopped, just return if it has no href.
          // any onclick handlers attached to the link will have executed by now.
          return;
        }
        
        if (jsScreenContext.hasContextBits("EXTAPP")) {
          curam.ui.UIMPageAdaptor.externalClickHandler(event, anchor);
        } else {
          // Internal handling
          dojo.stopEvent(event || window.event);
          if (curam.ui.UIMPageAdaptor.shouldLinkOpenInNewWindow(anchor)) {
            window.open(anchor.href);
          } else if (curam.ui.UIMPageAdaptor.isLinkValidForTabProcessing(
              anchor)) {
  
            var uimPageRequest = new curam.ui.PageRequest(anchor.href);
            if (jsScreenContext.hasContextBits("LIST_ROW_INLINE_PAGE")
                || jsScreenContext.hasContextBits("NESTED_UIM")) {
              uimPageRequest.pageHolder = window;
            }
            curam.tab.getTabController().handlePageRequest(uimPageRequest);
          }
        }
      }
      // Otherwise we let the event continue uninterrupted.
    },

    /**
     * leave submit buttons alone....they are embedded in an iframe....
     * leave file download alone. It should be processed as a normal link.
     * leave mailto links to be processed as normal
     * leave named anchors alone. TODO: the named anchor test for a '#' is copied
     * from the modal dialog click handler in dialog.js. Can the test be more
     * specific than just testing for that character?
     */
    allowLinkToContinue: function(anchor) {
      if (anchor && anchor._submitButton) {
        // don't care about the value of the _submitButton property, if it exists
        // return true.
        return true;
      }
      if (anchor && anchor.href) {
        return (anchor.href.indexOf("/servlet/FileDownload") != -1
            || anchor.href.indexOf("#") != -1
            || anchor.href.substr(0, 7) == "mailto:");
      } else {
        // if the href doesn't exist just return false.
        return false;
      }
    },

    /**
     * Popup links should not trigger tab processing. The OpenPopupTag adds this
     * class to each of the links.
     * Links which toggle the display of list details rows should not trigger tab
     * processing.
     */
    isLinkValidForTabProcessing: function(anchor) {
      if (!anchor || (dojo.hasClass(anchor, "popup-action")
                     || dojo.hasClass(anchor, "list-details-row-toggle"))) {
        return false;
      }
      return true;
    },

    /**
     * This method will return true only if the link is external.
     * target attribute is set to the links which are external.
     */
    shouldLinkOpenInNewWindow: function(anchor) {
      //At the time of writing this comment,In TabTest Application, only
      //external links are allowed to open in new window.
      //target attribute is set to links only if they are external.
      // return dojo.hasAttr(anchor, "target");
      return dojo.hasAttr(anchor, "target")
             && !curam.util.isInternal(anchor.href);
    },

    /**
     * Publish an event to the parent window detailing the tab name and tab title
     * that are to be set.
     * Event to subscribe to: tab.title.name.set
     * Parameters of event: iframe element, tab title and tab name.
     */
    setTabTitleAndName: function() {
      var newTabTitle = dojo.byId("tab-title").innerHTML;
      var newTabName = dojo.byId("tab-name").innerHTML;

      window.parent.dojo.publish("tab.title.name.set",
          [window.frameElement, newTabTitle, newTabName]);
    }
  });
  
  return curam.ui.UIMPageAdaptor;
});

},
'curam/ModalDialog':function(){
require({cache:{
'url:curam/layout/resources/Dialog.html':"<div class=\"dijitDialog\" role=\"alertdialog\" aria-labelledby=\"${id}_title\">\r\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\r\n\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" aria-label=\"${closeModalText}\" tabIndex=\"0\" onKeyDown=\"curam.util.isShiftTab(event)\">\r\n\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\">${closeModalText}</span>\r\n\t</span>\r\n  <span id=\"${id}_prompt\" class=\"hidden\" data-dojo-attach-point=\"promptText\">${modalPromptText}</span>\r\n\t</div>\r\n\t\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\r\n</div>\r\n"}});
/*
 * Copyright 2009-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.ModalDialog
 * @namespace Implements a Curam dialog.
 */
define("curam/ModalDialog", ["dojo/text!curam/layout/resources/Dialog.html",
        "dojo/dom-geometry",
        "curam/util/external",
        "dijit/Dialog",
        "curam/dialog",
        "curam/tab",
        "curam/debug",
        "curam/ModalUIMController",
        "curam/util/RuntimeContext",
        "curam/util/ResourceBundle"
        ], function(template, domGeom, external) {

/*
 * Modification History
 * --------------------
 * 25-Mar-2014  MV  [CR00423311] Handle usage from an external application.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 28-Mar-2013  NLH [CR00377306] Modal close and help button label 
 *                jaws12 and 13 fix
 * 11-Mar-2013  MV  [CR00373738] Only destroy iframe when dialog itself
 *      is destroyed.
 * 20-Feb-2013  MV  [CR00367727] Prevent opening multiple dialogs at once
 *      by clicking on link in quick succession.
 * 18-Jan-2013  PK  [CR00361872] For external applications using the One UI
 *                    theme, the maximum height is adjusted. 
 * 18-Jan-2013  SB  [CR00359465] Add tabindex to close button when help
 *                               is absent.
 * 16-Jan-2013  SB  [CR00359326] Added onkeypress event to help button.
 * 11-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 09-Aug-2012  MV  [CR00337714] Load HTML template using the new mechanism. 
 * 31-Jul-2012  MV  [CR00336202] Migrate to take on Dojo 1.7.3
 * 26-Apr-2012  MV  [CR00318809] Preload template string directly with the class
 *       to avoid an extra AJAX call when opening dialog for the first time.
 * 20-Apr-2012  MK  [CR00318172] Extracted numerical values for minimum space
 *                               required around a modal to variables.
 * 20-Apr-2012  PK  [CR00315682] On a mobile user agent, ensure disalogs are 
 *                    only positioned once.
 * 29-Feb-2012  MK  [CR00267592] Dojo 1.7.1 upgrade. 
 * 07-Oct-2011  PK  [CR00289859] Dojo 1.6.1 upgrade and IE9+ support. 
 * 30-Sep-2011  MK  [CR00289373] Fixed bug. Incorrect reference to local variable. 
 * 15-Aug-2011  AF  [CR00278493] Added new dialog template with customisations
 *                               to improve accessibility.
 * 12-Jul-2011  KW  [CR00275353] Refactored _initParentWindowRef().
 * 11-May-2011  MV  [CR00265902] Fix URL parsing code.
 * 28-Apr-2011  AF  [CR00264788] Added title to modal dialog frame and help
 *                               icon.
 * 17-Feb-2011  MV  [CR00253193] Fix errors on dialog close when x icon used.
 * 08-Feb-2011  SD  [CR00251223] Resolved iFrame consuming drag event.
 * 28-Jan-2011  MV  [CR00245381] Take help settings from the page context.
 * 28-Jan-2011  SD  [CR00245428] Update setTitle() to handle hiding the
 *     appended message test.
 * 26-Jan-2011  MV  [CR00244801] Strip o3rpu from RPU value.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 17-Jan-2010  MV  [CR00242255] Performance improvements.
 * 07-Dec-2010  MV  [CR00233442] Set the dialog size properly when
 *     the UIM controller is resized.
 * 06-Dec-2010  KW  [CR00233277] Modal title uses context width
 * 29-Nov-2010  KW  [CR00232834] Modal title width set in all cases
 * 28-Nov-2010  MV  [CR00232623] Set initial width and height properly.
 *    Hide iframe on unload and show again on load to avoid flicker.
 * 25-Nov-2010  MV  [CR00232063] Publish display event also on subsequent
 *   page load. Further performance improvements.
 * 22-Nov-2010  KW  [CR00231903] Added function to set a long title for a modal
 * 18-Nov-2010  MV  [CR00231655] Decrease the timeout on modal display timer.
 *    Publish the dialog size with the display event.
 * 16-Nov-2010  MV  [CR00231317] Change the way the dialog content is wiped
 *    on close. This is to avoid focus problems in the parent page after
 *    the dialog closes.
 * 09-Nov-2010  MV  [CR00230346] Display dialog in correct size on page load
 *    error.
 * 03-Nov-2010  MV  [CR00229566] Performance improvements.
 * 01-Nov-2010  SD  [CR00225331] UimDialog API related updates.
 * 26-Oct-2010  SK  [CR00224193] Handles the situation where the parent window
 *                               is not provided (opening from menu/shortcut).
 * 29-Sep-2010  MV  [CR00221605] Check for existence of dijit in a target
 *        context before accesing it. Determine max size per dialog instance.
 * 21-Sep-2010 MV [CR00220649] Reposition dialog after height change.
 * 10-Sep-2010 MV [CR00219824] Set initial focus correctly for dialogs with no
 *                        editable fields. Fix issue with dialog not closing
 *                        properly when new page has been loaded in it.
 * 27-Aug-2010 MV [CR00217499] Added full support for non-UIM pages
 *                  by integrating with the new external Dialog API.
 * 27-Jul-2010 MK [CR00211743] Add parameter to allow the displaying of a help
 *                  icon to be optional.
 * 21-Jul-2010 MV [CR00211225] If modal is closing, skip resizing and updating
 *                  the title.
 * 15-Jul-2010 MV [CR00210541] Handle focus on modal open.
 * 07-Jul-2010 JY [CR00209267] Add help icon to the modal dialog title bar.
 * 05-Jul-2010 BD [CR00204119] Introduced use of UIMController in place of
 *                             iframe to cater for In Page Navigation tabs.
 * 26-Jun-2010 MV [CR00204069] Remove unused default height variable. Use Curam
 *                DebugHelper.
 * 22-Jun-2010 MV [CR00204076] Fix handling of event when a page fails to load.
 * 24-Jun-2010 MV [CR00203864] Fix modal close handler.
 * 10-Jun-2010 MV [CR00202971] Refactor to use the new UIM onLoad event mechanism.
 * 08-Jun-2010 MV [CR00202412] Update the autosizing algorithm to handle pages
 *                              that don't have Dijit content panel.
 * 31-May-2010 MV [CR00202062] Ensure complete cleanup is done after the modal
 *                                is closed.
 * 25-May-2010 MV [CR00201591] URL parameters are now stripped when getting the
 *                  base URL.
 * 14-May-2010 MV [CR00189738] Remove the parent window from the dialog
 *                  hierarchy on exit.
 * 12-Mar-2010 RS [CR00186979] Added Minimum configurable modal height.
 * 23-Feb-2010 MV [CR00190348] Added function call that removes the parent
 *                             window's reference from the dialog hierarchy on
 *                             a dialog close.
 * 23-Feb-2010 AF [CR00189289] Added set title method to set the title of a
 *                  modal dialog.
 * 12-Feb-2010 AF [CR00183263] Added frame border setting to iframe in modal.
 * 10-Feb-2010 MV [CR00188844] Implement sizing enhancements.
 * 04-Feb-2010 MV [CR00184341] Test for dojo existence when detecting page
 *                             load error.
 * 04-Feb-2010 MV [CR00184333] Hide dialog immediately when closing.
 *                              Enable auto sizing.
 * 20-Jan-2010 MV [CR00183192] Fixed detection code for cases when the target
 *                                 page fails to load.
 * 16-Dec-2009 MV [CR00173949] Implemented opening modal even if the target
 *                              page does not exist. Also rewritten to work
 *                              properly with dijit.Dialog superclass.
 * 26-Nov-2009 MV [CR00176044] Mark the currently active dialog with a specific
 *                              CSS class. Also add delay to the modalDisplayed
 *                              event so that it fires after the dialog is really
 *                              displayed on the screen.
 * 08-Dec-2009 MV [CR00181267] Fix the behaviour when closing the dialog so that
 *                              underlay is properly maintained.
 * 25-Nov-2009 MV [CR00175955] Publish /curam/dialog/displayed event after
 *                           the modal is displayed..
 */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  var ModalDialog = dojo.declare("curam.ModalDialog", dijit.Dialog,
  /** @lends curam.ModalDialog.prototype */ {

  templateString: template,

  /**
   * Disable setting focus to the first editable field - it will never work
   * as we have all the content within an iframe.
   */
  autofocus: false,

  /**
   * Do not refocus the item focused before the dialog was opened.
   */
  refocus: false,

  iframeHref: "",
  iframe: undefined,
  width: undefined,
  height: undefined,
  defaultWidth: 600,

  /**
   * This text is hidden, but is picked up by a screen reader.
   */
  closeModalText: LOCALISED_MODAL_CLOSE_BUTTON,

  /**
    * Adding hidden text to prompt screen reader user regarding usage of
    * the modal dialog: "Press the TAB key to activate the modal". Note the
    * full stops have been added to the text to force screen reader to pause
    * before giving the instruction.
    */
  modalPromptText: ". " + LOCALISED_MODAL_SCREEN_READER_PROMPT + " .",

  /**
   * Max width based on the available space minus some margin
   * for dialog border, etc.
   * @private
   */
  maximumWidth: null,

  /**
   * Max height based on the available space minus some margin
   * for dialog title, border, etc.
   * @private
   */
  maximumHeight: null,
  // modalMinimumHeight is read from
  // ApplicationConfiguration.properties

  /**
   * The calculated width.
   * @private
   */
  _determinedWidth: null,

  /**
   * The calculated height.
   * @private
   */
  _determinedHeight: null,

  /**
   * Horizontal space value used to prevent large modal dialogs to fill up the 
   * whole application viewport.
   *
   * @private
   */
  _horizontalModalSpace: 100,
  
  /**
   * Vertical space value used to prevent large modal dialogs to fill up the 
   * whole application viewport.
   *
   * @private
   */
  _verticalModalSpace: 50,
  
  duration: 5,
  parentWindow: undefined,
  isRegisteredForClosing: false,
  unsubscribes: undefined,
  modalconnects: undefined,
  onIframeLoadHandler: undefined,
  initialized: false,
  initDone: false,
  initUnsubToken: null,
  uimController: null,
  _helpIcon: null,
  _title:null,

  /**
   * Indicates if the modal dialog is being accessed from a mobile device. It is
   * used in conjunction with the _isMobileUADialogPositioned variable below to
   * control mobile specific behaviour. 
   *
   * @private
   */
  _isMobileUA: false,
  
  /**
   * Indicates if this dialog has already been positioned. On mobile devices the
   * dialog will be positioned (in the center of the screen) only once.
   * Otherwise, if the user uses the "zoom and pan" capibilities of a tablet,
   * the dialog keeps re-positioning to the "center" of the document and you can
   * not pan around the dialog contents.
   *
   * @private.
   */
  _isMobileUADialogPositioned: false,

  /**
   * The uim token is only used in conjunction with the UimDialg API. It is
   * used to return the dialogId for the open dialog.
   */
  uimToken: undefined,

  postCreate: function() {
    curam.debug.log("curam.ModalDialog.postCreate(): w=%s; h=%s",
        this.width?this.width:"not given", this.height?this.height:"not given");

    // destroy any old modals
    this._destroyOldModals();

    // AppController.jspx sets this variable on the "top" window.
    // Cache it locally to prevent getTopmostWindow being called every time
    // _position() is called.
    this._isMobileUA =
      curam.util.getTopmostWindow().curam.config.mobileUserAgent;
    
    if (typeof(this._isMobileUA) != 'boolean') {
      // An additional safety check in case something goes wrong in
      // AppController.jspx. Want to make sure this defaults to a boolean and
      // not "undefined".
      this._isMobileUA = false;
    }
    
    // Disable dragging on mobile devices.
    this.draggable = !this._isMobileUA; 
    
    // get these values anew for each dialog instance
    this.maximumWidth = dijit.getViewport().w - this._horizontalModalSpace;
    this.maximumHeight = dijit.getViewport().h - this._verticalModalSpace;
    if (jsScreenContext.hasContextBits("EXTAPP")) {
      // OneUI dialogs in the external app need an additional buffer on top
      // of "_verticalModalSpace" as they have larger title bars etc. then our
      // internal dialogs.
      this.maximumHeight -= this._verticalModalSpace;
    }
    
    this.inherited(arguments);
    this.unsubscribes = [];
    this.modalconnects = [];
    
    // All infrastructure modals (e.g. date picker) are stored in this location.
    // This flag is then used in various conditions in this class. 
    this._isCDEJModal =
      (this.iframeHref.indexOf("CDEJ/popups") > -1
       || this.iframeHref.indexOf("frequency-editor.jsp") > -1);

    // set the dialog to be off-screen and hidden initially
    dojo.style(this.domNode, "left", "-10000px");
    dojo.style(this.domNode, "top", "1px");
    dojo.style(this.domNode, "display", "");
    dojo.style(this.domNode, "visibility", "hidden");

    dojo.addClass(this.domNode, "modalDialog");

    this._initParentWindowRef();
    if (this.parentWindow) {
      curam.dialog.pushOntoDialogHierarchy(this.parentWindow);
    } else {
      curam.dialog.pushOntoDialogHierarchy(curam.util.getTopmostWindow());
    }

    this.unsubscribes.push(this.subscribe("/dnd/move/start",
        dojo.hitch(this, this._startDrag)));

    // remove 'overlay' element once dragging event ends
    this.unsubscribes.push(this.subscribe("/dnd/move/stop", function() {
      var ovr = dojo.query(".overlay-iframe")[0];
      if (ovr) {
        dojo.destroy(ovr);
      }
    }));

    this._registerInitListener();

    // Handle removing this window from the dialog hierarchy when the page
    // is unloaded.
    var subscribeTokenUnload = dojo.subscribe("/curam/dialog/iframeUnloaded", this, function(dialogId, targetWin) {
        if (this.id == dialogId) {
          curam.debug
            .log(bundle.getProperty("curam.ModalDialog.unload"), dialogId);
          curam.dialog.removeFromDialogHierarchy(targetWin);

          dojo.style(this.iframe, "visibility", "hidden");

          // make sure the init event from the next page will be heard
          this.initDone = false;
          this._registerInitListener();
        }
      });
    this.unsubscribes.push(subscribeTokenUnload);

    // subscribe for onLoad events on the iframe
    var onLoadInitHandler = dojo.hitch(this, function(iframeId, context) {
      curam.debug.log(bundle.getProperty("curam.ModalDialog.load.init"), 
        iframeId);

      // remove the no longer needed handler
      curam.util.onLoad.removeSubscriber(
          this._getEventIdentifier(), onLoadInitHandler);

      curam.dialog.pushOntoDialogHierarchy(this.iframe.contentWindow);

      this._determineSize(context);
      this._setTabIndex(this.iframe, "0");

      if (!this.isRegisteredForClosing) {
        var topmostWindow = curam.util.getTopmostWindow();
        this.unsubscribes.push(topmostWindow.dojo.subscribe(
            "/curam/dialog/close", this, function(dialogId) {
              if (this.id == dialogId) {
                curam.debug.log("/curam/dialog/close " 
                  + bundle.getProperty("curam.ModalDialog.event.for"), 
                    dialogId);
                this.hide();
              }
            }));

        this.isRegisteredForClosing = true;
      }

      this.doShow(context);
      this._notifyModalDisplayed();
    });
    curam.util.onLoad.addSubscriber(this._getEventIdentifier(), onLoadInitHandler);

    var isFirstLoad = true;
    this.onLoadSubsequentHandler = dojo.hitch(this, function(iframeId, context) {
      if (isFirstLoad) {
        // skip the first load as it is being handled by the above handler
        isFirstLoad = false;

      } else {
        curam.debug.log(bundle.getProperty("curam.ModalDialog.load"), iframeId);
        if (!context.modalClosing) {
          curam.dialog.pushOntoDialogHierarchy(this.iframe.contentWindow);

          this._determineSize(context);
          // Set position anew - the original y coordinate was calculated from
          // the previous height, which may have changed, causing the bottom
          // of the dialog off the viewport.
          this._position(true);
          this.doShow(context);
          this._notifyModalDisplayed();

        } else {
          curam.debug.log(bundle.getProperty("curam.ModalDialog.close"));
        }
      }

      var iframe = dojo.byId(iframeId);
      var pageTitle = iframe.contentWindow.document.title;
      iframe.setAttribute("title", LOCALISED_MODAL_FRAME_TITLE + " - " + pageTitle);

    });
    curam.util.onLoad.addSubscriber(this._getEventIdentifier(), this.onLoadSubsequentHandler);

    this.unsubscribes.push(curam.util.getTopmostWindow().dojo.subscribe(
        "/curam/dialog/iframeFailedToLoad", this,
      function(dialogId) {
        curam.util.onLoad.removeSubscriber(
            this._getEventIdentifier(), onLoadInitHandler);
        this._determineSize({ height: 450, title: 'Error!' });
        this.doShow();
        this._notifyModalDisplayed();
    }));

    // set focus on modal displayed
    this.unsubscribes.push(curam.util.getTopmostWindow().dojo.subscribe(
        "/curam/dialog/displayed", this, this._setFocusHandler));

    // notify external API on modal displayed
    this.unsubscribes.push(curam.util.getTopmostWindow().dojo.subscribe(
        "/curam/dialog/displayed", this, function(dialogId) {
          if (dialogId == this.id) {
            curam.util.getTopmostWindow().dojo.publish(
                "/curam/dialog/AfterDisplay", [ dialogId ]);
          }
        }));

    // Only allow opening further modals once we are fully displayed.
    this.unsubscribes.push(curam.util.getTopmostWindow().dojo.subscribe(
        "/curam/dialog/displayed", this, function() {
          curam.util._setModalCurrentlyOpening(false);
        }));

    var isAbsoluteUrl = function(inputUrl) {
      return inputUrl.indexOf(":") > 0;
    };
    var fullUrl = isAbsoluteUrl(this.iframeHref) ? this.iframeHref
        : this._getBaseUrl(curam.util.getTopmostWindow().location.href) + jsL
          + "/" + this.iframeHref;

    this.uimController = new curam.ModalUIMController({
      uid:this.id,
      url: fullUrl,
      loadFrameOnCreate: false,
      inDialog: true,
      iframeId:this._getEventIdentifier(),
      width: this._calculateWidth(this.width) + "px",
      height: this.maximumHeight + "px"
    });

    // TODO: can all references to this.iframe simply be updated to be
    // "this.uimController.getIFrame()"
    curam.debug.log("DEBUG: ModalDialog.js:postCreate(): uimController: "
        + this.uimController);
    this.iframe = this.uimController.getIFrame();
    curam.debug.log("DEBUG: ModalDialog.js:postCreate(): uimController.domNode: "
        + this.uimController.domNode);

    this.modalconnects.push(
          dojo.connect(this, "onHide", this, this._onHideHandler));

    this.set("content", this.uimController.domNode);

    // mark the iframe node with a specific class to later identify events
    // coming from it
    dojo.addClass(this.iframe, this._getEventIdentifier());

    // The following code makes sure that the active dialog has a specific class
    // in its iframe element so that it can be recognized by automated tools.
    this.unsubscribes.push(curam.util.getTopmostWindow().dojo.subscribe(
        "/curam/dialog/displayed", this, this._modalDisplayedHandler));
    this.unsubscribes.push(curam.util.getTopmostWindow().dojo.subscribe(
        "/curam/dialog/closed", this, this._modalClosedHandler));

    // report an event when the page fails to load
    this._registerOnIframeLoad(dojo.hitch(this, this._loadErrorHandler));

    // now start loading the content
    this.uimController.loadPage();
  },

  /* COPY_PASTE_CUSTOMIZATION
   * Override the hide method to comment out the call to this:
   *    
   *    this._fadeOutDeferred.then(lang.hitch(this, 'onHide'));
   * 
   * as this asynchronous task was never finishing and thus the method
   * being hitched to was never called. So we just make the call to
   * lang.hitch(this, 'onHide') directly.
   */
  hide: function(){
    
    // summary:
    //              Hide the dialog
    // returns: dojo.Deferred
    //              Deferred object that resolves when the hide animation is complete

    // if we haven't been initialized yet then we aren't showing and we can just return
    if(!this._alreadyInitialized){
            return;
    }
    if(this._fadeInDeferred){
            this._fadeInDeferred.cancel();
    }

    // fade-in Animation object, setup below
    var fadeOut = dojo.fadeOut({
      node: this.domNode,
      duration: this.duration,
      onEnd: dojo.hitch(this, function(){                    
              this.domNode.style.display = "none";
              dijit.Dialog._DialogLevelManager.hide(this);
              this._fadeOutDeferred.callback(true);
              delete this._fadeOutDeferred;
      })
    });
    
    this._fadeOutDeferred = new dojo.Deferred(dojo.hitch(this, function() {
      fadeOut.stop();
      delete this._fadeOutDeferred;            
    }));

    // fire onHide when the promise resolves.
    //>>> comment out.
    //this._fadeOutDeferred.then(lang.hitch(this, 'onHide'));  
    //>>> end comment out.
    
    //>>> addition.
    dojo.hitch(this, 'onHide')();
    //>>> end addition.
    
    fadeOut.play();
       
    if(this._scrollConnected){
      this._scrollConnected = false;
    }
          
    var h;
    while(h = this._modalconnects.pop()){
      h.remove();
    }

    if(this._relativePosition){
      delete this._relativePosition;
    }

    this._set("open", false);

    return this._fadeOutDeferred;
},

  /**
   * Returns the URL striped of the last path element and the query string.
   */
  _getBaseUrl: function(inputUrl) {
    var queryIndex = inputUrl.indexOf('?');
    inputUrl = (queryIndex > -1) ? inputUrl.substring(0, queryIndex) : inputUrl;
    var lastSlashIdx = inputUrl.lastIndexOf("/");
    return inputUrl.substring(0, lastSlashIdx + 1);
  },

  /**
   * Adds the help icon to the modal dialog title bar.
   *
   * @param context
   *    The UIM page context object.
   */
  _setupHelpIcon: function(context) {
    // In some scenarios the context will not be passed at all.
    // The code below handles this case.
    var enable = typeof context != "undefined"
        ? context.helpEnabled : false;
    var extension = enable ? context.helpExtension : "";
    var pageId = enable ? context.pageID : "";
    var closeIcon = dojo.query(".modalDialog span.dijitDialogCloseIcon");
    
    for (var i=0; i<closeIcon.length; i++) {
      if (enable && !this._helpIcon) {
        this._helpIcon = this._createHelpIcon(
            "dijitDialogHelpIcon", "dijitDialogHelpIcon-hover",
            extension, closeIcon[i]);
        
        this._helpIcon.setAttribute("role", "button");
        this._setTabIndex(this._helpIcon, "0");
        this._helpIcon.setAttribute("onKeyDown", "curam.util.isShiftTab(event)");
        this._helpIcon._enabled = false;
      }
      this._setTabIndex(closeIcon[i], "0");
    }

    if (enable && this._helpIcon) {
      this._helpIcon._pageID = pageId;
    }

    // avoid unnecessary styling
    if ((enable && this._helpIcon && this._helpIcon._enabled)
        || (!enable || !this._helpIcon || !this._helpIcon._enabled)) {
      return;
    }

    dojo.style(this._helpIcon, "display", enable ? "" : "none");
    this._helpIcon._enabled = enable;
  },

  /**
   * Creates the help icon in the dialog title bar.
   *
   * @param refNode
   *    The node before which the help icon should be placed.
   */
  _createHelpIcon: function(clazz, hoverClazz, extension, refNode) {
    var icon = dojo.create("span", {
        "class": clazz,
        "waiRole": "presentation",
        "title": LOCALISED_MODAL_HELP_ALT
    });

    dojo.place(icon, refNode, "before");

    this.connect(icon, "onclick", function() {
      var locale=curam.config?curam.config.locale:jsL;
      var url;
      //Construct the help URL for Modal window
      url="./help.jsp?pageID="+this._helpIcon._pageID;     
      window.open(url);
    });
    
    this.connect(icon, "onkeypress", function() {
      if(curam.util.enterKeyPress(event)){
        var locale=curam.config?curam.config.locale:jsL;
        var url;
        //Construct the help URL for Modal window
        url="./help.jsp?pageID="+this._helpIcon._pageID;     
        window.open(url);
      }
    });

    if (hoverClazz) {
      this.connect(icon, "onmouseover", function() {
        dojo.addClass(icon, hoverClazz);
      });

      this.connect(icon, "onmouseout", function() {
        dojo.removeClass(icon, hoverClazz);
      });
    }

    return icon;
  },

  _registerInitListener: function() {
    this.initUnsubToken = dojo.subscribe("/curam/dialog/init", this,
        function() {
          // notify the external API of the dialog ID
          dojo.publish("/curam/dialog/SetId", [ this.id ]);
          this.initDone = true;

          // also notify the external UimDialog API passing back the dialogID
          if(this.uimToken) {
            dojo.publish("/curam/dialog/uim/opened/" + this.uimToken, [ this.id ]);
          }

          dojo.unsubscribe(this.initUnsubToken);
        });
  },

  _getEventIdentifier: function() {
    return "iframe-" + this.id;
  },

  _registerOnIframeLoad: function(handler) {
    if (dojo.isIE && dojo.isIE < 9) {
      this.onIframeLoadHandler = dojo.hitch(this, function() {
        if (typeof this.iframe != "undefined"
            && typeof this.iframe.readyState != "undefined"
            && this.iframe.readyState == "complete") {
          handler();
        }
      });
      this.iframe.attachEvent('onreadystatechange', this.onIframeLoadHandler);

    } else {
      this.modalconnects.push(
          dojo.connect(this.iframe, "onload", this, handler));
    }
  },

  /**
   * Called before dragging the Dialog.
   * @private
   */
  _startDrag: function(mover) {
    if (!this.iframe) {
      return;
    }
    if(mover && mover.node && mover.node === this.domNode){

      // add an 'overlay' element on top of iframe to prevent iframe from
      // interfering with drag event
      var overLayDiv = dojo.create("div", {"class": "overlay-iframe"});
      overLayDiv.innerHTML = "";
      dojo.place(overLayDiv, this.iframe, "before");

      var size = dojo.contentBox(this.containerNode);

      dojo.style(overLayDiv, {
        width: size.w + "px",
        height: size.h + "px"
      });

      var windowSize = domGeom.getMarginBoxSimple(dijit._underlay.domNode);

      var limits = {
        l: windowSize.w - size.w - 10,
        t: windowSize.h - size.h - 30
      };

      // Override the onMove function on the _moveable object
      // to limit the position of the dialog to within the
      // browser frame, and not go outside the window.
      this._moveable.onMove = function(mover, leftTop, e){
        leftTop.l = Math.max(5, Math.min(leftTop.l, limits.l));
        leftTop.t = Math.max(5, Math.min(leftTop.t, limits.t));

        dojo.dnd.Moveable.prototype.onMove.apply(this, [mover, leftTop, e]);
    };
  }
  },

  _loadErrorHandler: function() {
    curam.debug
      .log(bundle.getProperty("curam.ModalDialog.onload.notify"), this.iframe);
    if (!this.initDone) {
      dojo.unsubscribe(this.initUnsubToken);
      curam.debug.log(bundle.getProperty("curam.ModalDialog.firing") 
          + " /curam/dialog/iframeFailedToLoad " 
          + bundle.getProperty("curam.ModalDialog.for"), this.id);
      curam.util.getTopmostWindow().dojo.publish(
          "/curam/dialog/iframeFailedToLoad", [this.id]);

    } else {
      curam.debug.log("UIM " 
        + bundle.getProperty("curam.ModalDialog.onload.success"));
    }
  },

  /**
   * Called on the dialog display time, sets the initial focus appropriately.
   * @private
   */
  _setFocusHandler: function(dialogId) {
    if (dialogId == this.id && this.initDone) {
      curam.debug.log("curam.ModalDialog_setFocusHandler(): " 
        + bundle.getProperty("curam.ModalDialog.execute"), dialogId);
      var frameWin = this.iframe.contentWindow;
      var focusSet = frameWin.curam.util.doSetFocus();
      if (!focusSet) {
        // there are no editable fields - set focus to the dialog body
        // TODO: we should be setting focus to the default action button, if any
        if (typeof frameWin.dijit == "object"
            && typeof frameWin.dijit.focus == "function") {
          frameWin.dijit.focus(this.iframe);

        } else {
          this.iframe.focus();
        }
      }
    }
  },

  _modalDisplayedHandler: function(dialogId) {
    if (dialogId == this.id) {
      // this dialog is open, mark as active
      curam.debug.log(bundle.getProperty("curam.ModalDialog.dialog.open.1") 
          + "("  + this.id + ")" 
          + bundle.getProperty("curam.ModalDialog.dialog.open.2"));
      this._markAsActiveDialog(true);

    } else {
      // some other dialog has opened, deactivate this one if it hasn't
      // been done before
      if (!this.deactivatedBy) {
        curam.debug.log(
          bundle.getProperty("curam.ModalDialog.dialog.deactivating.1") 
           + "("  + this.id + ")," 
           + bundle.getProperty("curam.ModalDialog.dialog.deactivating.2"), 
             dialogId);
        this._markAsActiveDialog(false);
        // only remember the first dialog that de-activated us -
        // that gives the immediate child and will correctly activate
        // this dialog when that child closes
        this.deactivatedBy = dialogId;
      }
    }
  },

  _modalClosedHandler: function(dialogId) {
    if (this.deactivatedBy == dialogId) {
      curam.debug.log(
          bundle.getProperty("curam.ModalDialog.dialog.activating.1") 
           + "("  + this.id + ")," 
           + bundle.getProperty("curam.ModalDialog.dialog.activating.2"), 
             dialogId);
      this._markAsActiveDialog(true);
      delete this.deactivatedBy;
    }
  },

  _destroyOldModals: function() {
    require(["curam/dialog"]);
    if (!curam.dialog.oldModalsToDestroy) {
      curam.dialog.oldModalsToDestroy = [];
    }
    dojo.forEach(curam.dialog.oldModalsToDestroy, function(oldModal) {
      oldModal._cleanupIframe();
      oldModal.destroyRecursive();
    });
    curam.dialog.oldModalsToDestroy = [];
  },

  _initParentWindowRef: function() {
    if (!this.parentWindow) {
      var parent = null;
      if (curam.tab.inTabbedUI()) {
        // we are in tabbed UI, use the active tab content iframe
        parent = curam.tab.getContentPanelIframe();

      } else if (external.inExternalApp()) {
        // we are in the external application, try to get parent UIM iframe
        parent = external.getUimParentWindow();
      }
      // else - unable to get, this is valid for example in ext app fragment
      // scenarios

      // if the parentWindow is not provided, the modal is being opened
      // from the menu bar or shortcut panel. The parent will be the content
      // panel iframe, if that is loaded, or null
      if (parent) {
        this.parentWindow = parent.contentWindow;

      }

    } else {
      // Check if the parent window is the details panel
      if (dojo.hasClass(this.parentWindow.frameElement, "detailsPanelFrame")) {
        // use the main content panel URL as RPU
        var contentPanel = curam.tab.getContentPanelIframe();
        var rpuUrl = curam.util.getLastPathSegmentWithQueryString(
            contentPanel.src);
        // strip the __o3rpu parameter form the RPU value
        rpuUrl = curam.util.removeUrlParam(rpuUrl, "__o3rpu");
        curam.debug.log("o3rpu " 
          + bundle.getProperty("curam.ModalDialog.property"), 
            encodeURIComponent(rpuUrl));

        // Change the o3rpu to be the content panel href
        this.iframeHref = curam.util.replaceUrlParam(this.iframeHref, "__o3rpu",
            encodeURIComponent(rpuUrl));

        // Change parent window to be the content panel
        this.parentWindow = contentPanel.contentWindow;
      }
    }
  },

  _notifyModalDisplayed: function() {
    curam.debug.log(bundle.getProperty("curam.ModalDialog.publishing") 
      + " /curam/dialog/displayed " 
      + bundle.getProperty("curam.ModalDialog.for"), this.id);
    curam.util.getTopmostWindow().dojo.publish(
        "/curam/dialog/displayed",
        [ this.id, { width: this._determinedWidth,
                     height: this._determinedHeight } ]);
  },

  _markAsActiveDialog: function(active) {
    var activeDialogClassName = "curam-active-modal";
    if (active) {
      dojo.addClass(this.iframe, activeDialogClassName);
      curam.debug.log(bundle
        .getProperty("curam.ModalDialog.add.class"), 
          [this.id, this.iframeHref]);

    } else {
      dojo.removeClass(this.iframe, activeDialogClassName);
      curam.debug.log(bundle
        .getProperty("curam.ModalDialog.remove.class"), 
          [this.id, this.iframe.src]);
    }
  },

  _setHrefAttr:function(href) {
    curam.debug.log("setHrefAttr");
    this.iframeHref = href;

    this.inherited(arguments);
  },

  _setTabIndex:function(iframe, tabIndex) {
    iframe.setAttribute("tabIndex", tabIndex);
  },

  _position: function(force) {
    curam.debug.log(bundle.getProperty("curam.ModalDialog.position"));
    if (this._isMobileUADialogPositioned == false && (this.open || force)) {
      this.inherited(arguments);
      if(this._isMobileUA == true) {
        // Pn mobile devices, this flag prevents further positioning.
        this._isMobileUADialogPositioned = true; 
      }
    } else {
      curam.debug.log(bundle.getProperty("curam.ModalDialog.ignoring") 
        + " curam.ModalDialog_position");
    }
  },

  /**
   * Applies default width if no value is specified and max width in case
   * there is not enough space.
   */
  _calculateWidth: function(specifiedWidth) {
    if (specifiedWidth) {
      // convert, in case it is a string
      specifiedWidth = new Number(specifiedWidth);
      // G11N_MODAL_DIALOG_ADJUSTMENT_FACTOR is conditionally generated by
      // JavaScriptUserPreferencesTag.java when dialog width needs to be
      // automatically adjusted.
      if (!this._isCDEJModal
          && typeof(G11N_MODAL_DIALOG_ADJUSTMENT_FACTOR) != "undefined") {
        specifiedWidth *= G11N_MODAL_DIALOG_ADJUSTMENT_FACTOR;
      }
      if (specifiedWidth > this.maximumWidth) {
        curam.debug.log(bundle
          .getProperty("curam.ModalDialog.specified.width.over"), 
            this.maximumWidth);
        return this.maximumWidth;

      } else {
        // using "floor" incase the calculation above produces a floating
        // point number.
        return Math.floor(specifiedWidth);
      }

    } else {
      // store this in a local varaible because we may have to make an
      // adjustment, which we do not want to "persist" on the class.
      var localDefaultWidth = this.defaultWidth;
      if (!this._isCDEJModal
          && typeof(G11N_MODAL_DIALOG_ADJUSTMENT_FACTOR) != "undefined") {
        localDefaultWidth *= G11N_MODAL_DIALOG_ADJUSTMENT_FACTOR;
      }
      curam.debug.log(bundle.getProperty("curam.ModalDialog.default.width"), 
                      localDefaultWidth);
      if (localDefaultWidth > this.maximumWidth) {
        curam.debug.log(bundle
          .getProperty("curam.ModalDialog.default.width.over"), 
            this.maximumWidth);
        return this.maximumWidth;

      } else {
        // using "floor" incase the calculation above produces a floating
        // point number.
        return Math.floor(localDefaultWidth);
      }
    }
  },

  /**
   * Applies calculated height if no value is specified. Also observes
   * maximum allowed height in case there is not enough space.
   */
  _calculateHeight: function(specifiedHeight, calculatedHeight) {
    if (specifiedHeight) {
      specifiedHeight = new Number(specifiedHeight); // convert, in case it is a string
      if (specifiedHeight > this.maximumHeight) {
        curam.debug.log("specified height exceeds available space, "
            + "overriding with max available height of ", this.maximumHeight);
        return this.maximumHeight;

      }else if (specifiedHeight < modalMinimumHeight) {
         curam.debug.log(bundle
           .getProperty("curam.ModalDialog.specified.height.over.1"), 
             modalMinimumHeight);
         return modalMinimumHeight;
      } else {
        return specifiedHeight;
      }

    } else {
      curam.debug.log(bundle
        .getProperty("curam.ModalDialog.no.height"), calculatedHeight);
      if (calculatedHeight > this.maximumHeight) {
        curam.debug.log(bundle
          .getProperty("curam.ModalDialog.calculated.height.over.1"), 
            this.maximumHeight);
        return this.maximumHeight;

      }else if (calculatedHeight < modalMinimumHeight) {
         curam.debug.log(bundle
           .getProperty("curam.ModalDialog.calculated.height.over.2"), 
             modalMinimumHeight);
         return modalMinimumHeight;
      } else {
        return calculatedHeight;
      }
    }
  },

  _determineSize: function (context) {
    var calculatedHeight = context.height;
    var pageLevelOptions = context.windowOptions;
    curam.debug.log(bundle.getProperty("curam.ModalDialog.size"));
    try {
      // TODO: use calculatedHeight from event only if no fixed size, etc.

      // first read the link-level window options
      var w = this._calculateWidth(this.width);
      var h = this._calculateHeight(this.height, calculatedHeight);

      // now try to read the page-level window options
      if (pageLevelOptions) {
        // if any page level options are specified, use the page-level only,
        // overriding link-level completely
        if (pageLevelOptions["width"] || pageLevelOptions["height"]) {
          curam.debug.log(bundle.getProperty("curam.ModalDialog.options"));
          w = this._calculateWidth(pageLevelOptions["width"]);
          h = this._calculateHeight(pageLevelOptions["height"], calculatedHeight);
        }
      }

      curam.debug.log("curam.ModalDialog:_determineSize() %s x %s", w, h);

      // resize the UIM controller
      this.uimController.setDimensionsForModalDialog(w, h, context);

      // set the actual size values for later use by event handlers
      this._determinedWidth = w;
      this._determinedHeight = h;

      this.setTitle(context, w);

    } catch(e) {
      curam.debug.log("curam.ModalDialog:_determineSize() : " 
        + bundle.getProperty("curam.ModalDialog.error") + dojo.toJson(e));
    }
  },

  setTitle: function (context, titleBarLength) {

    // local title related variables
    var title = context.title;
    if (!title) {
      curam.debug.log("curam.ModalDialog.setTitle() - " 
        + bundle.getProperty("curam.ModalDialog.no.title"));
      title = "";
    }
    var appendedErrorText = context.messageTitleAppend;

    curam.debug.log("curam.ModalDialog.setTitle('%s')", title);

    // search for appended error text
    var textFound = title.indexOf(appendedErrorText);

    // if the appended error text is found, hide the text from the user using
    // CSS (to allow it to remain visible to screen readers)
    if(textFound != -1) {
      var messageSpan =
        dojo.create("span",
          { innerHTML: appendedErrorText, "class": "messagesPresent" });

      // update title string to encorporate span element
      title =
        title.split(appendedErrorText).join(
          "<span class=\"messagesPresent\">" + appendedErrorText + "</span>");
    }

    this.titleNode.innerHTML = title;
    dojo.style(this.titleBar,{width: titleBarLength+"px", height: 21+"px"});
    dojo.style(this.titleNode,"width",Math.ceil(titleBarLength * .85)+"px");
  },

  doShow: function(context) {
    curam.debug.log("curam.ModalDialog.doShow(): " 
      + bundle.getProperty("curam.ModalDialog.show"));

    if(!this.initialized) {
      this.initialized = true;
    }

    this._setupHelpIcon(context);

    this.show();

    dojo.style(this.iframe, "visibility", "visible");
    dojo.style(this.domNode, { visibility: "visible" });
  },

  /**
   * Performs the necessary cleanup on dialog close.
   */
  _onHideHandler: function() {
    curam.util.getTopmostWindow().dojo.publish(
        "/curam/dialog/BeforeClose", [ this.id ]);

    // hide immediately to avoid flicker
    dojo.style(this.domNode, {
      visibility: "hidden",
      display: "block"
    });

    require(["curam/dialog"]);
    curam.dialog.removeFromDialogHierarchy(this.iframe.contentWindow);
    curam.dialog.removeFromDialogHierarchy(this.parentWindow);

    var topmostWin = curam.util.getTopmostWindow();
    topmostWin.dojo.publish("/curam/dialog/closed", [this.id]);

    dojo.unsubscribe(this.initUnsubToken);
    dojo.forEach(this.unsubscribes, topmostWin.dojo.unsubscribe);
    this.unsubscribes = [];

    dojo.forEach(this.modalconnects, dojo.disconnect);
    this.modalconnects = [];

    if (dojo.isIE && dojo.isIE < 9) {
      this.iframe.detachEvent('onreadystatechange', this.onIframeLoadHandler);
    }

    curam.util.onLoad.removeSubscriber(
        this._getEventIdentifier(), this.onLoadSubsequentHandler);

    if (this._explodeNode && this._explodeNode.parentNode) {
      this._explodeNode.parentNode.removeChild(this._explodeNode);
    }
    curam.debug
      .log(bundle.getProperty("curam.ModalDialog.deactivating", [this.id]));
    this._markAsActiveDialog(false);

    // give focus back to iframe for device independence.
    if (typeof this.parentWindow != "undefined" && this.parentWindow != null) {
      this.parentWindow.focus();
    }

    // cleanup window references
    delete this.parentWindow;

    // Postpone destroying the modal to later, because doing so now would also
    // remove the underlay. That is a problem in cases when multiple modals
    // are open, you close the top one and you end up with the parent modal
    // still open, but the rest of the viewport is now accessible
    // (not grayed-out).
    curam.dialog.oldModalsToDestroy.push(this);
  },
  
  /**
   * This will be called when dialog itself is destroyed.
   * We used to do it in the _onHideHandler() function, but postponing to later
   * prevents IE9 from garbage collecting iframe prematurely and throwing
   * errors.
   */
  _cleanupIframe: function() {
    // get rid of the the iframe
    // remove from the modal
    delete this.content;
    delete this.uimController;
    var ifrm = this.iframe;
    // clear the iframe contents
    ifrm.src = "";
    // clear the iframe reference
    delete this.iframe;
    // destroy the node itself
    dojo.destroy(ifrm);
  }
  });
  
  return ModalDialog;
});

},
'curam/widget/OptimalBrowserMessage':function(){
require({cache:{
'url:curam/widget/templates/OptimalBrowserMessage.html':"<div>\n  <div class=\"hidden\"\n       data-dojo-type=\"dojox/layout/ContentPane\"\n       data-dojo-attach-point=\"_optimalMessage\">\n  </div>\n</div>\n"}});
/* Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2013. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * --------------------
   * 17-Sep-2013  BOS [CR00396844] Changed the format of stored date to UTC as
   *                    the default was ISO and was causing an issue.
   * 22-Aug-2013  BOS [CR00394807] Refactored for unit tests.
   * 02-Aug-2013  BOS [CR00393492] Initial version.
   */
define("curam/widget/OptimalBrowserMessage", [ "dojo/_base/declare",
         "dojo/_base/lang",
         "curam/util",
         "curam/util/UIMFragment",
         "curam/ui/ClientDataAccessor",
         "dijit/_Widget",
         "dijit/_TemplatedMixin",
         "dijit/_WidgetsInTemplateMixin",
         "dijit/layout/BorderContainer",
         "dijit/layout/ContentPane",
         "dijit/form/Button",
         "dojo/text!curam/widget/templates/OptimalBrowserMessage.html"], 
  function(declare,
    lang,
    util,
    UIMFragment, 
    ClientDataAccessor,
    _Widget,
    _TemplatedMixin,
    _WidgetsInTemplateMixin,
    BorderContainer,
    ContentPane,
    Button,
    template){
  return declare("curam.widget.OptimalBrowserMessage",[_Widget,_TemplatedMixin,_WidgetsInTemplateMixin], 
    {
    OPTIMAL_BROWSER_MSG: "optimal-browser-msg",
    
    isExternalApp: null,
    
    optimalBrowserMsgPaddingCSS: "optimal-browser-banner", 
    
    optimalBrowserNode: null,
    
    appSectionsNode: null,
    
    appBannerHeaderNode: null,
    
    intApp: "internal",
    
    extApp: "external",
    
    context: null,
    
    /** Template String */
    
    templateString: template,

    widgetsInTemplate: true,
    
    baseClass: "",
    
    optimalBrowserNodeID: "_optimalMessage",
    
    _appConfig: null,
    
    /**
     * Overridden to mixin the override resources if provided.
     * @function
     * @public
     */
    postMixInProperties: function() {
      this.inherited(arguments);
    },
    
    /**
     * Override to force startup/layout on BorderContainer.
     */
    startup: function() {
      this.inherited(arguments);
      this._init();
      // load the nodes we are concerned with for optimal browser banner.
      this._loadNodes(this._optimalMessage.id);
    },

    /**
     * Initializes the widget by loading the JSON data before rendering the
     * optimal browser message.
     */
    _init: function() {
      da = new ClientDataAccessor();
      da.getRaw("/config/tablayout/settings[" + curam.config.appID + "]",
          lang.hitch(this, function(data) {
            console.log("External App config data:" + data);
            this._appConfig = data;
            this._getAppConfig();
          }),
          function(error, args) {
            console.log("External App config data load error:" + error);
          },
          null);
    },
    
    /**
     * Initializes the widget by getting the JSON data before rendering the
     * optimal browser message.
     */
    _getAppConfig: function() {
      var optimalBrowserMsgEnabled = this._appConfig.optimalBrowserMessageEnabled;
      var context = util.getTopmostWindow().dojox;
      var optimalMsgKey = this._createStorageKey(this.OPTIMAL_BROWSER_MSG);
      var thisObj = this;
      var isStorageInitialized = false;
      
      // if the feature is enabled we start doing the checking of the current
      // browser version against the browser configuration...
      if (optimalBrowserMsgEnabled == "true" | optimalBrowserMsgEnabled == "TRUE") {
        util.runStorageFn(function() {
          isStorageInitialized = true;
          thisObj.context = context;
          return thisObj._isOptimalBrowserCheckDue(context, optimalMsgKey, thisObj);
        });
        // if for some reason there was an issue with local storage set up, then
        // try again with the context..
        if (!isStorageInitialized) {
          return this._isOptimalBrowserCheckDue(this.context, optimalMsgKey, thisObj);
        }
      }
      return false;    
    },
    
    /**
     * Determines if a an optimal browser check is due. This is determined if
     * the fetaure is on and the check has never been run before or the number days 
     * until the next browser check has elapsed.
     */
    _isOptimalBrowserCheckDue: function(context, optimalMsgKey, thisObj) {
      if (context != undefined) {
        var dateForNextCheck = context.storage.get(optimalMsgKey);

        // If the application has been accessed before then we get the date
        // that was set for the key and determine if that date is not in the
        // past. If the date for the check was in the past then we need to do
        // check
        if(dateForNextCheck && dateForNextCheck != "") {
          // if the current date is greater (allowing for format) than 
          // date set persistently marking that we have shown this message to 
          // user before then we need to do the check again. ie. the check 
          // happen every 60 days (can be configured though for other value)..
          if (new Date(thisObj._getTargetDate()) 
              > new Date(dateForNextCheck)) {
            thisObj._executeBrowserVersionCheck(context);
            return true;
          }
        // if key never set in storage then the application must not have been 
        // accessed before.
        } else {
          thisObj._executeBrowserVersionCheck(context);
          return true;
        }
        return false;
      }    
    },
    
    /**
     * Execute the browser check. The current browser i.e 
     * (IE, FF, Chrome, Safari) is checked against the configured browser 
     * version for that browser.
     */
    _executeBrowserVersionCheck: function(context) {
      var ieMinVersion = this._appConfig.ieMinVersion;
      var ieMaxVersion = this._appConfig.ieMaxVersion;
      var ffMinVersion = this._appConfig.ffMinVersion;
      var ffMaxVersion = this._appConfig.ffMaxVersion;
      var chromeMinVersion = this._appConfig.chromeMinVersion;
      var chromeMaxVersion = this._appConfig.chromeMaxVersion;
      var safariMinVersion = this._appConfig.safariMinVersion;
      var safariMaxVersion = this._appConfig.safariMaxVersion;
    
      var ieBrowserVersion = dojo.isIE;
      var ffBrowserVersion = dojo.isFF;
      var chromeBrowserVersion = dojo.isChrome;
      var safariBrowserVersion = dojo.isSafari;
      
      if (ieBrowserVersion != undefined) {
        return this._isCurrentBrowserVerSupported(context,
          ieBrowserVersion, ieMinVersion, ieMaxVersion);
      } else if (ffBrowserVersion != undefined && this.isExternalApp) {
        return this._isCurrentBrowserVerSupported(context,
          ffBrowserVersion, ffMinVersion, ffMaxVersion);
      } else if (chromeBrowserVersion != undefined) {
        return this._isCurrentBrowserVerSupported(context,
          chromeBrowserVersion, chromeMinVersion, chromeMaxVersion);
      } else if (safariBrowserVersion != undefined && this.isExternalApp) {
        return this._isCurrentBrowserVerSupported(context,
          safariBrowserVersion, safariMinVersion, safariMaxVersion);
        
      }
      return false;
    },
    
    /**
     * Indicates if the browser version being used is supported. If the minimum
     * version is set to greater than the current version then display
     * the optimal browser message. Additionally if the current version is set
     * greater to that of the maximum version than display the message.
     */
    _isCurrentBrowserVerSupported: function(context, currentBrowserVersion, 
        minSupportedBrowserVersion, maxSupportedBrowserVersion) {
      var messageEnabled = false;
      if (minSupportedBrowserVersion > 0.0) {
        if (currentBrowserVersion < minSupportedBrowserVersion) {
          messageEnabled = true;
          this._displayOptimalBrowserMsg(context);
          return true;
        }
      }
      // if we have not enabled the message already (because we have just 
      // detected that minimum version not supported) and maximum version set 
      // then check maximum browser version. 
      if (maxSupportedBrowserVersion > 0.0 && !messageEnabled) {
        if (currentBrowserVersion > maxSupportedBrowserVersion) {
          this._displayOptimalBrowserMsg(context);
          return true;
        }
      }
      return false;
    },
    
    /**
     * Display the optimal browser message in the banner of the application, by
     * invoking a renderer. Some post rendering tasks are then executed.
     */
    _displayOptimalBrowserMsg: function(context) {
      this._addOrRemoveCssForInternalApp(true, 
        this.optimalBrowserMsgPaddingCSS);
      // Invoke the renderer where the message content will be rendered
      // and added to the root fragment
      UIMFragment.get({
        url: "optimal-browser-msg-fragment.jspx",
        targetID: this._optimalMessage.id
      });
      this._postRenderingTasks(context);
    },
    
    /**
     * Post rendering tasks.
     */
    _postRenderingTasks: function(context) {
      // BOTH INTERNAL AND EXTERNAL APP
      // (1) Remove the 'hidden' CSS class because we want display the root
      //     HTML fragment for the optimal browser message
      var nodeId = this._optimalMessage.id;
      dojo.addOnLoad(function(){
        var optimalBrowserNode = dojo.byId(nodeId);
        dojo.removeClass(optimalBrowserNode, optimalBrowserNode.className);
      });
    
      // Set the number of days (in the storage facility) until when we should
      // do the next check...
      if (context.storage != undefined) {
        context.storage.put(this._createStorageKey(this.OPTIMAL_BROWSER_MSG), 
            this._getTargetDate(this._appConfig.nextBrowserCheck));
      }
      return context;
    },
    
    /**
     * Load the nodes of interest for the optimal browser configuration.
     */
    _loadNodes: function(optimalMsgID) {
      dojo.addOnLoad(function() {
        this.optimalBrowserNode = dojo.byId(optimalMsgID);
        this.appSectionsNode = dojo.byId("app-sections-container-dc");
        this.appBannerHeaderNode = dojo.byId("app-header-container-dc");
      });
    },
    
    /**
     * Creates a key for storing a token that will be used to determine the 
     * next time that the optimal browser check should be done.
     */
    _createStorageKey: function (initialKey) {
      // this.OPTIMAL_BROWSER_MSG
      if (this.isExternalApp) {
        initialKey = initialKey + "_" + this.extApp; 
      } else {
        initialKey = initialKey + "_" + this.intApp; 
      }
      return initialKey;
    },
    
    /**
     * Add or remove the relevant CSS class name for the optimal browser banner.
     * We need to adjust the height for internal application depending on
     * whether we have a banner header or sections.
     */
    _addOrRemoveCssForInternalApp: function(addClass, newCSS) {
      var isExternalApp = this.isExternalApp;
      dojo.addOnLoad(function() {
        // FOR INTERNAL APP ONLY
        // With current look and feel of optimal browser banner, lots more hacking
        // of the styling needs to be done... Timeouts e.t.c Tere is currently some
        // interference with the loading mask for tabs in UIController.
        if (!isExternalApp) {
          if (addClass) {
            dojo.addClass(this.appSectionsNode, newCSS);
            if (this.appBannerHeaderNode) {
              dojo.addClass(this.appSectionsNode.children.item(1), newCSS);
              dojo.addClass(this.appSectionsNode.children.item(2), newCSS);     
            }   
          } else {
            dojo.removeClass(this.appSectionsNode, newCSS);
            if (this.appBannerHeaderNode) {
              dojo.removeClass(this.appSectionsNode.children.item(1), newCSS);
              dojo.removeClass(this.appSectionsNode.children.item(2), newCSS);     
            }   
          }
        } 
      });     
    },
    
    /**
     * Gets a target date. The target date will be set a number of days into the
     * future if an input value has been specified.
     */
    _getTargetDate: function (daysIntoTheFuture) {
      var targetDate = new Date();
      if (daysIntoTheFuture == undefined) {
        targetDate.setDate(targetDate.getDate());
      } else {
        targetDate.setDate(targetDate.getDate() + daysIntoTheFuture);
      }
      return targetDate.toUTCString();
    },
    
    /**
     * Removes the optimal browser banner message from the application by 
     * removing the relevant node.
     */
    exitOptimalBrowserMessageBox: function() {
      var optimalBrowserNode = dojo.byId(this._optimalMessage.id);
      if(optimalBrowserNode){
        optimalBrowserNode.parentNode.removeChild(optimalBrowserNode);
      }
      // remove the CSS class names added for the optimal browser afterwards so
      // that the height adjustments are rolled back to what they were
      // previously
      this._addOrRemoveCssForInternalApp(false, 
        this.optimalBrowserMsgPaddingCSS);
    }
    });
});  


},
'dijit/form/_TextBoxMixin':function(){
define("dijit/form/_TextBoxMixin", [
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.byId
	"dojo/_base/event", // event.stop
	"dojo/keys", // keys.ALT keys.CAPS_LOCK keys.CTRL keys.META keys.SHIFT
	"dojo/_base/lang", // lang.mixin
	".."	// for exporting dijit._setSelectionRange, dijit.selectInputText
], function(array, declare, dom, event, keys, lang, dijit){

// module:
//		dijit/form/_TextBoxMixin
// summary:
//		A mixin for textbox form input widgets

var _TextBoxMixin = declare("dijit.form._TextBoxMixin", null, {
	// summary:
	//		A mixin for textbox form input widgets

	// trim: Boolean
	//		Removes leading and trailing whitespace if true.  Default is false.
	trim: false,

	// uppercase: Boolean
	//		Converts all characters to uppercase if true.  Default is false.
	uppercase: false,

	// lowercase: Boolean
	//		Converts all characters to lowercase if true.  Default is false.
	lowercase: false,

	// propercase: Boolean
	//		Converts the first character of each word to uppercase if true.
	propercase: false,

	// maxLength: String
	//		HTML INPUT tag maxLength declaration.
	maxLength: "",

	// selectOnClick: [const] Boolean
	//		If true, all text will be selected when focused with mouse
	selectOnClick: false,

	// placeHolder: String
	//		Defines a hint to help users fill out the input field (as defined in HTML 5).
	//		This should only contain plain text (no html markup).
	placeHolder: "",

	_getValueAttr: function(){
		// summary:
		//		Hook so get('value') works as we like.
		// description:
		//		For `dijit.form.TextBox` this basically returns the value of the <input>.
		//
		//		For `dijit.form.MappedTextBox` subclasses, which have both
		//		a "displayed value" and a separate "submit value",
		//		This treats the "displayed value" as the master value, computing the
		//		submit value from it via this.parse().
		return this.parse(this.get('displayedValue'), this.constraints);
	},

	_setValueAttr: function(value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue){
		// summary:
		//		Hook so set('value', ...) works.
		//
		// description:
		//		Sets the value of the widget to "value" which can be of
		//		any type as determined by the widget.
		//
		// value:
		//		The visual element value is also set to a corresponding,
		//		but not necessarily the same, value.
		//
		// formattedValue:
		//		If specified, used to set the visual element value,
		//		otherwise a computed visual value is used.
		//
		// priorityChange:
		//		If true, an onChange event is fired immediately instead of
		//		waiting for the next blur event.

		var filteredValue;
		if(value !== undefined){
			// TODO: this is calling filter() on both the display value and the actual value.
			// I added a comment to the filter() definition about this, but it should be changed.
			filteredValue = this.filter(value);
			if(typeof formattedValue != "string"){
				if(filteredValue !== null && ((typeof filteredValue != "number") || !isNaN(filteredValue))){
					formattedValue = this.filter(this.format(filteredValue, this.constraints));
				}else{ formattedValue = ''; }
			}
		}
		if(formattedValue != null && formattedValue != undefined && ((typeof formattedValue) != "number" || !isNaN(formattedValue)) && this.textbox.value != formattedValue){
			this.textbox.value = formattedValue;
			this._set("displayedValue", this.get("displayedValue"));
		}

		if(this.textDir == "auto"){
			this.applyTextDir(this.focusNode, formattedValue);
		}

		this.inherited(arguments, [filteredValue, priorityChange]);
	},

	// displayedValue: String
	//		For subclasses like ComboBox where the displayed value
	//		(ex: Kentucky) and the serialized value (ex: KY) are different,
	//		this represents the displayed value.
	//
	//		Setting 'displayedValue' through set('displayedValue', ...)
	//		updates 'value', and vice-versa.  Otherwise 'value' is updated
	//		from 'displayedValue' periodically, like onBlur etc.
	//
	//		TODO: move declaration to MappedTextBox?
	//		Problem is that ComboBox references displayedValue,
	//		for benefit of FilteringSelect.
	displayedValue: "",

	_getDisplayedValueAttr: function(){
		// summary:
		//		Hook so get('displayedValue') works.
		// description:
		//		Returns the displayed value (what the user sees on the screen),
		// 		after filtering (ie, trimming spaces etc.).
		//
		//		For some subclasses of TextBox (like ComboBox), the displayed value
		//		is different from the serialized value that's actually
		//		sent to the server (see dijit.form.ValidationTextBox.serialize)

		// TODO: maybe we should update this.displayedValue on every keystroke so that we don't need
		// this method
		// TODO: this isn't really the displayed value when the user is typing
		return this.filter(this.textbox.value);
	},

	_setDisplayedValueAttr: function(/*String*/ value){
		// summary:
		//		Hook so set('displayedValue', ...) works.
		// description:
		//		Sets the value of the visual element to the string "value".
		//		The widget value is also set to a corresponding,
		//		but not necessarily the same, value.

		if(value === null || value === undefined){ value = '' }
		else if(typeof value != "string"){ value = String(value) }

		this.textbox.value = value;

		// sets the serialized value to something corresponding to specified displayedValue
		// (if possible), and also updates the textbox.value, for example converting "123"
		// to "123.00"
		this._setValueAttr(this.get('value'), undefined);

		this._set("displayedValue", this.get('displayedValue'));

		// textDir support
		if(this.textDir == "auto"){
			this.applyTextDir(this.focusNode, value);
		}
	},

	format: function(value /*=====, constraints =====*/){
		// summary:
		//		Replaceable function to convert a value to a properly formatted string.
		// value: String
		// constraints: Object
		// tags:
		//		protected extension
		return ((value == null || value == undefined) ? "" : (value.toString ? value.toString() : value));
	},

	parse: function(value /*=====, constraints =====*/){
		// summary:
		//		Replaceable function to convert a formatted string to a value
		// value: String
		// constraints: Object
		// tags:
		//		protected extension

		return value;	// String
	},

	_refreshState: function(){
		// summary:
		//		After the user types some characters, etc., this method is
		//		called to check the field for validity etc.  The base method
		//		in `dijit.form.TextBox` does nothing, but subclasses override.
		// tags:
		//		protected
	},

	/*=====
	onInput: function(event){
		// summary:
		//		Connect to this function to receive notifications of various user data-input events.
		//		Return false to cancel the event and prevent it from being processed.
		// event:
		//		keydown | keypress | cut | paste | input
		// tags:
		//		callback
	},
	=====*/
	onInput: function(){},

	__skipInputEvent: false,
	_onInput: function(){
		// summary:
		//		Called AFTER the input event has happened
		// set text direction according to textDir that was defined in creation
		if(this.textDir == "auto"){
			this.applyTextDir(this.focusNode, this.focusNode.value);
		}

		this._refreshState();

		// In case someone is watch()'ing for changes to displayedValue
		this._set("displayedValue", this.get("displayedValue"));
	},

	postCreate: function(){
		// setting the value here is needed since value="" in the template causes "undefined"
		// and setting in the DOM (instead of the JS object) helps with form reset actions
		this.textbox.setAttribute("value", this.textbox.value); // DOM and JS values should be the same

		this.inherited(arguments);

		// normalize input events to reduce spurious event processing
		//	onkeydown: do not forward modifier keys
		//	           set charOrCode to numeric keycode
		//	onkeypress: do not forward numeric charOrCode keys (already sent through onkeydown)
		//	onpaste & oncut: set charOrCode to 229 (IME)
		//	oninput: if primary event not already processed, set charOrCode to 229 (IME), else do not forward
		var handleEvent = function(e){
			var charCode = e.charOrCode || e.keyCode || 229;
			if(e.type == "keydown"){
				switch(charCode){ // ignore "state" keys
					case keys.SHIFT:
					case keys.ALT:
					case keys.CTRL:
					case keys.META:
					case keys.CAPS_LOCK:
						return;
					default:
						if(charCode >= 65 && charCode <= 90){ return; } // keydown for A-Z can be processed with keypress
				}
			}
			if(e.type == "keypress" && typeof charCode != "string"){ return; }
			if(e.type == "input"){
				if(this.__skipInputEvent){ // duplicate event
					this.__skipInputEvent = false;
					return;
				}
			}else{
				this.__skipInputEvent = true;
			}
			// create fake event to set charOrCode and to know if preventDefault() was called
			var faux = lang.mixin({}, e, {
				charOrCode: charCode,
				wasConsumed: false,
				preventDefault: function(){
					faux.wasConsumed = true;
					e.preventDefault();
				},
				stopPropagation: function(){ e.stopPropagation(); }
			});
			// give web page author a chance to consume the event
			if(this.onInput(faux) === false){
				event.stop(faux); // return false means stop
			}
			if(faux.wasConsumed){ return; } // if preventDefault was called
			setTimeout(lang.hitch(this, "_onInput", faux), 0); // widget notification after key has posted
		};
		array.forEach([ "onkeydown", "onkeypress", "onpaste", "oncut", "oninput", "oncompositionend" ], function(event){
			this.connect(this.textbox, event, handleEvent);
		}, this);
	},

	_blankValue: '', // if the textbox is blank, what value should be reported
	filter: function(val){
		// summary:
		//		Auto-corrections (such as trimming) that are applied to textbox
		//		value on blur or form submit.
		// description:
		//		For MappedTextBox subclasses, this is called twice
		// 			- once with the display value
		//			- once the value as set/returned by set('value', ...)
		//		and get('value'), ex: a Number for NumberTextBox.
		//
		//		In the latter case it does corrections like converting null to NaN.  In
		//		the former case the NumberTextBox.filter() method calls this.inherited()
		//		to execute standard trimming code in TextBox.filter().
		//
		//		TODO: break this into two methods in 2.0
		//
		// tags:
		//		protected extension
		if(val === null){ return this._blankValue; }
		if(typeof val != "string"){ return val; }
		if(this.trim){
			val = lang.trim(val);
		}
		if(this.uppercase){
			val = val.toUpperCase();
		}
		if(this.lowercase){
			val = val.toLowerCase();
		}
		if(this.propercase){
			val = val.replace(/[^\s]+/g, function(word){
				return word.substring(0,1).toUpperCase() + word.substring(1);
			});
		}
		return val;
	},

	_setBlurValue: function(){
		this._setValueAttr(this.get('value'), true);
	},

	_onBlur: function(e){
		if(this.disabled){ return; }
		this._setBlurValue();
		this.inherited(arguments);

		if(this._selectOnClickHandle){
			this.disconnect(this._selectOnClickHandle);
		}
	},

	_isTextSelected: function(){
		return this.textbox.selectionStart == this.textbox.selectionEnd;
	},

	_onFocus: function(/*String*/ by){
		if(this.disabled || this.readOnly){ return; }

		// Select all text on focus via click if nothing already selected.
		// Since mouse-up will clear the selection need to defer selection until after mouse-up.
		// Don't do anything on focus by tabbing into the widget since there's no associated mouse-up event.
		if(this.selectOnClick && by == "mouse"){
			this._selectOnClickHandle = this.connect(this.domNode, "onmouseup", function(){
				// Only select all text on first click; otherwise users would have no way to clear
				// the selection.
				this.disconnect(this._selectOnClickHandle);

				// Check if the user selected some text manually (mouse-down, mouse-move, mouse-up)
				// and if not, then select all the text
				if(this._isTextSelected()){
					_TextBoxMixin.selectInputText(this.textbox);
				}
			});
		}
		// call this.inherited() before refreshState(), since this.inherited() will possibly scroll the viewport
		// (to scroll the TextBox into view), which will affect how _refreshState() positions the tooltip
		this.inherited(arguments);

		this._refreshState();
	},

	reset: function(){
		// Overrides dijit._FormWidget.reset().
		// Additionally resets the displayed textbox value to ''
		this.textbox.value = '';
		this.inherited(arguments);
	},
	_setTextDirAttr: function(/*String*/ textDir){
		// summary:
		//		Setter for textDir.
		// description:
		//		Users shouldn't call this function; they should be calling
		//		set('textDir', value)
		// tags:
		//		private

		// only if new textDir is different from the old one
		// and on widgets creation.
		if(!this._created
			|| this.textDir != textDir){
				this._set("textDir", textDir);
				// so the change of the textDir will take place immediately.
				this.applyTextDir(this.focusNode, this.focusNode.value);
		}
	}
});


_TextBoxMixin._setSelectionRange = dijit._setSelectionRange = function(/*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop){
	if(element.setSelectionRange){
		element.setSelectionRange(start, stop);
	}
};

_TextBoxMixin.selectInputText = dijit.selectInputText = function(/*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop){
	// summary:
	//		Select text in the input element argument, from start (default 0), to stop (default end).

	// TODO: use functions in _editor/selection.js?
	element = dom.byId(element);
	if(isNaN(start)){ start = 0; }
	if(isNaN(stop)){ stop = element.value ? element.value.length : 0; }
	try{
		element.focus();
		_TextBoxMixin._setSelectionRange(element, start, stop);
	}catch(e){ /* squelch random errors (esp. on IE) from unexpected focus changes or DOM nodes being hidden */ }
};

return _TextBoxMixin;
});

},
'url:curam/widget/templates/OptimalBrowserMessage.html':"<div>\n  <div class=\"hidden\"\n       data-dojo-type=\"dojox/layout/ContentPane\"\n       data-dojo-attach-point=\"_optimalMessage\">\n  </div>\n</div>\n",
'dijit/a11y':function(){
define("dijit/a11y", [
	"dojo/_base/array", // array.forEach array.map
	"dojo/_base/config", // defaultDuration
	"dojo/_base/declare", // declare
	"dojo/dom",			// dom.byId
	"dojo/dom-attr", // domAttr.attr domAttr.has
	"dojo/dom-style", // style.style
	"dojo/_base/sniff", // has("ie")
	"./_base/manager",	// manager._isElementShown
	"."	// for exporting methods to dijit namespace
], function(array, config, declare, dom, domAttr, domStyle, has, manager, dijit){

	// module:
	//		dijit/a11y
	// summary:
	//		Accessibility utility functions (keyboard, tab stops, etc.)

	var shown = (dijit._isElementShown = function(/*Element*/ elem){
		var s = domStyle.get(elem);
		return (s.visibility != "hidden")
			&& (s.visibility != "collapsed")
			&& (s.display != "none")
			&& (domAttr.get(elem, "type") != "hidden");
	});

	dijit.hasDefaultTabStop = function(/*Element*/ elem){
		// summary:
		//		Tests if element is tab-navigable even without an explicit tabIndex setting

		// No explicit tabIndex setting, need to investigate node type
		switch(elem.nodeName.toLowerCase()){
			case "a":
				// An <a> w/out a tabindex is only navigable if it has an href
				return domAttr.has(elem, "href");
			case "area":
			case "button":
			case "input":
			case "object":
			case "select":
			case "textarea":
				// These are navigable by default
				return true;
			case "iframe":
				// If it's an editor <iframe> then it's tab navigable.
				var body;
				try{
					// non-IE
					var contentDocument = elem.contentDocument;
					if("designMode" in contentDocument && contentDocument.designMode == "on"){
						return true;
					}
					body = contentDocument.body;
				}catch(e1){
					// contentWindow.document isn't accessible within IE7/8
					// if the iframe.src points to a foreign url and this
					// page contains an element, that could get focus
					try{
						body = elem.contentWindow.document.body;
					}catch(e2){
						return false;
					}
				}
				return body && (body.contentEditable == 'true' ||
					(body.firstChild && body.firstChild.contentEditable == 'true'));
			default:
				return elem.contentEditable == 'true';
		}
	};

	var isTabNavigable = (dijit.isTabNavigable = function(/*Element*/ elem){
		// summary:
		//		Tests if an element is tab-navigable

		// TODO: convert (and rename method) to return effective tabIndex; will save time in _getTabNavigable()
		if(domAttr.get(elem, "disabled")){
			return false;
		}else if(domAttr.has(elem, "tabIndex")){
			// Explicit tab index setting
			return domAttr.get(elem, "tabIndex") >= 0; // boolean
		}else{
			// No explicit tabIndex setting, so depends on node type
			return dijit.hasDefaultTabStop(elem);
		}
	});

	dijit._getTabNavigable = function(/*DOMNode*/ root){
		// summary:
		//		Finds descendants of the specified root node.
		//
		// description:
		//		Finds the following descendants of the specified root node:
		//		* the first tab-navigable element in document order
		//		  without a tabIndex or with tabIndex="0"
		//		* the last tab-navigable element in document order
		//		  without a tabIndex or with tabIndex="0"
		//		* the first element in document order with the lowest
		//		  positive tabIndex value
		//		* the last element in document order with the highest
		//		  positive tabIndex value
		var first, last, lowest, lowestTabindex, highest, highestTabindex, radioSelected = {};

		function radioName(node){
			// If this element is part of a radio button group, return the name for that group.
			return node && node.tagName.toLowerCase() == "input" &&
				node.type && node.type.toLowerCase() == "radio" &&
				node.name && node.name.toLowerCase();
		}

		var walkTree = function(/*DOMNode*/parent){
			for(var child = parent.firstChild; child; child = child.nextSibling){
				// Skip text elements, hidden elements, and also non-HTML elements (those in custom namespaces) in IE,
				// since show() invokes getAttribute("type"), which crash on VML nodes in IE.
				if(child.nodeType != 1 || (has("ie") <= 9 && child.scopeName !== "HTML") || !shown(child)){
					continue;
				}

				if(isTabNavigable(child)){
					var tabindex = domAttr.get(child, "tabIndex");
					if(!domAttr.has(child, "tabIndex") || tabindex == 0){
						if(!first){
							first = child;
						}
						last = child;
					}else if(tabindex > 0){
						if(!lowest || tabindex < lowestTabindex){
							lowestTabindex = tabindex;
							lowest = child;
						}
						if(!highest || tabindex >= highestTabindex){
							highestTabindex = tabindex;
							highest = child;
						}
					}
					var rn = radioName(child);
					if(domAttr.get(child, "checked") && rn){
						radioSelected[rn] = child;
					}
				}
				if(child.nodeName.toUpperCase() != 'SELECT'){
					walkTree(child);
				}
			}
		};
		if(shown(root)){
			walkTree(root);
		}
		function rs(node){
			// substitute checked radio button for unchecked one, if there is a checked one with the same name.
			return radioSelected[radioName(node)] || node;
		}

		return { first: rs(first), last: rs(last), lowest: rs(lowest), highest: rs(highest) };
	};
	dijit.getFirstInTabbingOrder = function(/*String|DOMNode*/ root){
		// summary:
		//		Finds the descendant of the specified root node
		//		that is first in the tabbing order
		var elems = dijit._getTabNavigable(dom.byId(root));
		return elems.lowest ? elems.lowest : elems.first; // DomNode
	};

	dijit.getLastInTabbingOrder = function(/*String|DOMNode*/ root){
		// summary:
		//		Finds the descendant of the specified root node
		//		that is last in the tabbing order
		var elems = dijit._getTabNavigable(dom.byId(root));
		return elems.last ? elems.last : elems.highest; // DomNode
	};

	return {
		hasDefaultTabStop: dijit.hasDefaultTabStop,
		isTabNavigable: dijit.isTabNavigable,
		_getTabNavigable: dijit._getTabNavigable,
		getFirstInTabbingOrder: dijit.getFirstInTabbingOrder,
		getLastInTabbingOrder: dijit.getLastInTabbingOrder
	};
});

},
'url:dijit/templates/Dialog.html':"<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\n\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\n\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\n\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\n\t</span>\n\t</div>\n\t\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\n</div>\n",
'dijit/form/TextBox':function(){
require({cache:{
'url:dijit/form/templates/TextBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n"}});
define("dijit/form/TextBox", [
	"dojo/_base/declare", // declare
	"dojo/dom-construct", // domConstruct.create
	"dojo/dom-style", // domStyle.getComputedStyle
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/lang", // lang.hitch
	"dojo/_base/sniff", // has("ie") has("mozilla")
	"dojo/_base/window", // win.doc.selection.createRange
	"./_FormValueWidget",
	"./_TextBoxMixin",
	"dojo/text!./templates/TextBox.html",
	".."	// to export dijit._setSelectionRange, remove in 2.0
], function(declare, domConstruct, domStyle, kernel, lang, has, win,
			_FormValueWidget, _TextBoxMixin, template, dijit){

/*=====
	var _FormValueWidget = dijit.form._FormValueWidget;
	var _TextBoxMixin = dijit.form._TextBoxMixin;
=====*/

	// module:
	//		dijit/form/TextBox
	// summary:
	//		A base class for textbox form inputs

	var TextBox = declare(/*====="dijit.form.TextBox", =====*/ [_FormValueWidget, _TextBoxMixin], {
		// summary:
		//		A base class for textbox form inputs

		templateString: template,
		_singleNodeTemplate: '<input class="dijit dijitReset dijitLeft dijitInputField" data-dojo-attach-point="textbox,focusNode" autocomplete="off" type="${type}" ${!nameAttrSetting} />',

		_buttonInputDisabled: has("ie") ? "disabled" : "", // allows IE to disallow focus, but Firefox cannot be disabled for mousedown events

		baseClass: "dijitTextBox",

		postMixInProperties: function(){
			var type = this.type.toLowerCase();
			if(this.templateString && this.templateString.toLowerCase() == "input" || ((type == "hidden" || type == "file") && this.templateString == this.constructor.prototype.templateString)){
				this.templateString = this._singleNodeTemplate;
			}
			this.inherited(arguments);
		},

		_onInput: function(e){
			this.inherited(arguments);
			if(this.intermediateChanges){ // _TextBoxMixin uses onInput
				var _this = this;
				// the setTimeout allows the key to post to the widget input box
				setTimeout(function(){ _this._handleOnChange(_this.get('value'), false); }, 0);
			}
		},

		_setPlaceHolderAttr: function(v){
			this._set("placeHolder", v);
			if(!this._phspan){
				this._attachPoints.push('_phspan');
				// dijitInputField class gives placeHolder same padding as the input field
				// parent node already has dijitInputField class but it doesn't affect this <span>
				// since it's position: absolute.
				this._phspan = domConstruct.create('span',{ onmousedown:function(e){ e.preventDefault(); }, className:'dijitPlaceHolder dijitInputField'},this.textbox,'after');
			}
			this._phspan.innerHTML="";
			this._phspan.appendChild(document.createTextNode(v));
			this._updatePlaceHolder();
		},

		_updatePlaceHolder: function(){
			if(this._phspan){
				this._phspan.style.display=(this.placeHolder&&!this.focused&&!this.textbox.value)?"":"none";
			}
		},

		_setValueAttr: function(value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue){
			this.inherited(arguments);
			this._updatePlaceHolder();
		},

		getDisplayedValue: function(){
			// summary:
			//		Deprecated.  Use get('displayedValue') instead.
			// tags:
			//		deprecated
			kernel.deprecated(this.declaredClass+"::getDisplayedValue() is deprecated. Use set('displayedValue') instead.", "", "2.0");
			return this.get('displayedValue');
		},

		setDisplayedValue: function(/*String*/ value){
			// summary:
			//		Deprecated.  Use set('displayedValue', ...) instead.
			// tags:
			//		deprecated
			kernel.deprecated(this.declaredClass+"::setDisplayedValue() is deprecated. Use set('displayedValue', ...) instead.", "", "2.0");
			this.set('displayedValue', value);
		},

		_onBlur: function(e){
			if(this.disabled){ return; }
			this.inherited(arguments);
			this._updatePlaceHolder();
		},

		_onFocus: function(/*String*/ by){
			if(this.disabled || this.readOnly){ return; }
			this.inherited(arguments);
			this._updatePlaceHolder();
		}
	});

	if(has("ie")){
		TextBox = declare(/*===== "dijit.form.TextBox.IEMixin", =====*/ TextBox, {
			declaredClass: "dijit.form.TextBox",	// for user code referencing declaredClass

			_isTextSelected: function(){
				var range = win.doc.selection.createRange();
				var parent = range.parentElement();
				return parent == this.textbox && range.text.length == 0;
			},

			postCreate: function(){
				this.inherited(arguments);
				// IE INPUT tag fontFamily has to be set directly using STYLE
				// the setTimeout gives IE a chance to render the TextBox and to deal with font inheritance
				setTimeout(lang.hitch(this, function(){
					try{
						var s = domStyle.getComputedStyle(this.domNode); // can throw an exception if widget is immediately destroyed
						if(s){
							var ff = s.fontFamily;
							if(ff){
								var inputs = this.domNode.getElementsByTagName("INPUT");
								if(inputs){
									for(var i=0; i < inputs.length; i++){
										inputs[i].style.fontFamily = ff;
									}
								}
							}
						}
					}catch(e){/*when used in a Dialog, and this is called before the dialog is
						shown, s.fontFamily would trigger "Invalid Argument" error.*/}
				}), 0);
			}
		});

		// Overrides definition of _setSelectionRange from _TextBoxMixin (TODO: move to _TextBoxMixin.js?)
		dijit._setSelectionRange = _TextBoxMixin._setSelectionRange = function(/*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop){
			if(element.createTextRange){
				var r = element.createTextRange();
				r.collapse(true);
				r.moveStart("character", -99999); // move to 0
				r.moveStart("character", start); // delta from 0 is the correct position
				r.moveEnd("character", stop-start);
				r.select();
			}
		}
	}else if(has("mozilla")){
		TextBox = declare(/*===== "dijit.form.TextBox.MozMixin", =====*/TextBox, {
			declaredClass: "dijit.form.TextBox",	// for user code referencing declaredClass

			_onBlur: function(e){
				this.inherited(arguments);
				if(this.selectOnClick){
						// clear selection so that the next mouse click doesn't reselect
					this.textbox.selectionStart = this.textbox.selectionEnd = undefined;
				}
			}
		});
	}else{
		TextBox.prototype.declaredClass = "dijit.form.TextBox";
	}
	lang.setObject("dijit.form.TextBox", TextBox);	// don't do direct assignment, it confuses API doc parser

	return TextBox;
});

},
'dijit/layout/StackContainer':function(){
define("dijit/layout/StackContainer", [
	"dojo/_base/array", // array.forEach array.indexOf array.some
	"dojo/cookie", // cookie
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.add domClass.replace
	"dojo/_base/kernel",	// kernel.isAsync
	"dojo/_base/lang",	// lang.extend
	"dojo/ready",
	"dojo/topic", // publish
	"../registry",	// registry.byId
	"../_WidgetBase",
	"./_LayoutWidget",
	"dojo/i18n!../nls/common"
], function(array, cookie, declare, domClass, kernel, lang, ready, topic,
			registry, _WidgetBase, _LayoutWidget){

/*=====
var _WidgetBase = dijit._WidgetBase;
var _LayoutWidget = dijit.layout._LayoutWidget;
var StackController = dijit.layout.StackController;
=====*/

// module:
//		dijit/layout/StackContainer
// summary:
//		A container that has multiple children, but shows only one child at a time.

// Back compat w/1.6, remove for 2.0
if(!kernel.isAsync){
	ready(0, function(){
		var requires = ["dijit/layout/StackController"];
		require(requires);	// use indirection so modules not rolled into a build
	});
}

// These arguments can be specified for the children of a StackContainer.
// Since any widget can be specified as a StackContainer child, mix them
// into the base widget class.  (This is a hack, but it's effective.)
lang.extend(_WidgetBase, {
	// selected: Boolean
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		Specifies that this widget should be the initially displayed pane.
	//		Note: to change the selected child use `dijit.layout.StackContainer.selectChild`
	selected: false,

	// closable: Boolean
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		True if user can close (destroy) this child, such as (for example) clicking the X on the tab.
	closable: false,

	// iconClass: String
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		CSS Class specifying icon to use in label associated with this pane.
	iconClass: "dijitNoIcon",

	// showTitle: Boolean
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		When true, display title of this widget as tab label etc., rather than just using
	//		icon specified in iconClass
	showTitle: true
});

return declare("dijit.layout.StackContainer", _LayoutWidget, {
	// summary:
	//		A container that has multiple children, but shows only
	//		one child at a time
	//
	// description:
	//		A container for widgets (ContentPanes, for example) That displays
	//		only one Widget at a time.
	//
	//		Publishes topics [widgetId]-addChild, [widgetId]-removeChild, and [widgetId]-selectChild
	//
	//		Can be base class for container, Wizard, Show, etc.

	// doLayout: Boolean
	//		If true, change the size of my currently displayed child to match my size
	doLayout: true,

	// persist: Boolean
	//		Remembers the selected child across sessions
	persist: false,

	baseClass: "dijitStackContainer",

/*=====
	// selectedChildWidget: [readonly] dijit._Widget
	//		References the currently selected child widget, if any.
	//		Adjust selected child with selectChild() method.
	selectedChildWidget: null,
=====*/

	buildRendering: function(){
		this.inherited(arguments);
		domClass.add(this.domNode, "dijitLayoutContainer");
    /* CURAM-FIX: Extend StackContainer to remove role attribute causing JAWS to announce
     * the navigation tabs and side Navigation incorrectly. This needs to be removed
     * once we update to DOJO 1.8. (http://bugs.dojotoolkit.org/changeset/29885/dojo)
     */
    // this.containerNode.setAttribute("role", "tabpanel");
    /* END CURAM-FIX */
	},

	postCreate: function(){
		this.inherited(arguments);
		this.connect(this.domNode, "onkeypress", this._onKeyPress);
	},

	startup: function(){
		if(this._started){ return; }

		var children = this.getChildren();

		// Setup each page panel to be initially hidden
		array.forEach(children, this._setupChild, this);

		// Figure out which child to initially display, defaulting to first one
		if(this.persist){
			this.selectedChildWidget = registry.byId(cookie(this.id + "_selectedChild"));
		}else{
			array.some(children, function(child){
				if(child.selected){
					this.selectedChildWidget = child;
				}
				return child.selected;
			}, this);
		}
		var selected = this.selectedChildWidget;
		if(!selected && children[0]){
			selected = this.selectedChildWidget = children[0];
			selected.selected = true;
		}

		// Publish information about myself so any StackControllers can initialize.
		// This needs to happen before this.inherited(arguments) so that for
		// TabContainer, this._contentBox doesn't include the space for the tab labels.
		topic.publish(this.id+"-startup", {children: children, selected: selected});

		// Startup each child widget, and do initial layout like setting this._contentBox,
		// then calls this.resize() which does the initial sizing on the selected child.
		this.inherited(arguments);
	},

	resize: function(){
		// Resize is called when we are first made visible (it's called from startup()
		// if we are initially visible). If this is the first time we've been made
		// visible then show our first child.
		if(!this._hasBeenShown){
			this._hasBeenShown = true;
			var selected = this.selectedChildWidget;
			if(selected){
				this._showChild(selected);
			}
		}
		this.inherited(arguments);
	},

	_setupChild: function(/*dijit._Widget*/ child){
		// Overrides _LayoutWidget._setupChild()

		this.inherited(arguments);

		domClass.replace(child.domNode, "dijitHidden", "dijitVisible");

		// remove the title attribute so it doesn't show up when i hover
		// over a node
		child.domNode.title = "";
	},

	addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
		// Overrides _Container.addChild() to do layout and publish events

		this.inherited(arguments);

		if(this._started){
			topic.publish(this.id+"-addChild", child, insertIndex);	// publish

			// in case the tab titles have overflowed from one line to two lines
			// (or, if this if first child, from zero lines to one line)
			// TODO: w/ScrollingTabController this is no longer necessary, although
			// ScrollTabController.resize() does need to get called to show/hide
			// the navigation buttons as appropriate, but that's handled in ScrollingTabController.onAddChild().
			// If this is updated to not layout [except for initial child added / last child removed], update
			// "childless startup" test in StackContainer.html to check for no resize event after second addChild()
			this.layout();

			// if this is the first child, then select it
			if(!this.selectedChildWidget){
				this.selectChild(child);
			}
		}
	},

	removeChild: function(/*dijit._Widget*/ page){
		// Overrides _Container.removeChild() to do layout and publish events

		this.inherited(arguments);

		if(this._started){
			// this will notify any tablists to remove a button; do this first because it may affect sizing
			topic.publish(this.id + "-removeChild", page);	// publish
		}

		// If all our children are being destroyed than don't run the code below (to select another page),
		//  because we are deleting every page one by one
		if(this._descendantsBeingDestroyed){ return; }

		// Select new page to display, also updating TabController to show the respective tab.
		// Do this before layout call because it can affect the height of the TabController.
		if(this.selectedChildWidget === page){
			this.selectedChildWidget = undefined;
			if(this._started){
				var children = this.getChildren();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}

		if(this._started){
			// In case the tab titles now take up one line instead of two lines
			// (note though that ScrollingTabController never overflows to multiple lines),
			// or the height has changed slightly because of addition/removal of tab which close icon
			this.layout();
		}
	},

	selectChild: function(/*dijit._Widget|String*/ page, /*Boolean*/ animate){
		// summary:
		//		Show the given widget (which must be one of my children)
		// page:
		//		Reference to child widget or id of child widget

		page = registry.byId(page);

		if(this.selectedChildWidget != page){
			// Deselect old page and select new one
			var d = this._transition(page, this.selectedChildWidget, animate);
			if (d) {
			  this._set("selectedChildWidget", page);
                 topic.publish(this.id+"-selectChild", page);    // publish
                 if(this.persist){
                   cookie(this.id + "_selectedChild", this.selectedChildWidget.id);
                 }
	        }
		}

		return d;		// If child has an href, promise that fires when the child's href finishes loading
	},

	_transition: function(newWidget, oldWidget /*===== ,  animate =====*/){
		// summary:
		//		Hide the old widget and display the new widget.
		//		Subclasses should override this.
		// newWidget: dijit._Widget
		//		The newly selected widget.
		// oldWidget: dijit._Widget
		//		The previously selected widget.
		// animate: Boolean
		//		Used by AccordionContainer to turn on/off slide effect.
		// tags:
		//		protected extension
		if(oldWidget){
			this._hideChild(oldWidget);
		}
		var d = this._showChild(newWidget);

		// Size the new widget, in case this is the first time it's being shown,
		// or I have been resized since the last time it was shown.
		// Note that page must be visible for resizing to work.
		if(d && newWidget.resize){
			if(this.doLayout){
				newWidget.resize(this._containerContentBox || this._contentBox);
			}else{
				// the child should pick it's own size but we still need to call resize()
				// (with no arguments) to let the widget lay itself out
				newWidget.resize();
			}
		}

		return d;	// If child has an href, promise that fires when the child's href finishes loading
	},

	_adjacent: function(/*Boolean*/ forward){
		// summary:
		//		Gets the next/previous child widget in this container from the current selection.
		var children = this.getChildren();
		var index = array.indexOf(children, this.selectedChildWidget);
		index += forward ? 1 : children.length - 1;
		return children[ index % children.length ]; // dijit._Widget
	},

	forward: function(){
		// summary:
		//		Advance to next page.
		return this.selectChild(this._adjacent(true), true);
	},

	back: function(){
		// summary:
		//		Go back to previous page.
		return this.selectChild(this._adjacent(false), true);
	},

	_onKeyPress: function(e){
		topic.publish(this.id+"-containerKeyPress", { e: e, page: this});	// publish
	},

	layout: function(){
		// Implement _LayoutWidget.layout() virtual method.
		var child = this.selectedChildWidget;
		if(child && child.resize){
			if(this.doLayout){
				child.resize(this._containerContentBox || this._contentBox);
			}else{
				child.resize();
			}
		}
	},

	_showChild: function(/*dijit._Widget*/ page){
		  // summary:
	          // Show the specified child by changing it's CSS, and call _onShow()/onShow() so
		  // it can do any updates it needs regarding loading href's etc.
		  // returns:
		  // Promise that fires when page has finished showing, or true if there's no href
		  if (page) {
		    var children = this.getChildren();
		    page.isFirstChild = (page == children[0]);
		    page.isLastChild = (page == children[children.length-1]);
		    page._set("selected", true);

		    domClass.replace(page.domNode, "dijitVisible", "dijitHidden");

		    return (page._onShow && page._onShow()) || true;
		  }		
	 },

	_hideChild: function(/*dijit._Widget*/ page){
		// summary:
		//		Hide the specified child by changing it's CSS, and call _onHide() so
		//		it's notified.
		page._set("selected", false);
		domClass.replace(page.domNode, "dijitHidden", "dijitVisible");

		page.onHide && page.onHide();
	},

	closeChild: function(/*dijit._Widget*/ page){
		// summary:
		//		Callback when user clicks the [X] to remove a page.
		//		If onClose() returns true then remove and destroy the child.
		// tags:
		//		private
		var remove = page.onClose(this, page);
		if(remove){
			this.removeChild(page);
			// makes sure we can clean up executeScripts in ContentPane onUnLoad
			page.destroyRecursive();
		}
	},

	destroyDescendants: function(/*Boolean*/ preserveDom){
		this._descendantsBeingDestroyed = true;
		this.selectedChildWidget = undefined;
		array.forEach(this.getChildren(), function(child){
			if(!preserveDom){
				this.removeChild(child);
			}
			child.destroyRecursive(preserveDom);
		}, this);
		this._descendantsBeingDestroyed = false;
	}
});

});

},
'curam/util/external':function(){
/*
 * Copyright 2014 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

  /*
   * Modification History
   * --------------------
   * 25-Mar-2014 MV  [CR00423311] Initial version.  
   */
define("curam/util/external", ['curam/util'
        ], function(util) {
  
  /**
   * @name curam.util.external
   * @namespace Contains functions of general use for the external application
   *    container.
   */
  curam.define.singleton("curam.util.external",
  /**
   * @lends curam.util.external.prototype
   */
  {
    /**
     * Determines whether we are running within an external application
     * container or not.
     * 
     * @return True if we are in external app container, otherwise false.
     */
    inExternalApp: function() {
      return jsScreenContext.hasContextBits("EXTAPP");
    },
    
    /**
     * Determines the iframe to be used as parent for a UIM modal dialog.
     * 
     * @returns iframe or null.
     */
    getUimParentWindow: function() {
      if (util.getTopmostWindow() === dojo.global) {
        return null;

      } else {
        return dojo.global;
      }
    }
  });

  return curam.util.external;
});

},
'dojox/storage/CookieStorageProvider':function(){
// wrapped by build app
define("dojox/storage/CookieStorageProvider", ["dijit","dojo","dojox","dojo/require!dojox/storage/Provider,dojox/storage/manager,dojo/cookie"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage.CookieStorageProvider");

dojo.require("dojox.storage.Provider");
dojo.require("dojox.storage.manager");
dojo.require("dojo.cookie");

dojo.declare(
	"dojox.storage.CookieStorageProvider",
	[dojox.storage.Provider],
	{
		store: null,

		cookieName: 'dojoxStorageCookie',

		storageLife: 730, // in days

		initialize: function(){

			this.store = dojo.fromJson(dojo.cookie(this.cookieName)) || {};

			this.initialized = true;
			dojox.storage.manager.loaded();
		},

		isAvailable: function(){ /*Boolean*/
			return dojo.cookie.isSupported();
		},

		put: function(	/*string*/ key,
						/*object*/ value,
						/*function*/ resultsHandler,
						/*string?*/ namespace){

			this._assertIsValidKey(key);

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			fullKey = this.getFullKey(key,namespace);

			this.store[fullKey] = dojo.toJson(value);
			this._save();

			var success = dojo.toJson(this.store) === dojo.cookie(this.cookieName);

			if(!success){
				this.remove(key,namespace);
			}

			if(resultsHandler){
				resultsHandler(success ? this.SUCCESS : this.FAILED, key, null, namespace);
			}

		},

		get: function(/*string*/ key, /*string?*/ namespace){ /*Object*/
			this._assertIsValidKey(key);

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			// get our full key name, which is namespace + key
			key = this.getFullKey(key, namespace);

			return this.store[key] ? dojo.fromJson(this.store[key]) : null;
		},

		getKeys: function(/*string?*/ namespace){ /*Array*/
			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			namespace = '__'+namespace+'_';

			var keys = [];
			for(var currentKey in this.store){
				if(this._beginsWith(currentKey,namespace)){
					currentKey = currentKey.substring(namespace.length);
					keys.push(currentKey);
				}
			}

			return keys;
		},

		clear: function(/*string?*/ namespace){
			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			namespace = '__'+namespace+'_';

			for(var currentKey in this.store){
				if(this._beginsWith(currentKey,namespace)){
					delete(this.store[currentKey]);
				}
			}

			this._save();
		},

		remove: function(/*string*/ key, /*string?*/ namespace){
			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			this._assertIsValidKey(key);
			key = this.getFullKey(key, namespace);

			delete this.store[key];
			this._save();
		},

		getNamespaces: function(){ /*string[]*/
			// There must be a better way than
			// to execute a regex on *every*
			// item in the store.

			var results = [this.DEFAULT_NAMESPACE];

			var found = {};
			found[this.DEFAULT_NAMESPACE] = true;
			var tester = /^__([^_]*)_/;

			for(var currentKey in this.store){
				if(tester.test(currentKey) == true){
					var currentNS = currentKey.match(tester)[1];
					if(typeof found[currentNS] == "undefined"){
						found[currentNS] = true;
						results.push(currentNS);
					}
				}
			}

			return results;
		},

		isPermanent: function(){ /*Boolean*/
			return true;
		},

		getMaximumSize: function(){ /* mixed */
			return 4;
		},

		hasSettingsUI: function(){ /*Boolean*/
			return false;
		},

		isValidKey: function(/*string*/ keyName){ /*Boolean*/
			if(keyName === null || keyName === undefined){
				return false;
			}

			return /^[0-9A-Za-z_-]*$/.test(keyName);
		},

		isValidNamespace: function(/*string*/ keyName){ /*Boolean*/
			// we *must* prevent namespaces from having
			// underscores - else lookup of namespaces
			// via RegEx (e.g. in getNamespaces ) would
			// return wrong results.
			//
			// The only way around this would be to
			// disallow underscores in keys.

			if(keyName === null || keyName === undefined){
				return false;
			}

			return /^[0-9A-Za-z-]*$/.test(keyName);
		},

		getFullKey: function(key, namespace){
			// checks for valid namespace and
			// key are already performed.
			return "__" + namespace + "_" + key;
		},

		_save: function(){
			dojo.cookie(this.cookieName,dojo.toJson(this.store),{expires: this.storageLife});
		},

		_beginsWith: function(/* string */ haystack, /* string */ needle) {
			if(needle.length > haystack.length) {
				return false;
			}
			return haystack.substring(0,needle.length) === needle;
		},

		_assertIsValidNamespace: function(/* string */ namespace){
			if(this.isValidNamespace(namespace) === false){
				throw new Error("Invalid namespace given: " + namespace);
			}
		},

		_assertIsValidKey: function(/* string */ key){
			if(this.isValidKey(key) === false){
				throw new Error("Invalid key given: " + key);
			}
		}
	}
);

dojox.storage.manager.register("dojox.storage.CookieStorageProvider", new dojox.storage.CookieStorageProvider());

});

},
'curam/util/Navigation':function(){
/**
 * @name curam.util.Navigation
 * @namespace Provides the ability to navigate pages in Curam application.
 */
define("curam/util/Navigation", ["curam/util",
        "curam/tab",
        "curam/define"
        ], function() {
  
/*
 * Modification History
 * --------------------
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 */
 
curam.define.singleton("curam.util.Navigation",
/**
 * @lends curam.util.Navigation.prototype
 */
{
  /**
   * Navigates to the specified page.
   *
   * @param {String} pageId ID of the required UIM page.
   * @param {Object} pageParameters Page parameters to be used when loading
   *                      the required page. The following format is expected:
   *                      <code>{ param1Name:"value", param2Name:248 }</code>
   *                      The infrastructure handles URL-encoding the values
   *                      so do NOT encode them yourself.
   */
  goToPage: function(pageId, pageParameters) {
    var url = pageId + "Page.do"
        + curam.util.makeQueryString(pageParameters);

    curam.util.Navigation.goToUrl(url);
  },
  
  /**
   * Navigates to a page in Curam application based on the specified URL.
   * 
   * @param {String} fullUrl URL of the required page, excluding the locale
   *    prefix. Sample: <code>Person_homePage.do?id=101</code>
   */
  goToUrl: function(fullUrl) {
    curam.tab.getTabController().processURL(fullUrl);
  }
});

return curam.util.Navigation;
});

},
'curam/util/RuntimeContext':function(){
/*
 * Copyright 2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/RuntimeContext", [
        ], function() {

/*
 * Modification History
 * --------------------
 * 02-Aug-2011  MV  [CR00283023] Added the contextObject() function.
 * 21-Jun-2011  KW  [CR00275353] Initial version.
 */

/**
 * @name curam.util.RuntimeContext
 * @namespace Provides access to the browser Window object.
 * 
   */
  var RuntimeContext = dojo.declare("curam.util.RuntimeContext", null, {

  /**
   * @private
   */
  _window: null,

  /**
   * comments to follow
   *
   * @constructor
   * @private
   */
  constructor: function(window) {
    this._window = window;
  },
  
  /**
   * Comments to follow
   * 
   */
  getHref: function(){
    return this._window.location.href;
  },
  
  /**
   * Returns the path name of the url from the window's location object.
   * @Returns {String} Url path name.
   */
  getPathName: function() {
    return this._window.location.pathName;
  },

  /**
   * Returns the underlying context object of this runtime context.
   * @returns The underlying context object of this runtime context.
   */
  contextObject: function() {
    return this._window;
  }
  });
  
  return RuntimeContext;
});

},
'dojox/encoding/digests/_base':function(){
define("dojox/encoding/digests/_base", ["dojo/_base/lang"], function(lang){
	var d = lang.getObject("dojox.encoding.digests", true);
	/*=====
		d = dojox.encoding.digests;
	=====*/

	//TODO: see if it makes sense to meld this into one with the
	//	crypto base enums
	d.outputTypes={
		//	summary:
		//		Enumeration for input and output encodings.
		Base64:0, Hex:1, String:2, Raw:3
	};

	//	word-based addition
	d.addWords=function(/* word */a, /* word */b){
		//	summary:
		//		add a pair of words together with rollover
		var l=(a&0xFFFF)+(b&0xFFFF);
		var m=(a>>16)+(b>>16)+(l>>16);
		return (m<<16)|(l&0xFFFF);	//	word
	};

	//	word-based conversion method, for efficiency sake;
	//	most digests operate on words, and this should be faster
	//	than the encoding version (which works on bytes).
	var chrsz=8;	//	16 for Unicode
	var mask=(1<<chrsz)-1;

	d.stringToWord=function(/* string */s){
		//	summary:
		//		convert a string to a word array
		var wa=[];
		for(var i=0, l=s.length*chrsz; i<l; i+=chrsz){
			wa[i>>5]|=(s.charCodeAt(i/chrsz)&mask)<<(i%32);
		}
		return wa;	//	word[]
	};

	d.wordToString=function(/* word[] */wa){
		//	summary:
		//		convert an array of words to a string
		var s=[];
		for(var i=0, l=wa.length*32; i<l; i+=chrsz){
			s.push(String.fromCharCode((wa[i>>5]>>>(i%32))&mask));
		}
		return s.join("");	//	string
	}

	d.wordToHex=function(/* word[] */wa){
		//	summary:
		//		convert an array of words to a hex tab
		var h="0123456789abcdef", s=[];
		for(var i=0, l=wa.length*4; i<l; i++){
			s.push(h.charAt((wa[i>>2]>>((i%4)*8+4))&0xF)+h.charAt((wa[i>>2]>>((i%4)*8))&0xF));
		}
		return s.join("");	//	string
	}
	d.wordToBase64=function(/* word[] */wa){
		//	summary:
		//		convert an array of words to base64 encoding, should be more efficient
		//		than using dojox.encoding.base64
		var p="=", tab="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s=[];
		for(var i=0, l=wa.length*4; i<l; i+=3){
			var t=(((wa[i>>2]>>8*(i%4))&0xFF)<<16)|(((wa[i+1>>2]>>8*((i+1)%4))&0xFF)<<8)|((wa[i+2>>2]>>8*((i+2)%4))&0xFF);
			for(var j=0; j<4; j++){
				if(i*8+j*6>wa.length*32){
					s.push(p);
				} else {
					s.push(tab.charAt((t>>6*(3-j))&0x3F));
				}
			}
		}
		return s.join("");	//	string
	};

	return d;
});

},
'dijit/form/_FormWidgetMixin':function(){
define("dijit/form/_FormWidgetMixin", [
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom-attr", // domAttr.set
	"dojo/dom-style", // domStyle.get
	"dojo/_base/lang", // lang.hitch lang.isArray
	"dojo/mouse", // mouse.isLeft
	"dojo/_base/sniff", // has("webkit")
	"dojo/_base/window", // win.body
	"dojo/window", // winUtils.scrollIntoView
	"../a11y"	// a11y.hasDefaultTabStop
], function(array, declare, domAttr, domStyle, lang, mouse, has, win, winUtils, a11y){

// module:
//		dijit/form/_FormWidgetMixin
// summary:
//		Mixin for widgets corresponding to native HTML elements such as <checkbox> or <button>,
//		which can be children of a <form> node or a `dijit.form.Form` widget.

return declare("dijit.form._FormWidgetMixin", null, {
	// summary:
	//		Mixin for widgets corresponding to native HTML elements such as <checkbox> or <button>,
	//		which can be children of a <form> node or a `dijit.form.Form` widget.
	//
	// description:
	//		Represents a single HTML element.
	//		All these widgets should have these attributes just like native HTML input elements.
	//		You can set them during widget construction or afterwards, via `dijit._Widget.attr`.
	//
	//		They also share some common methods.

	// name: [const] String
	//		Name used when submitting form; same as "name" attribute or plain HTML elements
	name: "",

	// alt: String
	//		Corresponds to the native HTML <input> element's attribute.
	alt: "",

	// value: String
	//		Corresponds to the native HTML <input> element's attribute.
	value: "",

	// type: [const] String
	//		Corresponds to the native HTML <input> element's attribute.
	type: "text",

	// tabIndex: Integer
	//		Order fields are traversed when user hits the tab key
	tabIndex: "0",
	_setTabIndexAttr: "focusNode",	// force copy even when tabIndex default value, needed since Button is <span>

	// disabled: Boolean
	//		Should this widget respond to user input?
	//		In markup, this is specified as "disabled='disabled'", or just "disabled".
	disabled: false,

	// intermediateChanges: Boolean
	//		Fires onChange for each value change or only on demand
	intermediateChanges: false,

	// scrollOnFocus: Boolean
	//		On focus, should this widget scroll into view?
	scrollOnFocus: true,

	// Override _WidgetBase mapping id to this.domNode, needs to be on focusNode so <label> etc.
	// works with screen reader
	_setIdAttr: "focusNode",

	_setDisabledAttr: function(/*Boolean*/ value){
		this._set("disabled", value);
		domAttr.set(this.focusNode, 'disabled', value);
		if(this.valueNode){
			domAttr.set(this.valueNode, 'disabled', value);
		}
		this.focusNode.setAttribute("aria-disabled", value ? "true" : "false");

		if(value){
			// reset these, because after the domNode is disabled, we can no longer receive
			// mouse related events, see #4200
			this._set("hovering", false);
			this._set("active", false);

			// clear tab stop(s) on this widget's focusable node(s)  (ComboBox has two focusable nodes)
			var attachPointNames = "tabIndex" in this.attributeMap ? this.attributeMap.tabIndex :
				("_setTabIndexAttr" in this) ? this._setTabIndexAttr : "focusNode";
			array.forEach(lang.isArray(attachPointNames) ? attachPointNames : [attachPointNames], function(attachPointName){
				var node = this[attachPointName];
				// complex code because tabIndex=-1 on a <div> doesn't work on FF
				if(has("webkit") || a11y.hasDefaultTabStop(node)){	// see #11064 about webkit bug
					node.setAttribute('tabIndex', "-1");
				}else{
					node.removeAttribute('tabIndex');
				}
			}, this);
		}else{
			if(this.tabIndex != ""){
				this.set('tabIndex', this.tabIndex);
			}
		}
	},

	_onFocus: function(/*String*/ by){
		// If user clicks on the widget, even if the mouse is released outside of it,
		// this widget's focusNode should get focus (to mimic native browser hehavior).
		// Browsers often need help to make sure the focus via mouse actually gets to the focusNode.
		if(by == "mouse" && this.isFocusable()){
			// IE exhibits strange scrolling behavior when refocusing a node so only do it when !focused.
			var focusConnector = this.connect(this.focusNode, "onfocus", function(){
				this.disconnect(mouseUpConnector);
				this.disconnect(focusConnector);
			});
			// Set a global event to handle mouseup, so it fires properly
			// even if the cursor leaves this.domNode before the mouse up event.
			var mouseUpConnector = this.connect(win.body(), "onmouseup", function(){
				this.disconnect(mouseUpConnector);
				this.disconnect(focusConnector);
				// if here, then the mousedown did not focus the focusNode as the default action
				if(this.focused){
					this.focus();
				}
			});
		}
		if(this.scrollOnFocus){
			this.defer(function(){ winUtils.scrollIntoView(this.domNode); }); // without defer, the input caret position can change on mouse click
		}
		this.inherited(arguments);
	},

	isFocusable: function(){
		// summary:
		//		Tells if this widget is focusable or not.  Used internally by dijit.
		// tags:
		//		protected
		return !this.disabled && this.focusNode && (domStyle.get(this.domNode, "display") != "none");
	},

	focus: function(){
		// summary:
		//		Put focus on this widget
		if(!this.disabled && this.focusNode.focus){
			try{ this.focusNode.focus(); }catch(e){}/*squelch errors from hidden nodes*/
		}
	},

	compare: function(/*anything*/ val1, /*anything*/ val2){
		// summary:
		//		Compare 2 values (as returned by get('value') for this widget).
		// tags:
		//		protected
		if(typeof val1 == "number" && typeof val2 == "number"){
			return (isNaN(val1) && isNaN(val2)) ? 0 : val1 - val2;
		}else if(val1 > val2){
			return 1;
		}else if(val1 < val2){
			return -1;
		}else{
			return 0;
		}
	},

	onChange: function(/*===== newValue =====*/){
		// summary:
		//		Callback when this widget's value is changed.
		// tags:
		//		callback
	},

	// _onChangeActive: [private] Boolean
	//		Indicates that changes to the value should call onChange() callback.
	//		This is false during widget initialization, to avoid calling onChange()
	//		when the initial value is set.
	_onChangeActive: false,

	_handleOnChange: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
		// summary:
		//		Called when the value of the widget is set.  Calls onChange() if appropriate
		// newValue:
		//		the new value
		// priorityChange:
		//		For a slider, for example, dragging the slider is priorityChange==false,
		//		but on mouse up, it's priorityChange==true.  If intermediateChanges==false,
		//		onChange is only called form priorityChange=true events.
		// tags:
		//		private
		if(this._lastValueReported == undefined && (priorityChange === null || !this._onChangeActive)){
			// this block executes not for a change, but during initialization,
			// and is used to store away the original value (or for ToggleButton, the original checked state)
			this._resetValue = this._lastValueReported = newValue;
		}
		this._pendingOnChange = this._pendingOnChange
			|| (typeof newValue != typeof this._lastValueReported)
			|| (this.compare(newValue, this._lastValueReported) != 0);
		if((this.intermediateChanges || priorityChange || priorityChange === undefined) && this._pendingOnChange){
			this._lastValueReported = newValue;
			this._pendingOnChange = false;
			if(this._onChangeActive){
				if(this._onChangeHandle){
					this._onChangeHandle.remove();
				}
				// defer allows hidden value processing to run and
				// also the onChange handler can safely adjust focus, etc
				this._onChangeHandle = this.defer(
					function(){
						this._onChangeHandle = null;
						this.onChange(newValue);
					}); // try to collapse multiple onChange's fired faster than can be processed
			}
		}
	},

	create: function(){
		// Overrides _Widget.create()
		this.inherited(arguments);
		this._onChangeActive = true;
	},

	destroy: function(){
		if(this._onChangeHandle){ // destroy called before last onChange has fired
			this._onChangeHandle.remove();
			this.onChange(this._lastValueReported);
		}
		this.inherited(arguments);
	}
});

});

},
'curam/util/ContextPanel':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/ContextPanel", ["curam/util",
        "curam/tab",
        "curam/debug",
        "curam/define",
        "curam/util/ResourceBundle"
        ], function() {

/*
 * Modification History
 * --------------------
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 21-Oct-2012  SK  [CR00346419] Correctly unsubscribes from the onload registry
 *                               when a tab is closed.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 10-Sep-2012  MV  [CR00344216] Only subscribe one listener to tab ready event.
 * 31-Jul-2012  MV  [CR00336202] Refactor to also work in IE7.
 * 17-Jul-2012  MV  [CR00329547] Load context panel only after tab is ready.
 * 15-Dec-2011  MV [CR00299726] Synchronize initial load of panel with
 *                              subsequent refreshes. 
 * 26-Aug-2011  JK [TEC-7914]   Added title to context panel.
 * 29-Jul-2011  MV [CR00269970] Added refresh() function.
 * 20-Jan-2011  MV [CR00244126] Initial version.
 */

/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");  
var bundle = new curam.util.ResourceBundle("Debug");
  
/**
 * @namespace Functions specific to the context panel.
 */
  curam.define.singleton("curam.util.ContextPanel", {
    
    /** Name of the attribute on content iframe that holds the URL of the frame
     * content. */
    CONTENT_URL_ATTRIB: "data-content-url",
  
    /**
     * Setup the page load handler to drive further actions after context panel
     * loads.
     *
     * @param eventName Name of the page event to listen to.
     * @param tabWidgetId Id of the tab widget.
     * @param iframeId Id of the context panel iframe.
     */
    setupLoadEventPublisher: function(eventName, tabWidgetId, iframeId) {
      curam.util.ContextPanel._doSetup(eventName, tabWidgetId, iframeId,
          function(tabWidgetId) { return dijit.byId(tabWidgetId); });
    },
  
    /**
     * Setup the page load handler to drive further actions after context panel
     * loads.
     *
     * @param eventName Name of the page event to listen to.
     * @param tabWidgetId Id of the tab widget.
     * @param iframeId Id of the context panel iframe.
     * @param getTab A function to get tab widget based on ID.
     */
    _doSetup: function(eventName, tabWidgetId, iframeId, getTab) {
    var unsToken = curam.util.getTopmostWindow().dojo.subscribe(
          eventName, function() {
            var tab = getTab(tabWidgetId);
            var iframe = curam.util.ContextPanel._getIframe(tab);
  
          //publish when the detailsPanel is fully loaded
            curam.debug
              .log(bundle.getProperty("curam.util.ContextPanel.loaded"));
            curam.util.getTopmostWindow().dojo.publish(
                '/curam/frame/detailsPanelLoaded', [{ loaded: true }, tabWidgetId]);
  
            // mark the frame as loaded
            iframe._finishedLoading = true;
  
            // effect a scheduled refresh if there is one
            if (iframe._scheduledRefresh) {
              curam.util.ContextPanel.refresh(tab);
              // scheduled refresh done - reset the indicator
              iframe._scheduledRefresh = false;
            }
        });

    curam.util.onLoad.addSubscriber(iframeId, curam.util.ContextPanel.addTitle);
    
    curam.tab.unsubscribeOnTabClose(unsToken, tabWidgetId);
    curam.tab.executeOnTabClose(function() {
      curam.util.onLoad.removeSubscriber(iframeId, curam.util.ContextPanel.addTitle);
    }, tabWidgetId);
  },
  
  /**
   * Refreshes the content panel of the specified tab.
   * This function is expected to be called in the top window runtime context. 
   */
  refresh: function(tab) {
      var iframe = curam.util.ContextPanel._getIframe(tab);
      if (iframe) {
        curam.debug.log(bundle
          .getProperty("curam.util.ContextPanel.refresh.prep"));
        if (iframe._finishedLoading) {
          curam.debug.log(bundle
            .getProperty("curam.util.ContextPanel.refresh"));
          // we will be reloading so reset the flag to guard against in-flight
          // refreshes interrupting
          iframe._finishedLoading = false;
          var doc =  iframe.contentDocument // W3C
                  || iframe.contentWindow.document; //IE
          // force reload of the context panel
      doc.location.reload(true);
  
        } else {
          // frame not yet loaded, delay the refresh after it has loaded fully
          curam.debug.log(bundle
            .getProperty("curam.util.ContextPanel.refresh.delay"));
          iframe._scheduledRefresh = true;
        }
      }
    },
    
    /**
     * 
     * @param tab The tab to look for context panel in.
     * @returns A context panel iframe or undefined if it was not found. 
     */
    _getIframe: function(tab) {
      var frames = dojo.query("iframe.detailsPanelFrame", tab.domNode);
      return frames[0];
  },
  
  addTitle: function(iframeId) {
    var iframe = dojo.query("." + iframeId)[0];
    var pageTitle = iframe.contentWindow.document.title;
    iframe.setAttribute("title", CONTEXT_PANEL_TITLE + " - " + pageTitle);
    },
    
    /**
     * Loads the context panel content in its iframe.
     * The function gracefully handles situations where there is no context
     * panel on the tab or it has been loaded already.
     * 
     * Initially context panel iframe has no src attribute so that we can
     * control at which point in time the content is loaded.
     * 
     * @param tab The tab object to load context panel content for.
     */
    load: function(tab) {
      var iframe = curam.util.ContextPanel._getIframe(tab);
      if (iframe) {
        var source = dojo.attr(iframe,
            curam.util.ContextPanel.CONTENT_URL_ATTRIB);
        if (source && source != "undefined") {
          iframe[curam.util.ContextPanel.CONTENT_URL_ATTRIB] = undefined;
          dojo.attr(iframe, "src", source);
        }
      }
    }
  });
  
  /* Only load the context panel when the tab is setup completely.
   * This is to work around the issue in IE9 that was causing the iframe to be
   * garbage collected inadvertently.
   */
  var topWin = curam.util.getTopmostWindow();
  if (typeof topWin._curamContextPanelTabReadyListenerRegistered != "boolean") {
    topWin.dojo.subscribe(
        "/curam/application/tab/ready", null, function(newTab) {
          curam.util.ContextPanel.load(newTab);
        });
    topWin._curamContextPanelTabReadyListenerRegistered = true;
  }
  
  return curam.util.ContextPanel;
});

},
'url:dijit/templates/Menu.html':"<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\" data-dojo-attach-event=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\n\t<tbody class=\"dijitReset\" data-dojo-attach-point=\"containerNode\"></tbody>\n</table>\n",
'curam/widget/Menu':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/widget/Menu", ["dijit/Menu",
        "curam/util",
        "curam/debug",
        "curam/util/ResourceBundle"
        ], function() {
  
  /*
   * Modification History
   * -------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
   * 03-Sep-2010  MV  [CR00218766] Initial version.
   */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  /**
   * @name curam.widget.Menu
   * @namespace Customized dijit.Menu class that tracks the active Menu
   *                by adding a specific class to its HTML element.
   */
  var Menu = dojo.declare("curam.widget.Menu", dijit.Menu,
  /**
   * @lends curam.widget.Menu.prototype
   */
  {
    /** The name of the class that active menus will be marked with.
     * @private
     */
    _CSS_CLASS_ACTIVE_MENU: "curam-active-menu",
    
    /** Event to publish when menu is opened.
     * @private
     */
    _EVENT_OPENED: "/curam/menu/opened",
    
    /** Event to publish when menu is closed.
     * @private
     */
    _EVENT_CLOSED: "/curam/menu/closed",
    
    /**
     * Holds the internal active state indicator of this menu.
     * @private
     */
    _amIActive: false,
    
    /**
     * Setup the menu to manage its active state marker class.
     */
    postCreate: function() {
      curam.debug
        .log(bundle.getProperty("curam.widget.Menu.created", [this.id]));

      this.connect(this, "onOpen", dojo.hitch(this, function() {
        curam.debug
          .log(bundle.getProperty("curam.widget.Menu.opened", [this.id]));
        
        // notify other menus that this one is becoming active
        curam.util.getTopmostWindow().dojo.publish(
            this._EVENT_OPENED, [ this.id ]);
        
        this._markAsActive(true);
      }));
      
      var unsTokOpened = curam.util.getTopmostWindow().dojo.subscribe(
          this._EVENT_OPENED, this, function(idOpened) {
        
        curam.debug.log(bundle.getProperty("curam.widget.Menu.event",
            [this.id, this._amIActive ? "active":"passive", idOpened]));
        
        /* Deactivate this menu if other one opens - this is to handle submenu
         * scenarios in which multiple menus are open at the same time, but only
         * the last one opened is "active".
         */
        if (this.id != idOpened && this._amIActive) {
          curam.debug.log(bundle.getProperty("curam.widget.Menu.deactivate"));
          
          // deactivate
          this._markAsActive(false);

          // prepare for reactivation when the other menu closes again
          var unsTokClosed = curam.util.getTopmostWindow().dojo.subscribe(
              this._EVENT_CLOSED, this, function(idClosing) {
            
            if (idClosing == idOpened) {
              curam.debug.log(bundle.getProperty("curam.widget.Menu.reactivate",
                  [idOpened, this.id]));
              
              dojo.unsubscribe(unsTokClosed);
              
              this._markAsActive(true);
            }
          });
        }
      });
      
      this.connect(this, "onClose", dojo.hitch(this, function() {
        curam.debug
          .log(bundle.getProperty("curam.widget.Menu.closing", [this.id]));

        // notify other menus that this one is closing
        curam.util.getTopmostWindow().dojo.publish(
            this._EVENT_CLOSED, [ this.id ]);
        
        this._markAsActive(false);
       
        dojo.unsubscribe(unsTokOpened);
      }));

      this.inherited(arguments);
    },
    
    /**
     * Mark and unmark the menu with a specific class based on the parameter.
     * Also swaps the internal active state indicator.
     * 
     * @private
     * 
     * @param {Boolean} active If true the menu will be marked as active,
     *            if false the active menu mark will be removed.
     */
    _markAsActive: function(active) {
      if (active) {
        // mark as active
        curam.debug
          .log(bundle.getProperty("curam.widget.Menu.add.class"), this.id);
        dojo.addClass(this.domNode, this._CSS_CLASS_ACTIVE_MENU);
      
      } else {
        // remove the active mark
        curam.debug
          .log(bundle.getProperty("curam.widget.Menu.remove.class"), this.id);
        dojo.removeClass(this.domNode, this._CSS_CLASS_ACTIVE_MENU);
      }

      this._amIActive = active;
    }
  });
  
  return Menu;
});

},
'dojox/main':function(){
define("dojox/main", ["dojo/_base/kernel"], function(dojo) {
	// module:
	//		dojox/main
	// summary:
	//		The dojox package main module; dojox package is somewhat unusual in that the main module currently just provides an empty object.

	return dojo.dojox;
});
},
'url:dijit/layout/templates/_TabButton.html':"<div role=\"presentation\" data-dojo-attach-point=\"titleNode\" data-dojo-attach-event='onclick:onClick'>\n    <div role=\"presentation\" class='dijitTabInnerDiv' data-dojo-attach-point='innerDiv'>\n        <div role=\"presentation\" class='dijitTabContent' data-dojo-attach-point='tabContent'>\n        \t<div role=\"presentation\" data-dojo-attach-point='focusNode'>\n\t\t        <img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" data-dojo-attach-point='iconNode' />\n\t\t        <span data-dojo-attach-point='containerNode' class='tabLabel'></span>\n\t\t        <span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" data-dojo-attach-point='closeNode'\n\t\t        \t\tdata-dojo-attach-event='onclick: onClickCloseButton' role=\"presentation\">\n\t\t            <span data-dojo-attach-point='closeText' class='dijitTabCloseText'>[x]</span\n\t\t        ></span>\n\t\t\t</div>\n        </div>\n    </div>\n</div>\n",
'url:dojox/layout/resources/ExpandoPane.html':"<div class=\"dojoxExpandoPane\">\n\t<div dojoAttachPoint=\"titleWrapper\" class=\"dojoxExpandoTitle\">\n\t\t<div class=\"dojoxExpandoIcon\" dojoAttachPoint=\"iconNode\" dojoAttachEvent=\"onclick:toggle\"><span class=\"a11yNode\">X</span></div>\t\t\t\n\t\t<span class=\"dojoxExpandoTitleNode\" dojoAttachPoint=\"titleNode\">${title}</span>\n\t</div>\n\t<div class=\"dojoxExpandoWrapper\" dojoAttachPoint=\"cwrapper\" dojoAttachEvent=\"ondblclick:_trap\">\n\t\t<div class=\"dojoxExpandoContent\" dojoAttachPoint=\"containerNode\"></div>\n\t</div>\n</div>\n",
'curam/widget/DivButton':function(){
require({cache:{
'url:curam/widget/resources/DivButton.html':"<div id=\"${id}\" class=\"${className}\" dojoAttachEvent=\"onclick:onClick\" dojoAttachPoint=\"containerNode\"></div>\r\n\r\n {\r\n      templateString: \"<div id='${id}' class='${className}' \"\r\n            + \"dojoAttachEvent='onclick:onClick' dojoAttachPoint='containerNode'></div>\"\r\n    }\r\n\r\n"}});
/*
 * Copyright 2012 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */
define("curam/widget/DivButton", ["curam/util",
        "curam/matrix/Constants",
        "dojo/text!curam/widget/resources/DivButton.html",
        "dijit/_Widget",
		"dijit/_Templated"
          ], function(util, constants, template) {

var CuramDivButton = dojo.declare("curam.widget.DivButtonBase", dijit._Widget,
{
      isContainer: true,

      // Constructor arguments
      disabled: false,
      menuId: "",
      id: "",
      className: "",

      postCreate: function(args, frag) {
        this.sizeMyself();
        dijit.byId(this.menuId).bindDomNode(this.domNode);
        util.connect(this.domNode,
            "onclick", dojo.hitch(this, this.onClick));

        if (this.className) {
          dojo.addClass(this.domNode, this.className);
        }
        if(!this.containerNode) {this.containerNode = this.domNode;}
      },

      setActiveMenuId: function() {
        if(this.domNode.id && this.domNode.id.length > 0
                  && !dojo.hasClass(this.domNode, "image")) {
          window.activeMenuID = this.domNode.id;
        } else {
          window.activeMenuID = this.domNode.parentNode.id;
        }
      },

      sizeMyself: function() {
        // we cannot size correctly if any of our ancestors are hidden
        // (display:none), so temporarily attach to document.body
        if(this.domNode.parentNode){
          var placeHolder = dojo.create("span", {}, this.domNode, "before");
        }
        dojo.body().appendChild(this.domNode);
        if(placeHolder){
          dojo.place(this.domNode, placeHolder, "before");
          dojo.destroy(placeHolder);
        }
      },

      sizeMyselfHelper: function(){
          var mb = dojo.marginBox(this.containerNode);
        this.height = mb.h;
        this.containerWidth = mb.w;
        dojo.style(this.domNode, "width", this.containerWidth + 'px');
      },

      onClick: function(e) {
        if( !this.disabled ) {
          this._toggleMenu(this.menuId, e);
        }
      },

      _checkValidation: function(menu) {
        if(constants.container.matrix.isValidationActive()) {
          if(menu.isShowingNow) {
            menu.close();
          }
          return false;
        }
        return true;
      },

      _setActiveMenu: function(menuId){
                  var menu = dijit.byId(menuId);
        if ( !menu ) { return; }

        if (menu.isShowingNow) {
          this.setActiveMenuId();
        }
      },

      _toggleMenu: function(menuId, event) {

          this._setActiveMenu(menuId);
          dijit.byId(menuId).setButton(this);
      }
    });

  var DivButton = dojo.declare(
    "curam.widget.DivButton",
    [curam.widget.DivButtonBase, dijit._Templated],
    {
       templateString: template
    }
  );


  /**** Used for Questions *****/
  dojo.declare(
    "curam.widget.QuestionButton",
    curam.widget.DivButtonBase,
    {
      postCreate: function(){
        this.className += "number number-col-eval q-ct-eval-" + this.qId;
        util.connect(this.domNode,
            "onmouseover", dojo.hitch(this, this.onMouseOver));
        this.inherited(arguments);
      },

      onMouseOver: function(event) {
        curam.matrix.util.buttonMouseOver(event);
      },

      _toggleMenu: function(menuId, event){

          this._setActiveMenu(menuId);
          dijit.byId(menuId).setButton(this);
      },

      setActiveMenuId: function() {
          window.activeMenuID = this.domNode.parentNode.id;
      }
   });


  /**** Used for Answers *****/
  dojo.declare(
    "curam.widget.AnswerButton",
    curam.widget.DivButtonBase,
    {

      className: "image",

      _toggleMenu: function(menuId, event){

          this._setActiveMenu(menuId);
        var menu = dijit.byId(menuId);
        var node = event.target ? event.target : event;
        if ( !menu ) { return; }
        if(!this._checkValidation(menu)){return;}
          menu.setButton(this);
        if(node) {
          if((!node.id || !node.id.indexOf("ans-") == 0)
                && node.parentNode && node.parentNode.id) {
                    menu.answerId = node.parentNode.id;
          } else {
            menu.answerId = node.id;
          }
          } else {
                  menu.answerId = null;
          }
      },

      setActiveMenuId: function() {
          window.activeMenuID = this.domNode.parentNode.id;
      }
   });


  /**** Used for Combinations *****/
  dojo.declare(
    "curam.widget.CombinationButton",
    curam.widget.DivButtonBase,
    {

      className: "image",

      _toggleMenu: function(menuId, event){
          this._setActiveMenu(menuId);
          dijit.byId(menuId).setButton(this);
        var node = event.target ? event.target : event;
        var menu = dijit.byId(menuId);

        if ( !menu ) { return; }
        if(!this._checkValidation(menu)){return;}
        if (node) {
          if(node.cellId && node.cellId.length > 0) {
            menu.combinationId = node.cellId;
          } else if(node.id && node.id.length > 0 && !dojo.hasClass(node, "image")) {
            menu.combinationId = node.id;
          } else if(node.parentNode) {
            menu.combinationId = node.parentNode.id;
          } else {
            menu.combinationId = node.cellId;
          }
        } else {
          menu.combinationId = null;
        }
      }
   });


   /**** Used for the Priority Column *****/
  dojo.declare(
    "curam.widget.PriorityButton",
    curam.widget.DivButtonBase,
    {
      //<div id="column-id-pri" class="column-id column-eval pri-col-eval"><div>C</div></div>

      className: "column-id column-eval pri-col-eval",

      postCreate: function(){
        dojo.attr(this.domNode, "id", this.id);
        this.inherited(arguments);
      },

      _toggleMenu: function(menuId, event){

          this._setActiveMenu(menuId);
          dijit.byId(menuId).setButton(this);
      }
   });


  /**** Used for the Score Column *****/
  dojo.declare("curam.widget.ScoreButton", curam.widget.PriorityButton, {
    // empty
  });

  return CuramDivButton;
});

},
'dojox/storage/_common':function(){
// wrapped by build app
define("dojox/storage/_common", ["dijit","dojo","dojox","dojo/require!dojox/storage/Provider,dojox/storage/manager,dojox/storage/LocalStorageProvider,dojox/storage/WhatWGStorageProvider,dojox/storage/BehaviorStorageProvider,dojox/storage/CookieStorageProvider"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage._common");
dojo.require("dojox.storage.Provider");
dojo.require("dojox.storage.manager");

/*
  Note: if you are doing Dojo Offline builds you _must_
  have offlineProfile=true when you run the build script:
  ./build.sh action=release profile=offline offlineProfile=true
*/
dojo.require("dojox.storage.LocalStorageProvider");
dojo.require("dojox.storage.WhatWGStorageProvider");
dojo.require("dojox.storage.BehaviorStorageProvider");
dojo.require("dojox.storage.CookieStorageProvider");

// now that we are loaded and registered tell the storage manager to
// initialize itself
dojox.storage.manager.initialize();

});

},
'url:dijit/templates/TreeNode.html':"<div class=\"dijitTreeNode\" role=\"presentation\"\n\t><div data-dojo-attach-point=\"rowNode\" class=\"dijitTreeRow\" role=\"presentation\" data-dojo-attach-event=\"onmouseenter:_onMouseEnter, onmouseleave:_onMouseLeave, onclick:_onClick, ondblclick:_onDblClick\"\n\t\t><img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"expandoNode\" class=\"dijitTreeExpando\" role=\"presentation\"\n\t\t/><span data-dojo-attach-point=\"expandoNodeText\" class=\"dijitExpandoText\" role=\"presentation\"\n\t\t></span\n\t\t><span data-dojo-attach-point=\"contentNode\"\n\t\t\tclass=\"dijitTreeContent\" role=\"presentation\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"iconNode\" class=\"dijitIcon dijitTreeIcon\" role=\"presentation\"\n\t\t\t/><span data-dojo-attach-point=\"labelNode\" class=\"dijitTreeLabel\" role=\"treeitem\" tabindex=\"-1\" aria-selected=\"false\" data-dojo-attach-event=\"onfocus:_onLabelFocus\"></span>\n\t\t</span\n\t></div>\n\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitTreeContainer\" role=\"presentation\" style=\"display: none;\"></div>\n</div>\n",
'url:dijit/form/templates/TextBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
'curam/util/ListSort':function(){
define("curam/util/ListSort", ["curam/util",
        "curam/debug",
        "curam/define"
        ], function() {

/*
 * Modification History
 * --------------------
 * 16-May-2014 LL [CR00430437] Changed attribute for sort order to solve the
 * "ID values must be unique" Accessibility issue [TEC-16873].
 * 27-Dec-2012  SB  [CR00357739] Added tabindex of -1 for hidden table headers
 *                  in scrollable lists.
 * 20-Jun-2012  NLH [CR00332256] Incorrect Tooltips displaying for 
 *              Table Column Headings.
 * 13-Mar-2012  MV  [CR00326704] Fix sorting of non-expandable lists. 
 * 29-Feb-2012  BOS [TEC-9813] Fix the issue where the tooltip text for the
 *                    sorting of a column in alist cannot be localized.
 * 30-Aug-2011  SB  TEC-7261 Rewrite getSpanTitle() function to use id instead
 *                    of title.
 * 09-Aug-2011  JY  [CR00283846] Rewrite getSpanTitle() function to fix 
 *                    the sorting issue when when there are disabled links
 *                    present in the list.
 * 03-May-2011  PK  [CR00264581] Fixed sorting for scrollable lists.
 * 29-Apr-2011  MV  [CR00265362] Stop the click event to avoid side effects
 *    after clicking a row to sort it.
 * 13-Dec-2010  MV  [CR00237821] Publish pre-sort event for the list.
 * 18-Nov-2010 MV [CR00231387] Connect to DOM event with a function that will
 *    automatically disconnect on page unload.
 * 10-May-2010 MV [CR00196066] Adapted to also work on expandable lists.
 *                 Moved to a specific namespace.
 */

  curam.define.singleton("curam.util.ListSort", {
  /*
   * Add links to the column headings
   */
  makeSortable: function(table, paginationId, isExpandableList, anchorSpanText) {
    dojo.addOnLoad(function(){
      table = dojo.byId(table);
      if (table.tHead == null) {
        return;
      
      } else if (table.tHead.rows && table.tHead.rows.length > 0) {
        var header = table.tHead.rows[0];
        if (!header) {
          return;
        }
      }
      
      var trim = dojo.trim;
      // The header cells that should be converted to links have ids.
      for (var i = 0; i < header.cells.length; i++) {
        var cell = header.cells[i];
        if (cell.id && cell.childNodes[0]) {
          var cellSpan = cell.childNodes[0];
          if (cellSpan.childNodes[0] && cellSpan.childNodes[0].nodeType == 3) {
            var txt = trim(cellSpan.childNodes[0].nodeValue);
            if ((txt.length > 0) && (txt != "\u00a0")) {
            var sortingAnchor = dojo.create('a', {href: "#"});
            sortingAnchor["table"] = table;
            sortingAnchor["paginationId"] = paginationId;
            sortingAnchor.appendChild(document.createTextNode(txt));
            curam.util.connect(sortingAnchor,
                "onclick", curam.util.ListSort.sortTable);
            
            // creating a hidden span to inform screen readers about
            // the sortable columns
            var anchorSpan = dojo.create('span',{
              className:'hidden'},sortingAnchor,'right');
            anchorSpan.appendChild(document.createTextNode(anchorSpanText));
            
            dojo.empty(cellSpan);
            cellSpan.appendChild(sortingAnchor);
            }
          }
        }
      }
      var hiddenAnchors = dojo.query(".hidden-table-header a");
      for (var i = 0; i < hiddenAnchors.length; i++) {
        var hiddenAnchor = hiddenAnchors[i];
        hiddenAnchor.setAttribute("tabindex","-1");
        hiddenAnchors.length - 1;
      }
      table._sortUp = true; // The direction of the next sort
      table._isExpandableList = isExpandableList;
    });
  },

  /*
   * Perform the sort
   */
  sortTable: function(clickEventOrAnchor) {
    var link;
    // The method can accept an event or anchor element.  
    if (typeof(clickEventOrAnchor.nodeType) != "undefined") {
      // it's an element, assumed to be an anchor.
      link = clickEventOrAnchor;
    } else {
      // it's a click event with the anchor as the target.
      link = clickEventOrAnchor.target;
      dojo.stopEvent(clickEventOrAnchor);
    }
    
    // publish the "pre-sort" event
    window.dojo.publish("/curam/list/toBeSorted", [link["paginationId"]]);
    
    var th = link.parentNode.parentNode;
    var column = th.cellIndex;
    
    //IE doesn't give the correct cellIndex when some header cells are hidden,
    //as happens when List context menus are enabled
    if(dojo.isIE && curam.content && curam.content.LIST_MENUS_ENABLED) {
      column = 0;
      var curCell = th.previousSibling;
      
      while(curCell) {
        if(curCell.tagName == "TH") {
          column ++;
        }
        curCell = curCell.previousSibling;
      }
    } 
    var table = link["table"];
    var isExpList = table._isExpandableList;
    var mainRowStep = (isExpList ? 2 : 1);
    var tbody = table.tBodies[0];
    
    // for lists with just one row do nothing
    if (tbody.rows.length <= mainRowStep) {
      return;
    }
    
    // A simple numeric comparator.
    var sort_numeric = function(a, b) {
      // Currently uses getSpanDataSort
      aa = curam.util.ListSort.getSpanDataSort(a.cells[column]);
      if (isNaN(aa)) {
        aa = 0;
      }
      bb = curam.util.ListSort.getSpanDataSort(b.cells[column]);
      if (isNaN(bb)) {
        bb = 0;
      }
      return aa - bb;
    };
    
    var newRows = [];
    var lastVisibleRowIndex = tbody.rows.length - mainRowStep;
    for (var j = 0; j < tbody.rows.length / mainRowStep; j++) {
      var indexInOrigList = j * mainRowStep;
      
      newRows[j] = tbody.rows[indexInOrigList];
      if (isExpList) {
        newRows[j]._detailRow = tbody.rows[indexInOrigList + 1];
      }

      // keep track of the last visible row in the list to cater for pagination
      if (dojo.style(tbody.rows[indexInOrigList], "display") != "none"
          && dojo.style(tbody.rows[indexInOrigList], "visible") != "false") {
        lastVisibleRowIndex = indexInOrigList;
      }
    }
  
    newRows.sort(sort_numeric);
    if (!table._sortUp) {
      newRows.reverse();
    }
    table._sortUp = !table._sortUp;
  
    // Reshuffle rows in DOM.
    // We use insertBefore() on rows that already exist in the tbody,
    // so they are moved rather than creating new ones
    var refNode = tbody.firstChild;
    for (var i = 0; i < newRows.length; i++) {
      var newRow = newRows[i];
      if (isExpList) {
        // for expandable lists handle details row along with the 
        var detailRow = newRow._detailRow;
        tbody.appendChild(newRow);
        var next = cm.nextSibling(newRow, "tr");
        if (next) {
          tbody.insertBefore(detailRow, next);
        } else {
          tbody.appendChild(detailRow);
        }
        refNode = cm.nextSibling(detailRow, "tr");

      } else {
        // non-expandable list - simply append the rows in order
        tbody.appendChild(newRow);
      }
    }
    
    // restore the CSS striping classes after sorting
    curam.util.stripeTable(table, isExpList, lastVisibleRowIndex);

    // publish the "re-sort" event
    window.dojo.publish("/curam/list/sorted", [link["paginationId"]]);
  },

  /**
   * Scrollable lists are implemented with 2 HTML tables. The first table shows
   * the column headers and remains fixed, the second table shows the list body
   * and can be scrolled. In the second table the column headers exist, but are
   * hidden. To implement sorting for a scrollable table, when the visible
   * column in the first table is clicked, this function is invoked. It then
   * locates the anchor element of the corresponding hidden column header and
   * passes that to the sortTable method above. The "connection" between the
   * visible and hidden column headers is based on a naming convention. The
   * visible column header will been an ID suffixed with "_slh"
   * (in gen-jsp.xsl), the hidden column will just have the identifier. For
   * example, "NC1234_slh" and "NC123". 
   *  
   * @param event The mouse click event.
   * @param columnHeaderID The ID of the "visible" column header of the
   *                       scrollable list.
   */
  sortScrollableList: function(event, columnHeaderID) {
    dojo.stopEvent(event);
    // Using the naming convention, extract the ID of the hidden column.
    var idx = columnHeaderID.indexOf("_slh");
    var hiddenColumnHeaderID = columnHeaderID.substring(0, idx);
    var hiddenColumnHeader = dojo.byId(hiddenColumnHeaderID);
    if (typeof(hiddenColumnHeader) == "undefined" ) {
      return;
    }
    // Now locate the anchor element which is a descendant of the column
    // header. 
    var anchor = dojo.query("a", hiddenColumnHeader)[0];
    // Pass the anchor element to the "sortTable" method.
    curam.util.ListSort.sortTable(anchor);
  },
  
  /*
   * Extracts the data-curam-sort-order attribute from a span element. The
   * numeric sort information is contained in this attribute.
   */
    getSpanDataSort : function(el) {
      var spanElementArray = el.getElementsByTagName("span");
      curam.debug.log(el.getElementsByTagName("span"));
      for ( var i = 0; i < spanElementArray.length; i++) {
        // Check if the span element has an data-curam-sort-order attribute or
        // not.
        if (dojo.attr(spanElementArray[i], "data-curam-sort-order") !== "") {
          spanElement = spanElementArray[i];
        }
      }
      curam.debug.log("getSpanDataSort ==="
          + dojo.attr(spanElement, "data-curam-sort-order"));

      return spanElement ? parseInt(dojo.attr(spanElement,
          "data-curam-sort-order")) || 0 : 0;
    }
  });

  return curam.util.ListSort;
});

},
'curam/matrix/Constants':function(){
define("curam/matrix/Constants", ["curam/define"
        ], function() {
  
  curam.define.singleton("curam.matrix.Constants", {
    /**
     * Represents the answer type, codetable.
     */
     ANSWER_TYPE_CODETABLE: 'codetable',

     /**
     * Represents the answer type, numeric.
     */
     ANSWER_TYPE_NUMERIC: 'numeric',

     /**
     * Represents the answer type, boolean.
     */
     ANSWER_TYPE_BOOLEAN: 'boolean',

     /**
     * Represents the answer type, string.
     */
     ANSWER_TYPE_STRING: 'string',

     /**
     * Represents the numeric answer type, specifc value.
     */
     SPECIFIC_VALUE: 'specificvalue',

     /**
     * Represents the numeric answer type, min max.
     */
     MIN_MAX: 'minmax',

     /**
     * Represents the height and width of all borders in all elements
     * in the matrix.
     */
     MATRIX_BORDER_SIZE: 1,

     /**
     * Represents the default cell width (i.e. the width of a checkbox div).
     * This is set as a property of classes .cell, .cell-first-row, .cell-last-col and .cell-no-border
     * which all represent combination cells.
     */
     COMBINATION_CELL_WIDTH: 22,

     /**
     * Used for column headings.
     */
     columnLetters: new Array("C", "D", "E", "F", "G", "H", "I",
                                   "J", "K", "L", "M", "N", "O",
                                   "P", "Q", "R", "S", "T", "U",
                                   "V", "W", "X", "Y", "Z"),

     /**
      * This is not really constant, but rather a "matrix-global" static variable.
      */
     container: null
  });
  
  return curam.matrix.Constants;
});

},
'dojo/fx':function(){
define("dojo/fx", [
	"./_base/lang",
	"./Evented",
	"./_base/kernel",
	"./_base/array",
	"./_base/connect",
	"./_base/fx",
	"./dom",
	"./dom-style",
	"./dom-geometry",
	"./ready",
	"require" // for context sensitive loading of Toggler
], function(lang, Evented, dojo, arrayUtil, connect, baseFx, dom, domStyle, geom, ready, require) {

	// module:
	//		dojo/fx
	// summary:
	//		TODOC


	/*=====
	dojo.fx = {
		// summary: Effects library on top of Base animations
	};
	var coreFx = dojo.fx;
	=====*/
	
// For back-compat, remove in 2.0.
if(!dojo.isAsync){
	ready(0, function(){
		var requires = ["./fx/Toggler"];
		require(requires);	// use indirection so modules not rolled into a build
	});
}

	var coreFx = dojo.fx = {};

	var _baseObj = {
			_fire: function(evt, args){
				if(this[evt]){
					this[evt].apply(this, args||[]);
				}
				return this;
			}
		};

	var _chain = function(animations){
		this._index = -1;
		this._animations = animations||[];
		this._current = this._onAnimateCtx = this._onEndCtx = null;

		this.duration = 0;
		arrayUtil.forEach(this._animations, function(a){
			this.duration += a.duration;
			if(a.delay){ this.duration += a.delay; }
		}, this);
	};
	_chain.prototype = new Evented();
	lang.extend(_chain, {
		_onAnimate: function(){
			this._fire("onAnimate", arguments);
		},
		_onEnd: function(){
			connect.disconnect(this._onAnimateCtx);
			connect.disconnect(this._onEndCtx);
			this._onAnimateCtx = this._onEndCtx = null;
			if(this._index + 1 == this._animations.length){
				this._fire("onEnd");
			}else{
				// switch animations
				this._current = this._animations[++this._index];
				this._onAnimateCtx = connect.connect(this._current, "onAnimate", this, "_onAnimate");
				this._onEndCtx = connect.connect(this._current, "onEnd", this, "_onEnd");
				this._current.play(0, true);
			}
		},
		play: function(/*int?*/ delay, /*Boolean?*/ gotoStart){
			if(!this._current){ this._current = this._animations[this._index = 0]; }
			if(!gotoStart && this._current.status() == "playing"){ return this; }
			var beforeBegin = connect.connect(this._current, "beforeBegin", this, function(){
					this._fire("beforeBegin");
				}),
				onBegin = connect.connect(this._current, "onBegin", this, function(arg){
					this._fire("onBegin", arguments);
				}),
				onPlay = connect.connect(this._current, "onPlay", this, function(arg){
					this._fire("onPlay", arguments);
					connect.disconnect(beforeBegin);
					connect.disconnect(onBegin);
					connect.disconnect(onPlay);
				});
			if(this._onAnimateCtx){
				connect.disconnect(this._onAnimateCtx);
			}
			this._onAnimateCtx = connect.connect(this._current, "onAnimate", this, "_onAnimate");
			if(this._onEndCtx){
				connect.disconnect(this._onEndCtx);
			}
			this._onEndCtx = connect.connect(this._current, "onEnd", this, "_onEnd");
			this._current.play.apply(this._current, arguments);
			return this;
		},
		pause: function(){
			if(this._current){
				var e = connect.connect(this._current, "onPause", this, function(arg){
						this._fire("onPause", arguments);
						connect.disconnect(e);
					});
				this._current.pause();
			}
			return this;
		},
		gotoPercent: function(/*Decimal*/percent, /*Boolean?*/ andPlay){
			this.pause();
			var offset = this.duration * percent;
			this._current = null;
			arrayUtil.some(this._animations, function(a){
				if(a.duration <= offset){
					this._current = a;
					return true;
				}
				offset -= a.duration;
				return false;
			});
			if(this._current){
				this._current.gotoPercent(offset / this._current.duration, andPlay);
			}
			return this;
		},
		stop: function(/*boolean?*/ gotoEnd){
			if(this._current){
				if(gotoEnd){
					for(; this._index + 1 < this._animations.length; ++this._index){
						this._animations[this._index].stop(true);
					}
					this._current = this._animations[this._index];
				}
				var e = connect.connect(this._current, "onStop", this, function(arg){
						this._fire("onStop", arguments);
						connect.disconnect(e);
					});
				this._current.stop();
			}
			return this;
		},
		status: function(){
			return this._current ? this._current.status() : "stopped";
		},
		destroy: function(){
			if(this._onAnimateCtx){ connect.disconnect(this._onAnimateCtx); }
			if(this._onEndCtx){ connect.disconnect(this._onEndCtx); }
		}
	});
	lang.extend(_chain, _baseObj);

	coreFx.chain = /*===== dojo.fx.chain = =====*/ function(/*dojo.Animation[]*/ animations){
		// summary:
		//		Chain a list of `dojo.Animation`s to run in sequence
		//
		// description:
		//		Return a `dojo.Animation` which will play all passed
		//		`dojo.Animation` instances in sequence, firing its own
		//		synthesized events simulating a single animation. (eg:
		//		onEnd of this animation means the end of the chain,
		//		not the individual animations within)
		//
		// example:
		//	Once `node` is faded out, fade in `otherNode`
		//	|	dojo.fx.chain([
		//	|		dojo.fadeIn({ node:node }),
		//	|		dojo.fadeOut({ node:otherNode })
		//	|	]).play();
		//
		return new _chain(animations); // dojo.Animation
	};

	var _combine = function(animations){
		this._animations = animations||[];
		this._connects = [];
		this._finished = 0;

		this.duration = 0;
		arrayUtil.forEach(animations, function(a){
			var duration = a.duration;
			if(a.delay){ duration += a.delay; }
			if(this.duration < duration){ this.duration = duration; }
			this._connects.push(connect.connect(a, "onEnd", this, "_onEnd"));
		}, this);

		this._pseudoAnimation = new baseFx.Animation({curve: [0, 1], duration: this.duration});
		var self = this;
		arrayUtil.forEach(["beforeBegin", "onBegin", "onPlay", "onAnimate", "onPause", "onStop", "onEnd"],
			function(evt){
				self._connects.push(connect.connect(self._pseudoAnimation, evt,
					function(){ self._fire(evt, arguments); }
				));
			}
		);
	};
	lang.extend(_combine, {
		_doAction: function(action, args){
			arrayUtil.forEach(this._animations, function(a){
				a[action].apply(a, args);
			});
			return this;
		},
		_onEnd: function(){
			if(++this._finished > this._animations.length){
				this._fire("onEnd");
			}
		},
		_call: function(action, args){
			var t = this._pseudoAnimation;
			t[action].apply(t, args);
		},
		play: function(/*int?*/ delay, /*Boolean?*/ gotoStart){
			this._finished = 0;
			this._doAction("play", arguments);
			this._call("play", arguments);
			return this;
		},
		pause: function(){
			this._doAction("pause", arguments);
			this._call("pause", arguments);
			return this;
		},
		gotoPercent: function(/*Decimal*/percent, /*Boolean?*/ andPlay){
			var ms = this.duration * percent;
			arrayUtil.forEach(this._animations, function(a){
				a.gotoPercent(a.duration < ms ? 1 : (ms / a.duration), andPlay);
			});
			this._call("gotoPercent", arguments);
			return this;
		},
		stop: function(/*boolean?*/ gotoEnd){
			this._doAction("stop", arguments);
			this._call("stop", arguments);
			return this;
		},
		status: function(){
			return this._pseudoAnimation.status();
		},
		destroy: function(){
			arrayUtil.forEach(this._connects, connect.disconnect);
		}
	});
	lang.extend(_combine, _baseObj);

	coreFx.combine = /*===== dojo.fx.combine = =====*/ function(/*dojo.Animation[]*/ animations){
		// summary:
		//		Combine a list of `dojo.Animation`s to run in parallel
		//
		// description:
		//		Combine an array of `dojo.Animation`s to run in parallel,
		//		providing a new `dojo.Animation` instance encompasing each
		//		animation, firing standard animation events.
		//
		// example:
		//	Fade out `node` while fading in `otherNode` simultaneously
		//	|	dojo.fx.combine([
		//	|		dojo.fadeIn({ node:node }),
		//	|		dojo.fadeOut({ node:otherNode })
		//	|	]).play();
		//
		// example:
		//	When the longest animation ends, execute a function:
		//	|	var anim = dojo.fx.combine([
		//	|		dojo.fadeIn({ node: n, duration:700 }),
		//	|		dojo.fadeOut({ node: otherNode, duration: 300 })
		//	|	]);
		//	|	dojo.connect(anim, "onEnd", function(){
		//	|		// overall animation is done.
		//	|	});
		//	|	anim.play(); // play the animation
		//
		return new _combine(animations); // dojo.Animation
	};

	coreFx.wipeIn = /*===== dojo.fx.wipeIn = =====*/ function(/*Object*/ args){
		// summary:
		//		Expand a node to it's natural height.
		//
		// description:
		//		Returns an animation that will expand the
		//		node defined in 'args' object from it's current height to
		//		it's natural height (with no scrollbar).
		//		Node must have no margin/border/padding.
		//
		// args: Object
		//		A hash-map of standard `dojo.Animation` constructor properties
		//		(such as easing: node: duration: and so on)
		//
		// example:
		//	|	dojo.fx.wipeIn({
		//	|		node:"someId"
		//	|	}).play()
		var node = args.node = dom.byId(args.node), s = node.style, o;

		var anim = baseFx.animateProperty(lang.mixin({
			properties: {
				height: {
					// wrapped in functions so we wait till the last second to query (in case value has changed)
					start: function(){
						// start at current [computed] height, but use 1px rather than 0
						// because 0 causes IE to display the whole panel
						o = s.overflow;
						s.overflow = "hidden";
						if(s.visibility == "hidden" || s.display == "none"){
							s.height = "1px";
							s.display = "";
							s.visibility = "";
							return 1;
						}else{
							var height = domStyle.get(node, "height");
							return Math.max(height, 1);
						}
					},
					end: function(){
						return node.scrollHeight;
					}
				}
			}
		}, args));

		var fini = function(){
			s.height = "auto";
			s.overflow = o;
		};
		connect.connect(anim, "onStop", fini);
		connect.connect(anim, "onEnd", fini);

		return anim; // dojo.Animation
	};

	coreFx.wipeOut = /*===== dojo.fx.wipeOut = =====*/ function(/*Object*/ args){
		// summary:
		//		Shrink a node to nothing and hide it.
		//
		// description:
		//		Returns an animation that will shrink node defined in "args"
		//		from it's current height to 1px, and then hide it.
		//
		// args: Object
		//		A hash-map of standard `dojo.Animation` constructor properties
		//		(such as easing: node: duration: and so on)
		//
		// example:
		//	|	dojo.fx.wipeOut({ node:"someId" }).play()

		var node = args.node = dom.byId(args.node), s = node.style, o;

		var anim = baseFx.animateProperty(lang.mixin({
			properties: {
				height: {
					end: 1 // 0 causes IE to display the whole panel
				}
			}
		}, args));

		connect.connect(anim, "beforeBegin", function(){
			o = s.overflow;
			s.overflow = "hidden";
			s.display = "";
		});
		var fini = function(){
			s.overflow = o;
			s.height = "auto";
			s.display = "none";
		};
		connect.connect(anim, "onStop", fini);
		connect.connect(anim, "onEnd", fini);

		return anim; // dojo.Animation
	};

	coreFx.slideTo = /*===== dojo.fx.slideTo = =====*/ function(/*Object*/ args){
		// summary:
		//		Slide a node to a new top/left position
		//
		// description:
		//		Returns an animation that will slide "node"
		//		defined in args Object from its current position to
		//		the position defined by (args.left, args.top).
		//
		// args: Object
		//		A hash-map of standard `dojo.Animation` constructor properties
		//		(such as easing: node: duration: and so on). Special args members
		//		are `top` and `left`, which indicate the new position to slide to.
		//
		// example:
		//	|	.slideTo({ node: node, left:"40", top:"50", units:"px" }).play()

		var node = args.node = dom.byId(args.node),
			top = null, left = null;

		var init = (function(n){
			return function(){
				var cs = domStyle.getComputedStyle(n);
				var pos = cs.position;
				top = (pos == 'absolute' ? n.offsetTop : parseInt(cs.top) || 0);
				left = (pos == 'absolute' ? n.offsetLeft : parseInt(cs.left) || 0);
				if(pos != 'absolute' && pos != 'relative'){
					var ret = geom.position(n, true);
					top = ret.y;
					left = ret.x;
					n.style.position="absolute";
					n.style.top=top+"px";
					n.style.left=left+"px";
				}
			};
		})(node);
		init();

		var anim = baseFx.animateProperty(lang.mixin({
			properties: {
				top: args.top || 0,
				left: args.left || 0
			}
		}, args));
		connect.connect(anim, "beforeBegin", anim, init);

		return anim; // dojo.Animation
	};

	return coreFx;
});

},
'curam/inPageNavigation':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/inPageNavigation", ["curam/tab",
        "curam/ui/PageRequest",
        "curam/debug",
        "curam/util/ResourceBundle"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 11-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 06-May-2011 SD [CR00265812] Improve IPN loading mask to handle switching
   *             between navigation tabs.  
   * 29-Mar-2011 SD [CR00256180] Reworked IPN tabs for main content area. The
   *             UumController class is now not utilised for main content area
   *             IPN tabs. TabContainer is now generated within the iFrame. 
   * 09-Nov-2010 MV [CR00220649] Handle conditionally hidden links. 
   * 05-Jul-2010 BD [CR00204119] Rework of this file. Now a class that describes 
   *             an in page navigation link. Also contains a utility function to
   *             return the set of links from and iframe.
   */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  /**
   * Javascript object representing a in page navigation links. The constructor
   * takes the title, url and a boolean value indicating the currently selected 
   * link. 
   * 
   * The getLinks static method 
   */
  var inPageNavigation = dojo.declare("curam.inPageNavigation", null , {

    // title: String
    //   The title for the tab, taken from the localized LABEL attribute of the 
    //   ACTION_CONTROL element on the UIM.
    title:"",
    // href: String
    //   page link including all parameters, taken from the LINK element and 
    //   any child PARAM elements.
    href:"",
    // selected: Boolean
    //   boolean indicating if this is the selected link, taken from the STYLE
    //   attribute on the ACTION_CONTROL element, where the value 
    //   "in-page-current-link" indicates the item is selected.
    selected:false,
    
    constructor: function(args){

      // summmary:
      //    create an inPageNavigation object that will describe a single link by 
      //    title, href(url) and whether it is selected or not.
    
      this.title = args.title;
      this.href = args.href;
      this.selected = args.selected;
      curam.debug.log("curam.inPageNavigation " 
        + bundle.getProperty("curam.inPageNavigation.msg")+ this);
    },
      

    getLinks: function(){
      
      // summary:
      //     Return an array of inPageNavigation objects that describe the set
      //     of in page navigation links for the current page.

      var ipnLinksWrapper = dojo.query(".in-page-navigation-tabs")[0];
      var ipnLinks = dojo.query('li', ipnLinksWrapper);
      var ipnItems = new Array();
      dojo.forEach(ipnLinks,  function(link) {
        var anchor = dojo.query("a",link)[0];
        if (!anchor) {
          // conditionally hidden links will output no anchor - skip them
          return;
        }
        // Browsers vary on getting plain text from a node. 
        // http://clubajax.org/plain-text-vs-innertext-vs-textcontent/
        // Because we know our anchor tags do not have child markup it's safe
        // to do the following (innderText for IE, textContent for FF)
        var title = anchor.innerText || anchor.textContent;
        var selected = false;

        // TODO: Can this be replaced with dojo.hasClass()?
        dojo.filter(dojo.attr(anchor,"class").split(" "), function(className){
          if(className == "in-page-current-link"){
            selected = true;
            return;
          }
        });

        var href = dojo.attr(anchor,"href");
        var navItem = new curam.inPageNavigation({'title':title,'selected':selected,'href':href});
        ipnItems.push(navItem);
      });
      return ipnItems;
     },
     
     processMainContentAreaLinks: function() {

       // summary:
       //     This method exclusively handles IPN tabs in the main content area.
       //     Modal and expandabale list IPN tabs are still handled using the
       //     UIMController class.
       //
       //     IPN links within the main content area are populated (upon clicking)
       //     by reading the generated Curam link to reload the iFrame. Switching
       //     between the actual tabs is controlled by the Dojo tabContainer.
       dojo.addOnLoad(function(){
         var inPageNavigationTabNode = dojo.query(".ipn-page")[0];
         
         if(inPageNavigationTabNode){
           
           var inPageNavigationTabWidget = 
             dijit.byId(dojo.attr(inPageNavigationTabNode, "id"));
          
           // Handle conditional in-page-navigation by removing the dummy child
           // inserted in gen-jsp.xsl
           var dummyChild = inPageNavigationTabWidget.getChildren()[0];
           inPageNavigationTabWidget.removeChild(dummyChild);

           if (inPageNavigationTabWidget.getChildren().length == 0) {
             return;
           }

           // Set the height on the content area based on the height of the content.
           var contentWrapper = dojo.query(".in-page-nav-contentWrapper")[0];
           var nodes = dojo.query("> *",  contentWrapper);
           var bottomNode = nodes[nodes.length - 1];
           var pos = dojo.position(bottomNode);
           var height = pos.y;
           var heightStyle = "height: " + height + "px;";
           dojo.attr(contentWrapper,"style", heightStyle);

           // Create a listener for the tab switch event.
           dojo.connect(inPageNavigationTabWidget,"_transition", function(newPage, oldPage){

           // At this point we have passed through the clickHandler function and have been
           // ignored. Now we are going to process the link again in the same way the clickHandler
           // handles clicks. This time we explicitly call the handlePageRequest function.
           var link = dojo.query(".in-page-link",newPage.id)[0];
           var uimPageRequest = new curam.ui.PageRequest(link.href);
           if (jsScreenContext.hasContextBits("LIST_ROW_INLINE_PAGE")) {
             uimPageRequest.pageHolder = window;
           }
           curam.tab.getTabController().handlePageRequest(uimPageRequest);
           });
           
           // when clicking between IPN links, the tab container is hidden until fully
           // loaded due to slow rendering of tab container in browser, especially
           // IE7.
           dojo.style(inPageNavigationTabNode, 'visibility', 'visible');
         }
       });
     }
  });
  
  return inPageNavigation;
});

},
'curam/util/LocalConfig':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*
 * Modification History
 * --------------------
 * 04-Mar-2014  MV  [CR00421036] Added implementation.
 * 27-Feb-2014  MV  [CR00419961] Initial version.
 */

/**
 * @name curam.util.LocalConfig
 * @namespace Provides support for accessing application properties
 *    from JavaScript and overriding their values locally.
 *      <p/>
 *    The basic idea is that desired options are determined at application
 *    init time (in the main app page) and they are "seeded" using this API.
 *    From then on JavaScript code can access the values of these options.
 *      <p/>
 *    It is then possible to override individual option values and the API
 *    will persist the overrides in local Web storage. This allows
 *    for individual users to control the behaviour of the application
 *    without the need to set options globally for all users in admin pages.
 *      <p/>
 *    Please note the option values and overrides are stored in the "top"
 *    browser window, even if the API is used from nested iframes.
 */
define("curam/util/LocalConfig", [
        ], function() {
  
  // the code below ensures we store the values globally
  var globalName = function(name) {
        return 'curam_util_LocalConfig_' + name;
      },
      initGlobal = function(name, value) {
        var gName = globalName(name);
        
        // only initialize if it doesn't already exist!
        if (typeof top[gName] === 'undefined') {
          top[gName] = value;
        }
        
        return top[gName];
      },
      getGlobal = function(name) {
        return top[globalName(name)];
      };
  
  initGlobal('seedValues', {}),
  initGlobal('overrides', {});
  
  var _checkIsString = function(value, valName) {
    if (typeof value !== 'undefined' && typeof value !== 'string') {
      throw new Error('Invalid ' + valName + ' type: ' + typeof value
          + '; expected string');
    }
  };
  
  var LocalConfig =
  /**
   * @lends curam.util.LocalConfig.prototype
   */
  {
    /**
     * Sets the "global" value for the option.
     * This can be later overriden to provide a local value. 
     *
     * @param name Name of the option to set.
     * @param value Value of the option to set. If this is undefined
     *  then default value will be used instead.
     * @param defaultValue Default value to be used if value is not specified.
     */
    seedOption: function(name, value, defaultValue) {
      _checkIsString(value, 'value');
      _checkIsString(defaultValue, 'defaultValue');
      
      // code below treats null as a valid value to be used
      getGlobal('seedValues')[name] =
          (typeof value !== 'undefined') ? value : defaultValue;
    },
    
    /**
     * Sets local override for the value of given option.
     * The override is persisted to local Web storage, if available.
     * 
     * @param name Name of the option to override.
     * @param value The local value to be used.
     */
    overrideOption: function(name, value) {
      _checkIsString(value, 'value');

      // persist the value, if possible
      if(typeof(Storage) !== "undefined") {
        localStorage[name] = value;

      // otherwise just store in memory - override will not be permanent
      } else {
        getGlobal('overrides')[name] = value;
      }
    },
    
    /**
     * Reads the value of the given option. It takes the values in the following
     * precedence order. The first that is found is returned.
     * <ul>
     * <li>override from local persistent Web storage</li>
     * <li>override from session memory</li>
     * <li>the global value</li>
     * <li>return the provided default value</li>
     * </ul>
     * 
     * @param name Name of the option to read.
     * @param defaultValue Default value to return if value is not set.
     * @returns Value of the option or provided default value.
     */
    readOption: function(name, defaultValue) {
      _checkIsString(defaultValue, 'defaultValue');

      var finalValue = null;

      // use local persistent value, if possible and if available
      if (typeof(Storage) !== "undefined"
          && typeof localStorage[name] !== 'undefined') {
        finalValue = localStorage[name];
    
      // otherwise fall back to local non-persistent override
      } else if (typeof getGlobal('overrides')[name] !== 'undefined') {
        finalValue = getGlobal('overrides')[name];
  
      // otherwise fall back to the seed value
      } else if (typeof getGlobal('seedValues')[name] !== 'undefined') {
        finalValue = getGlobal('seedValues')[name];
  
      // otherwise fall back to the specified default value
      } else {
        finalValue = defaultValue;
      }

      return finalValue;
    },
    
    /**
     * Completely removes the option from configuration.
     * After using this method the readOption() will return the provided
     * default value.
     *
     * @param name Name of the option to clear.
     */
    clearOption: function(name) {
      if(typeof(Storage) !== "undefined") {
        localStorage.removeItem(name);
      }
      delete getGlobal('overrides')[name];
      delete getGlobal('seedValues')[name];
    }
  };
  
  return LocalConfig;
  
});

},
'dojo/data/util/sorter':function(){
define("dojo/data/util/sorter", ["dojo/_base/lang"], function(lang) {
	// module:
	//		dojo/data/util/sorter
	// summary:
	//		TODOC

var sorter = lang.getObject("dojo.data.util.sorter", true);

sorter.basicComparator = function(	/*anything*/ a,
													/*anything*/ b){
	//	summary:
	//		Basic comparision function that compares if an item is greater or less than another item
	//	description:
	//		returns 1 if a > b, -1 if a < b, 0 if equal.
	//		'null' values (null, undefined) are treated as larger values so that they're pushed to the end of the list.
	//		And compared to each other, null is equivalent to undefined.

	//null is a problematic compare, so if null, we set to undefined.
	//Makes the check logic simple, compact, and consistent
	//And (null == undefined) === true, so the check later against null
	//works for undefined and is less bytes.
	var r = -1;
	if(a === null){
		a = undefined;
	}
	if(b === null){
		b = undefined;
	}
	if(a == b){
		r = 0;
	}else if(a > b || a == null){
		r = 1;
	}
	return r; //int {-1,0,1}
};

sorter.createSortFunction = function(	/* attributes array */sortSpec, /*dojo.data.core.Read*/ store){
	//	summary:
	//		Helper function to generate the sorting function based off the list of sort attributes.
	//	description:
	//		The sort function creation will look for a property on the store called 'comparatorMap'.  If it exists
	//		it will look in the mapping for comparisons function for the attributes.  If one is found, it will
	//		use it instead of the basic comparator, which is typically used for strings, ints, booleans, and dates.
	//		Returns the sorting function for this particular list of attributes and sorting directions.
	//
	//	sortSpec: array
	//		A JS object that array that defines out what attribute names to sort on and whether it should be descenting or asending.
	//		The objects should be formatted as follows:
	//		{
	//			attribute: "attributeName-string" || attribute,
	//			descending: true|false;   // Default is false.
	//		}
	//	store: object
	//		The datastore object to look up item values from.
	//
	var sortFunctions=[];

	function createSortFunction(attr, dir, comp, s){
		//Passing in comp and s (comparator and store), makes this
		//function much faster.
		return function(itemA, itemB){
			var a = s.getValue(itemA, attr);
			var b = s.getValue(itemB, attr);
			return dir * comp(a,b); //int
		};
	}
	var sortAttribute;
	var map = store.comparatorMap;
	var bc = sorter.basicComparator;
	for(var i = 0; i < sortSpec.length; i++){
		sortAttribute = sortSpec[i];
		var attr = sortAttribute.attribute;
		if(attr){
			var dir = (sortAttribute.descending) ? -1 : 1;
			var comp = bc;
			if(map){
				if(typeof attr !== "string" && ("toString" in attr)){
					 attr = attr.toString();
				}
				comp = map[attr] || bc;
			}
			sortFunctions.push(createSortFunction(attr,
				dir, comp, store));
		}
	}
	return function(rowA, rowB){
		var i=0;
		while(i < sortFunctions.length){
			var ret = sortFunctions[i++](rowA, rowB);
			if(ret !== 0){
				return ret;//int
			}
		}
		return 0; //int
	}; // Function
};

return sorter;
});

},
'curam/ui/PageRequest':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.ui.PageReques
 * 
 * @namespace Represents an page request.
 *
 */
define("curam/ui/PageRequest", ["curam/debug",
        "curam/util/ResourceBundle"
        ], function() {
/*
 * Modification History
 * --------------------
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 26-Jan-2011  MV  [CR00244801] Added another type of refresh indicator.
 * 21-Jan-2011  DG  [CR00243540] Removed unused log function.
 * 21-Jan-2011  MV  [CR00243263] Implement "force refresh" behaviour.
 * 16-Jan-2011  DG  [CR00242400] Removed "requires". Now handled by cdej.js.
 * 09-Dec-2010  DG  [CR00217921] Now supports TabDescriptor objects.
 * 02-Jun-2010  PK  [CR00203531] Initial version (moved from tab-common.js).
 */

/**
 * Creating Resource Bundle Object to access localized resources.
 */ 
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug"); 

var PageRequest = dojo.declare("curam.ui.PageRequest", null, 
  /** @lends curam.ui.PageRequest.prototype */ {
  
  /** If set to true then the page will be loaded even if it has the same URL. */
  forceLoad: false,

  /** If set to true then the existing page will be loaded instead of changing
   * to the URL passed in this request.
   */
  justRefresh: false,

  /**
   * Creates a new page request object.
   *
   * @param requestedPage If this is a string, it is interpreted as the URI of
   *   of the requested page. If it is an object, it is interpreted as a
   *   <code>curam.tab.TabDescriptor</code> and the URI is constructed from
   *   the properties of the tab descriptor's "tabContent" property.
   * @param {Boolean} isHomePage true if this is a home page (one whose tab
   *   will not be closed).
   * @param {Boolean} openInCurrentTab true if this page should be opened in
   *   the current tab instead of creating a new tab.
   */
  constructor: function(requestedPage, isHomePage, openInCurrentTab) {
    this.parameters = {};
    this.cdejParameters = {};
    this.cdejParameters["o3ctx"] = "4096";

    // Normalize these two arguments to Boolean values.
    if (isHomePage) {
      this.isHomePage = true;
    } else {
      this.isHomePage = false
    }
    if (openInCurrentTab) {
      this.openInCurrentTab = true;
    } else {
      this.openInCurrentTab = false
    }

    // This will be used to specify the location to open the page in. If not
    // specified the "Tab Controller" will always open the page in the main
    // content panel.
    this.pageHolder = null;

    var url;
    if (dojo.isString(requestedPage)) {
      url = requestedPage;
      curam.debug.log("PAGE REQUEST: " 
        + bundle.getProperty("curam.ui.PageRequest.url") + " " + url);
    } else {
      curam.debug.log("PAGE REQUEST: " 
        + bundle.getProperty("curam.ui.PageRequest.descriptor") + " "
          + requestedPage.toJson());
      // Value is a curam.tab.TabDescriptor. See that class for details.
      // TODO: Is there any good reason why we should create a string from its
      // parts and then parse the string back to its parts again? -- DG
      var tc = requestedPage.tabContent;
      url = tc.pageID + "Page.do";
      var firstParam = true;
      for (param in tc.parameters) {
        if (firstParam) {
          url += "?";
          firstParam = false;
        } else {
          url += "&";
        }
        url += param + "=" + encodeURIComponent(tc.parameters[param]);
      }
      curam.debug.log("PAGE REQUEST: " 
        + bundle.getProperty("curam.ui.PageRequest.derived") + " " + url);
    }

    var tokens = url.split("?");
    this.parseUIMPageID(tokens[0]);
    if (tokens.length == 2) {
      // parse the query string
      this.parseParameters(tokens[1]);
    }
  },

  parseUIMPageID: function(url) {
    var pageIDTokens = url.split("/");
    var pageIDString = pageIDTokens[pageIDTokens.length - 1];
    this.pageID = pageIDString.replace("Page.do", "");
  },

  parseParameterName: function(name) {
    // parameter values are tokenized by "&". However the urls generated
    // from the menu bar and navigation renderers is run through a serializer
    // and "&" escaped as "&amp;" when generating JavaScript code (e.g. JSON)
    // This function is a temporary workaround to check if the paramter value
    // begins with "amp;" (i.e. without the & which was the "token") and if so
    // we chop it off.

    // Note that while this escaping also takes place in the href attribute of
    // an anchor tag on all of our existing standard links, it's not an issue
    // in this case.
    // When we access that through the DOM API the &amp; is
    // unescaped to "&" (TODO: check this on all browsers). For example:
    // <a href="SomePage.do?param1=2&amp;param2=2">Click Here</a>
    // Now consider the following JavaScript (assuming "theAnchor" refers to
    // the href above):
    // var x = theAnchor.href;
    // "x" will be "SomePage.do?param1=2&param2=2"

    // Now consider some JavaScript written (or generated) as follows:
    // <script>
    // var jsonData = {nodeTitle: "Addresses",
    //                 url: "SomePage.do?param1=2&amp;param2=2"};
    // </script>
    // Now when we access jsonData.url we are going to get the string exactly
    // as it is above with the "&amp;"

    if (name.charAt(0) == 'a' && name.charAt(1) == 'm'
        && name.charAt(2) == 'p' && name.charAt(3) == ';') {
      // temp workaround to chop off the "amp;" at the start of the
      return name.substring(4, name.length);
    } else {
      return name;
    }
  },
  
  parseParameters: function(queryString) {
    // NOTE: The resolvePageCheckSuccess method of UIController.js access the
    // cdejParameters array directly. Therefore any change to encoding\decoding
    // of these parameters here needs to be checked on that method.
    var keyValuePairs = queryString.split("&");
    for (var i = 0; i < keyValuePairs.length; i++) {
      var keyValuePair = keyValuePairs[i].split("=");
      var paramName = this.parseParameterName(keyValuePair[0]);
      // TODO: Temporary fix for potential WAS issue.
      if (paramName.length > 0) {
        if (!this.isCDEJParam(paramName)) {
          this.parameters[paramName] = decodeURIComponent(keyValuePair[1].replace(/\+/g, " "));
        } else {
          if (paramName != "o3nocache") {
            this.cdejParameters[paramName] =
              decodeURIComponent(keyValuePair[1].replace(/\+/g, " "));
          }
        }
      }
    }
  },
    isCDEJParam: function(paramName) {
    return (paramName.charAt(0) == 'o' && paramName.charAt(1) == '3')
           || (paramName.charAt(0) == '_' && paramName.charAt(1) == '_'
               && paramName.charAt(2) == 'o' && paramName.charAt(3) == '3');
  },

  getQueryString: function(filterCDEJParams) {
    // TODO: re-enable caching....
    //if (this.queryString) {
    //  return this.queryString;
    //}
    var newQS = "";
    var paramName;
    for (paramName in this.parameters) {
      newQS += paramName + "=" + encodeURIComponent(this.parameters[paramName])
          + "&";
    }
    if (!filterCDEJParams == true || filterCDEJParams == false) {
      for (paramName in this.cdejParameters) {
        newQS += paramName + "="
            + encodeURIComponent(this.cdejParameters[paramName]) + "&";
      }
    }
    newQS = newQS.substring(0, newQS.length - 1);
    this.queryString = newQS;
    return this.queryString;
  },

  getURL: function(filterCDEJParams) {
    // TODO: re-enable caching....
    // if (this.url) {
    //   return this.url;
    // }

    var newURL = this.pageID + "Page.do";
    //if (this.parameters.length > 0) {
    var qs = this.getQueryString(filterCDEJParams);
    if (qs != "") {
      newURL += "?" + qs;
    }
    // for (paramName in this.parameters) {
    //  this.url += parmName + "=" + this.parameters[paramName] + "&"
    // }
    // this.url = this.url.substring(0, this.url.length - 2);
    // }
    this.url = newURL;
    return this.url;
  }
});

return PageRequest;
});

},
'dojo/window':function(){
define("dojo/window", ["./_base/lang", "./_base/sniff", "./_base/window", "./dom", "./dom-geometry", "./dom-style"],
	function(lang, has, baseWindow, dom, geom, style) {

// module:
//		dojo/window
// summary:
//		TODOC

var window = lang.getObject("dojo.window", true);

/*=====
dojo.window = {
	// summary:
	//		TODO
};
window = dojo.window;
=====*/

window.getBox = function(){
	// summary:
	//		Returns the dimensions and scroll position of the viewable area of a browser window

	var
		scrollRoot = (baseWindow.doc.compatMode == 'BackCompat') ? baseWindow.body() : baseWindow.doc.documentElement,
		// get scroll position
		scroll = geom.docScroll(), // scrollRoot.scrollTop/Left should work
		w, h;

	if(has("touch")){ // if(scrollbars not supported)
		var uiWindow = baseWindow.doc.parentWindow || baseWindow.doc.defaultView;   // use UI window, not dojo.global window. baseWindow.doc.parentWindow probably not needed since it's not defined for webkit
		// on mobile, scrollRoot.clientHeight <= uiWindow.innerHeight <= scrollRoot.offsetHeight, return uiWindow.innerHeight
		w = uiWindow.innerWidth || scrollRoot.clientWidth; // || scrollRoot.clientXXX probably never evaluated
		h = uiWindow.innerHeight || scrollRoot.clientHeight;
	}else{
		// on desktops, scrollRoot.clientHeight <= scrollRoot.offsetHeight <= uiWindow.innerHeight, return scrollRoot.clientHeight
		// uiWindow.innerWidth/Height includes the scrollbar and cannot be used
		w = scrollRoot.clientWidth;
		h = scrollRoot.clientHeight;
	}
	return {
		l: scroll.x,
		t: scroll.y,
		w: w,
		h: h
	};
};

window.get = function(doc){
	// summary:
	// 		Get window object associated with document doc

	// In some IE versions (at least 6.0), document.parentWindow does not return a
	// reference to the real window object (maybe a copy), so we must fix it as well
	// We use IE specific execScript to attach the real window reference to
	// document._parentWindow for later use
	if(has("ie") && window !== document.parentWindow){
		/*
		In IE 6, only the variable "window" can be used to connect events (others
		may be only copies).
		*/
		doc.parentWindow.execScript("document._parentWindow = window;", "Javascript");
		//to prevent memory leak, unset it after use
		//another possibility is to add an onUnload handler which seems overkill to me (liucougar)
		var win = doc._parentWindow;
		doc._parentWindow = null;
		return win;	//	Window
	}

	return doc.parentWindow || doc.defaultView;	//	Window
};

window.scrollIntoView = function(/*DomNode*/ node, /*Object?*/ pos){
	// summary:
	//		Scroll the passed node into view, if it is not already.

	// don't rely on node.scrollIntoView working just because the function is there

	try{ // catch unexpected/unrecreatable errors (#7808) since we can recover using a semi-acceptable native method
		node = dom.byId(node);
		var doc = node.ownerDocument || baseWindow.doc,
			body = doc.body || baseWindow.body(),
			html = doc.documentElement || body.parentNode,
			isIE = has("ie"), isWK = has("webkit");
		// if an untested browser, then use the native method
		if((!(has("mozilla") || isIE || isWK || has("opera")) || node == body || node == html) && (typeof node.scrollIntoView != "undefined")){
			node.scrollIntoView(false); // short-circuit to native if possible
			return;
		}
		var backCompat = doc.compatMode == 'BackCompat',
			clientAreaRoot = (isIE >= 9 && node.ownerDocument.parentWindow.frameElement)
				? ((html.clientHeight > 0 && html.clientWidth > 0 && (body.clientHeight == 0 || body.clientWidth == 0 || body.clientHeight > html.clientHeight || body.clientWidth > html.clientWidth)) ? html : body)
				: (backCompat ? body : html),
			scrollRoot = isWK ? body : clientAreaRoot,
			rootWidth = clientAreaRoot.clientWidth,
			rootHeight = clientAreaRoot.clientHeight,
			rtl = !geom.isBodyLtr(),
			nodePos = pos || geom.position(node),
			el = node.parentNode,
			isFixed = function(el){
				return ((isIE <= 6 || (isIE && backCompat))? false : (style.get(el, 'position').toLowerCase() == "fixed"));
			};
		if(isFixed(node)){ return; } // nothing to do

		while(el){
			if(el == body){ el = scrollRoot; }
			var elPos = geom.position(el),
				fixedPos = isFixed(el);

			if(el == scrollRoot){
				elPos.w = rootWidth; elPos.h = rootHeight;
				if(scrollRoot == html && isIE && rtl){ elPos.x += scrollRoot.offsetWidth-elPos.w; } // IE workaround where scrollbar causes negative x
				if(elPos.x < 0 || !isIE){ elPos.x = 0; } // IE can have values > 0
				if(elPos.y < 0 || !isIE){ elPos.y = 0; }
			}else{
				var pb = geom.getPadBorderExtents(el);
				elPos.w -= pb.w; elPos.h -= pb.h; elPos.x += pb.l; elPos.y += pb.t;
				var clientSize = el.clientWidth,
					scrollBarSize = elPos.w - clientSize;
				if(clientSize > 0 && scrollBarSize > 0){
					elPos.w = clientSize;
					elPos.x += (rtl && (isIE || el.clientLeft > pb.l/*Chrome*/)) ? scrollBarSize : 0;
				}
				clientSize = el.clientHeight;
				scrollBarSize = elPos.h - clientSize;
				if(clientSize > 0 && scrollBarSize > 0){
					elPos.h = clientSize;
				}
			}
			if(fixedPos){ // bounded by viewport, not parents
				if(elPos.y < 0){
					elPos.h += elPos.y; elPos.y = 0;
				}
				if(elPos.x < 0){
					elPos.w += elPos.x; elPos.x = 0;
				}
				if(elPos.y + elPos.h > rootHeight){
					elPos.h = rootHeight - elPos.y;
				}
				if(elPos.x + elPos.w > rootWidth){
					elPos.w = rootWidth - elPos.x;
				}
			}
			// calculate overflow in all 4 directions
			var l = nodePos.x - elPos.x, // beyond left: < 0
				t = nodePos.y - Math.max(elPos.y, 0), // beyond top: < 0
				r = l + nodePos.w - elPos.w, // beyond right: > 0
				bot = t + nodePos.h - elPos.h; // beyond bottom: > 0
			if(r * l > 0){
				var s = Math[l < 0? "max" : "min"](l, r);
				if(rtl && ((isIE == 8 && !backCompat) || isIE >= 9)){ s = -s; }
				nodePos.x += el.scrollLeft;
				el.scrollLeft += s;
				nodePos.x -= el.scrollLeft;
			}
			if(bot * t > 0){
				nodePos.y += el.scrollTop;
				el.scrollTop += Math[t < 0? "max" : "min"](t, bot);
				nodePos.y -= el.scrollTop;
			}
			el = (el != scrollRoot) && !fixedPos && el.parentNode;
		}
	}catch(error){
		console.error('scrollIntoView: ' + error);
		node.scrollIntoView(false);
	}
};

/* CURAM-FIX Code for catching zoom-in / zoom-out events and resizing in IE8
 * This is fixed in Dojo 1.8, but until we upgrade we need this hack.
 * See https://csnext.ibm.com:8002/jazz/resource/itemName/com.ibm.team.workitem.WorkItem/7318
 */
require(["dojo/_base/sniff", "dojo/on"], function(has, on){
    if(has("ie") == 8){
        var deviceXDPI = screen.deviceXDPI;
        setInterval(function(){
            if(screen.deviceXDPI != deviceXDPI){
                deviceXDPI = screen.deviceXDPI;
                on.emit(baseWindow.global, "resize");
            }
        }, 250);
    }
});
/* END CURAM-FIX */

return window;
});

},
'dojo/DeferredList':function(){
define("dojo/DeferredList", ["./_base/kernel", "./_base/Deferred", "./_base/array"], function(dojo, Deferred, darray) {
	// module:
	//		dojo/DeferredList
	// summary:
	//		TODOC


dojo.DeferredList = function(/*Array*/ list, /*Boolean?*/ fireOnOneCallback, /*Boolean?*/ fireOnOneErrback, /*Boolean?*/ consumeErrors, /*Function?*/ canceller){
	// summary:
	//		Provides event handling for a group of Deferred objects.
	// description:
	//		DeferredList takes an array of existing deferreds and returns a new deferred of its own
	//		this new deferred will typically have its callback fired when all of the deferreds in
	//		the given list have fired their own deferreds.  The parameters `fireOnOneCallback` and
	//		fireOnOneErrback, will fire before all the deferreds as appropriate
	//
	// list:
	//		The list of deferreds to be synchronizied with this DeferredList
	// fireOnOneCallback:
	//		Will cause the DeferredLists callback to be fired as soon as any
	//		of the deferreds in its list have been fired instead of waiting until
	//		the entire list has finished
	// fireonOneErrback:
	//		Will cause the errback to fire upon any of the deferreds errback
	// canceller:
	//		A deferred canceller function, see dojo.Deferred
	var resultList = [];
	Deferred.call(this);
	var self = this;
	if(list.length === 0 && !fireOnOneCallback){
		this.resolve([0, []]);
	}
	var finished = 0;
	darray.forEach(list, function(item, i){
		item.then(function(result){
			if(fireOnOneCallback){
				self.resolve([i, result]);
			}else{
				addResult(true, result);
			}
		},function(error){
			if(fireOnOneErrback){
				self.reject(error);
			}else{
				addResult(false, error);
			}
			if(consumeErrors){
				return null;
			}
			throw error;
		});
		function addResult(succeeded, result){
			resultList[i] = [succeeded, result];
			finished++;
			if(finished === list.length){
				self.resolve(resultList);
			}

		}
	});
};
dojo.DeferredList.prototype = new Deferred();

dojo.DeferredList.prototype.gatherResults = function(deferredList){
	// summary:
	//		Gathers the results of the deferreds for packaging
	//		as the parameters to the Deferred Lists' callback
	// deferredList: dojo.DeferredList
	//		The deferred list from which this function gathers results.
	// returns: dojo.DeferredList
	//		The newly created deferred list which packs results as
	//		parameters to its callback.

	var d = new dojo.DeferredList(deferredList, false, true, false);
	d.addCallback(function(results){
		var ret = [];
		darray.forEach(results, function(result){
			ret.push(result[1]);
		});
		return ret;
	});
	return d;
};

return dojo.DeferredList;
});

},
'curam/widgets':function(){
/*
 * Copyright 2009-2012 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/*
 * Modification History
 * --------------------
 * 31-Jan-2012 MV [CR00302081] Move away from global context. 
 */

define("curam/widgets", [], function() {

//************************ AccordionControl *********************************
var AccordionControl = function(accordionDivId) {
  /* Disabling toolbar until we get proper icons from graphics Team
  var panel = dojo.byId('controlPanel');
  var expander = dojo.create('img', {
      src:'../themes/classic/images/evidence-review/ExpandAllButton.png'
    }, panel
  );
  
  expander.switchboard = this;
  this.expander = expander;
  
  var modeSwitch = 
      dojo.create('input', {
          id:'switcher', type:'checkbox', value:'off'
        }, panel);
  modeSwitch.onclick=this.switchMode;
  modeSwitch.switchboard=this;
  this.modeSwitch=modeSwitch;
  panel.appendChild(modeSwitch);

  var lbl = dojo.create('label',{
    innerHTML: 'Switch Mode'
  }, panel);
  
  var collapser = 
      dojo.create('img',{
          src:'../themes/classic/images/evidence-review/CollapseAllButton.png',
          style: {display:'none'}
        }, panel);
  
  collapser.switchboard = this;
  this.collapser = collapser;
  */
  this.accordion = new AccordionWidget(accordionDivId, this);
  this.accordion.switchboard = this;
};

var theAccordionControl = {
  updateButtons: function() {
    var accord = this.accordion;
    this.collapser.disabled = accord.staysStill(false);
    this.expander.disabled = accord.staysStill(true);
  },

  switchMode: function() {
    if (this.checked){
      this.switchboard.accordion.accordMode = false;
      this.switchboard.expander.onclick = this.switchboard.accordion.expandRest;
      this.switchboard.collapser.style.display = '';
      this.switchboard.updateButtons();
    }else{
      this.switchboard.accordion.accordMode = true;
      this.switchboard.collapser.style.display = 'none';
      this.switchboard.accordion.collapseAll();
      this.switchboard.expander.value = 'Expand All';
      this.switchboard.expander.onclick = this.switchboard.accordion.expandAll;
      this.switchboard.expander.disabled = false;
    }
  }
};

dojo.mixin(AccordionControl.prototype, theAccordionControl);

//************************ AccordionWidget *********************************
var AccordionWidget = function(topDivId, switchboard) {
  var currentHeader;
  this.panelHeight = '250px';
  this.accordMode = true;
  this.switchboard = switchboard;
  this.topElement = dojo.byId(topDivId);
  this.tabs = [];
  var allDivs = dojo.query("div", this.topElement);
  for (var i = 0; i < allDivs.length; i++){    
    if (allDivs[i].className=='accordionTab'){
      while (allDivs[++i].className!='tabHeader'){};
      currentHeader=allDivs[i];
      while (allDivs[++i].className!='tabContent'){};
      this.tabs[this.tabs.length] =
          new AccordionTab(this, currentHeader, allDivs[i]);
    }
  }
  this.lastTab = this.tabs[0];
  for (var i = 1; i < this.tabs.length; i++){
    this.tabs[i].collapse(false);
  }
};

var theAccordionWidget = {
  expandAll: function(){
    var accShortcut = this.switchboard.accordion;
    for (var i = 0; i < accShortcut.tabs.length; i++){
      accShortcut.tabs[i].stateExpanded();
    }
    this.src = '../themes/classic/images/evidence-review/CollapseAllButton.png';
    this.onclick = accShortcut.collapseAll;
  },
  
  collapseAll: function() {
    var accShortcut = this.switchboard.accordion;
    for (var i = 0; i < accShortcut.tabs.length; i++){
      accShortcut.tabs[i].collapse(false);
    }
    accShortcut.lastTab.expand(false);
    this.src = '../themes/classic/images/evidence-review/ExpandAllButton.png';
    this.onclick = accShortcut.expandAll;
  },
  
  expandRest: function() {
    if (!this.switchboard.accordion.staysStill(true)){
      this.switchboard.accordion.expandAll();
    }
    this.switchboard.updateButtons();
  },
  
  collapseRest: function() {
    if (!this.switchboard.accordion.staysStill(false)){
        this.switchboard.accordion.collapseAll();
    }
    this.switchboard.updateButtons();
  },
  
  staysStill: function(expand) {
    var allExp = 0;
    var allTabs = this.tabs.length;
    for (var i = 0; i < allTabs; i++){
      if (this.tabs[i].expanded==true) {
        allExp++;
      }
    }
    return (expand==true)?(allTabs - allExp == 0) : (allExp == 1);
  }
};

dojo.mixin(AccordionWidget.prototype, theAccordionWidget);

//************************ AccordionTab *********************************
var AccordionTab = function(accordion,headerRef,contentRef) {
  this.accordion = accordion;
  this.switchboard = accordion.switchboard;
  this.header = headerRef;
  this.header.tab = this;
  this.content = contentRef;
  dojo.style(this.content, {
    height: accordion.panelHeight,
    overflow: "auto"
  });
  this.content.tab = this;
  this.expanded = true;
  dojo.connect(this.header, "onclick", this.toggleState);
  dojo.connect(this.header, "onmouseover", this.hoverStyle);
  dojo.connect(this.header, "onmouseout", this.stillStyle);
};

var theAccordionTab = {
  hoverStyle: function(e) {
    if (!this.tab.expanded) {
      this.className += ' tabHeaderHover';
    }
  },
  
  stillStyle: function(e) {
    this.className = 'tabHeader';
  },
  
  collapse: function(animate) {
    if (this.accordion.lastTab == this) {
      return;
    }
    if (this.accordion.staysStill(false)) {
      return;
    }
    if (animate && this.accordion.accordMode==false){
      new SingleSlowMotion(this.content, 'down');
    }else{
      dojo.style(this.content, {
        height: "1px",
        display: "none"
      });
    }
    this.expanded = false;
    this.content.style.overflow = "hidden";
    if (this.accordion.accordMode == false){
      this.switchboard.updateButtons();
    }
  },
  
  expand: function(animate) {
    if (this.accordion.lastTab == this) {
      return;
    }
    if (this.accordion.staysStill(true)) {
      return;
    }
    var collapsingTab = this.accordion.lastTab;
    this.stateExpanded(animate);
    this.accordion.lastTab = this;
    if (this.accordion.accordMode == true){
      collapsingTab.collapse(true);
    }else{
      this.switchboard.updateButtons();
    }
  },
  
  stateExpanded: function(animate) {
    if (animate){
      this.content.style.display = '';
      if (this.accordion.accordMode == true){
        new SynchroSlowMotion(this.content, this.accordion.lastTab.content);
      }else{
        new SingleSlowMotion(this.content, 'up');
      }
    }else{
      dojo.style(this.content, {
        height: this.accordion.panelHeight,
        display: "",
        overflow: "auto"
      });
      this.expanded=true;
    }
  },
  
  toggleState: function() {
    if (this.tab.expanded == true){
      this.tab.collapse(true);
    }else{
      this.tab.expand(true);
    }
  }
};
  
dojo.mixin(AccordionTab.prototype, theAccordionTab);

//************************ SingleSlowMotion *********************************
var SingleSlowMotion = function(contentRef, direction) {
  this.contentRef = contentRef;
  this.direction = direction;
  this.duration = 100;
  this.steps = 6;
  this.step();
};

var theSingleSlowMotion = {
   step: function() {
     var deltaH;
     if (this.steps <= 0 ) {
       if (this.direction=='down'){
         dojo.style(this.contentRef, {
           height: "1px",
           display: "none"
         });
         this.contentRef.tab.expanded=false;
       }else{
         this.contentRef.style.height=this.contentRef.tab.accordion.panelHeight;
         this.contentRef.tab.expanded=true;
       }
       this.contentRef.tab.switchboard.updateButtons();
       return;
     }
     if (this.timer) {
       clearTimeout(this.timer);
     }
     var deltaT = Math.round(this.duration/this.steps);
     if (this.direction == 'down'){
       deltaH = this.steps > 0 ? 
             (parseInt(this.contentRef.offsetHeight) - 1)/this.steps : 0;
     }else{
       deltaH = this.steps > 0 ? 
             (parseInt(this.contentRef.tab.accordion.panelHeight) 
                   - parseInt(this.contentRef.offsetHeight))/this.steps : 0;
     }
     this.resizeBy(deltaH);
     this.duration -= deltaT;
     this.steps--;
     this.timer = setTimeout(dojo.hitch(this, this.step), deltaT);
   },

   resizeBy: function(deltaH) {
     var currentHeight = this.contentRef.offsetHeight;
     var intDiff = parseInt(deltaH);
      if (deltaH != 0){
        if (this.direction=='down'){
          this.contentRef.style.height = (currentHeight - intDiff) + "px";
        } else {
          this.contentRef.style.height = (currentHeight + intDiff) + "px";
        }
      }
   }
};

dojo.mixin(SingleSlowMotion.prototype, theSingleSlowMotion);

//************************ SynchroSlowMotion *********************************  
var SynchroSlowMotion = function(expandingRef, collapsingRef) {
  this.collapsingContent = collapsingRef;
  this.collapsingContent.style.overflow = 'hidden';
  this.expandingContent=expandingRef;
  this.limit = 250;
  this.duration = 100;
  this.steps = 10;
  this.expandingContent.style.display = '';
  this.step();
};

var theSynchroSlowMotion = {
   step: function() {
     if (this.steps <= 0){
       dojo.style(this.collapsingContent, {
         height: "1px",
         display: "none"
       });
       dojo.style(this.collapsingContent, {
         height: this.limit,
         overflow: "auto"
       });
       this.collapsingContent.tab.expanded = false;
       this.expandingContent.tab.expanded = true;
       return;
     }
     if (this.timer) {
       clearTimeout(this.timer);
     }
     var deltaT = Math.round(this.duration/this.steps);
     var deltaH = this.steps>0 ?
             (parseInt(this.collapsingContent.style.height)-1)/this.steps : 0;
     this.resizeBoth(deltaH);
     this.duration -= deltaT;
     this.steps--;
     this.timer = setTimeout(dojo.hitch(this, this.step), deltaT);
   },
   
   resizeBoth: function(deltaH) {
     var h1 = parseInt(this.collapsingContent.style.height);
     var h2 = parseInt(this.expandingContent.style.height);
     var intDiff=parseInt(deltaH);
      if (deltaH!=0){
        if (h2 + intDiff < this.limit) {
          this.collapsingContent.style.height = (h1 - intDiff) + "px";
          this.expandingContent.style.height = (h2 + intDiff) + "px";          
        }
      }
   }
};

dojo.mixin(SynchroSlowMotion.prototype, theSynchroSlowMotion);

//********** Accordion widget ***********************************************
var Widgets = {
  version: "1",
  
  AccordionControl: AccordionControl,
  AccordionWidget: AccordionWidget,
  AccordionTab: AccordionTab,
  SingleSlowMotion: SingleSlowMotion,
  SynchroSlowMotion: SynchroSlowMotion,

  registerAccordion: function(id) {
    AccordionControl.constructor(id);
  }
};


//************************ HEATMAP widget *********************************
var HeatMap = function(numRegions) {
  this.steps = numRegions;
  this.regions = new Array();
  this.RGB = new Array(256);
  var k = 0;
  var hex = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", 
                      "9", "A", "B", "C", "D", "E", "F");
  for (var i = 0; i < 16; i++) {
    for (j = 0; j < 16; j++) {
      this.RGB[k] = hex[i] + hex[j];
      k++;
    }
  }
};

var theHeatMap = {
  addRegion: function(regionId) {
    this.regions[this.regions.length] = regionId;
  },
  
  drawMap: function() {
    var midPoint;
    
    if (this.steps % 2 == 0) {
      midPoint = this.steps/2;
    } else {
      midPoint = (this.steps - 1)/2;
    }
    
    var step = parseInt(255/midPoint);
    var red, green, blue;
    for (var i = 0; i < this.steps; ++i) {
      var colour;
      if (i == 0) {
        colour = '#ff0000';
      } else if (i == (this.steps - 1)) {
        colour = '#0000ff';
      } else if (i == midPoint) {
        colour = '#ffffff';
      } else if (i > midPoint) {
        var green = 255;
        var red = 255;
        green -= (i - midPoint) * step;
        red -= (i - midPoint) * step;
        colour = this.rgbToHex(red, green, 255);
      } else if (i < midPoint) {
        green = 0;
        blue = 0;
        green += step * i;
        blue += step * i;
        colour = this.rgbToHex(255, green, blue);
      }
      var table = dojo.byId('heatmapTable');
      if (table){
        var allCells = table.getElementsByTagName('td');
       
        for (var j = 0; j < allCells.length; j++) { 
          if (allCells[j].className.indexOf('region' + this.regions[i]) > -1) {
                allCells[j].style.background = colour;
                if (i > midPoint) {
                  dojo.style(dojo.query("a", allCells[j])[0], "color", "white");
                }
          }
        }
      }
      dojo.style(dojo.byId('legendImage' + this.regions[i]), {
        color: colour,
        background: colour
      });
    }
  },

  rgbToHex: function(r, g, b) {
    var rr = this.RGB[r];
    var gg = this.RGB[g];
    var bb = this.RGB[b];      
    return '#' + rr + gg + bb;
  }
};

dojo.mixin(HeatMap.prototype, theHeatMap);

//************************ Flex chart utils *********************************
// TODO move away from global scope
dojo.global.getDataIn = function(whatVar) {
  return eval(whatVar);
};

// Keep the functions in the global scope for backwards compatibility.
// TODO: remove when code calling these functions is updated
dojo.global.Widgets = Widgets;
dojo.global.HeatMap = HeatMap;

return Widgets;
});

},
'dijit/registry':function(){
define("dijit/registry", [
	"dojo/_base/array", // array.forEach array.map
	"dojo/_base/sniff", // has("ie")
	"dojo/_base/unload", // unload.addOnWindowUnload
	"dojo/_base/window", // win.body
	"."	// dijit._scopeName
], function(array, has, unload, win, dijit){

	// module:
	//		dijit/registry
	// summary:
	//		Registry of existing widget on page, plus some utility methods.
	//		Must be accessed through AMD api, ex:
	//		require(["dijit/registry"], function(registry){ registry.byId("foo"); })

	var _widgetTypeCtr = {}, hash = {};

	var registry =  {
		// summary:
		//		A set of widgets indexed by id

		length: 0,

		add: function(/*dijit._Widget*/ widget){
			// summary:
			//		Add a widget to the registry. If a duplicate ID is detected, a error is thrown.
			//
			// widget: dijit._Widget
			//		Any dijit._Widget subclass.
			if(hash[widget.id]){
				throw new Error("Tried to register widget with id==" + widget.id + " but that id is already registered");
			}
			hash[widget.id] = widget;
			this.length++;
		},

		remove: function(/*String*/ id){
			// summary:
			//		Remove a widget from the registry. Does not destroy the widget; simply
			//		removes the reference.
			if(hash[id]){
				delete hash[id];
				this.length--;
			}
		},

		byId: function(/*String|Widget*/ id){
			// summary:
			//		Find a widget by it's id.
			//		If passed a widget then just returns the widget.
			return typeof id == "string" ? hash[id] : id;	// dijit._Widget
		},

		byNode: function(/*DOMNode*/ node){
			// summary:
			//		Returns the widget corresponding to the given DOMNode
			return hash[node.getAttribute("widgetId")]; // dijit._Widget
		},

		toArray: function(){
			// summary:
			//		Convert registry into a true Array
			//
			// example:
			//		Work with the widget .domNodes in a real Array
			//		|	array.map(dijit.registry.toArray(), function(w){ return w.domNode; });

			var ar = [];
			for(var id in hash){
				ar.push(hash[id]);
			}
			return ar;	// dijit._Widget[]
		},

		getUniqueId: function(/*String*/widgetType){
			// summary:
			//		Generates a unique id for a given widgetType

			var id;
			do{
				id = widgetType + "_" +
					(widgetType in _widgetTypeCtr ?
						++_widgetTypeCtr[widgetType] : _widgetTypeCtr[widgetType] = 0);
			}while(hash[id]);
			return dijit._scopeName == "dijit" ? id : dijit._scopeName + "_" + id; // String
		},

		findWidgets: function(/*DomNode*/ root){
			// summary:
			//		Search subtree under root returning widgets found.
			//		Doesn't search for nested widgets (ie, widgets inside other widgets).

			var outAry = [];

			function getChildrenHelper(root){
				for(var node = root.firstChild; node; node = node.nextSibling){
					if(node.nodeType == 1){
						var widgetId = node.getAttribute("widgetId");
						if(widgetId){
							var widget = hash[widgetId];
							if(widget){	// may be null on page w/multiple dojo's loaded
								outAry.push(widget);
							}
						}else{
							getChildrenHelper(node);
						}
					}
				}
			}

			getChildrenHelper(root);
			return outAry;
		},

		_destroyAll: function(){
			// summary:
			//		Code to destroy all widgets and do other cleanup on page unload

			// Clean up focus manager lingering references to widgets and nodes
			dijit._curFocus = null;
			dijit._prevFocus = null;
			dijit._activeStack = [];

			// Destroy all the widgets, top down
			array.forEach(registry.findWidgets(win.body()), function(widget){
				// Avoid double destroy of widgets like Menu that are attached to <body>
				// even though they are logically children of other widgets.
				if(!widget._destroyed){
					if(widget.destroyRecursive){
						widget.destroyRecursive();
					}else if(widget.destroy){
						widget.destroy();
					}
				}
			});
		},

		getEnclosingWidget: function(/*DOMNode*/ node){
			// summary:
			//		Returns the widget whose DOM tree contains the specified DOMNode, or null if
			//		the node is not contained within the DOM tree of any widget
			while(node){
				var id = node.getAttribute && node.getAttribute("widgetId");
				if(id){
					return hash[id];
				}
				node = node.parentNode;
			}
			return null;
		},

		// In case someone needs to access hash.
		// Actually, this is accessed from WidgetSet back-compatibility code
		_hash: hash
	};

	/*=====
	dijit.registry = {
		// summary:
		//		A list of widgets on a page.
	};
	=====*/
	dijit.registry = registry;

	return registry;
});

},
'url:dijit/layout/templates/AccordionButton.html':"<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n",
'curam/validation':function(){
define("curam/validation", ["curam/define",
        "curam/date"
        ], function() {
  
  curam.define.singleton("curam.validation", {
    /* Holds div nodes which flag file upload controls to check. */
    FILE_UPLOAD_FLGS: [],

    /* The function that will perform the file upload pre-submit check. */
    fileUploadChecker: null,

    invalidPathMsg: null,

    preventKeyPress: function(event){
      if(dojo.isIE) { 
        event.cancelBubble = true;
        event.returnValue = false;
        return false;
      }
      return true;
    },

    activateFileUploadChecker: function(code) {
      if(!curam.validation.fileUploadChecker) {
        curam.validation.fileUploadChecker = function() {
          var form = dojo.byId("mainForm");
          var doCheck = function(evt) {
            var flags = curam.validation.FILE_UPLOAD_FLGS;
            for(var i = 0; i < flags.length; i++) {
              var theId = flags[i];
              var input = cm.nextSibling(dojo.byId(theId), "input");
              if(!curam.validation.isValidFilePath(input.value)) {
                dojo.stopEvent(evt);
                alert(curam.validation.invalidPathMsg + " \'" + input.value + "\'");

                // workaround for a global variable being set on the first submit attempt
                cm.setFormSubmitted(form, 0);
                return false; /* no point checking more paths */
              }
            }
            return true;
          };
          dojo.connect(form, "onsubmit", doCheck);
        };

        dojo.addOnLoad(curam.validation.fileUploadChecker);
      }
    },

    isValidFilePath: function(path) {
      
      // TODO: Remove this validation altogether as it is no longer necessary.
      return true;
    },
    
    validateDate: function(proposedDate) {
      // the variable jsDF contains the date format and is printed by
      // the curam:jsUserPreferences custom tag.
      // isDate() is available in date-formatting.js
      var resultStruct = {
        valid: curam.date.isDate(proposedDate, jsDF),
        validFormat: jsDF.toLowerCase()
      };
      
      return resultStruct;
    }
   
  });

  return curam.validation;
});

},
'dijit/PopupMenuBarItem':function(){
define("dijit/PopupMenuBarItem", [
	"dojo/_base/declare", // declare
	"./PopupMenuItem",
	"./MenuBarItem"
], function(declare, PopupMenuItem, MenuBarItem){

	// module:
	//		dijit/PopupMenuBarItem
	// summary:
	//		Item in a MenuBar like "File" or "Edit", that spawns a submenu when pressed (or hovered)

	var _MenuBarItemMixin = MenuBarItem._MenuBarItemMixin;

/*=====
	var PopupMenuItem = dijit.PopupMenuItem;
	var _MenuBarItemMixin = dijit._MenuBarItemMixin;
=====*/

	return declare("dijit.PopupMenuBarItem", [PopupMenuItem, _MenuBarItemMixin], {
		// summary:
		//		Item in a MenuBar like "File" or "Edit", that spawns a submenu when pressed (or hovered)
	});
});

},
'dijit/form/_FormMixin':function(){
define("dijit/form/_FormMixin", [
	"dojo/_base/array", // array.every array.filter array.forEach array.indexOf array.map
	"dojo/_base/declare", // declare
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/lang", // lang.hitch lang.isArray
	"dojo/window" // winUtils.scrollIntoView
], function(array, declare, kernel, lang, winUtils){

	// module:
	//		dijit/form/_FormMixin
	// summary:
	//		Mixin for containers of form widgets (i.e. widgets that represent a single value
	//		and can be children of a <form> node or dijit.form.Form widget)

	return declare("dijit.form._FormMixin", null, {
		// summary:
		//		Mixin for containers of form widgets (i.e. widgets that represent a single value
		//		and can be children of a <form> node or dijit.form.Form widget)
		// description:
		//		Can extract all the form widgets
		//		values and combine them into a single javascript object, or alternately
		//		take such an object and set the values for all the contained
		//		form widgets

	/*=====
		// value: Object
		//		Name/value hash for each child widget with a name and value.
		//		Child widgets without names are not part of the hash.
		//
		//		If there are multiple child widgets w/the same name, value is an array,
		//		unless they are radio buttons in which case value is a scalar (since only
		//		one radio button can be checked at a time).
		//
		//		If a child widget's name is a dot separated list (like a.b.c.d), it's a nested structure.
		//
		//		Example:
		//	|	{ name: "John Smith", interests: ["sports", "movies"] }
	=====*/

		// state: [readonly] String
		//		Will be "Error" if one or more of the child widgets has an invalid value,
		//		"Incomplete" if not all of the required child widgets are filled in.  Otherwise, "",
		//		which indicates that the form is ready to be submitted.
		state: "",

		//	TODO:
		//	* Repeater
		//	* better handling for arrays.  Often form elements have names with [] like
		//	* people[3].sex (for a list of people [{name: Bill, sex: M}, ...])
		//
		//

		_getDescendantFormWidgets: function(/*dijit._WidgetBase[]?*/ children){
			// summary:
			//		Returns all form widget descendants, searching through non-form child widgets like BorderContainer
			var res = [];
			array.forEach(children || this.getChildren(), function(child){
				if("value" in child){
					res.push(child);
				}else{
					res = res.concat(this._getDescendantFormWidgets(child.getChildren()));
				}
			}, this);
			return res;
		},

		reset: function(){
			array.forEach(this._getDescendantFormWidgets(), function(widget){
				if(widget.reset){
					widget.reset();
				}
			});
		},

		validate: function(){
			// summary:
			//		returns if the form is valid - same as isValid - but
			//		provides a few additional (ui-specific) features.
			//		1 - it will highlight any sub-widgets that are not
			//			valid
			//		2 - it will call focus() on the first invalid
			//			sub-widget
			var didFocus = false;
			return array.every(array.map(this._getDescendantFormWidgets(), function(widget){
				// Need to set this so that "required" widgets get their
				// state set.
				widget._hasBeenBlurred = true;
				var valid = widget.disabled || !widget.validate || widget.validate();
				if(!valid && !didFocus){
					// Set focus of the first non-valid widget
					winUtils.scrollIntoView(widget.containerNode || widget.domNode);
					widget.focus();
					didFocus = true;
				}
	 			return valid;
	 		}), function(item){ return item; });
		},

		setValues: function(val){
			kernel.deprecated(this.declaredClass+"::setValues() is deprecated. Use set('value', val) instead.", "", "2.0");
			return this.set('value', val);
		},
		_setValueAttr: function(/*Object*/ obj){
			// summary:
			//		Fill in form values from according to an Object (in the format returned by get('value'))

			// generate map from name --> [list of widgets with that name]
			var map = { };
			array.forEach(this._getDescendantFormWidgets(), function(widget){
				if(!widget.name){ return; }
				var entry = map[widget.name] || (map[widget.name] = [] );
				entry.push(widget);
			});

			for(var name in map){
				if(!map.hasOwnProperty(name)){
					continue;
				}
				var widgets = map[name],						// array of widgets w/this name
					values = lang.getObject(name, false, obj);	// list of values for those widgets

				if(values === undefined){
					continue;
				}
				if(!lang.isArray(values)){
					values = [ values ];
				}
				if(typeof widgets[0].checked == 'boolean'){
					// for checkbox/radio, values is a list of which widgets should be checked
					array.forEach(widgets, function(w){
						w.set('value', array.indexOf(values, w.value) != -1);
					});
				}else if(widgets[0].multiple){
					// it takes an array (e.g. multi-select)
					widgets[0].set('value', values);
				}else{
					// otherwise, values is a list of values to be assigned sequentially to each widget
					array.forEach(widgets, function(w, i){
						w.set('value', values[i]);
					});
				}
			}

			/***
			 * 	TODO: code for plain input boxes (this shouldn't run for inputs that are part of widgets)

			array.forEach(this.containerNode.elements, function(element){
				if(element.name == ''){return};	// like "continue"
				var namePath = element.name.split(".");
				var myObj=obj;
				var name=namePath[namePath.length-1];
				for(var j=1,len2=namePath.length;j<len2;++j){
					var p=namePath[j - 1];
					// repeater support block
					var nameA=p.split("[");
					if(nameA.length > 1){
						if(typeof(myObj[nameA[0]]) == "undefined"){
							myObj[nameA[0]]=[ ];
						} // if

						nameIndex=parseInt(nameA[1]);
						if(typeof(myObj[nameA[0]][nameIndex]) == "undefined"){
							myObj[nameA[0]][nameIndex] = { };
						}
						myObj=myObj[nameA[0]][nameIndex];
						continue;
					} // repeater support ends

					if(typeof(myObj[p]) == "undefined"){
						myObj=undefined;
						break;
					};
					myObj=myObj[p];
				}

				if(typeof(myObj) == "undefined"){
					return;		// like "continue"
				}
				if(typeof(myObj[name]) == "undefined" && this.ignoreNullValues){
					return;		// like "continue"
				}

				// TODO: widget values (just call set('value', ...) on the widget)

				// TODO: maybe should call dojo.getNodeProp() instead
				switch(element.type){
					case "checkbox":
						element.checked = (name in myObj) &&
							array.some(myObj[name], function(val){ return val == element.value; });
						break;
					case "radio":
						element.checked = (name in myObj) && myObj[name] == element.value;
						break;
					case "select-multiple":
						element.selectedIndex=-1;
						array.forEach(element.options, function(option){
							option.selected = array.some(myObj[name], function(val){ return option.value == val; });
						});
						break;
					case "select-one":
						element.selectedIndex="0";
						array.forEach(element.options, function(option){
							option.selected = option.value == myObj[name];
						});
						break;
					case "hidden":
					case "text":
					case "textarea":
					case "password":
						element.value = myObj[name] || "";
						break;
				}
	  		});
	  		*/

			// Note: no need to call this._set("value", ...) as the child updates will trigger onChange events
			// which I am monitoring.
		},

		getValues: function(){
			kernel.deprecated(this.declaredClass+"::getValues() is deprecated. Use get('value') instead.", "", "2.0");
			return this.get('value');
		},
		_getValueAttr: function(){
			// summary:
			// 		Returns Object representing form values.   See description of `value` for details.
			// description:

			// The value is updated into this.value every time a child has an onChange event,
			// so in the common case this function could just return this.value.   However,
			// that wouldn't work when:
			//
			// 1. User presses return key to submit a form.  That doesn't fire an onchange event,
			// and even if it did it would come too late due to the setTimeout(..., 0) in _handleOnChange()
			//
			// 2. app for some reason calls this.get("value") while the user is typing into a
			// form field.   Not sure if that case needs to be supported or not.

			// get widget values
			var obj = { };
			array.forEach(this._getDescendantFormWidgets(), function(widget){
				var name = widget.name;
				if(!name || widget.disabled){ return; }

				// Single value widget (checkbox, radio, or plain <input> type widget)
				var value = widget.get('value');

				// Store widget's value(s) as a scalar, except for checkboxes which are automatically arrays
				if(typeof widget.checked == 'boolean'){
					if(/Radio/.test(widget.declaredClass)){
						// radio button
						if(value !== false){
							lang.setObject(name, value, obj);
						}else{
							// give radio widgets a default of null
							value = lang.getObject(name, false, obj);
							if(value === undefined){
								lang.setObject(name, null, obj);
							}
						}
					}else{
						// checkbox/toggle button
						var ary=lang.getObject(name, false, obj);
						if(!ary){
							ary=[];
							lang.setObject(name, ary, obj);
						}
						if(value !== false){
							ary.push(value);
						}
					}
				}else{
					var prev=lang.getObject(name, false, obj);
					if(typeof prev != "undefined"){
						if(lang.isArray(prev)){
							prev.push(value);
						}else{
							lang.setObject(name, [prev, value], obj);
						}
					}else{
						// unique name
						lang.setObject(name, value, obj);
					}
				}
			});

			/***
			 * code for plain input boxes (see also domForm.formToObject, can we use that instead of this code?
			 * but it doesn't understand [] notation, presumably)
			var obj = { };
			array.forEach(this.containerNode.elements, function(elm){
				if(!elm.name)	{
					return;		// like "continue"
				}
				var namePath = elm.name.split(".");
				var myObj=obj;
				var name=namePath[namePath.length-1];
				for(var j=1,len2=namePath.length;j<len2;++j){
					var nameIndex = null;
					var p=namePath[j - 1];
					var nameA=p.split("[");
					if(nameA.length > 1){
						if(typeof(myObj[nameA[0]]) == "undefined"){
							myObj[nameA[0]]=[ ];
						} // if
						nameIndex=parseInt(nameA[1]);
						if(typeof(myObj[nameA[0]][nameIndex]) == "undefined"){
							myObj[nameA[0]][nameIndex] = { };
						}
					}else if(typeof(myObj[nameA[0]]) == "undefined"){
						myObj[nameA[0]] = { }
					} // if

					if(nameA.length == 1){
						myObj=myObj[nameA[0]];
					}else{
						myObj=myObj[nameA[0]][nameIndex];
					} // if
				} // for

				if((elm.type != "select-multiple" && elm.type != "checkbox" && elm.type != "radio") || (elm.type == "radio" && elm.checked)){
					if(name == name.split("[")[0]){
						myObj[name]=elm.value;
					}else{
						// can not set value when there is no name
					}
				}else if(elm.type == "checkbox" && elm.checked){
					if(typeof(myObj[name]) == 'undefined'){
						myObj[name]=[ ];
					}
					myObj[name].push(elm.value);
				}else if(elm.type == "select-multiple"){
					if(typeof(myObj[name]) == 'undefined'){
						myObj[name]=[ ];
					}
					for(var jdx=0,len3=elm.options.length; jdx<len3; ++jdx){
						if(elm.options[jdx].selected){
							myObj[name].push(elm.options[jdx].value);
						}
					}
				} // if
				name=undefined;
			}); // forEach
			***/
			return obj;
		},

	 	isValid: function(){
	 		// summary:
	 		//		Returns true if all of the widgets are valid.
			//		Deprecated, will be removed in 2.0.  Use get("state") instead.

			return this.state == "";
		},

		onValidStateChange: function(/*Boolean*/ /*===== isValid =====*/){
			// summary:
			//		Stub function to connect to if you want to do something
			//		(like disable/enable a submit button) when the valid
			//		state changes on the form as a whole.
			//
			//		Deprecated.  Will be removed in 2.0.  Use watch("state", ...) instead.
		},

		_getState: function(){
			// summary:
			//		Compute what this.state should be based on state of children
			var states = array.map(this._descendants, function(w){
				return w.get("state") || "";
			});

			return array.indexOf(states, "Error") >= 0 ? "Error" :
				array.indexOf(states, "Incomplete") >= 0 ? "Incomplete" : "";
		},

		disconnectChildren: function(){
			// summary:
			//		Remove connections to monitor changes to children's value, error state, and disabled state,
			//		in order to update Form.value and Form.state.
			array.forEach(this._childConnections || [], lang.hitch(this, "disconnect"));
			array.forEach(this._childWatches || [], function(w){ w.unwatch(); });
		},

		connectChildren: function(/*Boolean*/ inStartup){
			// summary:
			//		Setup connections to monitor changes to children's value, error state, and disabled state,
			//		in order to update Form.value and Form.state.
			//
			//		You can call this function directly, ex. in the event that you
			//		programmatically add a widget to the form *after* the form has been
			//		initialized.

			var _this = this;

			// Remove old connections, if any
			this.disconnectChildren();

			this._descendants = this._getDescendantFormWidgets();

			// (Re)set this.value and this.state.   Send watch() notifications but not on startup.
			var set = inStartup ? function(name, val){ _this[name] = val; } : lang.hitch(this, "_set");
			set("value", this.get("value"));
			set("state", this._getState());

			// Monitor changes to error state and disabled state in order to update
			// Form.state
			var conns = (this._childConnections = []),
				watches = (this._childWatches = []);
			array.forEach(array.filter(this._descendants,
				function(item){ return item.validate; }
			),
			function(widget){
				// We are interested in whenever the widget changes validity state - or
				// whenever the disabled attribute on that widget is changed.
				array.forEach(["state", "disabled"], function(attr){
					watches.push(widget.watch(attr, function(){
						_this.set("state", _this._getState());
					}));
				});
			});

			// And monitor calls to child.onChange so we can update this.value
			var onChange = function(){
				// summary:
				//		Called when child's value or disabled state changes

				// Use setTimeout() to collapse value changes in multiple children into a single
				// update to my value.   Multiple updates will occur on:
				//	1. Form.set()
				//	2. Form.reset()
				//	3. user selecting a radio button (which will de-select another radio button,
				//		 causing two onChange events)
				if(_this._onChangeDelayTimer){
					clearTimeout(_this._onChangeDelayTimer);
				}
				_this._onChangeDelayTimer = setTimeout(function(){
					delete _this._onChangeDelayTimer;
					_this._set("value", _this.get("value"));
				}, 10);
			};
			array.forEach(
				array.filter(this._descendants, function(item){ return item.onChange; } ),
				function(widget){
					// When a child widget's value changes,
					// the efficient thing to do is to just update that one attribute in this.value,
					// but that gets a little complicated when a checkbox is checked/unchecked
					// since this.value["checkboxName"] contains an array of all the checkboxes w/the same name.
					// Doing simple thing for now.
					conns.push(_this.connect(widget, "onChange", onChange));

					// Disabling/enabling a child widget should remove it's value from this.value.
					// Again, this code could be more efficient, doing simple thing for now.
					watches.push(widget.watch("disabled", onChange));
				}
			);
		},

		startup: function(){
			this.inherited(arguments);

			// Initialize value and valid/invalid state tracking.  Needs to be done in startup()
			// so that children are initialized.
			this.connectChildren(true);

			// Make state change call onValidStateChange(), will be removed in 2.0
			this.watch("state", function(attr, oldVal, newVal){ this.onValidStateChange(newVal == ""); });
		},

		destroy: function(){
			this.disconnectChildren();
			this.inherited(arguments);
		}

	});
});

},
'dijit/BackgroundIframe':function(){
define("dijit/BackgroundIframe", [
	"require",			// require.toUrl
	".",	// to export dijit.BackgroundIframe
	"dojo/_base/config",
	"dojo/dom-construct", // domConstruct.create
	"dojo/dom-style", // domStyle.set
	"dojo/_base/lang", // lang.extend lang.hitch
	"dojo/on",
	"dojo/_base/sniff", // has("ie"), has("mozilla"), has("quirks")
	"dojo/_base/window" // win.doc.createElement
], function(require, dijit, config, domConstruct, domStyle, lang, on, has, win){

	// module:
	//		dijit/BackgroundIFrame

	// Flag for whether to create background iframe behind popups like Menus and Dialog.
	// A background iframe is useful to prevent problems with popups appearing behind applets/pdf files,
	// and is also useful on older versions of IE (IE6 and IE7) to prevent the "bleed through select" problem.
	// TODO: For 2.0, make this false by default.  Also, possibly move definition to has.js so that this module can be
	// conditionally required via  dojo/has!bgIfame?dijit/BackgroundIframe
	has.add("bgIframe", has("ie") || has("mozilla"));
	// summary:
	//		new dijit.BackgroundIframe(node)
	//		Makes a background iframe as a child of node, that fills
	//		area (and position) of node

	// TODO: remove _frames, it isn't being used much, since popups never release their
	// iframes (see [22236])
	var _frames = new function(){
		// summary:
		//		cache of iframes

		var queue = [];

		this.pop = function(){
			var iframe;
			if(queue.length){
				iframe = queue.pop();
				iframe.style.display="";
			}else{
				if(has("ie") < 9){
					var burl = config["dojoBlankHtmlUrl"] || require.toUrl("dojo/resources/blank.html") || "javascript:\"\"";
					var html="<iframe src='" + burl + "' role='presentation'"
						+ " style='position: absolute; left: 0px; top: 0px;"
						+ "z-index: -1; filter:Alpha(Opacity=\"0\");'>";
					iframe = win.doc.createElement(html);
				}else{
					iframe = domConstruct.create("iframe");
					iframe.src = 'javascript:""';
					iframe.className = "dijitBackgroundIframe";
					iframe.setAttribute("role", "presentation");
					domStyle.set(iframe, "opacity", 0.1);
				}
				iframe.tabIndex = -1; // Magic to prevent iframe from getting focus on tab keypress - as style didn't work.
			}
			return iframe;
		};

		this.push = function(iframe){
			iframe.style.display="none";
			queue.push(iframe);
		}
	}();


	dijit.BackgroundIframe = function(/*DomNode*/ node){
		// summary:
		//		For IE/FF z-index schenanigans. id attribute is required.
		//
		// description:
		//		new dijit.BackgroundIframe(node)
		//			Makes a background iframe as a child of node, that fills
		//			area (and position) of node

		if(!node.id){ throw new Error("no id"); }
		if(has("bgIframe")){
			var iframe = (this.iframe = _frames.pop());
			node.appendChild(iframe);
			if(has("ie")<7 || has("quirks")){
				this.resize(node);
				this._conn = on(node, 'resize', lang.hitch(this, function(){
					this.resize(node);
				}));
			}else{
				domStyle.set(iframe, {
					width: '100%',
					height: '100%'
				});
			}
		}
	};

	lang.extend(dijit.BackgroundIframe, {
		resize: function(node){
			// summary:
			// 		Resize the iframe so it's the same size as node.
			//		Needed on IE6 and IE/quirks because height:100% doesn't work right.
			if(this.iframe){
				domStyle.set(this.iframe, {
					width: node.offsetWidth + 'px',
					height: node.offsetHeight + 'px'
				});
			}
		},
		destroy: function(){
			// summary:
			//		destroy the iframe
			if(this._conn){
				this._conn.remove();
				this._conn = null;
			}
			if(this.iframe){
				_frames.push(this.iframe);
				delete this.iframe;
			}
		}
	});

	return dijit.BackgroundIframe;
});

},
'dijit/layout/TabController':function(){
require({cache:{
'url:dijit/layout/templates/_TabButton.html':"<div role=\"presentation\" data-dojo-attach-point=\"titleNode\" data-dojo-attach-event='onclick:onClick'>\n    <div role=\"presentation\" class='dijitTabInnerDiv' data-dojo-attach-point='innerDiv'>\n        <div role=\"presentation\" class='dijitTabContent' data-dojo-attach-point='tabContent'>\n        \t<div role=\"presentation\" data-dojo-attach-point='focusNode'>\n\t\t        <img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" data-dojo-attach-point='iconNode' />\n\t\t        <span data-dojo-attach-point='containerNode' class='tabLabel'></span>\n\t\t        <span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" data-dojo-attach-point='closeNode'\n\t\t        \t\tdata-dojo-attach-event='onclick: onClickCloseButton' role=\"presentation\">\n\t\t            <span data-dojo-attach-point='closeText' class='dijitTabCloseText'>[x]</span\n\t\t        ></span>\n\t\t\t</div>\n        </div>\n    </div>\n</div>\n"}});
define("dijit/layout/TabController", [
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.setSelectable
	"dojo/dom-attr", // domAttr.attr
	"dojo/dom-class", // domClass.toggle
	"dojo/i18n", // i18n.getLocalization
	"dojo/_base/lang", // lang.hitch lang.trim
	"./StackController",
	"../Menu",
	"../MenuItem",
	"dojo/text!./templates/_TabButton.html",
	"dojo/i18n!../nls/common"
], function(declare, dom, domAttr, domClass, i18n, lang, StackController, Menu, MenuItem, template){

/*=====
	var StackController = dijit.layout.StackController;
	var Menu = dijit.Menu;
	var MenuItem = dijit.MenuItem;
=====*/

	// module:
	//		dijit/layout/TabController
	// summary:
	// 		Set of tabs (the things with titles and a close button, that you click to show a tab panel).
	//		Used internally by `dijit.layout.TabContainer`.
        /* CURAM-FIX: Extend TabController to allow proper disabling of tab buttons. */
	var TabButton = declare("dijit.layout._TabButton", StackController.StackButton, {
		// summary:
		//		A tab (the thing you click to select a pane).
		// description:
		//		Contains the title of the pane, and optionally a close-button to destroy the pane.
		//		This is an internal widget and should not be instantiated directly.
		// tags:
		//		private

		// baseClass: String
		//		The CSS class applied to the domNode.
		baseClass: "dijitTab",

		// Apply dijitTabCloseButtonHover when close button is hovered
		cssStateNodes: {
			closeNode: "dijitTabCloseButton"
		},

		templateString: template,

		// Override _FormWidget.scrollOnFocus.
		// Don't scroll the whole tab container into view when the button is focused.
		scrollOnFocus: false,

		buildRendering: function(){
			this.inherited(arguments);

			dom.setSelectable(this.containerNode, false);
		},

		startup: function(){
			this.inherited(arguments);
			var n = this.domNode;

			// Required to give IE6 a kick, as it initially hides the
			// tabs until they are focused on.
			setTimeout(function(){
				n.className = n.className;
			}, 1);
		},
		
		_setCloseButtonAttr: function(/*Boolean*/ disp){
			// summary:
			//		Hide/show close button
			this._set("closeButton", disp);
			domClass.toggle(this.innerDiv, "dijitClosable", disp);
			this.closeNode.style.display = disp ? "" : "none";
			if(disp){
				var _nlsResources = i18n.getLocalization("dijit", "common");
				if(this.closeNode){
					domAttr.set(this.closeNode,"title", _nlsResources.itemClose);
				}
				// add context menu onto title button
				this._closeMenu = new Menu({
					id: this.id+"_Menu",
					dir: this.dir,
					lang: this.lang,
					textDir: this.textDir,
					targetNodeIds: [this.domNode]
				});

				this._closeMenu.addChild(new MenuItem({
					label: _nlsResources.itemClose,
					dir: this.dir,
					lang: this.lang,
					textDir: this.textDir,
					onClick: lang.hitch(this, "onClickCloseButton")
				}));
			}else{
				if(this._closeMenu){
					this._closeMenu.destroyRecursive();
					delete this._closeMenu;
				}
			}
		},
		_setLabelAttr: function(/*String*/ content){
			// summary:
			//		Hook for set('label', ...) to work.
			// description:
			//		takes an HTML string.
			//		Inherited ToggleButton implementation will Set the label (text) of the button;
			//		Need to set the alt attribute of icon on tab buttons if no label displayed
			this.inherited(arguments);
			if(!this.showLabel && !this.params.title){
				this.iconNode.alt = lang.trim(this.containerNode.innerText || this.containerNode.textContent || '');
			}
		},

		destroy: function(){
			if(this._closeMenu){
				this._closeMenu.destroyRecursive();
				delete this._closeMenu;
			}
			this.inherited(arguments);
		}
	});

	var TabController = declare("dijit.layout.TabController", StackController, {
		// summary:
		// 		Set of tabs (the things with titles and a close button, that you click to show a tab panel).
		//		Used internally by `dijit.layout.TabContainer`.
		// description:
		//		Lets the user select the currently shown pane in a TabContainer or StackContainer.
		//		TabController also monitors the TabContainer, and whenever a pane is
		//		added or deleted updates itself accordingly.
		// tags:
		//		private

		baseClass: "dijitTabController",

		templateString: "<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'></div>",

		// tabPosition: String
		//		Defines where tabs go relative to the content.
		//		"top", "bottom", "left-h", "right-h"
		tabPosition: "top",

		// buttonWidget: Constructor
		//		The tab widget to create to correspond to each page
		/* CURAM-FIX: use the Curam version of the button */
		// buttonWidget: TabButton,
		buttonWidget: "curam.widget._TabButton",
		
		/* CURAM-FIX: added function */
		startup: function() {
		  this.inherited(arguments);

                  /* CURAM-FIX: When child page is added, connect the function that will remove
                   * the tab control button when page is made invisible. */
                  this.connect(this, "onAddChild", function(page, insertIndex) {
                    var controller = this;
                    // store the page id for later use when positioning control buttons
                    page.controlButton._curamPageId = page.id;
                    // remove control button when the page is hiden,
                    // add it back when redisplayed
                    page.controlButton.connect(page.controlButton, "_setCuramVisibleAttr",
                        function() {
                          if (page.controlButton.curamVisible) {
                            // show button
                            // find the position at which to insert it
                            var actualChildIds = dojo.map(controller.getChildren(),
                                function(btn) { return btn._curamPageId; });
                            var tabWidgetId = curam.tab.getTabWidgetId(
                                curam.tab.getContainerTab(page.domNode));
                            var index = curam.util.TabNavigation.getInsertIndex(
                                tabWidgetId, actualChildIds, page.id);

                            // and display it
                            controller.addChild(page.controlButton, index);

                          } else {
                            // hide the button
                            var button = page.controlButton;
                            // only remove if not already removed
                            if (dojo.indexOf(controller.getChildren(), button) != -1) {
                              controller.removeChild(button);
                            }
                          }
                        });
                  });
                  /* END CURAM-FIX */
		},

		_rectifyRtlTabList: function(){
			// summary:
			//		For left/right TabContainer when page is RTL mode, rectify the width of all tabs to be equal, otherwise the tab widths are different in IE

			if(0 >= this.tabPosition.indexOf('-h')){ return; }
			if(!this.pane2button){ return; }

			var maxWidth = 0;
			for(var pane in this.pane2button){
				var ow = this.pane2button[pane].innerDiv.scrollWidth;
				maxWidth = Math.max(maxWidth, ow);
			}
			//unify the length of all the tabs
			for(pane in this.pane2button){
				this.pane2button[pane].innerDiv.style.width = maxWidth + 'px';
			}
		},

                /* CURAM-FIX: addition */
                /**
                 * Called whenever one of my child buttons is pressed in an attempt to select a page.
                 * @private
                 */
                onButtonClick: function(/*dijit._Widget*/ page) {
                  if (!page.controlButton.get("curamDisabled")) {
                    var container = dijit.byId(this.containerId);
                    container.selectChild(page);
                  }
                }
                /* END CURAM-FIX */

		
	});

	TabController.TabButton = TabButton;	// for monkey patching

	return TabController;
});

},
'dijit/_MenuBase':function(){
define("dijit/_MenuBase", [
	"./popup",
	"dojo/window",
	"./_Widget",
	"./_KeyNavContainer",
	"./_TemplatedMixin",
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.isDescendant domClass.replace
	"dojo/dom-attr",
	"dojo/dom-class", // domClass.replace
	"dojo/_base/lang", // lang.hitch
	"dojo/_base/array"	// array.indexOf
], function(pm, winUtils, _Widget, _KeyNavContainer, _TemplatedMixin,
	declare, dom, domAttr, domClass, lang, array){

/*=====
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _KeyNavContainer = dijit._KeyNavContainer;
=====*/

// module:
//		dijit/_MenuBase
// summary:
//		Base class for Menu and MenuBar

return declare("dijit._MenuBase",
	[_Widget, _TemplatedMixin, _KeyNavContainer],
{
	// summary:
	//		Base class for Menu and MenuBar

	// parentMenu: [readonly] Widget
	//		pointer to menu that displayed me
	parentMenu: null,

	// popupDelay: Integer
	//		number of milliseconds before hovering (without clicking) causes the popup to automatically open.
	popupDelay: 500,

	onExecute: function(){
		// summary:
		//		Attach point for notification about when a menu item has been executed.
		//		This is an internal mechanism used for Menus to signal to their parent to
		//		close them, because they are about to execute the onClick handler.  In
		//		general developers should not attach to or override this method.
		// tags:
		//		protected
	},

	onCancel: function(/*Boolean*/ /*===== closeAll =====*/){
		// summary:
		//		Attach point for notification about when the user cancels the current menu
		//		This is an internal mechanism used for Menus to signal to their parent to
		//		close them.  In general developers should not attach to or override this method.
		// tags:
		//		protected
	},

	_moveToPopup: function(/*Event*/ evt){
		// summary:
		//		This handles the right arrow key (left arrow key on RTL systems),
		//		which will either open a submenu, or move to the next item in the
		//		ancestor MenuBar
		// tags:
		//		private

		if(this.focusedChild && this.focusedChild.popup && !this.focusedChild.disabled){
			this.focusedChild._onClick(evt);
		}else{
			var topMenu = this._getTopMenu();
			if(topMenu && topMenu._isMenuBar){
				topMenu.focusNext();
			}
		}
	},

	_onPopupHover: function(/*Event*/ /*===== evt =====*/){
		// summary:
		//		This handler is called when the mouse moves over the popup.
		// tags:
		//		private

		// if the mouse hovers over a menu popup that is in pending-close state,
		// then stop the close operation.
		// This can't be done in onItemHover since some popup targets don't have MenuItems (e.g. ColorPicker)
		if(this.currentPopup && this.currentPopup._pendingClose_timer){
			var parentMenu = this.currentPopup.parentMenu;
			// highlight the parent menu item pointing to this popup
			if(parentMenu.focusedChild){
				parentMenu.focusedChild._setSelected(false);
			}
			parentMenu.focusedChild = this.currentPopup.from_item;
			parentMenu.focusedChild._setSelected(true);
			// cancel the pending close
			this._stopPendingCloseTimer(this.currentPopup);
		}
	},

	onItemHover: function(/*MenuItem*/ item){
		// summary:
		//		Called when cursor is over a MenuItem.
		// tags:
		//		protected

		// Don't do anything unless user has "activated" the menu by:
		//		1) clicking it
		//		2) opening it from a parent menu (which automatically focuses it)
		if(this.isActive){
			this.focusChild(item);
			if(this.focusedChild.popup && !this.focusedChild.disabled && !this.hover_timer){
				this.hover_timer = setTimeout(lang.hitch(this, "_openPopup"), this.popupDelay);
			}
		}
		// if the user is mixing mouse and keyboard navigation,
		// then the menu may not be active but a menu item has focus,
		// but it's not the item that the mouse just hovered over.
		// To avoid both keyboard and mouse selections, use the latest.
		if(this.focusedChild){
			this.focusChild(item);
		}
		this._hoveredChild = item;
	},

	_onChildBlur: function(item){
		// summary:
		//		Called when a child MenuItem becomes inactive because focus
		//		has been removed from the MenuItem *and* it's descendant menus.
		// tags:
		//		private
		this._stopPopupTimer();
		item._setSelected(false);
		// Close all popups that are open and descendants of this menu
		var itemPopup = item.popup;
		if(itemPopup){
			this._stopPendingCloseTimer(itemPopup);
			itemPopup._pendingClose_timer = setTimeout(function(){
				itemPopup._pendingClose_timer = null;
				if(itemPopup.parentMenu){
					itemPopup.parentMenu.currentPopup = null;
				}
				pm.close(itemPopup); // this calls onClose
			}, this.popupDelay);
		}
	},

	onItemUnhover: function(/*MenuItem*/ item){
		// summary:
		//		Callback fires when mouse exits a MenuItem
		// tags:
		//		protected

		if(this.isActive){
			this._stopPopupTimer();
		}
		if(this._hoveredChild == item){ this._hoveredChild = null; }
	},

	_stopPopupTimer: function(){
		// summary:
		//		Cancels the popup timer because the user has stop hovering
		//		on the MenuItem, etc.
		// tags:
		//		private
		if(this.hover_timer){
			clearTimeout(this.hover_timer);
			this.hover_timer = null;
		}
	},

	_stopPendingCloseTimer: function(/*dijit._Widget*/ popup){
		// summary:
		//		Cancels the pending-close timer because the close has been preempted
		// tags:
		//		private
		if(popup._pendingClose_timer){
			clearTimeout(popup._pendingClose_timer);
			popup._pendingClose_timer = null;
		}
	},

	_stopFocusTimer: function(){
		// summary:
		//		Cancels the pending-focus timer because the menu was closed before focus occured
		// tags:
		//		private
		if(this._focus_timer){
			clearTimeout(this._focus_timer);
			this._focus_timer = null;
		}
	},

	_getTopMenu: function(){
		// summary:
		//		Returns the top menu in this chain of Menus
		// tags:
		//		private
		for(var top=this; top.parentMenu; top=top.parentMenu);
		return top;
	},

	onItemClick: function(/*dijit._Widget*/ item, /*Event*/ evt){
		// summary:
		//		Handle clicks on an item.
		// tags:
		//		private

		// this can't be done in _onFocus since the _onFocus events occurs asynchronously
		if(typeof this.isShowingNow == 'undefined'){ // non-popup menu
			this._markActive();
		}

		this.focusChild(item);

		if(item.disabled){ return false; }

		if(item.popup){
			this._openPopup();
		}else{
			// before calling user defined handler, close hierarchy of menus
			// and restore focus to place it was when menu was opened
			this.onExecute();

			// user defined handler for click
			item.onClick(evt);
		}
	},

	_openPopup: function(){
		// summary:
		//		Open the popup to the side of/underneath the current menu item
		// tags:
		//		protected

		this._stopPopupTimer();
		var from_item = this.focusedChild;
		if(!from_item){ return; } // the focused child lost focus since the timer was started
		var popup = from_item.popup;
		if(popup.isShowingNow){ return; }
		if(this.currentPopup){
			this._stopPendingCloseTimer(this.currentPopup);
			pm.close(this.currentPopup);
		}
		popup.parentMenu = this;
		popup.from_item = from_item; // helps finding the parent item that should be focused for this popup
		var self = this;
		pm.open({
			parent: this,
			popup: popup,
			around: from_item.domNode,
			orient: this._orient || ["after", "before"],
			onCancel: function(){ // called when the child menu is canceled
				// set isActive=false (_closeChild vs _cleanUp) so that subsequent hovering will NOT open child menus
				// which seems aligned with the UX of most applications (e.g. notepad, wordpad, paint shop pro)
				self.focusChild(from_item);	// put focus back on my node
				self._cleanUp();			// close the submenu (be sure this is done _after_ focus is moved)
				from_item._setSelected(true); // oops, _cleanUp() deselected the item
				self.focusedChild = from_item;	// and unset focusedChild
			},
			onExecute: lang.hitch(this, "_cleanUp")
		});

		this.currentPopup = popup;

		// detect mouseovers to handle lazy mouse movements that temporarily focus other menu items
		if(this.popupHoverHandle){
			this.disconnect(this.popupHoverHandle);
		}
		this.popupHoverHandle = this.connect(popup.domNode, "onmouseenter", "_onPopupHover");

		if(popup.focus){
			// If user is opening the popup via keyboard (right arrow, or down arrow for MenuBar),
			// if the cursor happens to collide with the popup, it will generate an onmouseover event
			// even though the mouse wasn't moved.  Use a setTimeout() to call popup.focus so that
			// our focus() call overrides the onmouseover event, rather than vice-versa.  (#8742)
			popup._focus_timer = setTimeout(lang.hitch(popup, function(){
				this._focus_timer = null;
				this.focus();
			}), 0);
		}
	},

	_markActive: function(){
		// summary:
		//		Mark this menu's state as active.
		//		Called when this Menu gets focus from:
		//			1) clicking it (mouse or via space/arrow key)
		//			2) being opened by a parent menu.
		//		This is not called just from mouse hover.
		//		Focusing a menu via TAB does NOT automatically set isActive
		//		since TAB is a navigation operation and not a selection one.
		//		For Windows apps, pressing the ALT key focuses the menubar
		//		menus (similar to TAB navigation) but the menu is not active
		//		(ie no dropdown) until an item is clicked.
		this.isActive = true;
		domClass.replace(this.domNode, "dijitMenuActive", "dijitMenuPassive");
	},

	onOpen: function(/*Event*/ /*===== e =====*/){
		// summary:
		//		Callback when this menu is opened.
		//		This is called by the popup manager as notification that the menu
		//		was opened.
		// tags:
		//		private

		this.isShowingNow = true;
		this._markActive();
	},

	_markInactive: function(){
		// summary:
		//		Mark this menu's state as inactive.
		this.isActive = false; // don't do this in _onBlur since the state is pending-close until we get here
		domClass.replace(this.domNode, "dijitMenuPassive", "dijitMenuActive");
	},

	onClose: function(){
		// summary:
		//		Callback when this menu is closed.
		//		This is called by the popup manager as notification that the menu
		//		was closed.
		// tags:
		//		private

		this._stopFocusTimer();
		this._markInactive();
		this.isShowingNow = false;
		this.parentMenu = null;
	},

	_closeChild: function(){
		// summary:
		//		Called when submenu is clicked or focus is lost.  Close hierarchy of menus.
		// tags:
		//		private
		this._stopPopupTimer();

		if(this.currentPopup){
			// If focus is on a descendant MenuItem then move focus to me,
			// because IE doesn't like it when you display:none a node with focus,
			// and also so keyboard users don't lose control.
			// Likely, immediately after a user defined onClick handler will move focus somewhere
			// else, like a Dialog.
			if(array.indexOf(this._focusManager.activeStack, this.id) >= 0){
				domAttr.set(this.focusedChild.focusNode, "tabIndex", this.tabIndex);
				this.focusedChild.focusNode.focus();
			}
			// Close all popups that are open and descendants of this menu
			pm.close(this.currentPopup);
			this.currentPopup = null;
		}

		if(this.focusedChild){ // unhighlight the focused item
			this.focusedChild._setSelected(false);
			this.focusedChild._onUnhover();
			this.focusedChild = null;
		}
	},

	_onItemFocus: function(/*MenuItem*/ item){
		// summary:
		//		Called when child of this Menu gets focus from:
		//			1) clicking it
		//			2) tabbing into it
		//			3) being opened by a parent menu.
		//		This is not called just from mouse hover.
		if(this._hoveredChild && this._hoveredChild != item){
			this._hoveredChild._onUnhover(); // any previous mouse movement is trumped by focus selection
		}
	},

	_onBlur: function(){
		// summary:
		//		Called when focus is moved away from this Menu and it's submenus.
		// tags:
		//		protected
		this._cleanUp();
		this.inherited(arguments);
	},

	_cleanUp: function(){
		// summary:
		//		Called when the user is done with this menu.  Closes hierarchy of menus.
		// tags:
		//		private

		this._closeChild(); // don't call this.onClose since that's incorrect for MenuBar's that never close
		if(typeof this.isShowingNow == 'undefined'){ // non-popup menu doesn't call onClose
			this._markInactive();
		}
	}
});

});

},
'curam/ModalUIMController':function(){
require({cache:{
'url:curam/layout/resources/ModalUIMController.html':"<div id=\"uimcontroller_${uid}\" class=\"uimcontroller_${uid} uimController ${classList}\" data-dojo-attach-point=\"uimController\">\r\n  <div style=\"display:none;\" \r\n       id=\"uimcontroller_tc_${uid}\" \r\n       class=\"ipnTabController in-page-nav-tabContainer\"\r\n       data-dojo-attach-point=\"tabController\" \r\n       data-dojo-type=\"curam.layout.TabContainer\">\r\n  </div>\r\n  <div class=\"contentPanelFrameWrapper3\"  \r\n        data-dojo-attach-point=\"frameWrapper\">\r\n    <iframe frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\"\r\n             allowTransparency=\"true\" \r\n             id=\"${iframeId}\" \r\n             data-dojo-attach-point=\"frame\"                 \r\n             class=\"${iframeId} ${iframeClassList}\"\r\n             iscpiframe=\"${iscpiframe}\"\r\n             title=\"${title}\" >\r\n    </iframe>\r\n    <span tabIndex=\"0\" class=\"hidden\" id=\"end-${uid}\">${endModalUIMController}</span>\r\n  </div> \r\n</div>"}});
/*
   * Licensed Materials - Property of IBM
   *
   * Copyright IBM Corporation 2012-2013. All Rights Reserved.
   *
   * US Government Users Restricted Rights - Use, duplication or disclosure
   * restricted by GSA ADP Schedule Contract with IBM Corp.
   */

    /*
     * Modification History
     * --------------------
     * 
     * 20-Feb-2014  AS [CR00414442] Added a method to be called on key down event of
     *                              end of modal span. This method sets the focus on help 
     *                              icon of modal title while doing tab navigation.   
     * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
     *                include required bundle. 
     * 13-Mar-2013  AF  [CR00373989]  Initial Version.
     */

  define("curam/ModalUIMController", ["dojo/text!curam/layout/resources/ModalUIMController.html",
  	  "dojo/parser",
          "curam/UIMController",
          "curam/debug",
          "curam/util/onLoad",
          "curam/util/ResourceBundle"
          ], function(parser) {
    
    /**
     * @name curam.ModalUIMController
     * @namespace Create and manage a widget that controls an IFRAME that is known
     * to load UIM pages in modal. The controller will handle official communications
     * from the modal IFRAME to the parent window using the event system.
     * This will bridge the gap created by security restrictions that stop parent
     * windows manipulating the content of IFRAMES they control.
     */
    
    /**
     * Creating Resource Bundle Object to access localized resources.
     */
    dojo.requireLocalization("curam.application", "Debug");
    var bundle = new curam.util.ResourceBundle("Debug");
    
    var ModalUIMController = dojo.declare("curam.ModalUIMController",
          [curam.UIMController],
    /**
     * @lends curam.ModalUIMController.prototype
     */
    {
      
      /**
       * This text is hidden, but is picked up by a screen reader. Indicates the start of a modal.
       */
      startModalUIMController: LOCALISED_ACCESSIBILITY_MODAL_START,
      
      /**
       * This text is hidden, but is picked up by a screen reader. Indicates the end of a modal.
       */
      endModalUIMController: LOCALISED_ACCESSIBILITY_MODAL_END,
      
      templateString: "<div id=\"uimcontroller_${uid}\" class=\"uimcontroller_${uid} uimController ${classList}\" data-dojo-attach-point=\"uimController\">\r\n  <div style=\"display:none;\" \r\n       id=\"uimcontroller_tc_${uid}\" \r\n       class=\"ipnTabController in-page-nav-tabContainer\"\r\n       data-dojo-attach-point=\"tabController\" \r\n       data-dojo-type=\"curam.layout.TabContainer\">\r\n  </div>\r\n  <div class=\"contentPanelFrameWrapper\"  \r\n        data-dojo-attach-point=\"frameWrapper\">\r\n     <iframe frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\"\r\n             allowTransparency=\"true\" \r\n             id=\"${iframeId}\" \r\n             data-dojo-attach-point=\"frame\"                 \r\n             class=\"${iframeId} ${iframeClassList}\"\r\n             iscpiframe=\"${iscpiframe}\"\r\n             title=\"${title}\" >\r\n    </iframe>\r\n    <span onkeyDown=\"curam.util.focusHelpIconOnTab(event)\" tabIndex=\"0\" class=\"hidden\" id=\"end-${uid}\">${endModalUIMController}</span>\r\n  </div> \r\n</div>"
    });

    return ModalUIMController;
  });

},
'dijit/layout/ScrollingTabController':function(){
require({cache:{
'url:dijit/layout/templates/ScrollingTabController.html':"<div class=\"dijitTabListContainer-${tabPosition} tabStrip-disabled dijitLayoutContainer\"><!-- CURAM-FIX: removed style=\"visibility:hidden, dd the tabStrip-disabled class by default.\" -->\r\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerMenuButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_menuBtn\"\r\n\t\t\tdata-dojo-props=\"containerId: '${containerId}', iconClass: 'dijitTabStripMenuIcon',\r\n\t\t\t\t\tdropDownPosition: ['below-alt', 'above-alt']\"\r\n\t\t\tdata-dojo-attach-point=\"_menuBtn\" showLabel=\"false\" title=\"\">&#9660;</div>\r\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_leftBtn\"\r\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideLeftIcon', showLabel:false, title:''\"\r\n\t\t\tdata-dojo-attach-point=\"_leftBtn\" data-dojo-attach-event=\"onClick: doSlideLeft\">&#9664;</div>\r\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_rightBtn\"\r\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideRightIcon', showLabel:false, title:''\"\r\n\t\t\tdata-dojo-attach-point=\"_rightBtn\" data-dojo-attach-event=\"onClick: doSlideRight\">&#9654;</div>\r\n\t<div class='dijitTabListWrapper dijitTabContainerTopNone dijitAlignClient' data-dojo-attach-point='tablistWrapper'>\r\n\t\t<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'\r\n\t\t\t\tdata-dojo-attach-point='containerNode' class='nowrapTabStrip dijitTabContainerTop-tabs'></div>\r\n\t</div>\r\n</div>\r\n",
'url:dijit/layout/templates/_ScrollingTabControllerButton.html':"<div data-dojo-attach-event=\"onclick:_onClick\">\n\t<div role=\"presentation\" class=\"dijitTabInnerDiv\" data-dojo-attach-point=\"innerDiv,focusNode\">\n\t\t<div role=\"presentation\" class=\"dijitTabContent dijitButtonContents\" data-dojo-attach-point=\"tabContent\">\n\t\t\t<img role=\"presentation\" alt=\"\" src=\"${_blankGif}\" class=\"dijitTabStripIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t\t<span data-dojo-attach-point=\"containerNode,titleNode\" class=\"dijitButtonText\"></span>\n\t\t</div>\n\t</div>\n</div>"}});
define("dijit/layout/ScrollingTabController", [
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.add domClass.contains
	"dojo/dom-geometry", // domGeometry.contentBox
	"dojo/dom-style", // domStyle.style
	"dojo/_base/fx", // Animation
	"dojo/_base/lang", // lang.hitch
	"dojo/query", // query
	"dojo/_base/sniff", // has("ie"), has("webkit"), has("quirks")
	"../registry",	// registry.byId()
	"dojo/text!./templates/ScrollingTabController.html",
	"dojo/text!./templates/_ScrollingTabControllerButton.html",
	"./TabController",
	"./utils",	// marginBox2contextBox, layoutChildren
	"../_WidgetsInTemplateMixin",
	"../Menu",
	"../MenuItem",
	"../form/Button",
	"../_HasDropDown",
	"dojo/NodeList-dom" // NodeList.style
], function(array, declare, domClass, domGeometry, domStyle, fx, lang, query, has,
	registry, tabControllerTemplate, buttonTemplate, TabController, layoutUtils, _WidgetsInTemplateMixin,
	Menu, MenuItem, Button, _HasDropDown){

/*=====
var _WidgetsInTemplateMixin = dijit._WidgetsInTemplateMixin;
var Menu = dijit.Menu;
var _HasDropDown = dijit._HasDropDown;
var TabController = dijit.layout.TabController;
=====*/


// module:
//		dijit/layout/ScrollingTabController
// summary:
//		Set of tabs with left/right arrow keys and a menu to switch between tabs not
//		all fitting on a single row.

/* CURAM-FIX: Performance fixes and extension to support for disabling and hiding tabs */
var ScrollingTabController = declare("dijit.layout.ScrollingTabController", [TabController, _WidgetsInTemplateMixin], {
	// summary:
	//		Set of tabs with left/right arrow keys and a menu to switch between tabs not
	//		all fitting on a single row.
	//		Works only for horizontal tabs (either above or below the content, not to the left
	//		or right).
	// tags:
	//		private

	baseClass: "dijitTabController dijitScrollingTabController",

	templateString: tabControllerTemplate,

	// useMenu: [const] Boolean
	//		True if a menu should be used to select tabs when they are too
	//		wide to fit the TabContainer, false otherwise.
	useMenu: true,

	// useSlider: [const] Boolean
	//		True if a slider should be used to select tabs when they are too
	//		wide to fit the TabContainer, false otherwise.
	useSlider: true,

	// tabStripClass: [const] String
	//		The css class to apply to the tab strip, if it is visible.
	tabStripClass: "",

	widgetsInTemplate: true,

	// _minScroll: Number
	//		The distance in pixels from the edge of the tab strip which,
	//		if a scroll animation is less than, forces the scroll to
	//		go all the way to the left/right.
	_minScroll: 5,

	// Override default behavior mapping class to DOMNode
	_setClassAttr: { node: "containerNode", type: "class" },
	
       /* CURAM-FIX: added class member variable */
	_tabsWidth: -1,

	/* CURAM-FIX: added class member variable */
       _tablistMenuItemIdSuffix: "_stcMi",

	buildRendering: function(){
		this.inherited(arguments);
		var n = this.domNode;

		this.scrollNode = this.tablistWrapper;
		this._initButtons();

		if(!this.tabStripClass){
			this.tabStripClass = "dijitTabContainer" +
				this.tabPosition.charAt(0).toUpperCase() +
				this.tabPosition.substr(1).replace(/-.*/, "") +
				"None";
			domClass.add(n, "tabStrip-disabled")
		}

		domClass.add(this.tablistWrapper, this.tabStripClass);
	},

	onStartup: function(){
		this.inherited(arguments);

		// TabController is hidden until it finishes drawing, to give
		// a less visually jumpy instantiation.   When it's finished, set visibility to ""
		// to that the tabs are hidden/shown depending on the container's visibility setting.

		/* CURAM-FIX: don't touch visibility - this is slow in IE7
		 * this goes with a change in the HTML template, which now doesn't set
		 * visibility: hidden */
		// domStyle.set(this.domNode, "visibility", "");

		this._postStartup = true;
	},

	onAddChild: function(page, insertIndex){
		this.inherited(arguments);

		/* CURAM-FIX: addition */
		var pageID = page.id;
		// When a child is added, the size cache should be invalidated
		this.bustSizeCache = true;
		this._tabsWidth = -1;
		/* END CURAM-FIX */
		
		// changes to the tab button label or iconClass will have changed the width of the
		// buttons, so do a resize
		array.forEach(["label", "iconClass"], function(attr){
			this.pane2watches[page.id].push(
				this.pane2button[page.id].watch(attr, lang.hitch(this, function(){
					if(this._postStartup && this._dim){
						this.resize(this._dim);
					}
		                        /* CURAM-FIX: addition */
		                        if (this._dim){
		                          // When a label is changed, the size cache should be invalidated
		                          this.bustSizeCache = true;
		                          this._tabsWidth = -1;
		                          // Clear the cached width of a button
		                          this.pane2button[pageID].domNode._width = 0;
		                        }
		                        /* END CURAM-FIX */
				}))
			);
		}, this);

		/* CURAM-FIX: addition to enable tab hiding/disabling
		 * because this function has been created as a local variable, "this" has
		 * to be passed as a parameter. See calls to getMenuItem below.
		 * TODO: why was this created as a local variable? Can the function be
		 * attached to the class? Or should we hitch it in the class below?
		 * For now, "this" will be supplied as a parameter. Lowest risk change.
		 */
		    var getMenuItem = function(pid, theRealThis) {
		      var menuItem = null;
		      if (theRealThis._menuBtn.dropDown) {
		        var menuItemNode = dojo.query(pid + theRealThis._tablistMenuItemIdSuffix,
		            theRealThis._menuBtn.dropDown.domNode)[0];
		        if (menuItemNode) {
		          menuItem = dijit.byNode(menuItemNode);
		        }
		      }
		      return menuItem;
		    };

		    // update the menuItem visibility when the button visibility is updated
		    this.pane2button[pageID].connect(this.pane2button[pageID], "_setCuramVisibleAttr",
		      lang.hitch(this, function() {
		        //alert("visibility changed for "+page.id+", new value is: " + visible);
		        var menuItem = getMenuItem(pageID, this);
		        if(menuItem) {
		          this._setCuramVisibility(menuItem, pageID);
		        }
		      }));

		    // update the menuItem availability when the button availability is updated
		    this.pane2button[pageID].connect(this.pane2button[pageID], "_setCuramDisabledAttr", lang.hitch(this, function() {
		      // alert("availability changed for "+page.id+", new value is: " + enabled);
		      // getMenuItem
		      var menuItem = getMenuItem(pageID, this);
		      if(menuItem) {
		        this._setCuramAvailability(menuItem, pageID);
		      }
		    }));
		/* END CURAM-FIX */

		// Increment the width of the wrapper when a tab is added
		// This makes sure that the buttons never wrap.
		// The value 200 is chosen as it should be bigger than most
		// Tab button widths.
		domStyle.set(this.containerNode, "width",
			(domStyle.get(this.containerNode, "width") + 200) + "px");
	},

	/* CURAM-FIX: added functions needed by Curam specific code */    
	_setCuramVisibility: function(menuItem, pageId) {
	      var visible = this.pane2button[pageId].curamVisible;
	      if (visible) {
	        dojo.replaceClass(menuItem.domNode, "visible", "hidden");
	      } else {
	        dojo.replaceClass(menuItem.domNode, "hidden", "visible");
	      }
	    },

	    _setCuramAvailability: function(menuItem, pageId) {
	      var enabled = !this.pane2button[pageId].curamDisabled;
	          menuItem.disabled = !enabled;
	          if (enabled) {
	            dojo.replaceClass(menuItem.domNode, "enabled", "disabled");

	          } else {
	            dojo.replaceClass(menuItem.domNode, "disabled", "enabled");
	          }
	    },
	    
	    /**
	     * Checks if we have cached the width for this node, and returns it if so
	     * Otherwise measures the width.
	     * @param node The node to measure.
	     * @returns The node width.
	     */
	    _getNodeWidth: function(node) {
	      if(!node._width){
	        node._width = dojo.style(node, "width");
	      }
	      return node._width;
	    },

	    destroyRendering: function(preserveDom) {
	      array.forEach(this._attachPoints, function (point) {
	        delete this[point];
	      }, this);
	      this._attachPoints = [];
	      array.forEach(this._attachEvents, this.disconnect, this);
	      this.attachEvents = [];
	    },
	    
	    destroy: function() {
	      if (this._menuBtn) {
	        this._menuBtn._curamOwnerController = null;
	      }
	      
	      this.inherited(arguments);
	    },
	/* END CURAM-FIX */

	onRemoveChild: function(page, insertIndex){
		// null out _selectedTab because we are about to delete that dom node
		var button = this.pane2button[page.id];
		if(this._selectedTab === button.domNode){
			this._selectedTab = null;
		}

		this.inherited(arguments);
		/* CURAM-FIX: addition */
		// When a child is removed, the size cache should be invalidated
		this.bustSizeCache = true;
		this._tabsWidth = -1;
		/* END CURAM-FIX */
	},

	_initButtons: function(){
		// summary:
		//		Creates the buttons used to scroll to view tabs that
		//		may not be visible if the TabContainer is too narrow.

		// Make a list of the buttons to display when the tab labels become
		// wider than the TabContainer, and hide the other buttons.
		// Also gets the total width of the displayed buttons.
		/* CURAM-FIX: subscription to the tab title setting event to adjust the tab 
		   scroll buttons subsequently */
		this.subscribe("tab.title.name.finished", this._measureBtns);
		/* END CURAM-FIX */
		this._btnWidth = 0;
		this._buttons = query("> .tabStripButton", this.domNode).filter(function(btn){
			if((this.useMenu && btn == this._menuBtn.domNode) ||
				(this.useSlider && (btn == this._rightBtn.domNode || btn == this._leftBtn.domNode))){
		                /* CURAM-FIX: replace next line to use getMarginBoxSimple() */
                                // this._btnWidth += domGeometry.getMarginSize(btn).w;
		                this._btnWidth += domGeometry.getMarginBoxSimple(btn).w;
				return true;
			}else{
				domStyle.set(btn, "display", "none");
				return false;
			}
		}, this);
		
		/* CURAM-FIX: addition next line */
	      this._menuBtn._curamOwnerController = this;
	},

	_getTabsWidth: function(){
	      /* CURAM-FIX: addition */
	      if(this._tabsWidth > -1){
	        return this._tabsWidth;
	      }
	      /* END CURAM-FIX */
	      
		var children = this.getChildren();
		if(children.length){
			var /* CURAM-FIX: comment this out: leftTab = children[this.isLeftToRight() ? 0 : children.length - 1].domNode, */
				rightTab = children[this.isLeftToRight() ? children.length - 1 : 0].domNode;
			/* CURAM-FIX: comment out the next line and replace with the next addition
                         * to remove one call to leftTab.offsetLeft */
			// return rightTab.offsetLeft + domStyle.get(rightTab, "width") - leftTab.offsetLeft;
	                var rightWidth = this._getNodeWidth(rightTab);
	                this._tabsWidth = rightTab.offsetLeft + rightWidth;
	                return this._tabsWidth;
	                /* END CURAM-FIX */
			
		}else{
			return 0;
		}
	},

	_enableBtn: function(width){
		// summary:
		//		Determines if the tabs are wider than the width of the TabContainer, and
		//		thus that we need to display left/right/menu navigation buttons.
		var tabsWidth = this._getTabsWidth();
		width = width || domStyle.get(this.scrollNode, "width");
		return tabsWidth > 0 && width < tabsWidth;
	},

	/* CURAM-FIX: additional method to re-measure tab controller to
    adjust tab scroll buttons	*/
	_measureBtns: function() {
      // summary:
	  // triggers controller size adjustment following tab name set to
	  // draw tab scrolling buttons once the correct width value is known.
	  if (this._enableBtn() && this._rightBtn.domNode.style.display == "none") {
	    this.resize(this._dim);
	    if (this.isLeftToRight()) {
	      this._rightBtn.set("disabled", true);
	    } else {
	      this._leftBtn.set("disabled", true);
		}
      }
	},
	/* END CURAM-FIX */

	/* CURAM-FIX: IE7 related optimizations to code around using the expensive
         * offsetWidth/offsetHeight calls
         */
	resize: function(dim){
		// summary:
		//		Hides or displays the buttons used to scroll the tab list and launch the menu
		//		that selects tabs.

    	      /* CURAM-FIX: addition - If there are no children, just hide the tab bar */
    	      if(dojo.query("> *", this.containerNode).length < 1){
    	        if(this.domNode.style.height != "1px"){
    	          dojo.style(this.domNode, "height", "1px");
    	        }
    	        return;
    	      }
    	      // If the width is the same, do nothing
    	      if(!this.bustSizeCache && this._dim && dim && this._dim.w == dim.w){
    	        return;
    	      }
    	      this.bustSizeCache = false;
    
    	      // curam.debug.log(bundle.getProperty("curam.dojo-hacks.msg"), this.domNode);
    	      this.scrollNodeHeight = this.scrollNodeHeight || this.scrollNode.offsetHeight;
    	      /* END CURAM_FIX */

	      // Save the dimensions to be used when a child is renamed.
		this._dim = dim;

		// Set my height to be my natural height (tall enough for one row of tab labels),
		// and my content-box width based on margin-box width specified in dim parameter.
		// But first reset scrollNode.height in case it was set by layoutChildren() call
		// in a previous run of this method.
		this.scrollNode.style.height = "auto";
		var cb = this._contentBox = layoutUtils.marginBox2contentBox(this.domNode, {h: 0, w: dim.w});
		/* CURAM-FIX: replace expensive call to offsetHeight */
                // cb.h = this.scrollNode.offsetHeight;
		cb.h = this.scrollNodeHeight;
		domGeometry.setContentSize(this.domNode, cb);

		// Show/hide the left/right/menu navigation buttons depending on whether or not they
		// are needed.
		var enable = this._enableBtn(this._contentBox.w);
		this._buttons.style("display", enable ? "" : "none");

		// Position and size the navigation buttons and the tablist
		this._leftBtn.layoutAlign = "left";
		this._rightBtn.layoutAlign = "right";
		this._menuBtn.layoutAlign = this.isLeftToRight() ? "right" : "left";
		      
		/* CURAM-FIX: replace the following statement*/ 
                //layoutUtils.layoutChildren(this.domNode, this._contentBox,
                //    [this._menuBtn, this._leftBtn, this._rightBtn, {domNode: this.scrollNode, layoutAlign: "client"}]);

                // fakeWidget property tells the layout code not to bother updating
	        // this JSON object with the widget size
	        var childDims;
	        if(enable){
	          childDims = dijit.layout.layoutChildren(this.domNode, this._contentBox,
	            [this._menuBtn, this._leftBtn, this._rightBtn,
	             {domNode: this.scrollNode, layoutAlign: "client", fakeWidget: true}]);
	        } else {
	          childDims = dijit.layout.layoutChildren(this.domNode, this._contentBox,
	            [{domNode: this.scrollNode, layoutAlign: "client", fakeWidget: true}]);
	        }
	        this.scrollNode._width = childDims.client.w;
	        /* END CURAM-FIX */

		// set proper scroll so that selected tab is visible
		if(this._selectedTab){
			if(this._anim && this._anim.status() == "playing"){
				this._anim.stop();
			}
			this.scrollNode.scrollLeft = this._convertToScrollLeft(this._getScrollForSelectedTab());
		}

		// Enable/disabled left right buttons depending on whether or not user can scroll to left or right
		this._setButtonClass(this._getScroll());

		this._postResize = true;

		// Return my size so layoutChildren() can use it.
		// Also avoids IE9 layout glitch on browser resize when scroll buttons present
		return {h: this._contentBox.h, w: dim.w};
	},

	_getScroll: function(){
		// summary:
		//		Returns the current scroll of the tabs where 0 means
		//		"scrolled all the way to the left" and some positive number, based on #
		//		of pixels of possible scroll (ex: 1000) means "scrolled all the way to the right"
		return (this.isLeftToRight() || has("ie") < 8 || (has("ie") && has("quirks")) || has("webkit")) ? this.scrollNode.scrollLeft :
				domStyle.get(this.containerNode, "width") - domStyle.get(this.scrollNode, "width")
					 + (has("ie") == 8 ? -1 : 1) * this.scrollNode.scrollLeft;
	},

	_convertToScrollLeft: function(val){
		// summary:
		//		Given a scroll value where 0 means "scrolled all the way to the left"
		//		and some positive number, based on # of pixels of possible scroll (ex: 1000)
		//		means "scrolled all the way to the right", return value to set this.scrollNode.scrollLeft
		//		to achieve that scroll.
		//
		//		This method is to adjust for RTL funniness in various browsers and versions.
		if(this.isLeftToRight() || has("ie") < 8 || (has("ie") && has("quirks")) || has("webkit")){
			return val;
		}else{
			var maxScroll = domStyle.get(this.containerNode, "width") - domStyle.get(this.scrollNode, "width");
			return (has("ie") == 8 ? -1 : 1) * (val - maxScroll);
		}
	},

	/* CURAM-FIX: Overriding this method to skip getting the scroll position
         * which can be expensive */
	onSelectChild: function(/*dijit._Widget*/ page){
		// summary:
		//		Smoothly scrolls to a tab when it is selected.

		var tab = this.pane2button[page.id];
		if(!tab || !page){return;}

		var node = tab.domNode;

		// Save the selection
		if(node != this._selectedTab){
			this._selectedTab = node;

			// Scroll to the selected tab, except on startup, when scrolling is handled in resize()
			if(this._postResize){
		          /* CURAM-FIX: addition Curam customized this to skip getting the scroll if not required */
		          var scrollNodeWidth = this._getNodeWidth(this.scrollNode);
		          if(this._getTabsWidth() < scrollNodeWidth){
		            tab.onClick(null);
		          } else {
		          /* END CURAM-FIX */
				var sl = this._getScroll();

				if(sl > node.offsetLeft ||
				                /* CURAM-FIX: replace following line */
						// sl + domStyle.get(this.scrollNode, "width") <
				                sl + scrollNodeWidth <
				                /* CURAM-FIX: replace following line */
						// node.offsetLeft + domStyle.get(node, "width")){
				                node.offsetLeft + this._getNodeWidth(node)) {
					this.createSmoothScroll().play();
				}
	                /* CURAM-FIX: addition */
	                }
                        /* END CURAM-FIX */
			}
		}

		this.inherited(arguments);
	},

	/* CURAM-FIX: Overriding this method to stop using offsetLeft and dojo.style calls
         * which can be expensive.
         */
	_getScrollBounds: function(){
		// summary:
		//		Returns the minimum and maximum scroll setting to show the leftmost and rightmost
		//		tabs (respectively)
		var children = this.getChildren(),
			/* CURAM-FIX: replace the style call in next two lines by faster function */
		        // scrollNodeWidth = domStyle.get(this.scrollNode, "width"),		// about 500px
			// containerWidth = domStyle.get(this.containerNode, "width"),	// 50,000px
		        scrollNodeWidth = this._getNodeWidth(this.scrollNode),     // about 500px
		        containerWidth = this._getNodeWidth(this.containerNode),   // 50,000px
		        /* END CURAM-FIX */
			maxPossibleScroll = containerWidth - scrollNodeWidth,	// scrolling until right edge of containerNode visible
			tabsWidth = this._getTabsWidth();

		if(children.length && tabsWidth > scrollNodeWidth){
			// Scrolling should happen
			return {
		                /* CURAM-FIX: replace following line */      
                                // min: this.isLeftToRight() ? 0 : children[children.length-1].domNode.offsetLeft,
		                min: this.isLeftToRight() ? 0 : this._getNodeWidth(children[children.length-1].domNode),
	                        /* CURAM-FIX: replace following line */      
				//max: this.isLeftToRight() ?
				//	(children[children.length-1].domNode.offsetLeft + domStyle.get(children[children.length-1].domNode, "width")) - scrollNodeWidth :
				//	maxPossibleScroll
		                max: this.isLeftToRight() ? tabsWidth - scrollNodeWidth : maxPossibleScroll
			};
		}else{
			// No scrolling needed, all tabs visible, we stay either scrolled to far left or far right (depending on dir)
			var onlyScrollPosition = this.isLeftToRight() ? 0 : maxPossibleScroll;
			return {
				min: onlyScrollPosition,
				max: onlyScrollPosition
			};
		}
	},

	_getScrollForSelectedTab: function(){
		// summary:
		//		Returns the scroll value setting so that the selected tab
		//		will appear in the center
		var w = this.scrollNode,
			n = this._selectedTab,
			scrollNodeWidth = domStyle.get(this.scrollNode, "width"),
			scrollBounds = this._getScrollBounds();

		// TODO: scroll minimal amount (to either right or left) so that
		// selected tab is fully visible, and just return if it's already visible?
		var pos = (n.offsetLeft + domStyle.get(n, "width")/2) - scrollNodeWidth/2;
		pos = Math.min(Math.max(pos, scrollBounds.min), scrollBounds.max);

		// TODO:
		// If scrolling close to the left side or right side, scroll
		// all the way to the left or right.  See this._minScroll.
		// (But need to make sure that doesn't scroll the tab out of view...)
		return pos;
	},

	createSmoothScroll: function(x){
		// summary:
		//		Creates a dojo._Animation object that smoothly scrolls the tab list
		//		either to a fixed horizontal pixel value, or to the selected tab.
		// description:
		//		If an number argument is passed to the function, that horizontal
		//		pixel position is scrolled to.  Otherwise the currently selected
		//		tab is scrolled to.
		// x: Integer?
		//		An optional pixel value to scroll to, indicating distance from left.

		// Calculate position to scroll to
		if(arguments.length > 0){
			// position specified by caller, just make sure it's within bounds
			var scrollBounds = this._getScrollBounds();
			x = Math.min(Math.max(x, scrollBounds.min), scrollBounds.max);
		}else{
			// scroll to center the current tab
			x = this._getScrollForSelectedTab();
		}

		if(this._anim && this._anim.status() == "playing"){
			this._anim.stop();
		}

		var self = this,
			w = this.scrollNode,
			anim = new fx.Animation({
				beforeBegin: function(){
					if(this.curve){ delete this.curve; }
					var oldS = w.scrollLeft,
						newS = self._convertToScrollLeft(x);
					anim.curve = new fx._Line(oldS, newS);
				},
				onAnimate: function(val){
					w.scrollLeft = val;
				}
			});
		this._anim = anim;

		// Disable/enable left/right buttons according to new scroll position
		this._setButtonClass(x);

		return anim; // dojo._Animation
	},

	_getBtnNode: function(/*Event*/ e){
		// summary:
		//		Gets a button DOM node from a mouse click event.
		// e:
		//		The mouse click event.
		var n = e.target;
		while(n && !domClass.contains(n, "tabStripButton")){
			n = n.parentNode;
		}
		return n;
	},

	doSlideRight: function(/*Event*/ e){
		// summary:
		//		Scrolls the menu to the right.
		// e:
		//		The mouse click event.
		this.doSlide(1, this._getBtnNode(e));
	},

	doSlideLeft: function(/*Event*/ e){
		// summary:
		//		Scrolls the menu to the left.
		// e:
		//		The mouse click event.
		this.doSlide(-1,this._getBtnNode(e));
	},

	doSlide: function(/*Number*/ direction, /*DomNode*/ node){
		// summary:
		//		Scrolls the tab list to the left or right by 75% of the widget width.
		// direction:
		//		If the direction is 1, the widget scrolls to the right, if it is
		//		-1, it scrolls to the left.

		if(node && domClass.contains(node, "dijitTabDisabled")){return;}

		var sWidth = domStyle.get(this.scrollNode, "width");
		var d = (sWidth * 0.75) * direction;

		var to = this._getScroll() + d;

		this._setButtonClass(to);

		this.createSmoothScroll(to).play();
	},

	_setButtonClass: function(/*Number*/ scroll){
		// summary:
		//		Disables the left scroll button if the tabs are scrolled all the way to the left,
		//		or the right scroll button in the opposite case.
		// scroll: Integer
		//		amount of horizontal scroll

		var scrollBounds = this._getScrollBounds();
		this._leftBtn.set("disabled", scroll <= scrollBounds.min);
		this._rightBtn.set("disabled", scroll >= scrollBounds.max);
	}
});


var ScrollingTabControllerButtonMixin = declare("dijit.layout._ScrollingTabControllerButtonMixin", null, {
	baseClass: "dijitTab tabStripButton",

	templateString: buttonTemplate,

		// Override inherited tabIndex: 0 from dijit.form.Button, because user shouldn't be
		// able to tab to the left/right/menu buttons
	tabIndex: "",

	// Similarly, override FormWidget.isFocusable() because clicking a button shouldn't focus it
	// either (this override avoids focus() call in FormWidget.js)
	isFocusable: function(){ return false; }
});
/*=====
ScrollingTabControllerButtonMixin = dijit.layout._ScrollingTabControllerButtonMixin;
=====*/

// Class used in template
declare("dijit.layout._ScrollingTabControllerButton",
	[Button, ScrollingTabControllerButtonMixin]);

// Class used in template
declare(
	"dijit.layout._ScrollingTabControllerMenuButton",
	[Button, _HasDropDown, ScrollingTabControllerButtonMixin],
{
	// id of the TabContainer itself
	containerId: "",

	// -1 so user can't tab into the button, but so that button can still be focused programatically.
	// Because need to move focus to the button (or somewhere) before the menu is hidden or IE6 will crash.
	tabIndex: "-1",

	isLoaded: function(){
		// recreate menu every time, in case the TabContainer's list of children (or their icons/labels) have changed
		return false;
	},

	loadDropDown: function(callback){
		this.dropDown = new Menu({
			id: this.containerId + "_menu",
			dir: this.dir,
			lang: this.lang,
			textDir: this.textDir
		});
		var container = registry.byId(this.containerId);
		array.forEach(container.getChildren(), function(page){
			var menuItem = new MenuItem({
				id: page.id + "_stcMi",
				label: page.title,
				iconClass: page.iconClass,
				dir: page.dir,
				lang: page.lang,
				textDir: page.textDir,
				onClick: function(){
					container.selectChild(page);
				}
			});
			this.dropDown.addChild(menuItem);
		}, this);
		
		/* CURAM-FIX: set the right visibility and availability
		 * on newly loaded menu items
		 */
                dojo.forEach(this.dropDown.getChildren(), lang.hitch(this, function(menuItem) {
                  var pageId = menuItem.id.split(
                      this._curamOwnerController._tablistMenuItemIdSuffix)[0];
                      this._curamOwnerController._setCuramAvailability(menuItem, pageId);
                      this._curamOwnerController._setCuramVisibility(menuItem, pageId);
                      dojo.connect(menuItem, "destroy", function() {
                        setDynState = null;
                      });
                }));		      
		/* END CURAM-FIX */
		
		callback();
	},

	closeDropDown: function(/*Boolean*/ focus){
		this.inherited(arguments);
		if(this.dropDown){
			this.dropDown.destroyRecursive();
			delete this.dropDown;
		}
	}
});

return ScrollingTabController;
});

},
'dijit/form/_ListMouseMixin':function(){
define("dijit/form/_ListMouseMixin", [
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/touch",
	"./_ListBase"
], function(declare, event, touch, _ListBase){

/*=====
var _ListBase = dijit.form._ListBase;
=====*/

// module:
//		dijit/form/_ListMouseMixin
// summary:
//		a mixin to handle mouse or touch events for a focus-less menu

return declare( "dijit.form._ListMouseMixin", _ListBase, {
	// summary:
	//		a Mixin to handle mouse or touch events for a focus-less menu
	//		Abstract methods that must be defined externally:
	//			onClick: item was chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)
	// tags:
	//		private

	postCreate: function(){
		this.inherited(arguments);
		this.connect(this.domNode, touch.press, "_onMouseDown");
		this.connect(this.domNode, touch.release, "_onMouseUp");
		this.connect(this.domNode, "onmouseover", "_onMouseOver");
		this.connect(this.domNode, "onmouseout", "_onMouseOut");
	},

	_onMouseDown: function(/*Event*/ evt){
		event.stop(evt);
		if(this._hoveredNode){
			this.onUnhover(this._hoveredNode);
			this._hoveredNode = null;
		}
		this._isDragging = true;
		this._setSelectedAttr(this._getTarget(evt));
	},

	_onMouseUp: function(/*Event*/ evt){
		event.stop(evt);
		this._isDragging = false;
		var selectedNode = this._getSelectedAttr();
		var target = this._getTarget(evt);
		var hoveredNode = this._hoveredNode;
		if(selectedNode && target == selectedNode){
			this.onClick(selectedNode);
		}else if(hoveredNode && target == hoveredNode){ // drag to select
			this._setSelectedAttr(hoveredNode);
			this.onClick(hoveredNode);
		}
	},

	_onMouseOut: function(/*Event*/ /*===== evt ====*/){
		if(this._hoveredNode){
			this.onUnhover(this._hoveredNode);
			if(this._getSelectedAttr() == this._hoveredNode){
				this.onSelect(this._hoveredNode);
			}
			this._hoveredNode = null;
		}
		if(this._isDragging){
			this._cancelDrag = (new Date()).getTime() + 1000; // cancel in 1 second if no _onMouseOver fires
		}
	},

	_onMouseOver: function(/*Event*/ evt){
		if(this._cancelDrag){
			var time = (new Date()).getTime();
			if(time > this._cancelDrag){
				this._isDragging = false;
			}
			this._cancelDrag = null;
		}
		var node = this._getTarget(evt);
		if(!node){ return; }
		if(this._hoveredNode != node){
			if(this._hoveredNode){
				this._onMouseOut({ target: this._hoveredNode });
			}
			if(node && node.parentNode == this.containerNode){
				if(this._isDragging){
					this._setSelectedAttr(node);
				}else{
					this._hoveredNode = node;
					this.onHover(node);
				}
			}
		}
	}
});

});

},
'url:dijit/form/templates/ValidationTextBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
'curam/util/Constants':function(){
/*
 * Copyright 2009-2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/Constants", ["curam/define"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 05-Jul-2011  KW  [CR00275353] Initial version
   */

  /**
   * Maintains a list of parameter name constants. 
   */
  curam.define.singleton("curam.util.Constants", {
    RETURN_PAGE_PARAM: "__o3rpu"
  });
  
  return curam.util.Constants;
});

},
'curam/tab/TabSessionManager':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*
 * Modification History
 * --------------------
 * 28-Sep-2013  BOS [CR00396277] Modified _connectSelectionListeners function to
 *                    ensure an undefined tab container handled correctly.
 * 23-Oct-2012  MV  [CR00347543] Refer to top level UIController.
 * 11-Sep-2012  MV  [CR00339639] Do not declare dependency on a dijit class
 *              to save time. Use local storage API from topmost window to avoid
 *              loading storage for every page.
 * 23-Aug-2012  BOS [CR00338361] Enabling support to set a maximum number of
 *                    tabs that can be open in an application.
 * 22-Feb-2012  KW  [TEC-9557]  When JSESSIONID is not available, it is always
 *                  presumed to be a new session.
 * 07-Feb-2012  MV  [CR00301458] Code cleanup - added missing semicolon.
 * 14-Dec-2011  KW  [TEC-8648]  Directly accessed URLs are now handled during
 *                              _restoreTabSession().
 * 26-Jan-2011  MV  [CR00244801] Fixed check for DEBUG flag.
 * 17-Jan-2011  PK  [CR00242982] Added error handling when the user home page
 *                    has not been configured correctly.
 * 15-Jan-2011  DG  [CR00242400] Wrapped local storage calls with utility method
 *                    that ensures proper storage initialization (I think).
 *                    Record selected tab when section is changed. Removed most
 *                    "requires", as they are handled by "cdej.js".
 * 12-Jan-2011  DG  [CR00238642] Added note to acknowledge that unnecessary
 *                    update events occur when the tab session is restored.
 * 17-Dec-2010  DG  [CR00239200] Fix to avoid losing the recorded selection.
 * 20-Aug-2010  DG  [CR00217921] Rewrote almost everything.
 * 28-Jul-2010  PK  [CR00211736] Updated due to re-factoring of
 *                    tab-app-controller.js and tab-app-common.js.
 * 23-Jun-2010  PK  [CR00203531] Updates due to new "page linking"
 *                    infrastructure to handle applications and sections.
 * 08-Dec-2009  MV  [CR00181267] Take on dojo v 1.4 - fix issues
 * 06-Nov-2009  SC  [CR00172239] Initial Version
 */

define("curam/tab/TabSessionManager", [
/* The following dependencies are commented out and left in place intentionally.
 * For performance reasons they are preloaded elsewhere, but this module still
 * depends on them, so this is why I prefer to leave them in place. They will
 * be uncommented again in future. */
        /* "dojox/encoding/digests/SHA1", */
        /* "dojox/storage", */
        /*"dojox/layout/ContentPane"*/
        "curam/util/ResourceBundle"
        ], function() {

/**
 * <p>
 * The tab session manager handles the list of open tabs. This includes picking
 * up when a new tab is created, a tab is updated or a tab is removed. It also
 * includes handling when a refresh even happens. Tabs are always represented
 * using a <code>curam.tab.TabDescriptor</code> object. See that class for
 * information about how tabs are represented.
 * </p>
 * <p>
 * One complication that the tab session manager has to deal with is the state
 * when there is no tab session to be restored. In this case, a tab descriptor
 * representing the user's home page is created and that is used as tab session
 * to be restored.
 * </p>
 * <p>
 * Sections are handled relatively transparently. The <code>UIController</code>
 * will add tabs to the correct section. The only contribution of the tab
 * session manager is to ensure that the correct tab in the correct section is
 * selected on restoration.
 * </p>
 * <p>
 * Except for the selected tab, tabs are opened in the background. Dojo's
 * content pane will only load the content of these background tabs when they
 * are selected by the user and brought into the foreground.
 * </p>
 */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");

  var TabSessionManager = dojo.declare("curam.tab.TabSessionManager", null, {
  /**
   * Determine if there are tabs already listed in the session and if so, open
   * them. If not, determine the open page and open it.
   */
  init: function(directBrowseURL) {
    // The ClientDataAccessor "getRaw" method will call back either to
    // "restoreTabSession" on success or to "handleGetTabFailure" on failure.
    // The "hitch" ensures that the call-back operates on the right object.
    if (directBrowseURL) {
      this._directBrowseURL = directBrowseURL;
    }
    new curam.ui.ClientDataAccessor().getRaw("/data/tab/get",
      dojo.hitch(this, this._restoreTabSession),
      dojo.hitch(this, this._handleGetTabFailure));
  },

  /**
   * If cannot get the list of tabs, most likely that the server is down. Output
   * an error message. Note: This is for IE only, as the result when a server is
   * down in Firefox is a 404 error.
   *
   * @param error The JavaScript Error object
   * @param ioargs Detailed information on the xhr request.
   *
   * @private
   */
  _handleGetTabFailure: function(error, ioargs) {
    var tabContainer = curam.tab.getTabContainer();
    var errorDetails = dojo.toJson(error);

    this._log(bundle.getProperty("curam.tab.TabSessionManager.error")
      + errorDetails);
    var tab = new dojox.layout.ContentPane({
      title: "Error",
      // TODO: Any reason why these are not closable? -- DG
      closable: true,
      content: "An error occurred. Try refreshing the browser or contact your "
               + "administrator if it persists. Error: " + error.message
    });
    tabContainer.addChild(tab);
  },

  /**
   * <p>
   * Restore the tabs from the saved session. They are supplied as an array of
   * strings that can be parsed to re-create the <code>TabDescriptor</code>
   * objects that gave rise to them originally.
   * </p>
   * <p>
   * When a session is refreshed, the tabs are restored to the same state as
   * before with the same selected tab. When a new session is started, either
   * when a user logs out and logs in again or the old session times out, the
   * tabs are restored, but the home tab is selected. If no selected tab can be
   * found when refreshing, the home tab will also be selected. If no home tab
   * is recorded in the session, the user's home tab will be opened in addition
   * to the restored tabs.
   * </p>
   * <p>
   * The home page is a special case, as, in the event that no stored tab
   * session is found, the home page must be opened in its tab. A tab descriptor
   * for this tab is created separately and injected into the list of other
   * tabs to be opened (if any).
   * </p>
   *
   * @param {Array} sessionTabs The object holding the array of tab descriptor
   *   JSON strings in the "tabs" property. These strings need to be parsed to
   *   <code>TabDescriptor</code> objects.
   * @param ioargs (Something to do with the XHR request. Not used.)
   * @private
   */
  _restoreTabSession: function(sessionTabs, ioargs) {
    // Tabs to be opened in the current section. One of these will be selected.
    var currentSectionTabs = [];
    // Tabs to be opened in other sections. All of these will be opened in the
    // background after the tabs in the current section has been dealt with.
    var otherSectionTabs = [];
    // The section IDs are collected to allow the tab containers to be set up
    // for the selection event handlers.
    var allSectionIDs = [];

    curam.tab.getTabController().MAX_NUM_TABS = sessionTabs.maxTabs;
    // Is this a refresh of the current session or a new session? Get the
    // previously selected tab if the session is the same.
    var isNewSession = this._isNewSession();
    var selectedTD = isNewSession ? null : this._getPrevSelectedTab();

    // If there was no previously selected tab, or we do not want to use it for
    // a new session, choose the home tab (and consequently its section). We
    // need to record which tab we are selecting in case we are changing it to
    // the home tab when it was not previously the home tab.
    var homeTD = this._getHomePageTab();
    selectedTD = selectedTD ? selectedTD : homeTD;
    this.tabSelected(selectedTD);

    // Just in case the home tab is in a section on its own and was not in the
    // session tabs....
    allSectionIDs[homeTD.sectionID] = true;

    if (sessionTabs && sessionTabs.tabs && sessionTabs.tabs.length > 0) {
      var tabs = sessionTabs.tabs;
      this._log(bundle.getProperty("curam.tab.TabSessionManager.previous")
          + tabs.length
          + " " + bundle.getProperty("curam.tab.TabSessionManager.tabs"));

      // Filter the tabs into two groups and remove the home page tab. We will
      // add it back in the correct position later. This ensures it is present
      // and correct in case it did not exist or was in the wrong position.
      for (var i = 0; i < tabs.length; i++) {
        var newTD = curam.tab.TabDescriptor.fromJson(tabs[i]);
        if (newTD.tabSignature == homeTD.tabSignature) {
          // Prefer the stored home page descriptor, as it will probably have a
          // proper title, unlike the tab descriptor we created.
          if (!isNewSession) {
            if (this._directBrowseURL) {
              selectedTD = newTD;
            } else {
              homeTD = newTD;
            }
          }
        } else {
          // Add other tabs to the "to do" lists.
          if (newTD.sectionID == selectedTD.sectionID) {
            currentSectionTabs.push(newTD);
          } else {
            otherSectionTabs.push(newTD);
          }
        }
        allSectionIDs[newTD.sectionID] = true;
      }

      // Put the home tab first in the correct group. It does not matter that
      // the "otherSectionTabs" are mixed together from different sections;
      // putting the home tab first in that list has the desired effect.
      if (homeTD.sectionID == selectedTD.sectionID) {
        currentSectionTabs.unshift(homeTD);
      } else {
        otherSectionTabs.unshift(homeTD);
      }
    } else {
      this._log(bundle.getProperty("curam.tab.TabSessionManager.no.session"));
      currentSectionTabs.push(homeTD);
    }

    // NOTE: Restoring tabs will trigger tab session update requests to the
    // server, even though the server has just supplied the same session data.
    // This may trigger unnecessary writes to the database when the "updated"
    // tab session data is rewritten, but that is not much of a problem (as
    // writes do not happen on every update) and it is quite difficult to avoid
    // doing it (especially with the potential introduction of a new home page
    // tab descriptor that *does* need to be recorded). Therefore, we let it
    // happen in the interest of simplicity.

    // Restore all the tabs. Do the section with the selected tab first, so
    // that the tabs in the other sections are loaded behind the scenes.
    this._restoreSectionTabs(currentSectionTabs, selectedTD);
    this._restoreSectionTabs(otherSectionTabs, null);
    this._selectedTD = selectedTD;

    // Only now do we connect the selection listeners. This prevents the
    // recorded selection from changing while the tabs were being restored.
    this._connectSelectionListeners(allSectionIDs);

    //When a page is directly requested by the user, the session is first
    //reloaded and then a request is sent for the requested page. This request
    //subscribes to the currently selected tab's main content loaded event. This
    //ensures the page will only be loaded after the session has been properly
    //restored. The call to 'goToUrl()' will determine if the page is to be
    //loaded in the currently selected tab, or in it's own tab.
    if (this._directBrowseURL) {

      //Closure to access 'this' in callback function later
      var dirBrowseCls = this._createDirectBrowseClosure();

      var topWin = curam.util.getTopmostWindow();
      var dirBrowseSub = topWin.dojo.subscribe(
                  "/curam/main-content/page/loaded",
                  null,
                  function(associatedPgID, associatedTabID) {

                    var that = dirBrowseCls.getThis();
                    var goToUrl = that._directBrowseURL;
                    var currentPgID = that._selectedTD.tabContent.pageID;

                    //After we request the page we need to update the stored
                    //value for the selected tab. We only want to request the
                    //page after the currently selected tab is finshed loading,
                    //we do not care about any other pontentaily open tabs.
                    if (associatedPgID === currentPgID) {
                      
                      require(["curam/util/Navigation"], function(nav) {
                        nav.goToUrl(goToUrl); //request page
                      });
                      
                      //Update tab description.
                      that._selectedTD.tabContent.pageID =
                                            goToUrl.replace(/Page.do\??.*/, '');
                      //Store updated value.
                      that.tabSelected(that._selectedTD);

                      //Unsubscribe as requested page will also cause content
                      //loaded event.
                      dojo.unsubscribe(dirBrowseSub);
                    }
                  });
    }
  },

  //A closure is required as we need access to 'this' in the load event
  //callback function despite the loss of scope.
  _createDirectBrowseClosure: function() {
    var that = this;
    return {
      getThis: function() {
        return that;
      }
    };
  },

  /**
   * Restores all of the tabs to their sections. If a selected tab is
   * identified, it will be opened in the foreground (the tab and its section
   * will be selected). All other tabs will be opened in the background.
   *
   * @param {Array} sectionTabs The tab descriptors for the tabs to be opened.
   * @param {curam.tab.TabDescriptor} selectedTD The tab descriptor of the tab
   *   to be opened in the foreground (selected).
   * @private
   */
  _restoreSectionTabs: function(sectionTabs, selectedTD) {
    // TODO: It might help make the trace messages more meaningful if the
    // position variable were corrected so that it related to the position
    // within each section, or even just in the overall list. -- DG
    this._log(bundle.getProperty("curam.tab.TabSessionManager.saved.tabs"));
    for (var i = 0; i < sectionTabs.length; i++) {
      var tabDescriptor = sectionTabs[i];
      this._log(bundle.getProperty("curam.tab.TabSessionManager.saved.tab"),
        tabDescriptor, i);
      dojo.publish(curam.tab.getTabController().TAB_TOPIC,
          [new curam.ui.OpenTabEvent(tabDescriptor, null,
              this._isOpenInBackground(tabDescriptor, selectedTD, i))]);
    }
  },

  /**
   * <p>
   * Connects all of the selection listeners to the tab containers. When a tab
   * is selected within a container, it will be recorded in local storage as
   * the currently selected tab. This allows it to be restored when the browser
   * is refreshed. This selection is not persisted across J2EE sessions, as the
   * home tab is always selected if a new J2EE session is started.
   * </p>
   * <p>
   * The selection listener is subscribed to the tab container widget's
   * "&lt;widget-id&gt;-selectChild" topic. This fires only once when a tab is
   * selected, whereas the "selectChild" event is fired twice and we do not
   * want that. (The event fires first when the user clicks the tab button and
   * again when the tab is brought into the foreground. The topic only fires
   * for the latter operation.)
   * </p>
   *
   * @param {Arrary} sectionIDs An array of the section IDs. The section IDs
   *   are the keys to the array values. The values are always "true".
   * @private
   */
  _connectSelectionListeners: function(sectionIDs) {
    var hasTabContainer = false;
    for (var sectionID in sectionIDs) {
      if (curam.tab.getTabContainer(sectionID)) {
        // The selected child tab content pane is passed to the listener
        // function.
        dojo.subscribe(curam.tab.getTabContainer(sectionID).id + "-selectChild",
          dojo.hitch(this, this.tabContentPaneSelected));
        hasTabContainer = true;
      }
    }

    // If the users changes the section, then the selected tab in that section
    // must be marked as the selected tab, otherwise the last explicitly
    // selected tab will not be changed. This would lead to the wrong tab being
    // selected after a refresh.
    dojo.subscribe(curam.tab.SECTION_TAB_CONTAINER_ID + "-selectChild",
        dojo.hitch(this, this.tabSectionSelected));
    return hasTabContainer;
  },

  /**
   * Invoked when a new tab is opened or when the content of an existing tab
   * is changed. This will add or update a record of this tab in the session.
   *
   * @param {curam.tab.TabDescriptor} tabDescriptor The descriptor of the tab
   *   to be saved to the session.
   */
  tabUpdated: function(tabDescriptor) {
    this._log(bundle.getProperty("curam.tab.TabSessionManager.saving.tab"),
      tabDescriptor);
    new curam.ui.ClientDataAccessor().set(
        "/data/tab/update", tabDescriptor.toJson());
  },

  /**
   * Invoked when a tab is closed. This will remove the tab from the session
   * (unless it is the first recorded tab, assumed to be the home page).
   *
   * @param {curam.tab.TabDescriptor} tabDescriptor The descriptor of the tab
   *   to be removed from the session.
   */
  tabClosed: function(tabDescriptor) {
    this._log(bundle.getProperty("curam.tab.TabSessionManager.tab.closed"),
      tabDescriptor);
    new curam.ui.ClientDataAccessor().set(
        "/data/tab/close", tabDescriptor.toJson());
  },

  /**
   * Store the currently selected tab ID in local storage. This will be used on
   * a refresh to determine the correct tab to select. This is called when a
   * tab is selected or when a new tab is opened and the loaded page calls
   * back to set its signature.
   *
   * @param {curam.tab.TabDescriptor} tabDescriptor The descriptor of the
   *   selected tab to be recorded in local storage.
   */
  tabSelected: function(tabDescriptor) {
    this._log(bundle.getProperty("curam.tab.TabSessionManager.selected.tab"),
      tabDescriptor);

    if (tabDescriptor.tabSignature) {
      // Only set the selected tab when it has a signature, otherwise it cannot
      // be matched to a tab on restoration. A tab descriptor may have no
      // signature if the tab has just been created but the content page has
      // not loaded yet and called back to set the signature. If a tab is
      // selected again or restored, then it will have its stored signature.
      curam.util.runStorageFn(function() {
        var context = curam.util.getTopmostWindow().dojox;
        context.storage.put(curam.tab.TabSessionManager.SELECTED_TAB_KEY,
                          tabDescriptor.toJson());
      });
      this._log(bundle.getProperty("curam.tab.TabSessionManager.recorded"),
        tabDescriptor);
    } else {
      this._log(bundle.getProperty("curam.tab.TabSessionManager.not.recorded"),
                tabDescriptor);
    }
  },

  /**
   * Store the currently selected tab ID in dojo storage. This will be used on
   * a refresh to determine the correct tab to select. This is called when a
   * tab is selected and when a new tab is opened. The stored details are taken
   * from the tab content pane's "tabDescriptor" property.
   *
   * @param tabContentPane The tab content pane for the tab to be recorded as
   *   selected in local storage.
   */
  tabContentPaneSelected: function(tabContentPane) {
    if (tabContentPane.tabDescriptor) {
      this.tabSelected(tabContentPane.tabDescriptor);
    } else {
      // This cannot happen unless the code is broken...surely?
      this._log(
        bundle.getProperty("curam.tab.TabSessionManager.no.descriptor"));
    }
  },

  /**
   * Store the currently selected tab ID in dojo storage. This will be used on
   * a refresh to determine the correct tab to select. This is called when a
   * <i>section</i> tab is selected, thereby changing the apparently selected
   * tab. The stored details are taken from that section's selected tab's
   * content pane's "tabDescriptor" property.
   *
   * @param sectionTabContentPane The tab content pane of the section whose
   *   selected tab is to be recorded as selected in local storage.
   */
  tabSectionSelected: function(sectionTabContentPane) {
    var selected = false;
    // The object provided may not be the actual tab container, but a wrapper
    // border container. The wrapper has the ID "<section-id>-stb" so we derive
    // the section ID from that and then defer to the usual function.
    // TODO: This would be easier if the section ID were part of the message
    // or were attached to the widgets as a property. -- DG
    if (sectionTabContentPane) {
      var id = sectionTabContentPane.id;
      this._log(
          bundle.getProperty("curam.tab.TabSessionManager.new.section") + " '"
          + id + "'.");
      var sectionID = id.substring(0, id.length - 4);
      var selectedTab = curam.tab.getSelectedTab(sectionID);
      // It is possible that there are no tabs in the section, so check first.
      if (selectedTab) {
        this._log(
          bundle.getProperty("curam.tab.TabSessionManager.changing.selection"));
        this.tabContentPaneSelected(selectedTab);
        selected = true;
      } else {
        this._log(bundle
          .getProperty("curam.tab.TabSessionManager.not.changing.selection"));
      }
    } else {
      // This cannot happen unless the code is broken...surely?
      this._log(bundle.getProperty("curam.tab.TabSessionManager.no.container"));
    }
    return selected;
  },

  /**
   * Checks if this is a new session or the continuation of an existing session.
   * This method retrieves the copy of the "JSESSIONID" cookie value placed in
   * local storage the last time this method was called. If the value does not
   * exist or does not match the current "JSESSIONID" cookie, then this is a
   * new session and the new "JSESSIONID" will be saved to local storage for
   * the next time this method is invoked. Any record of the previously selected
   * tab is removed, as the home tab will be selected for the new session. If
   * the values match, then this is the continuation of a session, such as the
   * case where the user refreshes the browser.
   *
   * @return {Boolean} true if this is a new session, false otherwise.
   * @private
   */
  _isNewSession: function() {
    // Use a SHA-1 hash to "protect" the session ID in local storage. The SHA1
    // function will encode the result in base-64, which is suitable. This
    // makes it impossible to derive the session ID from the value in local
    // storage, but still allows sufficiently reliably comparisons.
    var JSESSIONID = this._getJSessionID();
    //if not available, presume it is a new session.
    if (!JSESSIONID) {
      return true;
    }
    var context = curam.util.getTopmostWindow().dojox;
    var curHash = context.encoding.digests.SHA1(JSESSIONID);
    var oldHash;
    var context = curam.util.getTopmostWindow().dojox;
    curam.util.runStorageFn(function() {
      oldHash = context.storage.get(
          curam.tab.TabSessionManager.SELECTED_TAB_SESSION_KEY);
    });

    this._log(bundle.getProperty("curam.tab.TabSessionManager.session.id")
        + " '" + curHash
        + "'. "
        + bundle.getProperty("curam.tab.TabSessionManager.old.session.id")
        + " '" + oldHash + "'.");
    if (curHash != oldHash) {
      this._log(bundle.getProperty("curam.tab.TabSessionManager.new.session"));
      curam.util.runStorageFn(function() {
        context.storage.put(
            curam.tab.TabSessionManager.SELECTED_TAB_SESSION_KEY, curHash);
      });
      // Also reset the selected tab, as it will no longer be valid. This is
      // just to avoid confusion later in case there is no selection before
      // the session is refreshed.
      curam.util.runStorageFn(function() {
        context.storage.remove(curam.tab.TabSessionManager.SELECTED_TAB_KEY);
      });
      return true;
    }
    this._log(
      bundle.getProperty("curam.tab.TabSessionManager.refreshed.session"));
    return false;
  },

  /**
   * Gets the "JSESSIONID" cookie value if it is available.
   *
   * @return {String} The value of the "JSESSIONID" cookie.
   * @private
   */
  _getJSessionID: function() {
    // The cookies are all in one string as name/value pairs separated by
    // semicolons. The last cookie has no trailing semicolon.
    var key = "JSESSIONID=";
    var sessionID = null;

    if (document.cookie) {
      var begin = document.cookie.indexOf(key);
      if (begin != -1) {
        var end = document.cookie.indexOf(";", begin + key.length);
        sessionID = unescape(document.cookie.substring(
            begin + key.length, end == -1 ? document.cookie.length : end));
      }
    }
    return sessionID;
  },

  /**
   * Gets the tab descriptor of the tab that was previously recorded as the
   * session's selected tab.
   *
   * @return {curam.tab.TabDescriptor} The tab descriptor of the selected tab
   *   recorded in the session, or null if there was no selected tab.
   * @private
   */
  _getPrevSelectedTab: function() {
    this._log(bundle.getProperty("curam.tab.TabSessionManager.previous.tab"));
    var jsonTabDescriptor;
    curam.util.runStorageFn(function() {
      var context = curam.util.getTopmostWindow().dojox;
      jsonTabDescriptor = context.storage.get(
          curam.tab.TabSessionManager.SELECTED_TAB_KEY);
    });
    var selectedTD = null;
    if (jsonTabDescriptor) {
      selectedTD = curam.tab.TabDescriptor.fromJson(jsonTabDescriptor);
      this._log(
        bundle.getProperty("curam.tab.TabSessionManager.previous.tab.found"),
          selectedTD);
    } else {
      this._log(bundle
        .getProperty("curam.tab.TabSessionManager.previous.tab.not.found"));
    }
    return selectedTD;
  },

  /**
   * Determines if a tab should be opened in the background (not selected) or
   * foreground (selected). A tab will open in the foreground if its signature
   * matches the signature of the selected tab, otherwise it will be opened in
   * the background.
   *
   * @param {curam.tab.TabDescriptor} newTD The tab descriptor for the new tab.
   *   Will not be null.
   * @param {curam.tab.TabDescriptor} selectedTD The tab descriptor for the
   *   selected tab. May be null.
   * @param {Number} pos The position of the new tab in the sequence of restored
   *   tab. This is just used for logging purposes.
   * @return {Boolean} true if the new tab should be opened in the background,
   *   false otherwise.
   * @private
   */
  _isOpenInBackground: function(newTD, selectedTD, pos) {
    var openInBackground = true;

    if (selectedTD && selectedTD.tabSignature == newTD.tabSignature) {
      this._log(bundle.getProperty("curam.tab.TabSessionManager.foreground"),
        newTD, pos);
      openInBackground = false;
    } else {
      this._log(bundle.getProperty("curam.tab.TabSessionManager.background"),
        newTD, pos);
    }
    return openInBackground;
  },

  /**
   * Gets a tab descriptor for the user's home page. When there is no session
   * available, then this tab descriptor must be used to restore the default
   * session. It may also be required if the tab configuration changes and
   * makes the previously recorded home page within the tab configuration
   * invalid. Information generated into the "AppController.jspx" is used to
   * construct the necessary tab descriptor. It is assumed that there are no
   * parameters (which there should not be for a home page). The tab descriptor
   * will be updated in the session when this method is called.
   *
   * @return {curam.tab.TabDescriptor} A tab descriptor for the user's home
   *   page.
   * @private
   */
  _getHomePageTab: function() {
    // Just assume that the one and only tab ID is the right one.
    this._log(bundle.getProperty("curam.tab.TabSessionManager.home.page")
      + " '" + USER_HOME_PAGE_ID + "'.");
    // Check for the scenario where the home page has not been configured
    // correctly and does not have an associated section or tab. This could be
    // caused by it being omitted from the tab configuration files or a mismatch
    // in the actual UIM file name and it's reference in the tab configuration
    // files.
    if (!USER_HOME_PAGE_TAB_ASSOC.tabIDs
        || !USER_HOME_PAGE_TAB_ASSOC.sectionID) {
      // TODO: localization
      throw new Error(
        "The application cannot be launched because the home page, '"
        + USER_HOME_PAGE_ID + "', has not been associated with a section or "
        + " tab.");
    }
    var tabID = USER_HOME_PAGE_TAB_ASSOC.tabIDs[0];
    var sectionID = USER_HOME_PAGE_TAB_ASSOC.sectionID;
    var homeTD = new curam.tab.TabDescriptor(sectionID, tabID);
    var uimPageRequest = new curam.ui.PageRequest(USER_HOME_PAGE_ID, true);

    // Set the details on the TD that are normally collected after the tab has
    // opened. This will actually trigger the saving of the "newly opened tab"
    // into the session. That will either update the old record or create a
    // new one, either way, we have to take care to avoid duplicating the tab
    // later or creating it in the wrong position. We usually read the tab list
    // from the session before calling this method, so beware of that, too.
    // Also, the flag argument on "setTabSignature" is used to avoid marking
    // the tab as the currently selected tab, as we may be restoring the
    // previously saved selection instead.
    homeTD.isHomePage = true;
    homeTD.setTabSignature([], uimPageRequest, true);
    homeTD.setTabContent(uimPageRequest);

    this._log(bundle.getProperty("curam.tab.TabSessionManager.created"),
      homeTD);
    return homeTD;
  },

  /**
   * Simplifies logging of consistently formed messages for the tab session
   * manager.
   *
   * @param msg The message to be logged.
   * @param tab An object with "sectionID" and "tabID" properties to report.
   *              May be null and may have no properties. They will not be
   *              reported in that case.
   * @param pos The position of the tab within a sequence, such as the list
   *              of tabs being restored from a saved session. Optional.
   * @private
   */
  _log: function(msg, tabDescriptor, pos) {
    // If debug logging is turned off, then we do not want to keep the overhead
    // of converting objects to JSON form to create the log message, so we
    // check the DEBUG switch even before calling "curam.debug.log".
    if (curam.debug.enabled()) {
      var prefix = "TAB SESSION";

      if (typeof pos == "number") {
        prefix += " [pos=" + pos + "]";
      }
      curam.debug.log(prefix + ": " + msg
          + (tabDescriptor ? " " + tabDescriptor.toJson() : ""));
    }
  }
});


/*
 * Add "static" fields to the above class. This allows them to be accessed via
 * "this.<name>" or "curam.tab.TabSessionManager.<name>" depending on what is
 * possible or convenient in a given context.
 */
dojo.mixin(curam.tab.TabSessionManager, {
  /**
   * The key to the selected tab descriptor (in JSON form) in the browser local
   * storage. This is recorded each time a tab is selected. When a tab session
   * is refreshed, this tab will be selected. However, if a user starts a new
   * session, their home tab will be selected instead.
   */
  SELECTED_TAB_KEY: "curam_selected_tab",

  /**
   * The key to the session ID in the browser local storage for the session in
   * which the recorded selected tab was selected. It is only restored if the
   * session matches this session, otherwise it is a new session and the home
   * tab will be selected by default.
   */
  SELECTED_TAB_SESSION_KEY: "curam_selected_tab_session"
  });

  return TabSessionManager;
});

},
'dijit/tree/_dndSelector':function(){
define("dijit/tree/_dndSelector", [
	"dojo/_base/array", // array.filter array.forEach array.map
	"dojo/_base/connect", // connect.isCopyKey
	"dojo/_base/declare", // declare
	"dojo/_base/lang", // lang.hitch
	"dojo/mouse", // mouse.isLeft
	"dojo/on",
	"dojo/touch",
	"dojo/_base/window", // win.global
	"./_dndContainer"
], function(array, connect, declare, lang, mouse, on, touch, win, _dndContainer){

	// module:
	//		dijit/tree/_dndSelector
	// summary:
	//		This is a base class for `dijit.tree.dndSource` , and isn't meant to be used directly.
	//		It's based on `dojo.dnd.Selector`.


	return declare("dijit.tree._dndSelector", _dndContainer, {
		// summary:
		//		This is a base class for `dijit.tree.dndSource` , and isn't meant to be used directly.
		//		It's based on `dojo.dnd.Selector`.
		// tags:
		//		protected

		/*=====
		// selection: Hash<String, DomNode>
		//		(id, DomNode) map for every TreeNode that's currently selected.
		//		The DOMNode is the TreeNode.rowNode.
		selection: {},
		=====*/

		constructor: function(){
			// summary:
			//		Initialization
			// tags:
			//		private

			this.selection={};
			this.anchor = null;

			this.events.push(
				on(this.tree.domNode, touch.press, lang.hitch(this,"onMouseDown")),
				on(this.tree.domNode, touch.release, lang.hitch(this,"onMouseUp")),
				on(this.tree.domNode, touch.move, lang.hitch(this,"onMouseMove"))
			);
		},

		//	singular: Boolean
		//		Allows selection of only one element, if true.
		//		Tree hasn't been tested in singular=true mode, unclear if it works.
		singular: false,

		// methods
		getSelectedTreeNodes: function(){
			// summary:
			//		Returns a list of selected node(s).
			//		Used by dndSource on the start of a drag.
			// tags:
			//		protected
			var nodes=[], sel = this.selection;
			for(var i in sel){
				nodes.push(sel[i]);
			}
			return nodes;
		},

		selectNone: function(){
			// summary:
			//		Unselects all items
			// tags:
			//		private

			this.setSelection([]);
			return this;	// self
		},

		destroy: function(){
			// summary:
			//		Prepares the object to be garbage-collected
			this.inherited(arguments);
			this.selection = this.anchor = null;
		},
		addTreeNode: function(/*dijit._TreeNode*/node, /*Boolean?*/isAnchor){
			// summary:
			//		add node to current selection
			// node: Node
			//		node to add
			// isAnchor: Boolean
			//		Whether the node should become anchor.

			this.setSelection(this.getSelectedTreeNodes().concat( [node] ));
			if(isAnchor){ this.anchor = node; }
			return node;
		},
		removeTreeNode: function(/*dijit._TreeNode*/node){
			// summary:
			//		remove node from current selection
			// node: Node
			//		node to remove
			this.setSelection(this._setDifference(this.getSelectedTreeNodes(), [node]));
			return node;
		},
		isTreeNodeSelected: function(/*dijit._TreeNode*/node){
			// summary:
			//		return true if node is currently selected
			// node: Node
			//		the node to check whether it's in the current selection

			return node.id && !!this.selection[node.id];
		},
		setSelection: function(/*dijit._treeNode[]*/ newSelection){
			// summary:
			//		set the list of selected nodes to be exactly newSelection. All changes to the
			//		selection should be passed through this function, which ensures that derived
			//		attributes are kept up to date. Anchor will be deleted if it has been removed
			//		from the selection, but no new anchor will be added by this function.
			// newSelection: Node[]
			//		list of tree nodes to make selected
			var oldSelection = this.getSelectedTreeNodes();
			array.forEach(this._setDifference(oldSelection, newSelection), lang.hitch(this, function(node){
				node.setSelected(false);
				if(this.anchor == node){
					delete this.anchor;
				}
				delete this.selection[node.id];
			}));
			array.forEach(this._setDifference(newSelection, oldSelection), lang.hitch(this, function(node){
				node.setSelected(true);
				this.selection[node.id] = node;
			}));
			this._updateSelectionProperties();
		},
		_setDifference: function(xs,ys){
			// summary:
			//		Returns a copy of xs which lacks any objects
			//		occurring in ys. Checks for membership by
			//		modifying and then reading the object, so it will
			//		not properly handle sets of numbers or strings.

			array.forEach(ys, function(y){ y.__exclude__ = true; });
			var ret = array.filter(xs, function(x){ return !x.__exclude__; });

			// clean up after ourselves.
			array.forEach(ys, function(y){ delete y['__exclude__'] });
			return ret;
		},
		_updateSelectionProperties: function(){
			// summary:
			//		Update the following tree properties from the current selection:
			//		path[s], selectedItem[s], selectedNode[s]

			var selected = this.getSelectedTreeNodes();
			var paths = [], nodes = [];
			array.forEach(selected, function(node){
				nodes.push(node);
				paths.push(node.getTreePath());
			});
			var items = array.map(nodes,function(node){ return node.item; });
			this.tree._set("paths", paths);
			this.tree._set("path", paths[0] || []);
			this.tree._set("selectedNodes", nodes);
			this.tree._set("selectedNode", nodes[0] || null);
			this.tree._set("selectedItems", items);
			this.tree._set("selectedItem", items[0] || null);
		},
		// mouse events
		onMouseDown: function(e){
			// summary:
			//		Event processor for onmousedown/ontouchstart
			// e: Event
			//		onmousedown/ontouchstart event
			// tags:
			//		protected

			// ignore click on expando node
			if(!this.current || this.tree.isExpandoNode(e.target, this.current)){ return; }

			if(!mouse.isLeft(e)){ return; } // ignore right-click

			e.preventDefault();

			var treeNode = this.current,
			  copy = connect.isCopyKey(e), id = treeNode.id;

			// if shift key is not pressed, and the node is already in the selection,
			// delay deselection until onmouseup so in the case of DND, deselection
			// will be canceled by onmousemove.
			if(!this.singular && !e.shiftKey && this.selection[id]){
				this._doDeselect = true;
				return;
			}else{
				this._doDeselect = false;
			}
			this.userSelect(treeNode, copy, e.shiftKey);
		},

		onMouseUp: function(e){
			// summary:
			//		Event processor for onmouseup/ontouchend
			// e: Event
			//		onmouseup/ontouchend event
			// tags:
			//		protected

			// _doDeselect is the flag to indicate that the user wants to either ctrl+click on
			// a already selected item (to deselect the item), or click on a not-yet selected item
			// (which should remove all current selection, and add the clicked item). This can not
			// be done in onMouseDown, because the user may start a drag after mousedown. By moving
			// the deselection logic here, the user can drags an already selected item.
			if(!this._doDeselect){ return; }
			this._doDeselect = false;
			this.userSelect(this.current, connect.isCopyKey(e), e.shiftKey);
		},
		onMouseMove: function(/*===== e =====*/){
			// summary:
			//		event processor for onmousemove/ontouchmove
			// e: Event
			//		onmousemove/ontouchmove event
			this._doDeselect = false;
		},

		_compareNodes: function(n1, n2){
			if(n1 === n2){
				return 0;
			}

			if('sourceIndex' in document.documentElement){ //IE
				//TODO: does not yet work if n1 and/or n2 is a text node
				return n1.sourceIndex - n2.sourceIndex;
			}else if('compareDocumentPosition' in document.documentElement){ //FF, Opera
				return n1.compareDocumentPosition(n2) & 2 ? 1: -1;
			}else if(document.createRange){ //Webkit
				var r1 = doc.createRange();
				r1.setStartBefore(n1);

				var r2 = doc.createRange();
				r2.setStartBefore(n2);

				return r1.compareBoundaryPoints(r1.END_TO_END, r2);
			}else{
				throw Error("dijit.tree._compareNodes don't know how to compare two different nodes in this browser");
			}
		},

		userSelect: function(node, multi, range){
			// summary:
			//		Add or remove the given node from selection, responding
			//		to a user action such as a click or keypress.
			// multi: Boolean
			//		Indicates whether this is meant to be a multi-select action (e.g. ctrl-click)
			// range: Boolean
			//		Indicates whether this is meant to be a ranged action (e.g. shift-click)
			// tags:
			//		protected

			if(this.singular){
				if(this.anchor == node && multi){
					this.selectNone();
				}else{
					this.setSelection([node]);
					this.anchor = node;
				}
			}else{
				if(range && this.anchor){
					var cr = this._compareNodes(this.anchor.rowNode, node.rowNode),
					begin, end, anchor = this.anchor;

					if(cr < 0){ //current is after anchor
						begin = anchor;
						end = node;
					}else{ //current is before anchor
						begin = node;
						end = anchor;
					}
					var nodes = [];
					//add everything betweeen begin and end inclusively
					while(begin != end){
						nodes.push(begin);
						begin = this.tree._getNextNode(begin);
					}
					nodes.push(end);

					this.setSelection(nodes);
				}else{
					if( this.selection[ node.id ] && multi ){
						this.removeTreeNode( node );
					}else if(multi){
						this.addTreeNode(node, true);
					}else{
						this.setSelection([node]);
						this.anchor = node;
					}
				}
			}
		},

		getItem: function(/*String*/ key){
			// summary:
			//		Returns the dojo.dnd.Item (representing a dragged node) by it's key (id).
			//		Called by dojo.dnd.Source.checkAcceptance().
			// tags:
			//		protected

			var widget = this.selection[key];
			return {
				data: widget,
				type: ["treeNode"]
			}; // dojo.dnd.Item
		},

		forInSelectedItems: function(/*Function*/ f, /*Object?*/ o){
			// summary:
			//		Iterates over selected items;
			//		see `dojo.dnd.Container.forInItems()` for details
			o = o || win.global;
			for(var id in this.selection){
				// console.log("selected item id: " + id);
				f.call(o, this.getItem(id), id, this);
			}
		}
	});
});

},
'dijit/_OnDijitClickMixin':function(){
define("dijit/_OnDijitClickMixin", [
	"dojo/on",
	"dojo/_base/array", // array.forEach
	"dojo/keys", // keys.ENTER keys.SPACE
	"dojo/_base/declare", // declare
	"dojo/_base/sniff", // has("ie")
	"dojo/_base/unload", // unload.addOnWindowUnload
	"dojo/_base/window" // win.doc.addEventListener win.doc.attachEvent win.doc.detachEvent
], function(on, array, keys, declare, has, unload, win){

	// module:
	//		dijit/_OnDijitClickMixin
	// summary:
	//		Mixin so you can pass "ondijitclick" to this.connect() method,
	//		as a way to handle clicks by mouse, or by keyboard (SPACE/ENTER key)


	// Keep track of where the last keydown event was, to help avoid generating
	// spurious ondijitclick events when:
	// 1. focus is on a <button> or <a>
	// 2. user presses then releases the ENTER key
	// 3. onclick handler fires and shifts focus to another node, with an ondijitclick handler
	// 4. onkeyup event fires, causing the ondijitclick handler to fire
	var lastKeyDownNode = null;
	if(has("ie")){
		(function(){
			var keydownCallback = function(evt){
				lastKeyDownNode = evt.srcElement;
			};
			win.doc.attachEvent('onkeydown', keydownCallback);
			unload.addOnWindowUnload(function(){
				win.doc.detachEvent('onkeydown', keydownCallback);
			});
		})();
	}else{
		win.doc.addEventListener('keydown', function(evt){
			lastKeyDownNode = evt.target;
		}, true);
	}

	// Custom a11yclick (a.k.a. ondijitclick) event
	var a11yclick = function(node, listener){
		if(/input|button/i.test(node.nodeName)){
			// pass through, the browser already generates click event on SPACE/ENTER key
			return on(node, "click", listener);
		}else{
			// Don't fire the click event unless both the keydown and keyup occur on this node.
			// Avoids problems where focus shifted to this node or away from the node on keydown,
			// either causing this node to process a stray keyup event, or causing another node
			// to get a stray keyup event.

			function clickKey(/*Event*/ e){
				return (e.keyCode == keys.ENTER || e.keyCode == keys.SPACE) &&
						!e.ctrlKey && !e.shiftKey && !e.altKey && !e.metaKey;
			}
			var handles = [
				on(node, "keypress", function(e){
					//console.log(this.id + ": onkeydown, e.target = ", e.target, ", lastKeyDownNode was ", lastKeyDownNode, ", equality is ", (e.target === lastKeyDownNode));
					if(clickKey(e)){
						// needed on IE for when focus changes between keydown and keyup - otherwise dropdown menus do not work
						lastKeyDownNode = e.target;

						// Prevent viewport scrolling on space key in IE<9.
						// (Reproducible on test_Button.html on any of the first dijit.form.Button examples)
						// Do this onkeypress rather than onkeydown because onkeydown.preventDefault() will
						// suppress the onkeypress event, breaking _HasDropDown
						e.preventDefault();
					}
				}),

				on(node, "keyup", function(e){
					//console.log(this.id + ": onkeyup, e.target = ", e.target, ", lastKeyDownNode was ", lastKeyDownNode, ", equality is ", (e.target === lastKeyDownNode));
					if(clickKey(e) && e.target == lastKeyDownNode){	// === breaks greasemonkey
						//need reset here or have problems in FF when focus returns to trigger element after closing popup/alert
						lastKeyDownNode = null;
						listener.call(this, e);
					}
				}),

				on(node, "click", function(e){
					// and connect for mouse clicks too (or touch-clicks on mobile)
					listener.call(this, e);
				})
			];

			return {
				remove: function(){
					array.forEach(handles, function(h){ h.remove(); });
				}
			};
		}
	};

	return declare("dijit._OnDijitClickMixin", null, {
		connect: function(
				/*Object|null*/ obj,
				/*String|Function*/ event,
				/*String|Function*/ method){
			// summary:
			//		Connects specified obj/event to specified method of this object
			//		and registers for disconnect() on widget destroy.
			// description:
			//		Provide widget-specific analog to connect.connect, except with the
			//		implicit use of this widget as the target object.
			//		This version of connect also provides a special "ondijitclick"
			//		event which triggers on a click or space or enter keyup.
			//		Events connected with `this.connect` are disconnected upon
			//		destruction.
			// returns:
			//		A handle that can be passed to `disconnect` in order to disconnect before
			//		the widget is destroyed.
			// example:
			//	|	var btn = new dijit.form.Button();
			//	|	// when foo.bar() is called, call the listener we're going to
			//	|	// provide in the scope of btn
			//	|	btn.connect(foo, "bar", function(){
			//	|		console.debug(this.toString());
			//	|	});
			// tags:
			//		protected

			return this.inherited(arguments, [obj, event == "ondijitclick" ? a11yclick : event, method]);
		}
	});
});

},
'curam/pagination':function(){
/* Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2013. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 15-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 28-Apr-2011  MV  [CR00265362] When loading list parts, only re-parse the new
   *     chunk, not the whole page.
   * 13-Apr-2011  SD  [CR00263757] Amended the use of dojo.parser to limit it to
   *    specified script content instead of the entire page.
   * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
   * 20-Dec-2010  MV  [CR00239063] Add support for lists with row actions menu.
   * 13-Dec-2010  MV  [CR00237821] Performance improvement - added supporting
   *    common functions and event handler.
   * 09-Jun-2010 MV [CR00202794] Fix start row index in addPagination() function.
   * 13-Apr-2010 MV [CR00192550] Added localizable strings array.
   * 11-Mar-2010 MV [CR00136536] Initial version.
   */

define("curam/pagination", ["curam/define",
        "dojo/parser",
        "curam/pagination/ControlPanel",
        "curam/pagination/StateController",
        "curam/util/ResourceBundle"
        ], function() {
  
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  curam.define.singleton("curam.pagination", {
    defaultPageSize: 15,
    threshold: 15,
    listModels: {},
    
    ROW_COUNT_CLASS_NAME: "numRows-",
    ESC_SCRIPT_START: "<!--@pg@",
    ESC_SCRIPT_END: "@pg@-->",
    
    localizedStrings: {
      firstPage_btn: "|<",
      firstPage_title: "$not-localized$ First page",
      prevPage_btn: "<",
      prevPage_title: "$not-localized$ Previous page",
      nextPage_btn: ">",
      nextPage_title: "$not-localized$ Next page",
      lastPage_btn: ">|",
      lastPage_title: "$not-localized$ Last page",
      pageSize_title: "$not-localized$ Page size",
      pagination_info: "$not-localized$ Displaying rows %s to %s out of %s",
      page_title:"Go to page"
    },
    
    /**
     * Initialize pagination on the specified list.
     */
    addPagination: function(listModel, controlPanelParentNode) {
      // do not add pagination in short lists
      var numRows = listModel.getRowCount();
      if (numRows <= curam.pagination.threshold) {
        // show the hidden rows
        listModel.showRange(1, numRows);
        return;
      }
      
      var listId = listModel.getId();
      curam.debug.log("curam.pagination.addPagination: listId: ", listId);
      if (curam.pagination.listModels[listId]) {
        throw "Pagination on this list has already been initialized: " + listId;
      }
      
      curam.pagination.listModels[listId] = listModel;
      curam.debug.log("curam.pagination.listModels : ",
          curam.pagination.listModels);
      
      var gui = new curam.pagination.ControlPanel(controlPanelParentNode);
      var controller = new curam.pagination.StateController(listModel, gui);
      
      listModel._controller = controller;
      
      // listen to pre-sort events and notify pagination code
      dojo.subscribe("/curam/list/toBeSorted", this, function(listUniqueId) {
        curam.debug.log(bundle.getProperty("curam.omega3-util.received") 
            + " /curam/list/toBeSorted " 
            + bundle.getProperty("curam.omega3-util.for")+ ":",
            listUniqueId);
        curam.pagination.unpackAll(
            curam.pagination.listModels[listUniqueId]);
      });

      // listen to sort events and notify pagination code
      dojo.subscribe("/curam/list/sorted", this, function(listUniqueId) {
        curam.debug.log(bundle.getProperty("curam.omega3-util.received") 
            + " /curam/list/sorted " 
            + bundle.getProperty("curam.omega3-util.for")+ ":",
            listUniqueId);
        curam.pagination.paginatedListSorted(
            curam.pagination.listModels[listUniqueId]);
      });
      
      controller.gotoFirst();
    },

    /**
     * Called by custom list implementations to notify pagination that the list
     * has been resorted.
     */
    paginatedListSorted: function(listModel) {
      listModel._controller.reset();
    },
    
    unpackRows: function(scriptNode) {
      var rowsData = scriptNode.innerHTML;
      
      // the data may contain "escaped" script tags so unescape these
      var hasRowActions = dojo.hasClass(scriptNode, "has-row-actions");
      if (hasRowActions) {
        rowsData = rowsData.replace(
            new RegExp(curam.pagination.ESC_SCRIPT_START, "g"), "<script type=\"text/javascript\">");
        rowsData = rowsData.replace(
            new RegExp(curam.pagination.ESC_SCRIPT_END, "g"), "</script>");
      }
      // now parse the HTML
      var scriptContents = dojo._toDom(rowsData);
      
      if (hasRowActions) {
        // evaluate any contained JavaScript
        dojo.query("script", scriptContents).forEach(function(s) {
          eval(s.innerHTML);
        });

        // parse the new content to find uninstantiated Dijits
        dojo.parser.parse(scriptContents);
      }

      // insert script contents in place of the script tag
      dojo.place(scriptContents, scriptNode, "replace");
    },
    
    unpackAll: function(listModel) {
      // go to the last page - this unpacks all the rows
      listModel._controller.gotoLast();
    },
    
    readListContent: function(tableNode) {
      return dojo.query("tbody > *", tableNode).filter(function(n){
        return typeof(n.tagName) != "undefined"
          && (n.tagName == "TR" || (n.tagName == "SCRIPT"
          && dojo.attr(n, "type") == "list-row-container"));
      });
    },
    
    getNumRowsInBlock: function(scriptBlockNode) {
      var countClass = dojo.filter(
          scriptBlockNode.className.split(" "), function(cn) {
            return cn.indexOf(curam.pagination.ROW_COUNT_CLASS_NAME) == 0;
          });
      return parseInt(countClass[0].split(
          curam.pagination.ROW_COUNT_CLASS_NAME)[1]);
    }
  });
  
  return curam.pagination;
});

},
'url:curam/layout/resources/Dialog.html':"<div class=\"dijitDialog\" role=\"alertdialog\" aria-labelledby=\"${id}_title\">\r\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\r\n\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" aria-label=\"${closeModalText}\" tabIndex=\"0\" onKeyDown=\"curam.util.isShiftTab(event)\">\r\n\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\">${closeModalText}</span>\r\n\t</span>\r\n  <span id=\"${id}_prompt\" class=\"hidden\" data-dojo-attach-point=\"promptText\">${modalPromptText}</span>\r\n\t</div>\r\n\t\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\r\n</div>\r\n",
'url:dijit/templates/MenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n",
'dijit/layout/StackController':function(){
define("dijit/layout/StackController", [
	"dojo/_base/array", // array.forEach array.indexOf array.map
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/keys", // keys
	"dojo/_base/lang", // lang.getObject
	"dojo/_base/sniff", // has("ie")
	"../focus",		// focus.focus()
	"../registry",	// registry.byId
	"../_Widget",
	"../_TemplatedMixin",
	"../_Container",
	"../form/ToggleButton",
	"dojo/i18n!../nls/common"
], function(array, declare, event, keys, lang, has,
			focus, registry, _Widget, _TemplatedMixin, _Container, ToggleButton){

/*=====
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _Container = dijit._Container;
	var ToggleButton = dijit.form.ToggleButton;
=====*/

	// module:
	//		dijit/layout/StackController
	// summary:
	//		Set of buttons to select a page in a `dijit.layout.StackContainer`

	var StackButton = declare("dijit.layout._StackButton", ToggleButton, {
		// summary:
		//		Internal widget used by StackContainer.
		// description:
		//		The button-like or tab-like object you click to select or delete a page
		// tags:
		//		private

		// Override _FormWidget.tabIndex.
		// StackContainer buttons are not in the tab order by default.
		// Probably we should be calling this.startupKeyNavChildren() instead.
		tabIndex: "-1",

		// closeButton: Boolean
		//		When true, display close button for this tab
		closeButton: false,
		
		_setCheckedAttr: function(/*Boolean*/ value, /*Boolean?*/ priorityChange){
			this.inherited(arguments);
			this.focusNode.removeAttribute("aria-pressed");
		},

		buildRendering: function(/*Event*/ evt){
			this.inherited(arguments);
			(this.focusNode || this.domNode).setAttribute("role", "tab");
		},

		onClick: function(/*Event*/ /*===== evt =====*/){
			// summary:
			//		This is for TabContainer where the tabs are <span> rather than button,
			//		so need to set focus explicitly (on some browsers)
			//		Note that you shouldn't override this method, but you can connect to it.
			focus.focus(this.focusNode);

			// ... now let StackController catch the event and tell me what to do
		},

		onClickCloseButton: function(/*Event*/ evt){
			// summary:
			//		StackContainer connects to this function; if your widget contains a close button
			//		then clicking it should call this function.
			//		Note that you shouldn't override this method, but you can connect to it.
			evt.stopPropagation();
		}
	});


	var StackController = declare("dijit.layout.StackController", [_Widget, _TemplatedMixin, _Container], {
		// summary:
		//		Set of buttons to select a page in a `dijit.layout.StackContainer`
		// description:
		//		Monitors the specified StackContainer, and whenever a page is
		//		added, deleted, or selected, updates itself accordingly.

		baseClass: "dijitStackController",

		templateString: "<span role='tablist' data-dojo-attach-event='onkeypress'></span>",

		// containerId: [const] String
		//		The id of the page container that I point to
		containerId: "",

		// buttonWidget: [const] Constructor
		//		The button widget to create to correspond to each page
		buttonWidget: StackButton,

		constructor: function(){
			this.pane2button = {};		// mapping from pane id to buttons
			this.pane2connects = {};	// mapping from pane id to this.connect() handles
			this.pane2watches = {};		// mapping from pane id to watch() handles
		},

		postCreate: function(){
			this.inherited(arguments);

			// Listen to notifications from StackContainer
			this.subscribe(this.containerId+"-startup", "onStartup");
			this.subscribe(this.containerId+"-addChild", "onAddChild");
			this.subscribe(this.containerId+"-removeChild", "onRemoveChild");
			this.subscribe(this.containerId+"-selectChild", "onSelectChild");
			this.subscribe(this.containerId+"-containerKeyPress", "onContainerKeyPress");
		},

		onStartup: function(/*Object*/ info){
			// summary:
			//		Called after StackContainer has finished initializing
			// tags:
			//		private
			array.forEach(info.children, this.onAddChild, this);
			if(info.selected){
				// Show button corresponding to selected pane (unless selected
				// is null because there are no panes)
				this.onSelectChild(info.selected);
			}
		},

		destroy: function(){
			for(var pane in this.pane2button){
				this.onRemoveChild(registry.byId(pane));
			}
			this.inherited(arguments);
		},

		onAddChild: function(/*dijit._Widget*/ page, /*Integer?*/ insertIndex){
			// summary:
			//		Called whenever a page is added to the container.
			//		Create button corresponding to the page.
			// tags:
			//		private

			// create an instance of the button widget
			// (remove typeof buttonWidget == string support in 2.0)
			var cls = lang.isString(this.buttonWidget) ? lang.getObject(this.buttonWidget) : this.buttonWidget;
			var button = new cls({
				id: this.id + "_" + page.id,
				label: page.title,
				dir: page.dir,
				lang: page.lang,
				textDir: page.textDir,
				showLabel: page.showTitle,
				iconClass: page.iconClass,
				closeButton: page.closable,
				title: page.tooltip
			});
			button.focusNode.setAttribute("aria-selected", "false");


			// map from page attribute to corresponding tab button attribute
			var pageAttrList = ["title", "showTitle", "iconClass", "closable", "tooltip"],
				buttonAttrList = ["label", "showLabel", "iconClass", "closeButton", "title"];

			// watch() so events like page title changes are reflected in tab button
			this.pane2watches[page.id] = array.map(pageAttrList, function(pageAttr, idx){
				return page.watch(pageAttr, function(name, oldVal, newVal){
					button.set(buttonAttrList[idx], newVal);
				});
			});

			// connections so that clicking a tab button selects the corresponding page
			this.pane2connects[page.id] = [
				this.connect(button, 'onClick', lang.hitch(this,"onButtonClick", page)),
				this.connect(button, 'onClickCloseButton', lang.hitch(this,"onCloseButtonClick", page))
			];

			this.addChild(button, insertIndex);
			this.pane2button[page.id] = button;
			page.controlButton = button;	// this value might be overwritten if two tabs point to same container
			if(!this._currentChild){ // put the first child into the tab order
				button.focusNode.setAttribute("tabIndex", "0");
				button.focusNode.setAttribute("aria-selected", "true");
				this._currentChild = page;
			}
			// make sure all tabs have the same length
			if(!this.isLeftToRight() && has("ie") && this._rectifyRtlTabList){
				this._rectifyRtlTabList();
			}
		},

		onRemoveChild: function(/*dijit._Widget*/ page){
			// summary:
			//		Called whenever a page is removed from the container.
			//		Remove the button corresponding to the page.
			// tags:
			//		private

			if(this._currentChild === page){ this._currentChild = null; }

			// disconnect/unwatch connections/watches related to page being removed
			array.forEach(this.pane2connects[page.id], lang.hitch(this, "disconnect"));
			delete this.pane2connects[page.id];
			array.forEach(this.pane2watches[page.id], function(w){ w.unwatch(); });
			delete this.pane2watches[page.id];

			var button = this.pane2button[page.id];
			if(button){
				this.removeChild(button);
				delete this.pane2button[page.id];
				button.destroy();
			}
			delete page.controlButton;
		},

		onSelectChild: function(/*dijit._Widget*/ page){
			// summary:
			//		Called when a page has been selected in the StackContainer, either by me or by another StackController
			// tags:
			//		private

			if(!page){ return; }

			if(this._currentChild){
				var oldButton=this.pane2button[this._currentChild.id];
				oldButton.set('checked', false);
				oldButton.focusNode.setAttribute("aria-selected", "false");
				oldButton.focusNode.setAttribute("tabIndex", "-1");
			}

			var newButton=this.pane2button[page.id];
			newButton.set('checked', true);
			newButton.focusNode.setAttribute("aria-selected", "true");
			this._currentChild = page;
			newButton.focusNode.setAttribute("tabIndex", "0");
			var container = registry.byId(this.containerId);
			container.containerNode.setAttribute("aria-labelledby", newButton.id);
		},

		onButtonClick: function(/*dijit._Widget*/ page){
			// summary:
			//		Called whenever one of my child buttons is pressed in an attempt to select a page
			// tags:
			//		private

			if(this._currentChild.id === page.id) {
				//In case the user clicked the checked button, keep it in the checked state because it remains to be the selected stack page.
				var button=this.pane2button[page.id];
				button.set('checked', true);
			}
			var container = registry.byId(this.containerId);
			container.selectChild(page);
		},

		onCloseButtonClick: function(/*dijit._Widget*/ page){
			// summary:
			//		Called whenever one of my child buttons [X] is pressed in an attempt to close a page
			// tags:
			//		private

			var container = registry.byId(this.containerId);
			container.closeChild(page);
			if(this._currentChild){
				var b = this.pane2button[this._currentChild.id];
				if(b){
					focus.focus(b.focusNode || b.domNode);
				}
			}
		},

		// TODO: this is a bit redundant with forward, back api in StackContainer
		adjacent: function(/*Boolean*/ forward){
			// summary:
			//		Helper for onkeypress to find next/previous button
			// tags:
			//		private

			if(!this.isLeftToRight() && (!this.tabPosition || /top|bottom/.test(this.tabPosition))){ forward = !forward; }
			// find currently focused button in children array
			var children = this.getChildren();
			var current = array.indexOf(children, this.pane2button[this._currentChild.id]);
			// pick next button to focus on
			var offset = forward ? 1 : children.length - 1;
			return children[ (current + offset) % children.length ]; // dijit._Widget
		},

		onkeypress: function(/*Event*/ e){
			// summary:
			//		Handle keystrokes on the page list, for advancing to next/previous button
			//		and closing the current page if the page is closable.
			// tags:
			//		private

			if(this.disabled || e.altKey ){ return; }
			var forward = null;
			if(e.ctrlKey || !e._djpage){
				switch(e.charOrCode){
					case keys.LEFT_ARROW:
					case keys.UP_ARROW:
						if(!e._djpage){ forward = false; }
						break;
					case keys.PAGE_UP:
						if(e.ctrlKey){ forward = false; }
						break;
					case keys.RIGHT_ARROW:
					case keys.DOWN_ARROW:
						if(!e._djpage){ forward = true; }
						break;
					case keys.PAGE_DOWN:
						if(e.ctrlKey){ forward = true; }
						break;
					case keys.HOME:
					case keys.END:
						var children = this.getChildren();
						if(children && children.length){
							children[e.charOrCode == keys.HOME ? 0 : children.length-1].onClick();
						}
						event.stop(e);
						break;
					case keys.DELETE:
						if(this._currentChild.closable){
							this.onCloseButtonClick(this._currentChild);
						}
						event.stop(e);
						break;
					default:
						if(e.ctrlKey){
							if(e.charOrCode === keys.TAB){
								this.adjacent(!e.shiftKey).onClick();
								event.stop(e);
							}else if(e.charOrCode == "w"){
								if(this._currentChild.closable){
									this.onCloseButtonClick(this._currentChild);
								}
								event.stop(e); // avoid browser tab closing.
							}
						}
				}
				// handle next/previous page navigation (left/right arrow, etc.)
				if(forward !== null){
					this.adjacent(forward).onClick();
					event.stop(e);
				}
			}
		},

		onContainerKeyPress: function(/*Object*/ info){
			// summary:
			//		Called when there was a keypress on the container
			// tags:
			//		private
			info.e._djpage = info.page;
			this.onkeypress(info.e);
		}
	});

	StackController.StackButton = StackButton;	// for monkey patching

	return StackController;
});

},
'dojox/layout/ExpandoPane':function(){
require({cache:{
'url:dojox/layout/resources/ExpandoPane.html':"<div class=\"dojoxExpandoPane\">\n\t<div dojoAttachPoint=\"titleWrapper\" class=\"dojoxExpandoTitle\">\n\t\t<div class=\"dojoxExpandoIcon\" dojoAttachPoint=\"iconNode\" dojoAttachEvent=\"onclick:toggle\"><span class=\"a11yNode\">X</span></div>\t\t\t\n\t\t<span class=\"dojoxExpandoTitleNode\" dojoAttachPoint=\"titleNode\">${title}</span>\n\t</div>\n\t<div class=\"dojoxExpandoWrapper\" dojoAttachPoint=\"cwrapper\" dojoAttachEvent=\"ondblclick:_trap\">\n\t\t<div class=\"dojoxExpandoContent\" dojoAttachPoint=\"containerNode\"></div>\n\t</div>\n</div>\n"}});
define("dojox/layout/ExpandoPane", ["dojo/_base/kernel","dojo/_base/lang","dojo/_base/declare","dojo/_base/array", 
	"dojo/_base/connect","dojo/_base/event","dojo/_base/fx","dojo/dom-style",
	"dojo/dom-class","dojo/dom-geometry","dojo/text!./resources/ExpandoPane.html",
	"dijit/layout/ContentPane","dijit/_TemplatedMixin","dijit/_Contained","dijit/_Container"], 
  function(kernel,lang,declare,arrayUtil,connectUtil,eventUtil,baseFx,domStyle,domClass,domGeom,
		template,ContentPane,TemplatedMixin,Contained,Container) {
/*=====
var ContentPane = dijit.layout.ContentPane;
var TemplatedMixin = dijit._TemplatedMixin;
var Contained = dijit._Contained;
var Container = dijit._Container;
  =====*/
kernel.experimental("dojox.layout.ExpandoPane"); // just to show it can be done?

return declare("dojox.layout.ExpandoPane", [ContentPane, TemplatedMixin, Contained, Container],{
	// summary: An experimental collapsing-pane for dijit.layout.BorderContainer
	//
	// description:
	//		Works just like a ContentPane inside of a borderContainer. Will expand/collapse on
	//		command, and supports having Layout Children as direct descendants
	//

	//maxHeight: "",
	//maxWidth: "",
	//splitter: false,
	attributeMap: lang.delegate(ContentPane.prototype.attributeMap, {
		title: { node: "titleNode", type: "innerHTML" }
	}),
	
	templateString: template,

	// easeOut: String|Function
	//		easing function used to hide pane
	easeOut: "dojo._DefaultEasing", // FIXME: This won't work with globalless AMD
	
	// easeIn: String|Function
	//		easing function use to show pane
	easeIn: "dojo._DefaultEasing", // FIXME: This won't work with globalless AMD
	
	// duration: Integer
	//		duration to run show/hide animations
	duration: 420,

	// startExpanded: Boolean
	//		Does this widget start in an open (true) or closed (false) state
	startExpanded: true,

	// previewOpacity: Float
	//		A value from 0 .. 1 indicating the opacity to use on the container
	//		when only showing a preview
	previewOpacity: 0.75,
	
	// previewOnDblClick: Boolean
	//		If true, will override the default behavior of a double-click calling a full toggle.
	//		If false, a double-click will cause the preview to popup
	previewOnDblClick: false,

	baseClass: "dijitExpandoPane",

	postCreate: function(){
		this.inherited(arguments);
		this._animConnects = [];

		this._isHorizontal = true;
		
		if(lang.isString(this.easeOut)){
			this.easeOut = lang.getObject(this.easeOut);
		}
		if(lang.isString(this.easeIn)){
			this.easeIn = lang.getObject(this.easeIn);
		}
	
		var thisClass = "", rtl = !this.isLeftToRight();
		if(this.region){
			switch(this.region){
				case "trailing" :
				case "right" :
					thisClass = rtl ? "Left" : "Right";
					break;
				case "leading" :
				case "left" :
					thisClass = rtl ? "Right" : "Left";
					break;
				case "top" :
					thisClass = "Top";
					break;
				case "bottom" :
					thisClass = "Bottom";
					break;
			}
			domClass.add(this.domNode, "dojoxExpando" + thisClass);
			domClass.add(this.iconNode, "dojoxExpandoIcon" + thisClass);
			this._isHorizontal = /top|bottom/.test(this.region);
		}
		domStyle.set(this.domNode, {
			overflow: "hidden",
			padding:0
		});
		
		this.connect(this.domNode, "ondblclick", this.previewOnDblClick ? "preview" : "toggle");
		
		if(this.previewOnDblClick){
			this.connect(this.getParent(), "_layoutChildren", lang.hitch(this, function(){
				this._isonlypreview = false;
			}));
		}
		
	},
	
	_startupSizes: function(){
		
		this._container = this.getParent();
		this._closedSize = this._titleHeight = domGeom.getMarginBox(this.titleWrapper).h;
		
		if(this.splitter){
			// find our splitter and tie into it's drag logic
			var myid = this.id;
			arrayUtil.forEach(dijit.registry.toArray(), function(w){
				if(w && w.child && w.child.id == myid){
					this.connect(w,"_stopDrag","_afterResize");
				}
			}, this);
		}
		
		this._currentSize = domGeom.getContentBox(this.domNode);	// TODO: can compute this from passed in value to resize(), see _LayoutWidget for example
		this._showSize = this._currentSize[(this._isHorizontal ? "h" : "w")];
		this._setupAnims();

		if(this.startExpanded){
			this._showing = true;
		}else{
			this._showing = false;
			this._hideWrapper();
			this._hideAnim.gotoPercent(99,true);
		}
		
		this._hasSizes = true;
	},
	
	_afterResize: function(e){
		var tmp = this._currentSize;						// the old size
		this._currentSize = domGeom.getMarginBox(this.domNode);	// the new size
		var n = this._currentSize[(this._isHorizontal ? "h" : "w")]
		if(n > this._titleHeight){
			if(!this._showing){
				this._showing = !this._showing;
				this._showEnd();
			}
			this._showSize = n;
			this._setupAnims();
		}else{
			this._showSize = tmp[(this._isHorizontal ? "h" : "w")];
			this._showing = false;
			this._hideWrapper();
			this._hideAnim.gotoPercent(89,true);
		}
		
	},
	
	_setupAnims: function(){
		// summary: Create the show and hide animations
		arrayUtil.forEach(this._animConnects, connectUtil.disconnect);
		
		var _common = {
				node:this.domNode,
				duration:this.duration
			},
			isHorizontal = this._isHorizontal,
			showProps = {},
			hideProps = {},
			dimension = isHorizontal ? "height" : "width"
		;

		showProps[dimension] = {
			end: this._showSize
		};
		hideProps[dimension] = {
			end: this._closedSize
		};
		
		this._showAnim = baseFx.animateProperty(lang.mixin(_common,{
			easing:this.easeIn,
			properties: showProps
		}));
		this._hideAnim = baseFx.animateProperty(lang.mixin(_common,{
			easing:this.easeOut,
			properties: hideProps
		}));

		this._animConnects = [
			connectUtil.connect(this._showAnim, "onEnd", this, "_showEnd"),
			connectUtil.connect(this._hideAnim, "onEnd", this, "_hideEnd")
		];
	},
	
	preview: function(){
		// summary: Expand this pane in preview mode (does not affect surrounding layout)

		if(!this._showing){
			this._isonlypreview = !this._isonlypreview;
		}
		this.toggle();
	},

	toggle: function(){
		// summary: Toggle this pane's visibility
		if(this._showing){
			this._hideWrapper();
			this._showAnim && this._showAnim.stop();
			this._hideAnim.play();
		}else{
			this._hideAnim && this._hideAnim.stop();
			this._showAnim.play();
		}
		this._showing = !this._showing;
	},
	
	_hideWrapper: function(){
		// summary: Set the Expando state to "closed"
		domClass.add(this.domNode, "dojoxExpandoClosed");
		
		domStyle.set(this.cwrapper,{
			visibility: "hidden",
			opacity: "0",
			overflow: "hidden"
		});
	},
	
	_showEnd: function(){
		// summary: Common animation onEnd code - "unclose"
		domStyle.set(this.cwrapper, {
			opacity: 0,
			visibility:"visible"
		});
		baseFx.anim(this.cwrapper, {
			opacity: this._isonlypreview ? this.previewOpacity : 1
		}, 227);
		domClass.remove(this.domNode, "dojoxExpandoClosed");
		if(!this._isonlypreview){
			setTimeout(lang.hitch(this._container, "layout"), 15);
		}else{
			this._previewShowing = true;
			this.resize();
		}
	},
	
	_hideEnd: function(){
		// summary: Callback for the hide animation - "close"

		// every time we hide, reset the "only preview" state
		if(!this._isonlypreview){
			setTimeout(lang.hitch(this._container, "layout"), 25);
		}else{
			this._previewShowing = false;
		}
		this._isonlypreview = false;
		
	},
	
	resize: function(/* Object? */newSize){
		// summary:
		//		we aren't a layout widget, but need to act like one:
		// newSize: Object
		//		The size object to resize to

		if(!this._hasSizes){ this._startupSizes(newSize); }
		
		// compute size of container (ie, size left over after title bar)
		var currentSize = domGeom.getMarginBox(this.domNode);
		this._contentBox = {
			w: newSize && "w" in newSize ? newSize.w : currentSize.w,
			h: (newSize && "h" in newSize ? newSize.h : currentSize.h) - this._titleHeight
		};
		domStyle.set(this.containerNode, "height", this._contentBox.h + "px");

		if(newSize){
			domGeom.setMarginBox(this.domNode, newSize);
		}

		this._layoutChildren();
	},
	
	_trap: function(e){
		// summary: Trap stray events
		eventUtil.stop(e);
	}
});
});

},
'curam/layout/ExpandoPane':function(){
require({cache:{
'url:curam/layout/resources/ExpandoPane.html':"<div class=\"dojoxExpandoPane dojoxExpando${orient} ${startupCls}\">\r\n\t<div dojoAttachPoint=\"titleWrapper\" class=\"dojoxExpandoTitle\">\r\n\t\t<div class=\"dojoxExpandoIcon dojoxExpandoIcon${orient}\" role=\"button\" aria-label=\"${expandIconAlt}\" tabIndex=\"0\" dojoAttachPoint=\"iconNode\" dojoAttachEvent=\"onclick:toggle,onkeypress: enterCheck\"></div>\r\n\t\t<span class=\"dojoxExpandoTitleNode\" dojoAttachPoint=\"titleNode\" title=\"${title}\">${title}</span>\r\n\t</div>\r\n\t<div class=\"dojoxExpandoWrapper\" dojoAttachPoint=\"cwrapper\" dojoAttachEvent=\"ondblclick:_trap\">\r\n\t\t<div class=\"dojoxExpandoContent\" dojoAttachPoint=\"containerNode\"></div>\r\n\t</div>\r\n</div>\r\n"}});
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/layout/ExpandoPane", ["curam/smartPanel",
        "dojo/_base/lang",
        "dojo/_base/array",
        "dojo/dom-geometry",
        "dojo/dom-style",
        "dojo/_base/fx",
        "dojo/dom-class",
        "dojo/text!curam/layout/resources/ExpandoPane.html",
        "dojox/layout/ExpandoPane",
        "curam/util/ResourceBundle"
        ], function(smartPanel, lang, arrayUtil, domGeom, domStyle,
            baseFx, domClass, template) {

  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 22-Apr-2013  MV  [CR00381705] Moved getMarginBoxSimple().
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 11-Sep-2012  MV  [CR00339639] Performance related update: customize
   *    directly instead of using aspect API.
   * 09-Aug-2012  MV  [CR00337714] Load HTML template using the new mechanism.
   * 14-Nov-2011  MV  [CR00297160] Upgrade to Dojo 1.7
   * 31-Oct-2011  MV  [CR00289694] Upgrade to Dojo 1.6.1
   * 28-Apr-2011  AF  [CR00264788] Added alternative text to toggle icon.
   * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
   * 23-Nov-2010  SD  [CR00231550] Updated to facilitate Smart Panel lazy loading.
   */

  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");

  var ExpandoPane = dojo.declare("curam.layout.ExpandoPane", dojox.layout.ExpandoPane, {
    templateString: template,

    /**
     * startupCls: String
     *     A CSS class to apply to the base node
     */
    startupCls: "",

    /**
     * expandIconAlt: String
     *    Alternative text for the toggle icon
     */
    expandIconAlt: "",

    postMixInProperties: function() {
      var thisClass = "", rtl = !this.isLeftToRight();
      if(this.region){
        switch(this.region){
          case "trailing" :
          case "right" :
            thisClass = rtl ? "Left" : "Right";
            break;
          case "leading" :
          case "left" :
            thisClass = rtl ? "Right" : "Left";
            break;
          case "top" :
            thisClass = "Top";
            break;
          case "bottom" :
            thisClass = "Bottom";
            break;
        }

        // Set the orient parameter
        this.orient = thisClass;
      }
      if(!this.startExpanded){
        this.startupCls = "dojoxExpandoClosed";
      }

      this._openWidth = null;

      // We have to do some work here to change how the stock Dojo widget
      // behaves when it is initially collapsed in order to avoid an
      // extra layout() call on the surrounding BorderContainer
      if(!this.startExpanded){
        if(this.srcNodeRef && this.srcNodeRef.style.width){
          this._openWidth = dojo.style(this.srcNodeRef, "width");

          var style = this.style;
          // Remove the "width" setting from the style that was
          // set on the source DOM node.  If this is not done,
          // Then the ExpandoPane will always start expanded, and
          // force an unnecessary layout() of the containing
          // BorderContainer, which is bad for performance
          if(style && style.toLowerCase().indexOf("width") > -1){
            var parts = style.split(";");
            var pair;
            for(var i = 0; i < parts.length; i++){
              if(dojo.trim(parts[i]).length == 0){
                parts.splice(i, 1);
                i--;
              }else{

                pair = parts[i].split(":");
                if(dojo.trim(pair[0]).toLowerCase() == "width"){
                  parts.splice(i, 1);
                  i--;
                }
              }
            }
            this.style = parts.length > 0 ? parts.join(";") + ";" : "";
          }
        }
      }
    },

    postCreate: function() {
      this.inherited(arguments);

      this.connect(this.domNode, "ondblclick",
          this.previewOnDblClick ? "preview" : "toggle");

      if(this.previewOnDblClick) {
        this.connect(this.getParent(), "_layoutChildren",
            dojo.hitch(this, function() {
                this._isonlypreview = false;
            }));
      }
    },

    /* COPY_PASTE_CUSTOMIZATION
     * Use getMarginBoxSimple.
     */
    _startupSizes: function() {
      this._container = this.getParent();
      //>>> replace to use getMarginBoxSimple
      // this._closedSize = this._titleHeight = domGeom.getMarginBox(this.titleWrapper).h;
      this._closedSize = this._titleHeight = domGeom.getMarginBoxSimple(this.titleWrapper).h;
      curam.debug.log(bundle.getProperty("curam.layout.ExpandoPane.size")
        + " " + this._closedSize);
      //>>> replace end

      if(this.splitter){
              // find our splitter and tie into it's drag logic
              var myid = this.id;
              arrayUtil.forEach(dijit.registry.toArray(), function(w){
                      if(w && w.child && w.child.id == myid){
                              this.connect(w,"_stopDrag","_afterResize");
                      }
              }, this);
      }

      this._currentSize = domGeom.getContentBox(this.domNode);        // TODO: can compute this from passed in value to resize(), see _LayoutWidget for example
      //>>> addition
      if(this._openWidth){
        curam.debug.log(
          bundle.getProperty("curam.layout.ExpandoPane.changing.size.changing")
            + "currentSize.w "
            + bundle.getProperty("curam.layout.ExpandoPane.changing.size.from")
            + this._currentSize.w + " "
            + bundle.getProperty("curam.layout.ExpandoPane.changing.size.to")
            + this._openWidth);
        this._currentSize.w = this._openWidth;
      }
      curam.debug.log("this._currentSize = ", this._currentSize);
      //>>> addition end

      this._showSize = this._currentSize[(this._isHorizontal ? "h" : "w")];
      this._setupAnims();

      if(this.startExpanded){
              this._showing = true;
      }else{
              this._showing = false;
              this._hideWrapper();
              //>>> remove line below
              //this._hideAnim.gotoPercent(99,true);
      }

      this._hasSizes = true;
    },

    /* COPY_PASTE_CUSTOMIZATION
     * Use getMarginBoxSimple.
     */
    resize: function(/* Object? */newSize) {
      if(!this._hasSizes){ this._startupSizes(newSize); }

      // compute size of container (ie, size left over after title bar)
      //>>> replace to use getMarginBoxSimple
      //var currentSize = domGeom.getMarginBox(this.domNode);
      var currentSize = domGeom.getMarginBoxSimple(this.domNode);
      //>>> replace end
      this._contentBox = {
              w: newSize && "w" in newSize ? newSize.w : currentSize.w,
              h: (newSize && "h" in newSize ? newSize.h : currentSize.h) - this._titleHeight
      };
      domStyle.set(this.containerNode, "height", this._contentBox.h + "px");

      if(newSize){
              domGeom.setMarginBox(this.domNode, newSize);
      }

      this._layoutChildren();
    },

    /*
     * Make the function use the faster margin box getter.
     */
    _afterResize: function(e) {
      var afterResize = dojox.layout.ExpandoPane.prototype._afterResize;
      afterResize._useMarginBoxSimple = true;
      afterResize.apply(this, arguments);
      delete afterResize._useMarginBoxSimple;
    },

    enterCheck: function(evt) {
      if(evt.keyCode == 13) {
        this.toggle();
        dojo.stopEvent(evt);
      }
    },

    /**
     * Handle smart panel loading.
     */
    toggle: function() {
      if(!this._showing){
        // if the node containing the toggle function call is related to
        // the smart panel, lazy load the iframe contents if it is not
        // already loaded
        if(dojo.hasClass(this.domNode, "smart-panel")){
          smartPanel.loadSmartPanelIframe();
        }
      }

      this.inherited(arguments);

      //search node
      if(dojo.query('.dijitExpandoPane .dijitAccordionTitle')) {
          var lastNode;
          dojo.query('.dijitExpandoPane .dijitAccordionTitle').forEach(function(node){
              lastNode = node;
          });

          dojo.addClass(lastNode, "dijitAccordionTitle-last");
      }
    },

    /* COPY_PASTE_CUSTOMIZATION
     * To improve performance by skipping expensive operations.
     */
    _hideWrapper: function() {
      // summary: Set the Expando state to "closed"
      domClass.add(this.domNode, "dojoxExpandoClosed");

      domStyle.set(this.cwrapper,{
        //>>> remove following line
        //visibility: "hidden",
              opacity: "0"
        //>>> remove following line
        //overflow: "hidden"
      });
    },

    /* COPY_PASTE_CUSTOMIZATION
     * To improve performance by skipping expensive operations.
     */
    _showEnd: function() {
      // summary: Common animation onEnd code - "unclose"
      domStyle.set(this.cwrapper, {
              opacity: 0
              //>>> remove following line
              //visibility:"visible"
      });
      baseFx.anim(this.cwrapper, {
              opacity: this._isonlypreview ? this.previewOpacity : 1
      }, 227);
      domClass.remove(this.domNode, "dojoxExpandoClosed");
      if(!this._isonlypreview){
              setTimeout(lang.hitch(this._container, "layout"), 15);
      }else{
              this._previewShowing = true;
              this.resize();
      }
    }
  });

  return ExpandoPane;
});

},
'dijit/form/_FormValueMixin':function(){
define("dijit/form/_FormValueMixin", [
	"dojo/_base/declare", // declare
	"dojo/dom-attr", // domAttr.set
	"dojo/keys", // keys.ESCAPE
	"dojo/_base/sniff", // has("ie"), has("quirks")
	"./_FormWidgetMixin"
], function(declare, domAttr, keys, has, _FormWidgetMixin){

/*=====
	var _FormWidgetMixin = dijit.form._FormWidgetMixin;
=====*/

	// module:
	//		dijit/form/_FormValueMixin
	// summary:
	//		Mixin for widgets corresponding to native HTML elements such as <input> or <select> that have user changeable values.

	return declare("dijit.form._FormValueMixin", _FormWidgetMixin, {
		// summary:
		//		Mixin for widgets corresponding to native HTML elements such as <input> or <select> that have user changeable values.
		// description:
		//		Each _FormValueMixin represents a single input value, and has a (possibly hidden) <input> element,
		//		to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)
		//		works as expected.

		// readOnly: Boolean
		//		Should this widget respond to user input?
		//		In markup, this is specified as "readOnly".
		//		Similar to disabled except readOnly form values are submitted.
		readOnly: false,

		_setReadOnlyAttr: function(/*Boolean*/ value){
			domAttr.set(this.focusNode, 'readOnly', value);
			this._set("readOnly", value);
		},

		postCreate: function(){
			this.inherited(arguments);

			if(has("ie")){ // IE won't stop the event with keypress
				this.connect(this.focusNode || this.domNode, "onkeydown", this._onKeyDown);
			}
			// Update our reset value if it hasn't yet been set (because this.set()
			// is only called when there *is* a value)
			if(this._resetValue === undefined){
				this._lastValueReported = this._resetValue = this.value;
			}
		},

		_setValueAttr: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
			// summary:
			//		Hook so set('value', value) works.
			// description:
			//		Sets the value of the widget.
			//		If the value has changed, then fire onChange event, unless priorityChange
			//		is specified as null (or false?)
			this._handleOnChange(newValue, priorityChange);
		},

		_handleOnChange: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
			// summary:
			//		Called when the value of the widget has changed.  Saves the new value in this.value,
			//		and calls onChange() if appropriate.   See _FormWidget._handleOnChange() for details.
			this._set("value", newValue);
			this.inherited(arguments);
		},

		undo: function(){
			// summary:
			//		Restore the value to the last value passed to onChange
			this._setValueAttr(this._lastValueReported, false);
		},

		reset: function(){
			// summary:
			//		Reset the widget's value to what it was at initialization time
			this._hasBeenBlurred = false;
			this._setValueAttr(this._resetValue, true);
		},

		_onKeyDown: function(e){
			if(e.keyCode == keys.ESCAPE && !(e.ctrlKey || e.altKey || e.metaKey)){
				var te;
				if(has("ie") < 9 || (has("ie") && has("quirks"))){
					e.preventDefault(); // default behavior needs to be stopped here since keypress is too late
					te = document.createEventObject();
					te.keyCode = keys.ESCAPE;
					te.shiftKey = e.shiftKey;
					e.srcElement.fireEvent('onkeypress', te);
				}
			}
		}
	});
});

},
'dojo/date/stamp':function(){
define("dojo/date/stamp", ["../_base/kernel", "../_base/lang", "../_base/array"], function(dojo, lang, array) {
	// module:
	//		dojo/date/stamp
	// summary:
	//		TODOC

lang.getObject("date.stamp", true, dojo);

// Methods to convert dates to or from a wire (string) format using well-known conventions

dojo.date.stamp.fromISOString = function(/*String*/formattedString, /*Number?*/defaultTime){
	//	summary:
	//		Returns a Date object given a string formatted according to a subset of the ISO-8601 standard.
	//
	//	description:
	//		Accepts a string formatted according to a profile of ISO8601 as defined by
	//		[RFC3339](http://www.ietf.org/rfc/rfc3339.txt), except that partial input is allowed.
	//		Can also process dates as specified [by the W3C](http://www.w3.org/TR/NOTE-datetime)
	//		The following combinations are valid:
	//
	//			* dates only
	//			|	* yyyy
	//			|	* yyyy-MM
	//			|	* yyyy-MM-dd
	// 			* times only, with an optional time zone appended
	//			|	* THH:mm
	//			|	* THH:mm:ss
	//			|	* THH:mm:ss.SSS
	// 			* and "datetimes" which could be any combination of the above
	//
	//		timezones may be specified as Z (for UTC) or +/- followed by a time expression HH:mm
	//		Assumes the local time zone if not specified.  Does not validate.  Improperly formatted
	//		input may return null.  Arguments which are out of bounds will be handled
	// 		by the Date constructor (e.g. January 32nd typically gets resolved to February 1st)
	//		Only years between 100 and 9999 are supported.
	//
  	//	formattedString:
	//		A string such as 2005-06-30T08:05:00-07:00 or 2005-06-30 or T08:05:00
	//
	//	defaultTime:
	//		Used for defaults for fields omitted in the formattedString.
	//		Uses 1970-01-01T00:00:00.0Z by default.

	if(!dojo.date.stamp._isoRegExp){
		dojo.date.stamp._isoRegExp =
//TODO: could be more restrictive and check for 00-59, etc.
			/^(?:(\d{4})(?:-(\d{2})(?:-(\d{2}))?)?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(.\d+)?)?((?:[+-](\d{2}):(\d{2}))|Z)?)?$/;
	}

	var match = dojo.date.stamp._isoRegExp.exec(formattedString),
		result = null;

	if(match){
		match.shift();
		if(match[1]){match[1]--;} // Javascript Date months are 0-based
		if(match[6]){match[6] *= 1000;} // Javascript Date expects fractional seconds as milliseconds

		if(defaultTime){
			// mix in defaultTime.  Relatively expensive, so use || operators for the fast path of defaultTime === 0
			defaultTime = new Date(defaultTime);
			array.forEach(array.map(["FullYear", "Month", "Date", "Hours", "Minutes", "Seconds", "Milliseconds"], function(prop){
				return defaultTime["get" + prop]();
			}), function(value, index){
				match[index] = match[index] || value;
			});
		}
		result = new Date(match[0]||1970, match[1]||0, match[2]||1, match[3]||0, match[4]||0, match[5]||0, match[6]||0); //TODO: UTC defaults
		if(match[0] < 100){
			result.setFullYear(match[0] || 1970);
		}

		var offset = 0,
			zoneSign = match[7] && match[7].charAt(0);
		if(zoneSign != 'Z'){
			offset = ((match[8] || 0) * 60) + (Number(match[9]) || 0);
			if(zoneSign != '-'){ offset *= -1; }
		}
		if(zoneSign){
			offset -= result.getTimezoneOffset();
		}
		if(offset){
			result.setTime(result.getTime() + offset * 60000);
		}
	}

	return result; // Date or null
};

/*=====
	dojo.date.stamp.__Options = function(){
		//	selector: String
		//		"date" or "time" for partial formatting of the Date object.
		//		Both date and time will be formatted by default.
		//	zulu: Boolean
		//		if true, UTC/GMT is used for a timezone
		//	milliseconds: Boolean
		//		if true, output milliseconds
		this.selector = selector;
		this.zulu = zulu;
		this.milliseconds = milliseconds;
	}
=====*/

dojo.date.stamp.toISOString = function(/*Date*/dateObject, /*dojo.date.stamp.__Options?*/options){
	//	summary:
	//		Format a Date object as a string according a subset of the ISO-8601 standard
	//
	//	description:
	//		When options.selector is omitted, output follows [RFC3339](http://www.ietf.org/rfc/rfc3339.txt)
	//		The local time zone is included as an offset from GMT, except when selector=='time' (time without a date)
	//		Does not check bounds.  Only years between 100 and 9999 are supported.
	//
	//	dateObject:
	//		A Date object

	var _ = function(n){ return (n < 10) ? "0" + n : n; };
	options = options || {};
	var formattedDate = [],
		getter = options.zulu ? "getUTC" : "get",
		date = "";
	if(options.selector != "time"){
		var year = dateObject[getter+"FullYear"]();
		date = ["0000".substr((year+"").length)+year, _(dateObject[getter+"Month"]()+1), _(dateObject[getter+"Date"]())].join('-');
	}
	formattedDate.push(date);
	if(options.selector != "date"){
		var time = [_(dateObject[getter+"Hours"]()), _(dateObject[getter+"Minutes"]()), _(dateObject[getter+"Seconds"]())].join(':');
		var millis = dateObject[getter+"Milliseconds"]();
		if(options.milliseconds){
			time += "."+ (millis < 100 ? "0" : "") + _(millis);
		}
		if(options.zulu){
			time += "Z";
		}else if(options.selector != "time"){
			var timezoneOffset = dateObject.getTimezoneOffset();
			var absOffset = Math.abs(timezoneOffset);
			time += (timezoneOffset > 0 ? "-" : "+") +
				_(Math.floor(absOffset/60)) + ":" + _(absOffset%60);
		}
		formattedDate.push(time);
	}
	return formattedDate.join('T'); // String
};

return dojo.date.stamp;
});

},
'dijit/layout/AccordionPane':function(){
define("dijit/layout/AccordionPane", [
	"dojo/_base/declare", // declare
	"dojo/_base/kernel", // kernel.deprecated
	"./ContentPane"
], function(declare, kernel, ContentPane){

/*=====
	var ContentPane = dijit.layout.ContentPane;
=====*/

	// module:
	//		dijit/layout/AccordionPane
	// summary:
	//		Deprecated widget.   Use `dijit.layout.ContentPane` instead.

	return declare("dijit.layout.AccordionPane", ContentPane, {
		// summary:
		//		Deprecated widget.   Use `dijit.layout.ContentPane` instead.
		// tags:
		//		deprecated

		constructor: function(){
			kernel.deprecated("dijit.layout.AccordionPane deprecated, use ContentPane instead", "", "2.0");
		},

		onSelected: function(){
			// summary:
			//		called when this pane is selected
		}
	});
});

},
'curam/omega3-util':function(){
/*
 * Copyright 2001-2014 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/omega3-util", ["dojo/dom-geometry", "curam/util",
        "curam/html",
        "curam/GlobalVars",
        "cm/_base/_dom",
        "cm/_base/_form",
        "curam/util/RuntimeContext",
        "curam/util/ResourceBundle"
        ], function(domGeom) {

/**
 * Utility functions used across Curam pages.
 */

/*
 * Modification History
 * --------------------
 * 14-Mar-2014 JY [CR00422364] dded the support for aria-expanded in 
 *                toggleCluster().
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 22-Apr-2013 MV [CR00381705] Moved getMarginBoxSimple().
 * 03-Jan-2013 MV [CR00362118] Guard against missing parameter in clearPopup(). 
 * 14-Nov-2012 SB [CR00349320] Fixed form submit when enter key is pressed on 
 *                             toggle button.
 * 24-Oct-2012 MV [CR00347765] Load some dependencies only on demand, code
 *    cleanup.
 * 15-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 28-Aug-2012 MV [CR00339341] Add missing dependency.
 * 14-Aug-2012 MV [CR00338135] Remove dependency on full Dojo API. Add missing
 *      dependencies.
 * 31-Jul-2012 MV [CR00336202] Migrate to take on Dojo 1.7.3
 * 31-Jan-2012 MV [CR00302081] Move away from global context. 
 * 07-Nov-2011 PK [CR00289859] Dojo 1.6.1 upgrade and IE9+ support. 
 * 12-Jul-2011 KW [CR00275353] Refactored openUserPrefsEditor().
 * 25-Mar-2011 SK [TEC-6335]   Removed jsModals indicator, as modals are always
 *                             on for v6.
 * 18-Feb-2011 BOS[TEC-6255]   Changing 'openPopupFromCTCodeNoDomain' function
 *                              as a separator span has been removed to support
 *                              proper styling.
 * 31-Jan-2011 MK [CR00250297] Add uimType parameter to popup properties.
 * 28-Jan-2011 MV [CR00245381] Remove obsolete help settings for dialogs.
 * 21-Jan-2011 DG [CR00243540] Changed "console.log" to "curam.debug.log".
 * 26-Jan-2011 KW [CR00244099] Rewrote the toggleCluster function.
 * 06-Jan-2011 KW [CR00240549] Cluster toggle arrow now reflects the cluster's
 *                             state
 * 13-Dec-2010 KW [CR00238319] Fixed so Cluster that are initially collapsed,
 *                             can be expanded.
 * 10-Dec-2010 MK [CR00232761] Fixed the functions that handle checkboxes.
 * 25-Nov-2010 SJ [CR00228438] Added calendarOpenModalDialog to handle link clicks
 *                             on calendar.
 * 03-Nov-2010 MV [CR00225331] Handle toggling for clusters with no header.
 * 19-Oct-2010 AF [CR00223550] Added span elements to link created in
 *                             replaceSubmitButton to display rounded corners.
 * 14-Oct-2010 MV [CR00223441] Move functions to curam.util namespace.
 * 04-Oct-2010 MV [CR00221605] When replacing submit buttons, preserve
 *    the existing element classes.
 * 20-Sep-2010 BOS[TEC-3591] Refactored "openPopup".
 * 27-Aug-2010 MV [CR00217499] Replace the use of escape() with the correct
 *                  function.
 * 28-Jul-2010 JY [CR00211660] Fix the issue that a cluster doesn't hide the description
 *                  when it is collapsed by invoking the 'toggleCluster' function.
 * 27-Jul-2010 MK [CR00211743] Optionally display the help icon on a modal dialog.
 * 22-Jul-2010 MV [CR00211225] Fixed toggling of clusters when there are more
 *                  than one.
 * 19-Jul-2010 MV [CR00210892] Fixed toggling of clusters containing paginated
 *                  LIST.
 * 05-Jul-2010 SOS[CR00209386] Fixed ScrollingTabController override to size vertically.
 * 29-Jun-2010 SC [CR00204664] Added ScrollingTabController override for performance improvement.
 * 08-Jun-2010 MV [CR00202412] Remove hardcoded sizes for date and frequency selectors.
 * 03-Jun-2010 MV [CR00202062] Rolled back some changes as the functions are still needed.
 * 27-May-2010 AF [CR00201814] Modified retrieval of collapsible header node.
 * 25-May-2010 SOS[CR00201419] Removed unused functions and moved globals to curam.GlobalVars
 * 12-Feb-2010 AF [CR00183263] Modified height and width settings for collapsible cluster.
 * 10-Feb-2010 MV [CR00188844] Move the openModalDialog() function to curam.util.
 * 20-Jan-2010 MV [CR00183142] Handle a null argument value in setParentFocus().
 * 25-Nov-2009 MV [CR00175955] Move the setFocus() function to curam.util.
 */

/*
NOTES:
 Removed the following mod history comment in the hope this CR won't clash
 with the DUIM work (CR00221023) for JDE 015.
 * 21-Sep-2011  PK  [CR00220520] Updated multi-select popup search method,
 *                    "openPopupFromCTCode" due to use of new Dojo
 *                    "FilterSelect" list.


1) For popping up separate browser windows, use getAnchorWindowPosition.
   Otherwise, use getAnchorPosition

2) Your anchor tag MUST contain both NAME and ID attributes which are the
   same. For example:
   <A NAME="test" ID="test"> </A>

3) There must be at least a space between <A> </A> for IE5.5 to see the
   anchor tag correctly. Do not do <A></A> with no space.
*/
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  var omega3Util = {

    // getAnchorPosition(anchorname)
    //   This function returns an object having .x and .y properties which
    //   are the coordinates of the named anchor, relative to the page.
    getAnchorPosition: function(anchorname) {
      // This function will return an Object with x and y properties
      var useWindow = false;
      var coordinates = new Object();
      var x=0;
      var y=0;
    
      // Logic to find position
      x = AnchorPosition_getPageOffsetLeft(document.getElementById(anchorname));
      y = AnchorPosition_getPageOffsetTop(document.getElementById(anchorname));
    
      coordinates.x = x;
      coordinates.y = y;
      return coordinates;
    },

    // getAnchorWindowPosition(anchorname)
    //   This function returns an object having .x and .y properties which are the coordinates
    //   of the named anchor, relative to the window
    getAnchorWindowPosition: function(anchorname) {
      var coordinates = getAnchorPosition(anchorname);
      var x=0;
      var y=0;
      if (isNaN(window.screenX)) {
        x = coordinates.x - document.body.scrollLeft + window.screenLeft;
        y = coordinates.y - document.body.scrollTop + window.screenTop;
    
      } else {
        x = coordinates.x + window.screenX + (window.outerWidth-window.innerWidth) - window.pageXOffset;
        y = coordinates.y + window.screenY + (window.outerHeight-24-window.innerHeight) - window.pageYOffset;
      }
      coordinates.x = x;
      coordinates.y = y;
      return coordinates;
    },

    // Functions for IE to get position of an object

    AnchorPosition_getPageOffsetLeft: function(el) {
      var ol = el.offsetLeft;
      while ((el = el.offsetParent) != null) {
        ol += el.offsetLeft;
      }
      return ol;
    },
    
    AnchorPosition_getWindowOffsetLeft: function(el) {
      var scrollamount = document.body.scrollLeft;
      return AnchorPosition_getPageOffsetLeft(el)-scrollamount;
    },
    
    AnchorPosition_getPageOffsetTop: function(el) {
      var ot = el.offsetTop;
      while((el = el.offsetParent) != null) {
        ot += el.offsetTop;
      }
      return ot;
    },
    
    AnchorPosition_getWindowOffsetTop: function(el) {
      var scrollamount = document.body.scrollTop;
      return AnchorPosition_getPageOffsetTop(el)-scrollamount;
    },

    // object which stores mapping information,
    PopupMapping: function(name,targetWidgetID) {
      this.name = name;
      this.targetWidgetID = targetWidgetID;
    },
    
    openPopupFromCTCode: function(anchorName, popupInstanceName, theLink,
        parameters) {
      var list = theLink.parentNode.parentNode.parentNode.childNodes[0];
      // "list" now points to the dom node of the FilteringSelect, dijit.byNode can
      // be used to get a reference to the dijit.
      var dijitFilteringSelect = dijit.byNode(list);
      if (dijitFilteringSelect) {
        var selectedCode = dijitFilteringSelect.getValue();
      } else {
        var list = theLink.parentNode.parentNode.parentNode.childNodes[1];
        var selectedCode = list.options[list.selectedIndex].value;
      }
      if (selectedCode != "") {
        if (curam.popupCTCodeMappings[selectedCode]) {
          openPopupFromDomain(anchorName, popupInstanceName,
            curam.popupCTCodeMappings[selectedCode], parameters, false);
        }
      }
    },

    openPopupFromCTCodeNoDomain: function(anchorName, popupInstanceName,
        theLink, parameters) {
      // there is  a filler span in between the input node
      // and the select node, so we have to go to the third node in the list
      var list = theLink.parentNode.parentNode.parentNode.childNodes[2];
      // "list" now points to the dom node of the FilteringSelect, dijit.byNode can
      // be used to get a reference to the dijit.
      var dijitFilteringSelect = dijit.byNode(list);
      var popupProps;
      var pageID;
      var createPageID;
      var height;
      var width;
      var scrollBars;
      var insertMode;
      var codeTableCode;
    
      if (dijitFilteringSelect) {
        var selectedCode = dijitFilteringSelect.getValue();
      } else {
        var list = theLink.parentNode.parentNode.parentNode.childNodes[1];
        var selectedCode = list.options[list.selectedIndex].value;
      }
    
      if (selectedCode != "") {
        if (curam.popupCTCodeMappings[selectedCode]) {
          popupProps = getPopupProperties(curam.popupCTCodeMappings[selectedCode]);
          pageID = popupProps.pageID;
          createPageID = popupProps.createPageID;
          height = popupProps.height;
          width = popupProps.width;
          scrollBars = popupProps.scrollBars;
          insertMode = popupProps.insertMode;
          codeTableCode = popupProps.codeTableCode;
    
          var uimType = popupProps.uimType; 
          if (uimType == "DYNAMIC") {
            openPopup(anchorName, popupInstanceName, null, pageID, createPageID,
                width, height, scrollBars, insertMode, null, null, parameters,
                false);
          }
        }
      }
    },

    openPopupFromDomain: function(anchorName, popupInstanceName,
        domain, parameters, openCreatePage) {
      var popupProps = getPopupProperties(domain);
      var pageID = popupProps.pageID;
      var createPageID = popupProps.createPageID;
      var height = popupProps.height;
      var width = popupProps.width;
      var scrollBars = popupProps.scrollBars;
      var insertMode = popupProps.insertMode;
      var codeTableCode = popupProps.codeTableCode;
    
      openPopup(anchorName, popupInstanceName, domain,
          pageID, createPageID, width, height, scrollBars, insertMode,
          codeTableCode, parameters, openCreatePage);
    },
    
    openPopupNoDomain: function(anchorName, popupInstanceName, pageID,
        createPageID, width, height, scrollBars, insertMode, parameters,
        openCreatePage) {
      openPopup(anchorName, popupInstanceName, null, pageID, createPageID, width,
                height, scrollBars, insertMode, null, null, parameters,
                openCreatePage);
    },
    
    openPopup: function(anchorName, popupInstanceName, domain,
        pageID, createPageID, width, height, scrollBars, insertMode,
        codeTableCode, parameters, openCreatePage) {
      setMappingsLoaded(popupInstanceName);
      var coord = getAnchorWindowPosition(anchorName);
      coord.y = coord.y+25;  // move the popup down from the anchor
    
      //check if the popup will be displayed off screen and move it back if so.
      if(coord.x + width > screen.availWidth) {
        coord.x-= (coord.x + width) - screen.availWidth;
            coord.x-= 15; // extra offset
      }
      if(coord.y + height > screen.availHeight) {
        coord.y -= (coord.y + height) - screen.availHeight;
            coord.y -= 35; // extra offset
      }
    
      //close what ever popup is open at the moment
      //currently can only have one popup open at the time
      if(curam.popupWindow && !curam.popupWindow.closed) {
        curam.popupWindow.close();
      }
    
      //the curam.currentPopupInstanceName variable must be set, because all popups
      //must use "executeOpenerMapping() to assign the selected result in the popup
      //to the widget curam.currentPopupInstanceName on the opening/parent page.
      curam.currentPopupInstanceName = popupInstanceName;
      curam.currentPopupProps
          = setPopupProperties(pageID,domain,codeTableCode,width,height,scrollBars,
                               createPageID,insertMode,null);
    
      //this should be excessive - remove after checking.
      var ctx = jsScreenContext;
      ctx.addContextBits('POPUP');
      ctx.clear('TAB|TREE|AGENDA');
      var url = "";
      if (openCreatePage == true) {
      url = createPageID;
    
      } else {
        url = pageID;
      }
      if (parameters && parameters.length > 0) {
        url = url + "?" + parameters;
        url += "&";
      } else {
        url += "?";
      }
      url += ctx.toRequestString();
    
      if (window.curam.util.showModalDialog) {
        curam.util.showModalDialog(url, null, width, height, coord.x, coord.y,
                                   false, null, null);
      } else {
        curam.popupWindow =
        window.open(url,createWindowName(curam.currentPopupInstanceName),
                    getPopupAttributes(width, height, scrollBars)
                    + "screenX="+coord.x+",left="+coord.x+",screenY="+coord.y+","
                    + "top="+coord.y);
      }
    },

    addPopupMapping: function(popupName, resultName, targetWidget) {
      var popupMappingRepository = curam.popupMappingRepository;
      // don't add the mappings again if they have been marked as loaded
      // i.e. the link to open the popup has been clicked multiple times, we don't
      // want to add multiple mappings.
      if(curam.popupMappingLoaded[popupName] == true){
        return;
      }
    
      // check if this is the first time we are adding a mapping for this popup
      if(popupMappingRepository[popupName] == null) {
    
        popupMappingRepository[popupName] = [];
        popupMappingRepository[popupName][resultName] = [];
        popupMappingRepository[popupName][resultName][0] = targetWidget;
      } else {
        // otherwise mappings have been added allready for this popup
        // now check if a mapping exists for this resultName
        if(popupMappingRepository[popupName][resultName] == null) {
          popupMappingRepository[popupName][resultName] = [];
          popupMappingRepository[popupName][resultName][0] = targetWidget;
        } else {
          // last scenario, mappings exist for this popup AND also exist for this result allready
          // we just add to the end of the array. ie. a popup result is being mapping to multiple widgets
    
          var numMappingsForResult = popupMappingRepository[popupName][resultName].length;
          popupMappingRepository[popupName][resultName][numMappingsForResult] = targetWidget;
        }
      }
    },

    setMappingsLoaded: function(popupName) {
      curam.popupMappingLoaded[popupName] = true;
    },

    // mappings are only supported to widgets with a value attribute (various <input>) and
    // innerHTML attributes. Currently this is used for only textfield, textarea, hidden field and
    // span tags.
    executeMapping: function(resultName, value) {
      var pmr = curam.popupMappingRepository;
      var cpin = curam.currentPopupInstanceName;
      // execute all mappings for the currently opened popup
      if(!pmr || !pmr[cpin] || pmr[cpin][resultName] == null) {
        return; // a page may not map every result that a popup "exposes"
      }
    
      for(var i = 0; i < pmr[cpin][resultName].length; i++) {
        var target = null;
        target = dojo.byId(pmr[cpin][resultName][i]);
        // check the tag type to set it correctly
        if(target.tagName == "SPAN") {
          target.innerHTML = curam.html.splitWithTag(value, null, null, escapeXML);
          target.setAttribute("title", value); //sets title to string in field
          target._reposition = target._reposition || dojo.query("div", target).length > 0;
           if(target._reposition) {
             var actions = cm.nextSibling(target, "span");
             if(actions) {
               var targetHeight = domGeom.getMarginBoxSimple(target).h;
               var actionHeight = domGeom.getMarginBoxSimple(actions).h;
               dojo.style(actions, "position", "relative");
                   var diff = targetHeight - actionHeight - 
                                ((dojo.isIE && dojo.isIE < 9) ? 2 : 0);
               dojo.style(actions, "bottom", "-"+(diff) + "px");
             }
           }
        } else if (target.tagName == "TEXTAREA") {
          // Insertion at cursor position is only supported for text areas
          if (curam.currentPopupProps.insertMode == "insert") {
            insertAtCursor(target, escapeXML(value));
          } else if (curam.currentPopupProps.insertMode == "append") {
            target.value += value;
          } else {
            target.value = value;
          }
        } else if (dijit.byId(pmr[cpin][resultName][i])) {
              dijit.byId(pmr[cpin][resultName][i]).set("value", value);
          target.value = value;
        } else {
          target.value = value;
        }
      }
    },

    insertAtCursor: function(field, value) {
      if (document.selection) {
        //IE support
        field.focus();
        sel = document.selection.createRange();
        sel.text = value;
      } else if (field.selectionStart || field.selectionStart == '0') {
        //MOZILLA/NETSCAPE support
        var startPos = field.selectionStart;
        var endPos = field.selectionEnd;
        field.value = field.value.substring(0, startPos)
        + value
        + field.value.substring(endPos, field.value.length);
      } else {
        field.value += value;
      }
    },


    // Escapes XML characters in strings that are referenced in the XML document.
    escapeXML: function(string) {
      return string.replace(/&/g,"&#38;")
               .replace(/</g,"&#60;")
               .replace(/>/g,"&#62;")
               .replace(/"/g,"&#34;")
               .replace(/'/g,"&#39;");
    },

    // simple wrapper that is only called on a popup page to execute a mapping
    // on the page that opened it. This method reduces the amount of code our
    // custom jsp tags have to write into a page
    executeOpenerMapping: function(resultName, value) {
      var parent = undefined;
    
      // Check that it is a popup/modal & that parent exists
      if (curam.util.isModalWindow()) {
        // if opened as a modal dialog,
        parent = curam.dialog.getParentWindow(window);
    
      // the following branch caters for cases when modals are off and dialog opens
      // as normal popup
      } else if (window.dialogArguments) {
        // if opened as a popup dialog,
        parent = window.dialogArguments[0];
      }
    
      if ((parent) && (!parent.closed)) {
            parent.executeMapping(resultName,value);
      } else {
        curam.debug.log("curam.omega3-util.executeOpenerMapping:, " 
            + bundle.getProperty("curam.omega3-util.parent"));
      }  
    },

    storePopupInputFromWidget: function(name,widget) {
      var value = null;
      value = dojo.byId(widget).value;
      if(value) {
        curam.popupInputs[name] = value;
      } else {
        curam.popupInputs[name] = "";
      }
    },

    getPopupInput: function(name) {
      if(curam.popupInputs[name] != null) {
        return curam.popupInputs[name];
      } else {
        return "";
      }
    },

    PopupProperties: function(pageID,width,height,scrollBars,createPageID,insertMode,uimType) {
      this.width = width;
      this.height = height;
      this.scrollBars = scrollBars;
      this.pageID = pageID;
      this.createPageID = createPageID;
      if (insertMode == null) {
        this.insertMode = "overwrite";
      } else {
        this.insertMode = insertMode;
      }
      if (uimType != null) {
        this.uimType = uimType;
      }
    },
    
    setPopupProperties: function(pageID,domain,codeTableCode,width,height,
        scrollBars,createPageID,insertMode,uimType) {
      if(codeTableCode) {
        curam.popupCTCodeMappings[codeTableCode] = domain;
      }
      curam.popupPropertiesRepository[domain] =
          new PopupProperties(pageID,width,height,scrollBars,createPageID,
              insertMode,uimType);
    },
    
    getPopupAttributes: function(width, height, scrollBars) {
      var attributeString =
        "width=" + width + "," +
        "height=" + height + "," +
        "scrollbars=" + (scrollBars ? "yes" : "no") + ",";
      return attributeString;
    },
    
    getPopupAttributesIEModal: function(popupType) {
      var attributeString =
        "dialogWidth:" + curam.popupPropertiesRepository[popupType].width + "px;"
        + "dialogHeight:"+ curam.popupPropertiesRepository[popupType].height + "px;";
      return attributeString;
    },
    
    trimFileExtension: function(fileName) {
      // get the file name without the extension
      var pathDelimIndex = fileName.lastIndexOf("/")+1;
      if(pathDelimIndex == -1) {
        // just in case, try a backslash
        pathDelimIndex = fileName.lastIndexOf("\\")+1;
      }
      if(pathDelimIndex == -1) {
        pathDelimIndex = 0;
      }
      return fileName.substring(pathDelimIndex,fileName.lastIndexOf("."));
    },


    getPopupProperties: function(popupType) {
  return curam.popupPropertiesRepository[popupType];
    },

    /*** BEGIN: Calendar Goto Date handlers ***/
    
    validateDate: function(proposedDate) {
      /* this function has been left here for backwards compatibility - to avoid customer impact.
         The functionality has moved into curam.validation.validateDate() */
      require(["curam/validation"]);
      return curam.validation.validateDate(proposedDate).valid;
    },

    /**
     * Calendar "goto date" button handler. Validates the input and adds the required
     * "startDate" parameter to the URL.
     */
    addStartDate: function(event) {
      require(["curam/validation"]);
      var inputStartDate = dojo.byId("startDate").value;
      var valResult = curam.validation.validateDate(inputStartDate);
      if (valResult.valid) {
        var gotoDateLink = dojo.byId('gotoDate');
        gotoDateLink.href = curam.util.replaceUrlParam(
            gotoDateLink.href, "startDate", inputStartDate);
        return true;
    
      } else {
        require(["curam/validation/calendar"], function() {
          alert(curam.validation.calendar.invalidGotoDateEntered.replace(
              "%s", inputStartDate).replace("%s", jsDFs));
        });
    
        dojo.stopEvent(event);
        return false;
      }
    },

    /** Key handler for the calendar's "goto date" field.
     * The function forwards the event to the goto date button handler
     * and if valid, goes to the new date.
     */
    checkEnter: function(keyPress) {
      if (keyPress.keyCode == 13) {
        if(addStartDate(keyPress)) {
          var gotoDateLink = dojo.byId('gotoDate');
          window.location = gotoDateLink.href;
          return true;
        }
    
        return false;
      }
    
      return true;
    },

    /*** END: Calendar Goto Date handlers ***/

    createWindowName: function(windowName) {
      // javascript doesn't like '$' or '.' characters in window names,
      // unfortunately we use curam texthelper field names to give
      // each popup instance a unique name. So we have to relace
      // '$' with something javascript does like.
      // Can't get string.replace(regexp,""); function to work so
      // doing this the "long" way.
      var result = new String("");
      for (var i = 0; i < windowName.length; i++) {
        var ch = windowName.charAt(i);
        if(ch == "$" || ch == ".") {
          result += "_";
        } else {
          result += ch;
        }
      }
      return result;
    },
    
    clearPopup: function(idSource, event) {
      var id_base = idSource.id.substring(0,idSource.id.indexOf('_clear'));
      var valueID = id_base + "_value";
      var descriptionID = id_base + "_desc";
      var descriptionHiddenFieldID = id_base + "_deschf";
    
      // NB: Use "value" instead of "innerHTML" for a text area to ensure it
      // works in all browsers.
    
      // Clear the element holding the "value" returned from the popup
      var valueElement = dojo.byId(valueID);
      if (valueElement) {
        if (valueElement.tagName == "INPUT") {
          valueElement.value = "";
        } else if (valueElement.tagName == "TEXTAREA") {
          valueElement.value = "";
        } if (valueElement.tagName == "SPAN") {
          // You cannot set the width of a span so to ensure it stays visible
          // we use non-breaking spaces.
          valueElement.innerHTML = curam.POPUP_EMPTY_SPAN_VALUE;
        }
      }
    
    
      // the "visible" description field can be an input control, a text area or a
      // container such as <span>
      var descriptionElement = dojo.byId(descriptionID);
      if(descriptionElement) {
        if (descriptionElement.tagName == "INPUT"){
          descriptionElement.value = "";
        } else if (descriptionElement.tagName == "TEXTAREA") {
          descriptionElement.value = "";
        } else if (descriptionElement.tagName == "SPAN") {
          // You cannot set the width of a span so to ensure it stays visible
          // we use non-breaking spaces.
          descriptionElement.innerHTML = curam.POPUP_EMPTY_SPAN_VALUE;
          descriptionElement.removeAttribute("title");
        }
      }
    
      // the "hidden" description field is always a hidden field
      var descriptionHiddenElement = dojo.byId(descriptionHiddenFieldID);
      if(descriptionHiddenElement) {
        if (descriptionHiddenElement.tagName == "INPUT"){
          descriptionHiddenElement.value = '';
        } else {
          descriptionHiddenElement.innerHTML='&nbsp';
        }
      }
      if (event) {
        event = dojo.fixEvent(event);
        dojo.stopEvent(event);
      }
      return false;
    },


    /*
     * The following functions are used by the expanding / collapsing rules tree.
     * They are adapted from an article on A List Apart:
     *    http://www.alistapart.com/stories/dom2/
     */

    // Swap an image - used for rollovers
    swapImage: function(img_name, img_src) {
      dojo.byId(img_name).src = img_src;
    },

    // This function provides support for using checkboxes
    // to select rows in a list. The value of each checkbox
    // is compiled into a tabbed delimited string and added
    // to the url of the hyperlink.
    // parameterName: The name of the parameter to create
    //                as well as being the name of the checkbox.
    // hyperLink: The link that has been clicked.
    appendTabColumn: function(parameterName, hyperlink) {
      var appendString;
      var values = [];
    
      dojo.query("input[name='" + parameterName + "']").filter(
      function(singleItem) {
        return singleItem.checked;
      }).forEach(function(singleItem){
            values.push(singleItem.value);
            });
    
      appendString = values.join("\t");
      // first check if we found any checkboxes
      hyperlink.href = hyperlink.href + (hyperlink.href.indexOf('?') == -1 ? '?' : '&');
    
      if (appendString != '') {
        hyperlink.href = hyperlink.href + parameterName + '='
            + encodeURIComponent(appendString);
      } else {
        hyperlink.href = hyperlink.href + parameterName + '=';
      }
    },

    // Following Javascripts allow setting and unsetting a range of checkboxes in a gantt chart.
    
    ToggleAll: function(e, paramName) {
      dojo.query("input[name='" + paramName + "']").forEach(function(singleItem){
      if (singleItem.checked === true){
        singleItem.checked = false;
      }else{
        singleItem.checked = true;
      }
      });
    },
    
    ToggleSelectAll: function(e, paramName) {
      if (e.checked) {
        CheckAll(paramName);
      } else {
        ClearAll(paramName);
      }
    },

    CheckAll: function(paramName) {
      dojo.query("input[name='" + paramName + "']").forEach(function(singleItem){
        singleItem.checked = true;
      });
    },
    
    ClearAll: function(paramName) {
      dojo.query("input[name='" + paramName + "']").forEach(function(singleItem){
        singleItem.checked = false;
      });
    },


    Check: function(e) {
      e.checked = true;
    },
    
    Clear: function(e) {
      e.checked = false;
    },
    
    ChooseSelectAll: function(e, sAllName, paramName) {
      var sAll = dojo.byId(sAllName);
      if (sAll) {
        if (dojo.query("input[name='" + paramName + "']").every("return item.checked")) {
          Check(sAll);
        } else {
          Clear(sAll);
        }
      }
    },

    selectAllIfNeeded: function(sAllName, paramName) {
      if(dojo.query("input[name='" + paramName + "']").some("return !item.checked")) {
        return;
      }
      var sAll = dojo.byId(sAllName);
      if (sAll) {
        Check(sAll);
      }
    },

    CopyToClipboard: function(txt) {
      if (window.clipboardData) {
        clipboardData.clearData();
        clipboardData.setData("Text", txt);
        window.status = 'pasted';
        window.status = '';
      }
    },

    /**
     * Called on the "onsubmit" event of a form to suppress double-clicks on
     * the submit button. Returns true if form submission should be allowed
     * to continue.
     */
    dc: function(aForm, returnToSelft, event) {
      // if this form has already been submitted, don't allow it to be
      // submitted again
      if (cm.wasFormSubmitted(aForm)) {
        var evt = dojo.fixEvent(event);
        dojo.stopEvent(evt);
        return false;
      }
      cm.setFormSubmitted(aForm, 1);
      return true;
    },
    
    setFocus: function() {
      curam.util.setFocus();
    },

    /**
     * Once a pop up has carried out its functionality,
     * it needs to closed and focus reset on the parent.
     */
    setParentFocus: function(event) {
      curam.debug.log("curam.omega3-util.setParentFocus: " 
        + bundle.getProperty("curam.omega3-util.called"));
      var openerWin = curam.dialog.getParentWindow(window);
      //Check parent exists before trying to focus on it
    
      if(!openerWin.closed){
        //set focus to parent
        openerWin.focus();
      } else{
            alert("The parent window has been closed");
      }
      if (event || window.event) {
        dojo.stopEvent(event || window.event);
      }
      //Close pop up
      curam.dialog.closeModalDialog();
    },

    /**
     * A collection of useful functions for manipulating the DOM.
     */

    /**
     * Create a new element.
     *
     * From an article by Dethe Elza on IBM developerWorks:
     * http://www-128.ibm.com/developerworks/xml/library/x-matters41.html
     *
     * For example, this...
     *  var div = document.createElement('div');
     *  div.className = 'myCSSclass';
     *  div.id = 'myId';
     *  div.style.position = 'absolute';
     *  div.style.left = '300px';
     *  div.style.top = '200px';
     *  var text = "This is the text content of the node";
     *  var textNode = document.createTextNode(text);
     *  div.appendChild(textNode);
     *
     * can be replaced by...
     *
     * createElement('div',
     *               {class: 'myCSSclass', id: 'myId'},
     *               {position: 'absolute', left: '300px', top: '200px'},
     *               'This is the text content of the node')
     */
    createElement: function(name, attrs, style, text) {
      var e = dojo.create(name, attrs);
      if (style) {
        for (key in style) {
          e.style[key] = style[key];
        }
      }
      if (text) {
        e.appendChild(document.createTextNode(text));
      }
      return e;
    },
    
    getParentWin: function() {
      return curam.dialog.getParentWindow(window);
    },

    // Retrieve all checkboxes from the question popup page. If the
    // box is checked add this question to the Matrix i.e. the
    // 'opener' window of the popup.
    addQuestionsFromPopup: function(evt) {
      evt = dojo.fixEvent(evt);
      dojo.stopEvent(evt);
      //This guards against the user double clicking the button
      if(window._questionsAdded){return;}
      window._questionsAdded = true;
    
      var parentWin = getParentWin();
    
      var checkboxes = dojo.query('INPUT');
      var questions = [];
      dojo.query("INPUT[type='checkbox']")
                    .forEach(function(item){
                            if (item.checked && item.id.indexOf('__o3mswa') < 0) {
                                    questions.push(item.value);
                            }
                    });
    
      var array = dojo.toJson(questions);
    
      parentWin.newQuestions = array;
          parentWin.curam.matrix.Constants.container.matrix.addQuestionsFromPopup();
      curam.dialog.closeModalDialog();
      return false;
    },


    // Retrieve all checkboxes from the outcome popup page. If the
    // box is checked add this outcome to the Matrix i.e. the
    // 'opener' window of the popup.
    addOutcomesFromPopup: function(evt) {
      evt = dojo.fixEvent(evt);
      dojo.stopEvent(evt);
      //This guards against the user double clicking the button
      if(window._outcomesAdded){return;}
      window._outcomesAdded = true;
      var outcomes = [];
      dojo.query("INPUT[type='checkbox']")
            .forEach(function(item){
              if (item.checked && item.id.indexOf('__o3mswa') < 0) {
                outcomes.push(item.value);
              }
            });
          getParentWin().curam.matrix.Constants.container.matrix.addOutcomesFromPopup(outcomes);
      curam.dialog.closeModalDialog();
      return false;
    },

    // Adds a listener to the 'onsubmit' event of each form on the page, and calls
    // the addQuestionsFromPopup function
    addMatrixQuestionsPopupListener: function() {
      addMatrixPopupListener(addQuestionsFromPopup);
    },

    // Adds a listener to the 'onsubmit' event of each form on the page, and calls
    // the addOutcomesFromPopup function
    addMatrixOutcomesPopupListener: function() {
      addMatrixPopupListener(addOutcomesFromPopup);
    },
    
    addMatrixPopupListener: function(fn) {
      dojo.query("form").connect("onsubmit", fn);
    },
    
    getRequestParams: function(uriString) {
      var newParams = [];
      var uri = new dojo._Url(uriString);
      if (uri.query != null) {
        var paramsArray = uri.query.split("&");
        for (var i=0; i < paramsArray.length; i++) {
          var arr = paramsArray[i].split("=");
          newParams[arr[0]]=arr[1];
        }
      }
      return newParams;
    },

    // Opens a modal dialog.
    //
    // @deprecated Replaced by curam.util.openModalDialog() function.
    openModalDialog: function(eventOrAnchorTag, windowOptions, left, top) {
      curam.util.openModalDialog(eventOrAnchorTag, windowOptions, left, top);
    },

    //Applies onclick events to collapsible clusters
    initCluster: function(headerNode) {
      var parentNode = headerNode.parentNode;
      var target = dojo.query("div.toggle-group", parentNode);
    
      //If the div has already been created, then just return it
      if (target.length >= 1) {
        return target[0];
      }
    
      var next = cm.nextSibling(headerNode, "p") || cm.nextSibling(headerNode, "table");
      if (!next) {
        return;//Odd. Shouldn't happen
      }
      target = dojo.create("div", { "class":"toggle-group" }, next, "before");
    
      var arr = [];
      var despNode = dojo.query("p.description", headerNode)[0];
      if(despNode) {
        arr.push(despNode);
        var marginBottom = dojo.style(headerNode, "marginBottom");
        dojo.style(headerNode, "marginBottom", 0);
        dojo.style(despNode, "marginBottom", marginBottom + "px");
      }
    
      //Locate cluster node
      var orgClusterNode = parentNode;
      while(orgClusterNode && !(dojo.hasClass(orgClusterNode, "cluster")
          || dojo.hasClass(orgClusterNode, "list"))) {
        orgClusterNode = orgClusterNode.parentNode;
      }
    
      target.isClosed = dojo.hasClass(orgClusterNode, "uncollapse") ? true : false;
    
      //Do not display if initally collapsed
      if (target.isClosed) {
        dojo.style(target, "display", "none");
      }
    
      for (var count = 0; count < parentNode.childNodes.length; count++) {
        if (parentNode.childNodes[count] == headerNode
                    || parentNode.childNodes[count] == target) {
          continue;
        }
        arr.push(parentNode.childNodes[count]);
      }
    
      for (var count = 0; count < arr.length; count++) {
        target.appendChild(arr[count]);
      }
    
      return target;
    },

    /**
     * In some circumstances, the height of a toggled cluster becomes incorrect
     * after animating its change.  This function fixes that.
     */
    initClusterHeight: function(containerNode, headerNode, isClosed) {
      if (containerNode.correctHeight) {
        return;
      }
      var headerHeight = dojo._getBorderBox(headerNode).h;
    
      var totalHeight = 0, childNode;
      for (var count = 0; count < containerNode.childNodes.length; count++) {
        childNode = containerNode.childNodes[count];
        if (childNode == headerNode) {
          continue;
        }
        totalHeight += dojo._getBorderBox(childNode).h;
      }
      if (totalHeight == 0) {
        return;
      }
      if (isClosed) {
        dojo.style(headerNode.parentNode, "height", "");
      }
      containerNode.correctHeight = totalHeight;
    },
    
    getCursorPosition: function(/* DOMEvent */e){
      //      summary
      //      Returns the mouse position relative to the document (not the viewport).
      //      For example, if you have a document that is 10000px tall,
      //      but your browser window is only 100px tall,
      //      if you scroll to the bottom of the document and call this function it
      //      will return {x: 0, y: 10000}
      //      NOTE: for events delivered via dojo.connect() and/or dojoAttachEvent (for widgets),
      //      you can just access evt.pageX and evt.pageY, rather than calling this function.
      e = e || dojo.global().event;
      var cursor = {x:0, y:0};
      if(e.pageX || e.pageY){
              cursor.x = e.pageX;
              cursor.y = e.pageY;
      }else{
              var de = dojo.doc().documentElement;
              var db = dojo.body();
              cursor.x = e.clientX + ((de||db)["scrollLeft"]) - ((de||db)["clientLeft"]);
              cursor.y = e.clientY + ((de||db)["scrollTop"]) - ((de||db)["clientTop"]);
      }
      return cursor;  //      object
    },
    
    overElement: function(/* HTMLElement */element, /* DOMEvent */e) {
      //      summary
      //      Returns whether the mouse is over the passed element.
      //      Element must be display:block (ie, not a <span>)
      element = dojo.byId(element);
      var mouse = getCursorPosition(e);
      var bb = dojo._getBorderBox(element);
      var absolute = dojo._abs(element, true);
      var top = absolute.y;
      var bottom = top + bb.h;
      var left = absolute.x;
      var right = left + bb.w;

      return (mouse.x >= left
              && mouse.x <= right
              && mouse.y >= top
              && mouse.y <= bottom
      );      //      boolean
    },

    /**
     * Shows/hides a cluster.
     */
    toggleCluster: function(clusterDiv, event) {
      
      var toggleButtonSpan = clusterDiv;

      //find the top node containing the onclick arrow.
      while(clusterDiv && !(dojo.hasClass(clusterDiv, "cluster")
          || dojo.hasClass(clusterDiv, "list"))){
        clusterDiv = clusterDiv.parentNode;
      }
    
      //used to track if the cluster has a description.
      var descExists = false;
      
      //We will use dojo.fx animation to preform the expansion/collapsing of our clusters & lists
      //dojo.fx works best on div elements, so we must make the cluster table a child of a div
      //if there are other associated divs, already in place, that must also be part of the animation,
      //then these will be appended to target2, e.g. paginated lists page index
      
      //find all sibling elements of cluster head wrapper
      var toggleElements = dojo.query(' > :not(.header-wrapper) ', clusterDiv.childNodes[0]);
      
      //put all non-divs in target and divs in target 2
      if (!dojo.hasClass(toggleElements[0], "toggleDiv")) { //check if already created
        var target = dojo.create('div', { className: 'toggleDiv'}, toggleElements[0].parentNode);
        var target2 = dojo.create('div', { className: 'toggleDiv2'}, toggleElements[0].parentNode);
        toggleElements.forEach( function (node){
            //append all found siblings
          if(node.tagName != "DIV") {
            target.appendChild(node);
          }
          else {
            target2.appendChild(node);
          }
        });
      } else { //use already created.
        var target = toggleElements[0];
        var target2 = toggleElements[1];
      }
      
      //check for description, this will also have to be part of the animation
      var desc = dojo.query(' > .header-wrapper p ', clusterDiv.childNodes[0])[0];
      if(typeof desc != 'undefined'){
        descExists = true;
      }
      
      //should not be displayed if set to collapsed in uim
      if (dojo.hasClass(clusterDiv, "init-collapsed")) {
        dojo.removeClass(clusterDiv, "init-collapsed");
        dojo.style(target, "display", "none");
      }
      
      //return if the animation has already begun
      if (!target || target.inAnimation) {
        return;
      }
      
      require(["dojo/fx"], function(fx) {
        //The arguments passed to the dojo.fx function are created here
        
        //wipeIn arguments. Used when expanding the cluster
        var DirDownArgs = {
          node: target,
          duration: 600,
          onBegin: function () {
            target.inAnimation = true;
            dojo.removeClass(clusterDiv, "is-collapsed");
            dojo.addClass(clusterDiv, "is-uncollapsed");
            dojo.attr(toggleButtonSpan, "aria-expanded", "true");
            dojo.stopEvent(event);
          },
          onEnd: function() { //change class name to reflect state.
            target.inAnimation = false;
          }
        };
      
        //wipeOut arguments. Used when collapsing the cluster
        var DirUpArgs = {
          node: target,
          duration: 600,
          onBegin: function () {
            target.inAnimation = true;
            dojo.removeClass(clusterDiv, "is-uncollapsed");
            dojo.addClass(clusterDiv, "is-collapsed");
            dojo.attr(toggleButtonSpan, "aria-expanded", "false");
            dojo.stopEvent(event);
          },
          onEnd: function() { //change class name to reflect state.
            target.inAnimation = false;
          }
        };
      
        
        //if associated divs exists, create their related animation args
        if (target2.hasChildNodes()) {
          var pageIndexDown = {
            node: target2,
            duration: 600
          };
          
          var pageIndexUp = {
              node: target2,
              duration: 600
            };
        }
      
        //if description exists, create its related animation args
        if(descExists) {
          var descDown = {
            node: desc,
            duration: 100
          };
          
          var descUp = {
              node: desc,
              duration: 100,
              delay: 500
            };
        }
        //end of arguments
      
        //Preform animation.
        //There will always be a cluster body, but we must cater for the presence
        //of descriptions and page indexes
        if (dojo.hasClass(clusterDiv, "is-collapsed")) { //will expand cluster
          if(typeof descDown != 'undefined') {
            fx.wipeIn(descDown).play(); //description exists
          }
          fx.wipeIn(DirDownArgs).play();  //main cluster body
          if(typeof pageIndexDown != 'undefined') {
            fx.wipeIn(pageIndexDown).play();  //page index exists
          }

        } else if (dojo.hasClass(clusterDiv, "is-uncollapsed")) { //will collapse cluster
          if(typeof pageIndexUp != 'undefined') {
            fx.wipeOut(pageIndexUp).play(); //page index exists
          }
          fx.wipeOut(DirUpArgs).play(); //main cluster body
          if(typeof descUp != 'undefined') {
            fx.wipeOut(descUp).play(); //description exists
          }

        } else {
          curam.debug.log("The cluster does not have a class name indicating" +
                      "its collapsed/uncollapsed state");
        }
      });
    },

    /**
     * Removes the ability to show/hide a cluster or list
     */
    disableClusterToggle: function(node) {
      dojo.addOnLoad(function(){
        node = dojo.byId(node);
        var body = dojo.body();
        while (node && node != body) {
          if (dojo.hasClass(node, "is-collapsed") || dojo.hasClass(node, "is-uncollapsed")) {
            dojo.removeClass(node, "is-collapsed");
            dojo.removeClass(node, "is-uncollapsed");
            dojo.removeAttr(dojo.query("SPAN.grouptoggleArrow", node)[0], "onclick");
          }
          node = node.parentNode;
        }
      });
    },
    
    openUserPrefsEditor: function(event) {
      event = dojo.fixEvent(event);
      var target = event.target;
      while(target && target.tagName != "A") {
        target = target.parentNode;
      }
      
      // mock window object to pass to RuntimeContext
      var mockWindow = {
        location: {
          href:target.href
        }
      };
      var rtc = new curam.util.RuntimeContext(mockWindow);
    
      var href = curam.util.setRpu("user-locale-selector.jspx", rtc);
    
      openModalDialog({href:href},"width=500,height=300",200,150, false);
      return false;
    },

    /**
     * Function that handles the clicks on standard activity
     * links in the calandar.
     *
     * @param event mouse click event object.
     * @param anchor the anchor element which has the URL.
     */
    calendarOpenModalDialog: function(event, anchor) {
      // this stops the event from propagating to any other event handlers e.g. UIMPageAdaptor.
      dojo.stopEvent(event);
      //any change in the functionality of opening modal dialog has an impact on this method too.
      curam.util.openModalDialog(anchor, "");
    }
  };

  // Keep the functions in the global scope for backwards compatibility.
  // TODO: remove when code calling these functions is updated
  for (prop in omega3Util) {
    dojo.global[prop] = omega3Util[prop];
  }
  
  return omega3Util;
});

},
'dijit/form/_AutoCompleterMixin':function(){
define("dijit/form/_AutoCompleterMixin", [
	"dojo/_base/connect", // keys keys.SHIFT
	"dojo/data/util/filter", // patternToRegExp
	"dojo/_base/declare", // declare
	"dojo/_base/Deferred", // Deferred.when
	"dojo/dom-attr", // domAttr.get
	"dojo/_base/event", // event.stop
	"dojo/keys",
	"dojo/_base/lang", // lang.clone lang.hitch
	"dojo/query", // query
	"dojo/regexp", // regexp.escapeString
	"dojo/_base/sniff", // has("ie")
	"dojo/string", // string.substitute
	"dojo/_base/window", // win.doc.selection.createRange
	"./DataList",
	"../registry",	// registry.byId
	"./_TextBoxMixin"	// defines _TextBoxMixin.selectInputText
], function(connect, filter, declare, Deferred, domAttr, event, keys, lang, query, regexp, has, string, win,
			DataList, registry, _TextBoxMixin){

	// module:
	//		dijit/form/_AutoCompleterMixin
	// summary:
	//		A mixin that implements the base functionality for `dijit.form.ComboBox`/`dijit.form.FilteringSelect`


	return declare("dijit.form._AutoCompleterMixin", null, {
		// summary:
		//		A mixin that implements the base functionality for `dijit.form.ComboBox`/`dijit.form.FilteringSelect`
		// description:
		//		All widgets that mix in dijit.form._AutoCompleterMixin must extend `dijit.form._FormValueWidget`.
		// tags:
		//		protected

		// item: Object
		//		This is the item returned by the dojo.data.store implementation that
		//		provides the data for this ComboBox, it's the currently selected item.
		item: null,

		// pageSize: Integer
		//		Argument to data provider.
		//		Specifies number of search results per page (before hitting "next" button)
		pageSize: Infinity,

		// store: [const] dojo.store.api.Store
		//		Reference to data provider object used by this ComboBox
		store: null,

		// fetchProperties: Object
		//		Mixin to the store's fetch.
		//		For example, to set the sort order of the ComboBox menu, pass:
		//	|	{ sort: [{attribute:"name",descending: true}] }
		//		To override the default queryOptions so that deep=false, do:
		//	|	{ queryOptions: {ignoreCase: true, deep: false} }
		fetchProperties:{},

		// query: Object
		//		A query that can be passed to 'store' to initially filter the items,
		//		before doing further filtering based on `searchAttr` and the key.
		//		Any reference to the `searchAttr` is ignored.
		query: {},

		// autoComplete: Boolean
		//		If user types in a partial string, and then tab out of the `<input>` box,
		//		automatically copy the first entry displayed in the drop down list to
		//		the `<input>` field
		autoComplete: true,

		// highlightMatch: String
		// 		One of: "first", "all" or "none".
		//
		//		If the ComboBox/FilteringSelect opens with the search results and the searched
		//		string can be found, it will be highlighted.  If set to "all"
		//		then will probably want to change `queryExpr` parameter to '*${0}*'
		//
		//		Highlighting is only performed when `labelType` is "text", so as to not
		//		interfere with any HTML markup an HTML label might contain.
		highlightMatch: "first",

		// searchDelay: Integer
		//		Delay in milliseconds between when user types something and we start
		//		searching based on that value
		searchDelay: 100,

		// searchAttr: String
		//		Search for items in the data store where this attribute (in the item)
		//		matches what the user typed
		searchAttr: "name",

		// labelAttr: String?
		//		The entries in the drop down list come from this attribute in the
		//		dojo.data items.
		//		If not specified, the searchAttr attribute is used instead.
		labelAttr: "",

		// labelType: String
		//		Specifies how to interpret the labelAttr in the data store items.
		//		Can be "html" or "text".
		labelType: "text",

		// queryExpr: String
		//		This specifies what query ComboBox/FilteringSelect sends to the data store,
		//		based on what the user has typed.  Changing this expression will modify
		//		whether the drop down shows only exact matches, a "starting with" match,
		//		etc.  Use it in conjunction with highlightMatch.
		//		dojo.data query expression pattern.
		//		`${0}` will be substituted for the user text.
		//		`*` is used for wildcards.
		//		`${0}*` means "starts with", `*${0}*` means "contains", `${0}` means "is"
		queryExpr: "${0}*",

		// ignoreCase: Boolean
		//		Set true if the ComboBox/FilteringSelect should ignore case when matching possible items
		ignoreCase: true,

		// Flags to _HasDropDown to limit height of drop down to make it fit in viewport
		maxHeight: -1,

		// For backwards compatibility let onClick events propagate, even clicks on the down arrow button
		_stopClickEvents: false,

		_getCaretPos: function(/*DomNode*/ element){
			// khtml 3.5.2 has selection* methods as does webkit nightlies from 2005-06-22
			var pos = 0;
			if(typeof(element.selectionStart) == "number"){
				// FIXME: this is totally borked on Moz < 1.3. Any recourse?
				pos = element.selectionStart;
			}else if(has("ie")){
				// in the case of a mouse click in a popup being handled,
				// then the win.doc.selection is not the textarea, but the popup
				// var r = win.doc.selection.createRange();
				// hack to get IE 6 to play nice. What a POS browser.
				var tr = win.doc.selection.createRange().duplicate();
				var ntr = element.createTextRange();
				tr.move("character",0);
				ntr.move("character",0);
				try{
					// If control doesn't have focus, you get an exception.
					// Seems to happen on reverse-tab, but can also happen on tab (seems to be a race condition - only happens sometimes).
					// There appears to be no workaround for this - googled for quite a while.
					ntr.setEndPoint("EndToEnd", tr);
					pos = String(ntr.text).replace(/\r/g,"").length;
				}catch(e){
					// If focus has shifted, 0 is fine for caret pos.
				}
			}
			return pos;
		},

		_setCaretPos: function(/*DomNode*/ element, /*Number*/ location){
			location = parseInt(location);
			_TextBoxMixin.selectInputText(element, location, location);
		},

		_setDisabledAttr: function(/*Boolean*/ value){
			// Additional code to set disabled state of ComboBox node.
			// Overrides _FormValueWidget._setDisabledAttr() or ValidationTextBox._setDisabledAttr().
			this.inherited(arguments);
			this.domNode.setAttribute("aria-disabled", value);
		},

		_abortQuery: function(){
			// stop in-progress query
			if(this.searchTimer){
				clearTimeout(this.searchTimer);
				this.searchTimer = null;
			}
			if(this._fetchHandle){
				if(this._fetchHandle.cancel){
					this._cancelingQuery = true;
					this._fetchHandle.cancel();
					this._cancelingQuery = false;
				}
				this._fetchHandle = null;
			}
		},

		_onInput: function(/*Event*/ evt){
			// summary:
			//		Handles paste events
			this.inherited(arguments);
			if(evt.charOrCode == 229){ // IME or cut/paste event
				this._onKey(evt);
			}
		},

		_onKey: function(/*Event*/ evt){
			// summary:
			//		Handles keyboard events

			if(this.disabled || this.readOnly){ return; }
			var key = evt.charOrCode;

			// except for cutting/pasting case - ctrl + x/v
			if(evt.altKey || ((evt.ctrlKey || evt.metaKey) && (key != 'x' && key != 'v')) || key == keys.SHIFT){
				return; // throw out weird key combinations and spurious events
			}

			var doSearch = false;
			var pw = this.dropDown;
			var highlighted = null;
			this._prev_key_backspace = false;
			this._abortQuery();

			// _HasDropDown will do some of the work:
			//		1. when drop down is not yet shown:
			//			- if user presses the down arrow key, call loadDropDown()
			//		2. when drop down is already displayed:
			//			- on ESC key, call closeDropDown()
			//			- otherwise, call dropDown.handleKey() to process the keystroke
			this.inherited(arguments);

			if(this._opened){
				highlighted = pw.getHighlightedOption();
			}
			switch(key){
				case keys.PAGE_DOWN:
				case keys.DOWN_ARROW:
				case keys.PAGE_UP:
				case keys.UP_ARROW:
					// Keystroke caused ComboBox_menu to move to a different item.
					// Copy new item to <input> box.
					if(this._opened){
						this._announceOption(highlighted);
					}
					event.stop(evt);
					break;

				case keys.ENTER:
					// prevent submitting form if user presses enter. Also
					// prevent accepting the value if either Next or Previous
					// are selected
					if(highlighted){
						// only stop event on prev/next
						if(highlighted == pw.nextButton){
							this._nextSearch(1);
							event.stop(evt);
							break;
						}else if(highlighted == pw.previousButton){
							this._nextSearch(-1);
							event.stop(evt);
							break;
						}
					}else{
						// Update 'value' (ex: KY) according to currently displayed text
						this._setBlurValue(); // set value if needed
						this._setCaretPos(this.focusNode, this.focusNode.value.length); // move cursor to end and cancel highlighting
					}
					// default case:
					// if enter pressed while drop down is open, or for FilteringSelect,
					// if we are in the middle of a query to convert a directly typed in value to an item,
					// prevent submit
					if(this._opened || this._fetchHandle){
						event.stop(evt);
					}
					// fall through

				case keys.TAB:
					var newvalue = this.get('displayedValue');
					//	if the user had More Choices selected fall into the
					//	_onBlur handler
					if(pw && (
						newvalue == pw._messages["previousMessage"] ||
						newvalue == pw._messages["nextMessage"])
					){
						break;
					}
					if(highlighted){
						this._selectOption(highlighted);
					}
					// fall through

				case keys.ESCAPE:
					if(this._opened){
						this._lastQuery = null; // in case results come back later
						this.closeDropDown();
					}
					break;

				case ' ':
					if(highlighted){
						// user is effectively clicking a choice in the drop down menu
						event.stop(evt);
						this._selectOption(highlighted);
						this.closeDropDown();
					}else{
						// user typed a space into the input box, treat as normal character
						doSearch = true;
					}
					break;

				case keys.DELETE:
				case keys.BACKSPACE:
					this._prev_key_backspace = true;
					doSearch = true;
					break;

				default:
					// Non char keys (F1-F12 etc..)  shouldn't open list.
					// Ascii characters and IME input (Chinese, Japanese etc.) should.
					//IME input produces keycode == 229.
					doSearch = typeof key == 'string' || key == 229;
			}
			if(doSearch){
				// need to wait a tad before start search so that the event
				// bubbles through DOM and we have value visible
				this.item = undefined; // undefined means item needs to be set
				this.searchTimer = setTimeout(lang.hitch(this, "_startSearchFromInput"),1);
			}
		},

		_autoCompleteText: function(/*String*/ text){
			// summary:
			// 		Fill in the textbox with the first item from the drop down
			// 		list, and highlight the characters that were
			// 		auto-completed. For example, if user typed "CA" and the
			// 		drop down list appeared, the textbox would be changed to
			// 		"California" and "ifornia" would be highlighted.

			var fn = this.focusNode;

			// IE7: clear selection so next highlight works all the time
			_TextBoxMixin.selectInputText(fn, fn.value.length);
			// does text autoComplete the value in the textbox?
			var caseFilter = this.ignoreCase? 'toLowerCase' : 'substr';
			if(text[caseFilter](0).indexOf(this.focusNode.value[caseFilter](0)) == 0){
				var cpos = this.autoComplete ? this._getCaretPos(fn) : fn.value.length;
				// only try to extend if we added the last character at the end of the input
				if((cpos+1) > fn.value.length){
					// only add to input node as we would overwrite Capitalisation of chars
					// actually, that is ok
					fn.value = text;//.substr(cpos);
					// visually highlight the autocompleted characters
					_TextBoxMixin.selectInputText(fn, cpos);
				}
			}else{
				// text does not autoComplete; replace the whole value and highlight
				fn.value = text;
				_TextBoxMixin.selectInputText(fn);
			}
		},

		_openResultList: function(/*Object*/ results, /*Object*/ query, /*Object*/ options){
			// summary:
			//		Callback when a search completes.
			// description:
			//		1. generates drop-down list and calls _showResultList() to display it
			//		2. if this result list is from user pressing "more choices"/"previous choices"
			//			then tell screen reader to announce new option
			this._fetchHandle = null;
			if(	this.disabled ||
				this.readOnly ||
				(query[this.searchAttr] !== this._lastQuery)	// TODO: better way to avoid getting unwanted notify
			){
				return;
			}
			var wasSelected = this.dropDown.getHighlightedOption();
			this.dropDown.clearResultList();
			if(!results.length && options.start == 0){ // if no results and not just the previous choices button
				this.closeDropDown();
				return;
			}

			// Fill in the textbox with the first item from the drop down list,
			// and highlight the characters that were auto-completed. For
			// example, if user typed "CA" and the drop down list appeared, the
			// textbox would be changed to "California" and "ifornia" would be
			// highlighted.

			this.dropDown.createOptions(
				results,
				options,
				lang.hitch(this, "_getMenuLabelFromItem")
			);

			// show our list (only if we have content, else nothing)
			this._showResultList();

			// #4091:
			//		tell the screen reader that the paging callback finished by
			//		shouting the next choice
			if(options.direction){
				if(1 == options.direction){
					this.dropDown.highlightFirstOption();
				}else if(-1 == options.direction){
					this.dropDown.highlightLastOption();
				}
				if(wasSelected){
					this._announceOption(this.dropDown.getHighlightedOption());
				}
			}else if(this.autoComplete && !this._prev_key_backspace
				// when the user clicks the arrow button to show the full list,
				// startSearch looks for "*".
				// it does not make sense to autocomplete
				// if they are just previewing the options available.
				&& !/^[*]+$/.test(query[this.searchAttr].toString())){
				this._announceOption(this.dropDown.containerNode.firstChild.nextSibling); // 1st real item
			}
		},

		_showResultList: function(){
			// summary:
			//		Display the drop down if not already displayed, or if it is displayed, then
			//		reposition it if necessary (reposition may be necessary if drop down's height changed).
			this.closeDropDown(true);
			this.openDropDown();
			this.domNode.setAttribute("aria-expanded", "true");
		},

		loadDropDown: function(/*Function*/ /*===== callback =====*/){
			// Overrides _HasDropDown.loadDropDown().
			// This is called when user has pressed button icon or pressed the down arrow key
			// to open the drop down.

			this._startSearchAll();
		},

		isLoaded: function(){
			// signal to _HasDropDown that it needs to call loadDropDown() to load the
			// drop down asynchronously before displaying it
			return false;
		},

		closeDropDown: function(){
			// Overrides _HasDropDown.closeDropDown().  Closes the drop down (assuming that it's open).
			// This method is the callback when the user types ESC or clicking
			// the button icon while the drop down is open.  It's also called by other code.
			this._abortQuery();
			if(this._opened){
				this.inherited(arguments);
				this.domNode.setAttribute("aria-expanded", "false");
				this.focusNode.removeAttribute("aria-activedescendant");
			}
		},

		_setBlurValue: function(){
			// if the user clicks away from the textbox OR tabs away, set the
			// value to the textbox value
			// #4617:
			//		if value is now more choices or previous choices, revert
			//		the value
			var newvalue = this.get('displayedValue');
			var pw = this.dropDown;
			if(pw && (
				newvalue == pw._messages["previousMessage"] ||
				newvalue == pw._messages["nextMessage"]
				)
			){
				this._setValueAttr(this._lastValueReported, true);
			}else if(typeof this.item == "undefined"){
				// Update 'value' (ex: KY) according to currently displayed text
				this.item = null;
				this.set('displayedValue', newvalue);
			}else{
				if(this.value != this._lastValueReported){
					this._handleOnChange(this.value, true);
				}
				this._refreshState();
			}
		},

		_setItemAttr: function(/*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue){
			// summary:
			//		Set the displayed valued in the input box, and the hidden value
			//		that gets submitted, based on a dojo.data store item.
			// description:
			//		Users shouldn't call this function; they should be calling
			//		set('item', value)
			// tags:
			//		private
			var value = '';
			if(item){
				if(!displayedValue){
					displayedValue = this.store._oldAPI ?	// remove getValue() for 2.0 (old dojo.data API)
						this.store.getValue(item, this.searchAttr) : item[this.searchAttr];
				}
				value = this._getValueField() != this.searchAttr ? this.store.getIdentity(item) : displayedValue;
			}
			this.set('value', value, priorityChange, displayedValue, item);
		},

		_announceOption: function(/*Node*/ node){
			// summary:
			//		a11y code that puts the highlighted option in the textbox.
			//		This way screen readers will know what is happening in the
			//		menu.

			if(!node){
				return;
			}
			// pull the text value from the item attached to the DOM node
			var newValue;
			if(node == this.dropDown.nextButton ||
				node == this.dropDown.previousButton){
				newValue = node.innerHTML;
				this.item = undefined;
				this.value = '';
			}else{
				var item = this.dropDown.items[node.getAttribute("item")];
				newValue = (this.store._oldAPI ? 	// remove getValue() for 2.0 (old dojo.data API)
					this.store.getValue(item, this.searchAttr) : item[this.searchAttr]).toString();
				this.set('item', item, false, newValue);
			}
			// get the text that the user manually entered (cut off autocompleted text)
			this.focusNode.value = this.focusNode.value.substring(0, this._lastInput.length);
			// set up ARIA activedescendant
			this.focusNode.setAttribute("aria-activedescendant", domAttr.get(node, "id"));
			// autocomplete the rest of the option to announce change
			this._autoCompleteText(newValue);
		},

		_selectOption: function(/*DomNode*/ target){
			// summary:
			//		Menu callback function, called when an item in the menu is selected.
			this.closeDropDown();
			if(target){
				this._announceOption(target);
			}
			this._setCaretPos(this.focusNode, this.focusNode.value.length);
			this._handleOnChange(this.value, true);
		},

		_startSearchAll: function(){
			this._startSearch('');
		},

		_startSearchFromInput: function(){
			this._startSearch(this.focusNode.value.replace(/([\\\*\?])/g, "\\$1"));
		},

		_getQueryString: function(/*String*/ text){
			return string.substitute(this.queryExpr, [text]);
		},

		_startSearch: function(/*String*/ key){
			// summary:
			//		Starts a search for elements matching key (key=="" means to return all items),
			//		and calls _openResultList() when the search completes, to display the results.
			if(!this.dropDown){
				var popupId = this.id + "_popup",
					dropDownConstructor = lang.isString(this.dropDownClass) ?
						lang.getObject(this.dropDownClass, false) : this.dropDownClass;
				this.dropDown = new dropDownConstructor({
					onChange: lang.hitch(this, this._selectOption),
					id: popupId,
					dir: this.dir,
					textDir: this.textDir
				});
				this.focusNode.removeAttribute("aria-activedescendant");
				this.textbox.setAttribute("aria-owns",popupId); // associate popup with textbox
			}
			this._lastInput = key; // Store exactly what was entered by the user.

			// Setup parameters to be passed to store.query().
			// Create a new query to prevent accidentally querying for a hidden
			// value from FilteringSelect's keyField
			var query = lang.clone(this.query); // #5970
			var options = {
				start: 0,
				count: this.pageSize,
				queryOptions: {		// remove for 2.0
					ignoreCase: this.ignoreCase,
					deep: true
				}
			};
			lang.mixin(options, this.fetchProperties);

			// Generate query
			var qs = this._getQueryString(key), q;
			if(this.store._oldAPI){
				// remove this branch for 2.0
				q = qs;
			}else{
				// Query on searchAttr is a regex for benefit of dojo.store.Memory,
				// but with a toString() method to help dojo.store.JsonRest.
				// Search string like "Co*" converted to regex like /^Co.*$/i.
				q = filter.patternToRegExp(qs, this.ignoreCase);
				q.toString = function(){ return qs; };
			}
			this._lastQuery = query[this.searchAttr] = q;

			// Function to run the query, wait for the results, and then call _openResultList()
			var _this = this,
				startQuery = function(){
					var resPromise = _this._fetchHandle = _this.store.query(query, options);
					Deferred.when(resPromise, function(res){
						_this._fetchHandle = null;
						res.total = resPromise.total;
						_this._openResultList(res, query, options);
					}, function(err){
						_this._fetchHandle = null;
						if(!_this._cancelingQuery){	// don't treat canceled query as an error
							console.error(_this.declaredClass + ' ' + err.toString());
							_this.closeDropDown();
						}
					});
				};

			// #5970: set _lastQuery, *then* start the timeout
			// otherwise, if the user types and the last query returns before the timeout,
			// _lastQuery won't be set and their input gets rewritten

			this.searchTimer = setTimeout(lang.hitch(this, function(query, _this){
				this.searchTimer = null;

				startQuery();

				// Setup method to handle clicking next/previous buttons to page through results
				this._nextSearch = this.dropDown.onPage = function(direction){
					options.start += options.count * direction;
					//	tell callback the direction of the paging so the screen
					//	reader knows which menu option to shout
					options.direction = direction;
					startQuery();
					_this.focus();
				};
			}, query, this), this.searchDelay);
		},

		_getValueField: function(){
			// summary:
			//		Helper for postMixInProperties() to set this.value based on data inlined into the markup.
			//		Returns the attribute name in the item (in dijit.form._ComboBoxDataStore) to use as the value.
			return this.searchAttr;
		},

		//////////// INITIALIZATION METHODS ///////////////////////////////////////

		constructor: function(){
			this.query={};
			this.fetchProperties={};
		},

		postMixInProperties: function(){
			if(!this.store){
				var srcNodeRef = this.srcNodeRef;
				var list = this.list;
				if(list){
					this.store = registry.byId(list);
				}else{
					// if user didn't specify store, then assume there are option tags
					this.store = new DataList({}, srcNodeRef);
				}

				// if there is no value set and there is an option list, set
				// the value to the first value to be consistent with native Select
				// Firefox and Safari set value
				// IE6 and Opera set selectedIndex, which is automatically set
				// by the selected attribute of an option tag
				// IE6 does not set value, Opera sets value = selectedIndex
				if(!("value" in this.params)){
					var item = (this.item = this.store.fetchSelectedItem());
					if(item){
						var valueField = this._getValueField();
						// remove getValue() for 2.0 (old dojo.data API)
						this.value = this.store._oldAPI ? this.store.getValue(item, valueField) : item[valueField];
					}
				}
			}

			this.inherited(arguments);
		},

		postCreate: function(){
			// summary:
			//		Subclasses must call this method from their postCreate() methods
			// tags:
			//		protected

			// find any associated label element and add to ComboBox node.
			var label=query('label[for="'+this.id+'"]');
			if(label.length){
				label[0].id = (this.id+"_label");
				this.domNode.setAttribute("aria-labelledby", label[0].id);

			}
			this.inherited(arguments);
		},

		_getMenuLabelFromItem: function(/*Item*/ item){
			var label = this.labelFunc(item, this.store),
				labelType = this.labelType;
			// If labelType is not "text" we don't want to screw any markup ot whatever.
			if(this.highlightMatch != "none" && this.labelType == "text" && this._lastInput){
				label = this.doHighlight(label, this._escapeHtml(this._lastInput));
				labelType = "html";
			}
			return {html: labelType == "html", label: label};
		},

		doHighlight: function(/*String*/ label, /*String*/ find){
			// summary:
			//		Highlights the string entered by the user in the menu.  By default this
			//		highlights the first occurrence found. Override this method
			//		to implement your custom highlighting.
			// tags:
			//		protected

			var
				// Add (g)lobal modifier when this.highlightMatch == "all" and (i)gnorecase when this.ignoreCase == true
				modifiers = (this.ignoreCase ? "i" : "") + (this.highlightMatch == "all" ? "g" : ""),
				i = this.queryExpr.indexOf("${0}");
			find = regexp.escapeString(find); // escape regexp special chars
			return this._escapeHtml(label).replace(
				// prepend ^ when this.queryExpr == "${0}*" and append $ when this.queryExpr == "*${0}"
				new RegExp((i == 0 ? "^" : "") + "("+ find +")" + (i == (this.queryExpr.length - 4) ? "$" : ""), modifiers),
				'<span class="dijitComboBoxHighlightMatch">$1</span>'
			); // returns String, (almost) valid HTML (entities encoded)
		},

		_escapeHtml: function(/*String*/ str){
			// TODO Should become dojo.html.entities(), when exists use instead
			// summary:
			//		Adds escape sequences for special characters in XML: &<>"'
			str = String(str).replace(/&/gm, "&amp;").replace(/</gm, "&lt;")
				.replace(/>/gm, "&gt;").replace(/"/gm, "&quot;"); //balance"
			return str; // string
		},

		reset: function(){
			// Overrides the _FormWidget.reset().
			// Additionally reset the .item (to clean up).
			this.item = null;
			this.inherited(arguments);
		},

		labelFunc: function(/*item*/ item, /*dojo.store.api.Store*/ store){
			// summary:
			//		Computes the label to display based on the dojo.data store item.
			// returns:
			//		The label that the ComboBox should display
			// tags:
			//		private

			// Use toString() because XMLStore returns an XMLItem whereas this
			// method is expected to return a String (#9354).
			// Remove getValue() for 2.0 (old dojo.data API)
			return (store._oldAPI ? store.getValue(item, this.labelAttr || this.searchAttr) :
				item[this.labelAttr || this.searchAttr]).toString(); // String
		},

		_setValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange, /*String?*/ displayedValue, /*item?*/ item){
			// summary:
			//		Hook so set('value', value) works.
			// description:
			//		Sets the value of the select.
			this._set("item", item||null); // value not looked up in store
			if(!value){ value = ''; } // null translates to blank
			this.inherited(arguments);
		},
		_setTextDirAttr: function(/*String*/ textDir){
			// summary:
			//		Setter for textDir, needed for the dropDown's textDir update.
			// description:
			//		Users shouldn't call this function; they should be calling
			//		set('textDir', value)
			// tags:
			//		private
			this.inherited(arguments);
			// update the drop down also (_ComboBoxMenuMixin)
			if(this.dropDown){
				this.dropDown._set("textDir", textDir);
			}
		}
	});
});

},
'dijit/TitlePane':function(){
require({cache:{
'url:dijit/templates/TitlePane.html':"<div>\n\t<div data-dojo-attach-event=\"onclick:_onTitleClick, onkeypress:_onTitleKey\"\n\t\t\tclass=\"dijitTitlePaneTitle\" data-dojo-attach-point=\"titleBarNode\">\n\t\t<div class=\"dijitTitlePaneTitleFocus\" data-dojo-attach-point=\"focusNode\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"arrowNode\" class=\"dijitArrowNode\" role=\"presentation\"\n\t\t\t/><span data-dojo-attach-point=\"arrowNodeInner\" class=\"dijitArrowNodeInner\"></span\n\t\t\t><span data-dojo-attach-point=\"titleNode\" class=\"dijitTitlePaneTextNode\"></span>\n\t\t</div>\n\t</div>\n\t<div class=\"dijitTitlePaneContentOuter\" data-dojo-attach-point=\"hideNode\" role=\"presentation\">\n\t\t<div class=\"dijitReset\" data-dojo-attach-point=\"wipeNode\" role=\"presentation\">\n\t\t\t<div class=\"dijitTitlePaneContentInner\" data-dojo-attach-point=\"containerNode\" role=\"region\" id=\"${id}_pane\">\n\t\t\t\t<!-- nested divs because wipeIn()/wipeOut() doesn't work right on node w/padding etc.  Put padding on inner div. -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n"}});
define("dijit/TitlePane", [
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.setSelectable
	"dojo/dom-attr", // domAttr.set or get domAttr.remove
	"dojo/dom-class", // domClass.replace
	"dojo/dom-geometry", // domGeometry.setMarginBox domGeometry.getMarginBox
	"dojo/_base/event", // event.stop
	"dojo/fx", // fxUtils.wipeIn fxUtils.wipeOut
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/keys", // keys.DOWN_ARROW keys.ENTER
	"./_CssStateMixin",
	"./_TemplatedMixin",
	"./layout/ContentPane",
	"dojo/text!./templates/TitlePane.html",
	"./_base/manager"	// defaultDuration
], function(array, declare, dom, domAttr, domClass, domGeometry, event, fxUtils, kernel, keys,
			_CssStateMixin, _TemplatedMixin, ContentPane, template, manager){

/*=====
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _CssStateMixin = dijit._CssStateMixin;
	var ContentPane = dijit.layout.ContentPane;
=====*/

// module:
//		dijit/TitlePane
// summary:
//		A pane with a title on top, that can be expanded or collapsed.


return declare("dijit.TitlePane", [ContentPane, _TemplatedMixin, _CssStateMixin], {
	// summary:
	//		A pane with a title on top, that can be expanded or collapsed.
	//
	// description:
	//		An accessible container with a title Heading, and a content
	//		section that slides open and closed. TitlePane is an extension to
	//		`dijit.layout.ContentPane`, providing all the useful content-control aspects from it.
	//
	// example:
	// | 	// load a TitlePane from remote file:
	// |	var foo = new dijit.TitlePane({ href: "foobar.html", title:"Title" });
	// |	foo.startup();
	//
	// example:
	// |	<!-- markup href example: -->
	// |	<div data-dojo-type="dijit.TitlePane" data-dojo-props="href: 'foobar.html', title: 'Title'"></div>
	//
	// example:
	// |	<!-- markup with inline data -->
	// | 	<div data-dojo-type="dijit.TitlePane" title="Title">
	// |		<p>I am content</p>
	// |	</div>

	// title: String
	//		Title of the pane
	title: "",
	_setTitleAttr: { node: "titleNode", type: "innerHTML" },	// override default where title becomes a hover tooltip

	// open: Boolean
	//		Whether pane is opened or closed.
	open: true,

	// toggleable: Boolean
	//		Whether pane can be opened or closed by clicking the title bar.
	toggleable: true,

	// tabIndex: String
	//		Tabindex setting for the title (so users can tab to the title then
	//		use space/enter to open/close the title pane)
	tabIndex: "0",

	// duration: Integer
	//		Time in milliseconds to fade in/fade out
	duration: manager.defaultDuration,

	// baseClass: [protected] String
	//		The root className to be placed on this widget's domNode.
	baseClass: "dijitTitlePane",

	templateString: template,

	// doLayout: [protected] Boolean
	//		Don't change this parameter from the default value.
	//		This ContentPane parameter doesn't make sense for TitlePane, since TitlePane
	//		is never a child of a layout container, nor should TitlePane try to control
	//		the size of an inner widget.
	doLayout: false,

	// Tooltip is defined in _WidgetBase but we need to handle the mapping to DOM here
	_setTooltipAttr: {node: "focusNode", type: "attribute", attribute: "title"},	// focusNode spans the entire width, titleNode doesn't

	buildRendering: function(){
		this.inherited(arguments);
		dom.setSelectable(this.titleNode, false);
	},

	postCreate: function(){
		this.inherited(arguments);

		// Hover and focus effect on title bar, except for non-toggleable TitlePanes
		// This should really be controlled from _setToggleableAttr() but _CssStateMixin
		// doesn't provide a way to disconnect a previous _trackMouseState() call
		if(this.toggleable){
			this._trackMouseState(this.titleBarNode, "dijitTitlePaneTitle");
		}

		// setup open/close animations
		var hideNode = this.hideNode, wipeNode = this.wipeNode;
		this._wipeIn = fxUtils.wipeIn({
			node: wipeNode,
			duration: this.duration,
			beforeBegin: function(){
				hideNode.style.display="";
			}
		});
		this._wipeOut = fxUtils.wipeOut({
			node: wipeNode,
			duration: this.duration,
			onEnd: function(){
				hideNode.style.display="none";
			}
		});
	},

	_setOpenAttr: function(/*Boolean*/ open, /*Boolean*/ animate){
		// summary:
		//		Hook to make set("open", boolean) control the open/closed state of the pane.
		// open: Boolean
		//		True if you want to open the pane, false if you want to close it.

		array.forEach([this._wipeIn, this._wipeOut], function(animation){
			if(animation && animation.status() == "playing"){
				animation.stop();
			}
		});

		if(animate){
			var anim = this[open ? "_wipeIn" : "_wipeOut"];
			anim.play();
		}else{
			this.hideNode.style.display = this.wipeNode.style.display = open ? "" : "none";
		}

		// load content (if this is the first time we are opening the TitlePane
		// and content is specified as an href, or href was set when hidden)
		if(this._started){
			if(open){
				this._onShow();
			}else{
				this.onHide();
			}
		}

		this.arrowNodeInner.innerHTML = open ? "-" : "+";

		this.containerNode.setAttribute("aria-hidden", open ? "false" : "true");
		this.focusNode.setAttribute("aria-pressed", open ? "true" : "false");

		this._set("open", open);

		this._setCss();
	},

	_setToggleableAttr: function(/*Boolean*/ canToggle){
		// summary:
		//		Hook to make set("toggleable", boolean) work.
		// canToggle: Boolean
		//		True to allow user to open/close pane by clicking title bar.

		this.focusNode.setAttribute("role", canToggle ? "button" : "heading");
		if(canToggle){
			// TODO: if canToggle is switched from true to false shouldn't we remove this setting?
			this.focusNode.setAttribute("aria-controls", this.id+"_pane");
			domAttr.set(this.focusNode, "tabIndex", this.tabIndex);
		}else{
			domAttr.remove(this.focusNode, "tabIndex");
		}

		this._set("toggleable", canToggle);

		this._setCss();
	},

	_setContentAttr: function(/*String|DomNode|Nodelist*/ content){
		// summary:
		//		Hook to make set("content", ...) work.
		// 		Typically called when an href is loaded.  Our job is to make the animation smooth.

		if(!this.open || !this._wipeOut || this._wipeOut.status() == "playing"){
			// we are currently *closing* the pane (or the pane is closed), so just let that continue
			this.inherited(arguments);
		}else{
			if(this._wipeIn && this._wipeIn.status() == "playing"){
				this._wipeIn.stop();
			}

			// freeze container at current height so that adding new content doesn't make it jump
			domGeometry.setMarginBox(this.wipeNode, { h: domGeometry.getMarginBox(this.wipeNode).h });

			// add the new content (erasing the old content, if any)
			this.inherited(arguments);

			// call _wipeIn.play() to animate from current height to new height
			if(this._wipeIn){
				this._wipeIn.play();
			}else{
				this.hideNode.style.display = "";
			}
		}
	},

	toggle: function(){
		// summary:
		//		Switches between opened and closed state
		// tags:
		//		private

		this._setOpenAttr(!this.open, true);
	},

	_setCss: function(){
		// summary:
		//		Set the open/close css state for the TitlePane
		// tags:
		//		private

		var node = this.titleBarNode || this.focusNode;
		var oldCls = this._titleBarClass;
		this._titleBarClass = "dijit" + (this.toggleable ? "" : "Fixed") + (this.open ? "Open" : "Closed");
		domClass.replace(node, this._titleBarClass, oldCls || "");

		this.arrowNodeInner.innerHTML = this.open ? "-" : "+";
	},

	_onTitleKey: function(/*Event*/ e){
		// summary:
		//		Handler for when user hits a key
		// tags:
		//		private

		if(e.charOrCode == keys.ENTER || e.charOrCode == ' '){
			if(this.toggleable){
				this.toggle();
			}
			event.stop(e);
		}else if(e.charOrCode == keys.DOWN_ARROW && this.open){
			this.containerNode.focus();
			e.preventDefault();
	 	}
	},

	_onTitleClick: function(){
		// summary:
		//		Handler when user clicks the title bar
		// tags:
		//		private
		if(this.toggleable){
			this.toggle();
		}
	},

	setTitle: function(/*String*/ title){
		// summary:
		//		Deprecated.  Use set('title', ...) instead.
		// tags:
		//		deprecated
		kernel.deprecated("dijit.TitlePane.setTitle() is deprecated.  Use set('title', ...) instead.", "", "2.0");
		this.set("title", title);
	}
});

});

},
'curam/layout/EmptyContentPane':function(){
/*
 * Copyright 2010-2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */
define("curam/layout/EmptyContentPane", ["dijit/layout/ContentPane"
        ], function() {

  /*
   * Modification History
   * --------------------
   * 26-Oct-2011 MV [CR00289694] Added required comments.
   */

  /**
   * @name curam.layout.EmptyContentPane
   * @namespace Empty content pane implementation.
   * 
   */
  var EmptyContentPane = dojo.declare(
      "curam.layout.EmptyContentPane", dijit.layout.ContentPane,
  /**
   * @lends curam.layout.EmptyContentPane.prototype
   */
  {
    baseClass: "",
    _layoutChildren: function(){},
    resize: function(){}
  });
  
  return EmptyContentPane;
});

},
'dijit/place':function(){
define("dijit/place", [
	"dojo/_base/array", // array.forEach array.map array.some
	"dojo/dom-geometry", // domGeometry.getMarginBox domGeometry.position
	"dojo/dom-style", // domStyle.getComputedStyle
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/window", // win.body
	"dojo/window", // winUtils.getBox
	".",	// dijit (defining dijit.place to match API doc)
  /* CURAM-FIX: added following dependency */
  "dojo/_base/lang" // lang.exists
], function(array, domGeometry, domStyle, kernel, win, winUtils, dijit, lang){

	// module:
	//		dijit/place
	// summary:
	//		Code to place a popup relative to another node


	function _place(/*DomNode*/ node, choices, layoutNode, aroundNodeCoords){
		// summary:
		//		Given a list of spots to put node, put it at the first spot where it fits,
		//		of if it doesn't fit anywhere then the place with the least overflow
		// choices: Array
		//		Array of elements like: {corner: 'TL', pos: {x: 10, y: 20} }
		//		Above example says to put the top-left corner of the node at (10,20)
		// layoutNode: Function(node, aroundNodeCorner, nodeCorner, size)
		//		for things like tooltip, they are displayed differently (and have different dimensions)
		//		based on their orientation relative to the parent.	 This adjusts the popup based on orientation.
		//		It also passes in the available size for the popup, which is useful for tooltips to
		//		tell them that their width is limited to a certain amount.	 layoutNode() may return a value expressing
		//		how much the popup had to be modified to fit into the available space.	 This is used to determine
		//		what the best placement is.
		// aroundNodeCoords: Object
		//		Size of aroundNode, ex: {w: 200, h: 50}

		// get {x: 10, y: 10, w: 100, h:100} type obj representing position of
		// viewport over document
		var view = winUtils.getBox();

		// This won't work if the node is inside a <div style="position: relative">,
		// so reattach it to win.doc.body.	 (Otherwise, the positioning will be wrong
		// and also it might get cutoff)
		if(!node.parentNode || String(node.parentNode.tagName).toLowerCase() != "body"){
			win.body().appendChild(node);
		}

		var best = null;
		array.some(choices, function(choice){
			var corner = choice.corner;
			var pos = choice.pos;
			var overflow = 0;

			// calculate amount of space available given specified position of node
			var spaceAvailable = {
				w: {
					'L': view.l + view.w - pos.x,
					'R': pos.x - view.l,
					'M': view.w
				   }[corner.charAt(1)],
				h: {
					'T': view.t + view.h - pos.y,
					'B': pos.y - view.t,
					'M': view.h
				   }[corner.charAt(0)]
			};

			// configure node to be displayed in given position relative to button
			// (need to do this in order to get an accurate size for the node, because
			// a tooltip's size changes based on position, due to triangle)
			if(layoutNode){
				var res = layoutNode(node, choice.aroundCorner, corner, spaceAvailable, aroundNodeCoords);
				overflow = typeof res == "undefined" ? 0 : res;
			}

			// get node's size
			var style = node.style;
			var oldDisplay = style.display;
			var oldVis = style.visibility;
			if(style.display == "none"){
				style.visibility = "hidden";
				style.display = "";
			}
			var mb = domGeometry. getMarginBox(node);
			style.display = oldDisplay;
			style.visibility = oldVis;

			// coordinates and size of node with specified corner placed at pos,
			// and clipped by viewport
			var
				startXpos = {
					'L': pos.x,
					'R': pos.x - mb.w,
					'M': Math.max(view.l, Math.min(view.l + view.w, pos.x + (mb.w >> 1)) - mb.w) // M orientation is more flexible
				}[corner.charAt(1)],
				startYpos = {
					'T': pos.y,
					'B': pos.y - mb.h,
					'M': Math.max(view.t, Math.min(view.t + view.h, pos.y + (mb.h >> 1)) - mb.h)
				}[corner.charAt(0)],
				startX = Math.max(view.l, startXpos),
				startY = Math.max(view.t, startYpos),
				endX = Math.min(view.l + view.w, startXpos + mb.w),
				endY = Math.min(view.t + view.h, startYpos + mb.h),
				width = endX - startX,
				height = endY - startY;

			overflow += (mb.w - width) + (mb.h - height);

      /* CURAM-FIX: Curam customized algorithm for placing the popup window around actions menu button.
       * If the overflow happens when the popup window tries to place its top or left corner
       * around the actions menu button, set the overflow variable with the maximum value
       * to prevent placing the popup window from these two places.
       */
      if(lang.exists("curam.widget.DeferredDropDownButton.prototype.useCustomPlaceAlgorithm")
          && curam.widget.DeferredDropDownButton.prototype.useCustomPlaceAlgorithm == true) {
        if( (corner.charAt(0) == 'T' || corner.charAt(1) == 'L')
          && overflow > 0 ){

          overflow = mb.w + mb.h;
        }
      }
      /* END CURAM-FIX */

			if(best == null || overflow < best.overflow){
				best = {
					corner: corner,
					aroundCorner: choice.aroundCorner,
					x: startX,
					y: startY,
					w: width,
					h: height,
					overflow: overflow,
					spaceAvailable: spaceAvailable
				};
			}

			return !overflow;
		});

		// In case the best position is not the last one we checked, need to call
		// layoutNode() again.
		if(best.overflow && layoutNode){
			layoutNode(node, best.aroundCorner, best.corner, best.spaceAvailable, aroundNodeCoords);
		}

		// And then position the node.  Do this last, after the layoutNode() above
		// has sized the node, due to browser quirks when the viewport is scrolled
		// (specifically that a Tooltip will shrink to fit as though the window was
		// scrolled to the left).
		//
		// In RTL mode, set style.right rather than style.left so in the common case,
		// window resizes move the popup along with the aroundNode.
		var l = domGeometry.isBodyLtr(),
			s = node.style;
		s.top = best.y + "px";
		s[l ? "left" : "right"] = (l ? best.x : view.w - best.x - best.w) + "px";
		s[l ? "right" : "left"] = "auto";	// needed for FF or else tooltip goes to far left

		return best;
	}

	/*=====
	dijit.place.__Position = function(){
		// x: Integer
		//		horizontal coordinate in pixels, relative to document body
		// y: Integer
		//		vertical coordinate in pixels, relative to document body

		this.x = x;
		this.y = y;
	};
	=====*/

	/*=====
	dijit.place.__Rectangle = function(){
		// x: Integer
		//		horizontal offset in pixels, relative to document body
		// y: Integer
		//		vertical offset in pixels, relative to document body
		// w: Integer
		//		width in pixels.   Can also be specified as "width" for backwards-compatibility.
		// h: Integer
		//		height in pixels.   Can also be specified as "height" from backwards-compatibility.

		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
	};
	=====*/

	return (dijit.place = {
		// summary:
		//		Code to place a DOMNode relative to another DOMNode.
		//		Load using require(["dijit/place"], function(place){ ... }).

		at: function(node, pos, corners, padding){
			// summary:
			//		Positions one of the node's corners at specified position
			//		such that node is fully visible in viewport.
			// description:
			//		NOTE: node is assumed to be absolutely or relatively positioned.
			// node: DOMNode
			//		The node to position
			// pos: dijit.place.__Position
			//		Object like {x: 10, y: 20}
			// corners: String[]
			//		Array of Strings representing order to try corners in, like ["TR", "BL"].
			//		Possible values are:
			//			* "BL" - bottom left
			//			* "BR" - bottom right
			//			* "TL" - top left
			//			* "TR" - top right
			// padding: dijit.place.__Position?
			//		optional param to set padding, to put some buffer around the element you want to position.
			// example:
			//		Try to place node's top right corner at (10,20).
			//		If that makes node go (partially) off screen, then try placing
			//		bottom left corner at (10,20).
			//	|	place(node, {x: 10, y: 20}, ["TR", "BL"])
			var choices = array.map(corners, function(corner){
				var c = { corner: corner, pos: {x:pos.x,y:pos.y} };
				if(padding){
					c.pos.x += corner.charAt(1) == 'L' ? padding.x : -padding.x;
					c.pos.y += corner.charAt(0) == 'T' ? padding.y : -padding.y;
				}
				return c;
			});

			return _place(node, choices);
		},

		around: function(
			/*DomNode*/		node,
			/*DomNode || dijit.place.__Rectangle*/ anchor,
			/*String[]*/	positions,
			/*Boolean*/		leftToRight,
			/*Function?*/	layoutNode){

			// summary:
			//		Position node adjacent or kitty-corner to anchor
			//		such that it's fully visible in viewport.
			//
			// description:
			//		Place node such that corner of node touches a corner of
			//		aroundNode, and that node is fully visible.
			//
			// anchor:
			//		Either a DOMNode or a __Rectangle (object with x, y, width, height).
			//
			// positions:
			//		Ordered list of positions to try matching up.
			//			* before: places drop down to the left of the anchor node/widget, or to the right in the case
			//				of RTL scripts like Hebrew and Arabic; aligns either the top of the drop down
			//				with the top of the anchor, or the bottom of the drop down with bottom of the anchor.
			//			* after: places drop down to the right of the anchor node/widget, or to the left in the case
			//				of RTL scripts like Hebrew and Arabic; aligns either the top of the drop down
			//				with the top of the anchor, or the bottom of the drop down with bottom of the anchor.
			//			* before-centered: centers drop down to the left of the anchor node/widget, or to the right
			//				 in the case of RTL scripts like Hebrew and Arabic
			//			* after-centered: centers drop down to the right of the anchor node/widget, or to the left
			//				 in the case of RTL scripts like Hebrew and Arabic
			//			* above-centered: drop down is centered above anchor node
			//			* above: drop down goes above anchor node, left sides aligned
			//			* above-alt: drop down goes above anchor node, right sides aligned
			//			* below-centered: drop down is centered above anchor node
			//			* below: drop down goes below anchor node
			//			* below-alt: drop down goes below anchor node, right sides aligned
			//
			// layoutNode: Function(node, aroundNodeCorner, nodeCorner)
			//		For things like tooltip, they are displayed differently (and have different dimensions)
			//		based on their orientation relative to the parent.	 This adjusts the popup based on orientation.
			//
			// leftToRight:
			//		True if widget is LTR, false if widget is RTL.   Affects the behavior of "above" and "below"
			//		positions slightly.
			//
			// example:
			//	|	placeAroundNode(node, aroundNode, {'BL':'TL', 'TR':'BR'});
			//		This will try to position node such that node's top-left corner is at the same position
			//		as the bottom left corner of the aroundNode (ie, put node below
			//		aroundNode, with left edges aligned).	If that fails it will try to put
			// 		the bottom-right corner of node where the top right corner of aroundNode is
			//		(ie, put node above aroundNode, with right edges aligned)
			//

			// if around is a DOMNode (or DOMNode id), convert to coordinates
			var aroundNodePos = (typeof anchor == "string" || "offsetWidth" in anchor)
				? domGeometry.position(anchor, true)
				: anchor;

			// Compute position and size of visible part of anchor (it may be partially hidden by ancestor nodes w/scrollbars)
			if(anchor.parentNode){
				// ignore nodes between position:relative and position:absolute
				var sawPosAbsolute = domStyle.getComputedStyle(anchor).position == "absolute";
				var parent = anchor.parentNode;
				while(parent && parent.nodeType == 1 && parent.nodeName != "BODY"){  //ignoring the body will help performance
					var parentPos = domGeometry.position(parent, true),
						pcs = domStyle.getComputedStyle(parent);
					if(/relative|absolute/.test(pcs.position)){
						sawPosAbsolute = false;
					}
					if(!sawPosAbsolute && /hidden|auto|scroll/.test(pcs.overflow)){
						var bottomYCoord = Math.min(aroundNodePos.y + aroundNodePos.h, parentPos.y + parentPos.h);
						var rightXCoord = Math.min(aroundNodePos.x + aroundNodePos.w, parentPos.x + parentPos.w);
						aroundNodePos.x = Math.max(aroundNodePos.x, parentPos.x);
						aroundNodePos.y = Math.max(aroundNodePos.y, parentPos.y);
						aroundNodePos.h = bottomYCoord - aroundNodePos.y;
						aroundNodePos.w = rightXCoord - aroundNodePos.x;
					}
					if(pcs.position == "absolute"){
						sawPosAbsolute = true;
					}
					parent = parent.parentNode;
				}
			}


			var x = aroundNodePos.x,
				y = aroundNodePos.y,
				width = "w" in aroundNodePos ? aroundNodePos.w : (aroundNodePos.w = aroundNodePos.width),
				height = "h" in aroundNodePos ? aroundNodePos.h : (kernel.deprecated("place.around: dijit.place.__Rectangle: { x:"+x+", y:"+y+", height:"+aroundNodePos.height+", width:"+width+" } has been deprecated.  Please use { x:"+x+", y:"+y+", h:"+aroundNodePos.height+", w:"+width+" }", "", "2.0"), aroundNodePos.h = aroundNodePos.height);

			// Convert positions arguments into choices argument for _place()
			var choices = [];
			function push(aroundCorner, corner){
				choices.push({
					aroundCorner: aroundCorner,
					corner: corner,
					pos: {
						x: {
							'L': x,
							'R': x + width,
							'M': x + (width >> 1)
						   }[aroundCorner.charAt(1)],
						y: {
							'T': y,
							'B': y + height,
							'M': y + (height >> 1)
						   }[aroundCorner.charAt(0)]
					}
				})
			}
			array.forEach(positions, function(pos){
				var ltr =  leftToRight;
				switch(pos){
					case "above-centered":
						push("TM", "BM");
						break;
					case "below-centered":
						push("BM", "TM");
						break;
					case "after-centered":
						ltr = !ltr;
						// fall through
					case "before-centered":
						push(ltr ? "ML" : "MR", ltr ? "MR" : "ML");
						break;
					case "after":
						ltr = !ltr;
						// fall through
					case "before":
						push(ltr ? "TL" : "TR", ltr ? "TR" : "TL");
						push(ltr ? "BL" : "BR", ltr ? "BR" : "BL");
						break;
					case "below-alt":
						ltr = !ltr;
						// fall through
					case "below":
						// first try to align left borders, next try to align right borders (or reverse for RTL mode)
						push(ltr ? "BL" : "BR", ltr ? "TL" : "TR");
						push(ltr ? "BR" : "BL", ltr ? "TR" : "TL");
						break;
					case "above-alt":
						ltr = !ltr;
						// fall through
					case "above":
						// first try to align left borders, next try to align right borders (or reverse for RTL mode)
						push(ltr ? "TL" : "TR", ltr ? "BL" : "BR");
						push(ltr ? "TR" : "TL", ltr ? "BR" : "BL");
						break;
					default:
						// To assist dijit/_base/place, accept arguments of type {aroundCorner: "BL", corner: "TL"}.
						// Not meant to be used directly.
						push(pos.aroundCorner, pos.corner);
				}
			});

			var position = _place(node, choices, layoutNode, {w: width, h: height});
			position.aroundNodePos = aroundNodePos;

			return position;
		}
	});
});

},
'dijit/form/ComboBox':function(){
define("dijit/form/ComboBox", [
	"dojo/_base/declare", // declare
	"./ValidationTextBox",
	"./ComboBoxMixin"
], function(declare, ValidationTextBox, ComboBoxMixin){

/*=====
	var ValidationTextBox = dijit.form.ValidationTextBox;
	var ComboBoxMixin = dijit.form.ComboBoxMixin;
=====*/

	// module:
	//		dijit/form/ComboBox
	// summary:
	//		Auto-completing text box

	return declare("dijit.form.ComboBox", [ValidationTextBox, ComboBoxMixin], {
		// summary:
		//		Auto-completing text box
		//
		// description:
		//		The drop down box's values are populated from an class called
		//		a data provider, which returns a list of values based on the characters
		//		that the user has typed into the input box.
		//		If OPTION tags are used as the data provider via markup,
		//		then the OPTION tag's child text node is used as the widget value
		//		when selected.  The OPTION tag's value attribute is ignored.
		//		To set the default value when using OPTION tags, specify the selected
		//		attribute on 1 of the child OPTION tags.
		//
		//		Some of the options to the ComboBox are actually arguments to the data
		//		provider.
	});
});

},
'dijit/layout/_LayoutWidget':function(){
define("dijit/layout/_LayoutWidget", [
	"dojo/_base/lang", // lang.mixin
	"../_Widget",
	"../_Container",
	"../_Contained",
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.add domClass.remove
	"dojo/dom-geometry", // domGeometry.marginBox
	"dojo/dom-style", // domStyle.getComputedStyle
	"dojo/_base/sniff", // has("ie")
	"dojo/_base/window" // win.global
], function(lang, _Widget, _Container, _Contained,
	declare, domClass, domGeometry, domStyle, has, win){

/*=====
	var _Widget = dijit._Widget;
	var _Container = dijit._Container;
	var _Contained = dijit._Contained;
=====*/

	// module:
	//		dijit/layout/_LayoutWidget
	// summary:
	//		_LayoutWidget Base class for a _Container widget which is responsible for laying out its children.
	//		Widgets which mixin this code must define layout() to manage placement and sizing of the children.


	return declare("dijit.layout._LayoutWidget", [_Widget, _Container, _Contained], {
		// summary:
		//		Base class for a _Container widget which is responsible for laying out its children.
		//		Widgets which mixin this code must define layout() to manage placement and sizing of the children.

		// baseClass: [protected extension] String
		//		This class name is applied to the widget's domNode
		//		and also may be used to generate names for sub nodes,
		//		for example dijitTabContainer-content.
		baseClass: "dijitLayoutContainer",

		// isLayoutContainer: [protected] Boolean
		//		Indicates that this widget is going to call resize() on its
		//		children widgets, setting their size, when they become visible.
		isLayoutContainer: true,

		buildRendering: function(){
			this.inherited(arguments);
			domClass.add(this.domNode, "dijitContainer");
		},

		startup: function(){
			// summary:
			//		Called after all the widgets have been instantiated and their
			//		dom nodes have been inserted somewhere under win.doc.body.
			//
			//		Widgets should override this method to do any initialization
			//		dependent on other widgets existing, and then call
			//		this superclass method to finish things off.
			//
			//		startup() in subclasses shouldn't do anything
			//		size related because the size of the widget hasn't been set yet.

			if(this._started){ return; }

			// Need to call inherited first - so that child widgets get started
			// up correctly
			this.inherited(arguments);

			// If I am a not being controlled by a parent layout widget...
			var parent = this.getParent && this.getParent();
			if(!(parent && parent.isLayoutContainer)){
				// Do recursive sizing and layout of all my descendants
				// (passing in no argument to resize means that it has to glean the size itself)
				this.resize();

				// Since my parent isn't a layout container, and my style *may be* width=height=100%
				// or something similar (either set directly or via a CSS class),
				// monitor when viewport size changes so that I can re-layout.
				this.connect(win.global, 'onresize', function(){
					// Using function(){} closure to ensure no arguments passed to resize().
					this.resize();
				});
			}
		},

		resize: function(changeSize, resultSize){
			// summary:
			//		Call this to resize a widget, or after its size has changed.
			// description:
			//		Change size mode:
			//			When changeSize is specified, changes the marginBox of this widget
			//			and forces it to relayout its contents accordingly.
			//			changeSize may specify height, width, or both.
			//
			//			If resultSize is specified it indicates the size the widget will
			//			become after changeSize has been applied.
			//
			//		Notification mode:
			//			When changeSize is null, indicates that the caller has already changed
			//			the size of the widget, or perhaps it changed because the browser
			//			window was resized.  Tells widget to relayout its contents accordingly.
			//
			//			If resultSize is also specified it indicates the size the widget has
			//			become.
			//
			//		In either mode, this method also:
			//			1. Sets this._borderBox and this._contentBox to the new size of
			//				the widget.  Queries the current domNode size if necessary.
			//			2. Calls layout() to resize contents (and maybe adjust child widgets).
			//
			// changeSize: Object?
			//		Sets the widget to this margin-box size and position.
			//		May include any/all of the following properties:
			//	|	{w: int, h: int, l: int, t: int}
			//
			// resultSize: Object?
			//		The margin-box size of this widget after applying changeSize (if
			//		changeSize is specified).  If caller knows this size and
			//		passes it in, we don't need to query the browser to get the size.
			//	|	{w: int, h: int}

			var node = this.domNode;

			// set margin box size, unless it wasn't specified, in which case use current size
			if(changeSize){
				domGeometry.setMarginBox(node, changeSize);
			}

			// If either height or width wasn't specified by the user, then query node for it.
			// But note that setting the margin box and then immediately querying dimensions may return
			// inaccurate results, so try not to depend on it.
			var mb = resultSize || {};
			lang.mixin(mb, changeSize || {});	// changeSize overrides resultSize
			if( !("h" in mb) || !("w" in mb) ){
				mb = lang.mixin(domGeometry.getMarginBox(node), mb);	// just use domGeometry.marginBox() to fill in missing values
			}

			// Compute and save the size of my border box and content box
			// (w/out calling domGeometry.getContentBox() since that may fail if size was recently set)
			var cs = domStyle.getComputedStyle(node);
			var me = domGeometry.getMarginExtents(node, cs);
			var be = domGeometry.getBorderExtents(node, cs);
			var bb = (this._borderBox = {
				w: mb.w - (me.w + be.w),
				h: mb.h - (me.h + be.h)
			});
			var pe = domGeometry.getPadExtents(node, cs);
			this._contentBox = {
				l: domStyle.toPixelValue(node, cs.paddingLeft),
				t: domStyle.toPixelValue(node, cs.paddingTop),
				w: bb.w - pe.w,
				h: bb.h - pe.h
			};

			// Callback for widget to adjust size of its children
			this.layout();
		},

		layout: function(){
			// summary:
			//		Widgets override this method to size and position their contents/children.
			//		When this is called this._contentBox is guaranteed to be set (see resize()).
			//
			//		This is called after startup(), and also when the widget's size has been
			//		changed.
			// tags:
			//		protected extension
		},

		_setupChild: function(/*dijit._Widget*/child){
			// summary:
			//		Common setup for initial children and children which are added after startup
			// tags:
			//		protected extension

			var cls = this.baseClass + "-child "
				+ (child.baseClass ? this.baseClass + "-" + child.baseClass : "");
			domClass.add(child.domNode, cls);
		},

		addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
			// Overrides _Container.addChild() to call _setupChild()
			this.inherited(arguments);
			if(this._started){
				this._setupChild(child);
			}
		},

		removeChild: function(/*dijit._Widget*/ child){
			// Overrides _Container.removeChild() to remove class added by _setupChild()
			var cls = this.baseClass + "-child"
					+ (child.baseClass ?
						" " + this.baseClass + "-" + child.baseClass : "");
			domClass.remove(child.domNode, cls);

			this.inherited(arguments);
		}
	});
});

},
'dojo/cldr/supplemental':function(){
define("dojo/cldr/supplemental", ["../_base/kernel", "../_base/lang", "../i18n"], function(dojo, lang) {
	// module:
	//		dojo/cldr/supplemental
	// summary:
	//		TODOC

lang.getObject("cldr.supplemental", true, dojo);

dojo.cldr.supplemental.getFirstDayOfWeek = function(/*String?*/locale){
// summary: Returns a zero-based index for first day of the week
// description:
//		Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar.
//		e.g. Sunday (returns 0), or Monday (returns 1)

	// from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/firstDay
	var firstDay = {/*default is 1=Monday*/
		mv:5,
		ae:6,af:6,bh:6,dj:6,dz:6,eg:6,er:6,et:6,iq:6,ir:6,jo:6,ke:6,kw:6,
		ly:6,ma:6,om:6,qa:6,sa:6,sd:6,so:6,sy:6,tn:6,ye:6,
		ar:0,as:0,az:0,bw:0,ca:0,cn:0,fo:0,ge:0,gl:0,gu:0,hk:0,
		il:0,'in':0,jm:0,jp:0,kg:0,kr:0,la:0,mh:0,mn:0,mo:0,mp:0,
		mt:0,nz:0,ph:0,pk:0,sg:0,th:0,tt:0,tw:0,um:0,us:0,uz:0,
		vi:0,zw:0
// variant. do not use?		gb:0,
	};

	var country = dojo.cldr.supplemental._region(locale);
	var dow = firstDay[country];
	return (dow === undefined) ? 1 : dow; /*Number*/
};

dojo.cldr.supplemental._region = function(/*String?*/locale){
	locale = dojo.i18n.normalizeLocale(locale);
	var tags = locale.split('-');
	var region = tags[1];
	if(!region){
		// IE often gives language only (#2269)
		// Arbitrary mappings of language-only locales to a country:
		region = {de:"de", en:"us", es:"es", fi:"fi", fr:"fr", he:"il", hu:"hu", it:"it",
			ja:"jp", ko:"kr", nl:"nl", pt:"br", sv:"se", zh:"cn"}[tags[0]];
	}else if(region.length == 4){
		// The ISO 3166 country code is usually in the second position, unless a
		// 4-letter script is given. See http://www.ietf.org/rfc/rfc4646.txt
		region = tags[2];
	}
	return region;
};

dojo.cldr.supplemental.getWeekend = function(/*String?*/locale){
// summary: Returns a hash containing the start and end days of the weekend
// description:
//		Returns a hash containing the start and end days of the weekend according to local custom using locale,
//		or by default in the user's locale.
//		e.g. {start:6, end:0}

	// from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/weekend{Start,End}
	var weekendStart = {/*default is 6=Saturday*/
		'in':0,
		af:4,dz:4,ir:4,om:4,sa:4,ye:4,
		ae:5,bh:5,eg:5,il:5,iq:5,jo:5,kw:5,ly:5,ma:5,qa:5,sd:5,sy:5,tn:5
	};

	var weekendEnd = {/*default is 0=Sunday*/
		af:5,dz:5,ir:5,om:5,sa:5,ye:5,
		ae:6,bh:5,eg:6,il:6,iq:6,jo:6,kw:6,ly:6,ma:6,qa:6,sd:6,sy:6,tn:6
	};

	var country = dojo.cldr.supplemental._region(locale);
	var start = weekendStart[country];
	var end = weekendEnd[country];
	if(start === undefined){start=6;}
	if(end === undefined){end=0;}
	return {start:start, end:end}; /*Object {start,end}*/
};

return dojo.cldr.supplemental;
});

},
'url:dijit/form/templates/DropDownButton.html':"<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\" role=\"presentation\"\n/></span>\n",
'dijit/layout/_ContentPaneResizeMixin':function(){
define("dijit/layout/_ContentPaneResizeMixin", [
	"dojo/_base/array", // array.filter array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom-attr",	// domAttr.has
	"dojo/dom-class",	// domClass.contains domClass.toggle
	"dojo/dom-geometry",// domGeometry.contentBox domGeometry.marginBox
	"dojo/_base/lang", // lang.mixin
	"dojo/query", // query
	"dojo/_base/sniff", // has("ie")
	"dojo/_base/window", // win.global
	"../registry",	// registry.byId
	"./utils",	// marginBox2contextBox
	"../_Contained"
], function(array, declare, domAttr, domClass, domGeometry, lang, query, has, win,
			registry, layoutUtils, _Contained){

/*=====
var _Contained = dijit._Contained;
=====*/

// module:
//		dijit/layout/_ContentPaneResizeMixin
// summary:
//		Resize() functionality of ContentPane.   If there's a single layout widget
//		child then it will call resize() with the same dimensions as the ContentPane.
//		Otherwise just calls resize on each child.


return declare("dijit.layout._ContentPaneResizeMixin", null, {
	// summary:
	//		Resize() functionality of ContentPane.   If there's a single layout widget
	//		child then it will call resize() with the same dimensions as the ContentPane.
	//		Otherwise just calls resize on each child.
	//
	//		Also implements basic startup() functionality, where starting the parent
	//		will start the children

	// doLayout: Boolean
	//		- false - don't adjust size of children
	//		- true - if there is a single visible child widget, set it's size to
	//				however big the ContentPane is
	doLayout: true,

	// isLayoutContainer: [protected] Boolean
	//		Indicates that this widget will call resize() on it's child widgets
	//		when they become visible.
	isLayoutContainer: true,

	startup: function(){
		// summary:
		//		See `dijit.layout._LayoutWidget.startup` for description.
		//		Although ContentPane doesn't extend _LayoutWidget, it does implement
		//		the same API.

		if(this._started){ return; }

		var parent = this.getParent();
		this._childOfLayoutWidget = parent && parent.isLayoutContainer;

		// I need to call resize() on my child/children (when I become visible), unless
		// I'm the child of a layout widget in which case my parent will call resize() on me and I'll do it then.
		this._needLayout = !this._childOfLayoutWidget;

		this.inherited(arguments);

		if(this._isShown()){
			this._onShow();
		}

		if(!this._childOfLayoutWidget){
			// If my parent isn't a layout container, since my style *may be* width=height=100%
			// or something similar (either set directly or via a CSS class),
			// monitor when my size changes so that I can re-layout.
			// For browsers where I can't directly monitor when my size changes,
			// monitor when the viewport changes size, which *may* indicate a size change for me.
			this.connect(has("ie") ? this.domNode : win.global, 'onresize', function(){
				// Using function(){} closure to ensure no arguments to resize.
				this._needLayout = !this._childOfLayoutWidget;
				this.resize();
			});
		}
	},

	_checkIfSingleChild: function(){
		// summary:
		//		Test if we have exactly one visible widget as a child,
		//		and if so assume that we are a container for that widget,
		//		and should propagate startup() and resize() calls to it.
		//		Skips over things like data stores since they aren't visible.

		var childNodes = query("> *", this.containerNode).filter(function(node){
				return node.tagName !== "SCRIPT"; // or a regexp for hidden elements like script|area|map|etc..
			}),
			childWidgetNodes = childNodes.filter(function(node){
				return domAttr.has(node, "data-dojo-type") || domAttr.has(node, "dojoType") || domAttr.has(node, "widgetId");
			}),
			candidateWidgets = array.filter(childWidgetNodes.map(registry.byNode), function(widget){
				return widget && widget.domNode && widget.resize;
			});

		if(
			// all child nodes are widgets
			childNodes.length == childWidgetNodes.length &&

			// all but one are invisible (like dojo.data)
			candidateWidgets.length == 1
		){
			this._singleChild = candidateWidgets[0];
		}else{
			delete this._singleChild;
		}

		// So we can set overflow: hidden to avoid a safari bug w/scrollbars showing up (#9449)
		domClass.toggle(this.containerNode, this.baseClass + "SingleChild", !!this._singleChild);
	},

	resize: function(changeSize, resultSize){
		// summary:
		//		See `dijit.layout._LayoutWidget.resize` for description.
		//		Although ContentPane doesn't extend _LayoutWidget, it does implement
		//		the same API.

		// For the TabContainer --> BorderContainer --> ContentPane case, _onShow() is
		// never called, so resize() is our trigger to do the initial href download (see [20099]).
		// However, don't load href for closed TitlePanes.
		if(!this._wasShown && this.open !== false){
			this._onShow();
		}

		this._resizeCalled = true;

		this._scheduleLayout(changeSize, resultSize);
	},

	_scheduleLayout: function(changeSize, resultSize){
		// summary:
		//		Resize myself, and call resize() on each of my child layout widgets, either now
		//		(if I'm currently visible) or when I become visible
		if(this._isShown()){
			this._layout(changeSize, resultSize);
		}else{
			this._needLayout = true;
			this._changeSize = changeSize;
			this._resultSize = resultSize;
		}
	},

	_layout: function(changeSize, resultSize){
		// summary:
		//		Resize myself according to optional changeSize/resultSize parameters, like a layout widget.
		//		Also, since I am a Container widget, each of my children expects me to
		//		call resize() or layout() on them.
		//
		//		Should be called on initialization and also whenever we get new content
		//		(from an href, or from set('content', ...))... but deferred until
		//		the ContentPane is visible

		// Set margin box size, unless it wasn't specified, in which case use current size.
		if(changeSize){
			domGeometry.setMarginBox(this.domNode, changeSize);
		}

		// Compute content box size of containerNode in case we [later] need to size our single child.
		var cn = this.containerNode;
		if(cn === this.domNode){
			// If changeSize or resultSize was passed to this method and this.containerNode ==
			// this.domNode then we can compute the content-box size without querying the node,
			// which is more reliable (similar to LayoutWidget.resize) (see for example #9449).
			var mb = resultSize || {};
			lang.mixin(mb, changeSize || {}); // changeSize overrides resultSize
			if(!("h" in mb) || !("w" in mb)){
				mb = lang.mixin(domGeometry.getMarginBox(cn), mb); // just use domGeometry.setMarginBox() to fill in missing values
			}
			this._contentBox = layoutUtils.marginBox2contentBox(cn, mb);
		}else{
			this._contentBox = domGeometry.getContentBox(cn);
		}

		this._layoutChildren();

		delete this._needLayout;
	},

	_layoutChildren: function(){
		// Call _checkIfSingleChild() again in case app has manually mucked w/the content
		// of the ContentPane (rather than changing it through the set("content", ...) API.
		if(this.doLayout){
			this._checkIfSingleChild();
		}

		if(this._singleChild && this._singleChild.resize){
			var cb = this._contentBox || domGeometry.getContentBox(this.containerNode);

			// note: if widget has padding this._contentBox will have l and t set,
			// but don't pass them to resize() or it will doubly-offset the child
			this._singleChild.resize({w: cb.w, h: cb.h});
		}else{
			// All my child widgets are independently sized (rather than matching my size),
			// but I still need to call resize() on each child to make it layout.
			array.forEach(this.getChildren(), function(widget){
				if(widget.resize){
					widget.resize();
				}
			});
		}
	},

	_isShown: function(){
		// summary:
		//		Returns true if the content is currently shown.
		// description:
		//		If I am a child of a layout widget then it actually returns true if I've ever been visible,
		//		not whether I'm currently visible, since that's much faster than tracing up the DOM/widget
		//		tree every call, and at least solves the performance problem on page load by deferring loading
		//		hidden ContentPanes until they are first shown

		if(this._childOfLayoutWidget){
			// If we are TitlePane, etc - we return that only *IF* we've been resized
			if(this._resizeCalled && "open" in this){
				return this.open;
			}
			return this._resizeCalled;
		}else if("open" in this){
			return this.open;		// for TitlePane, etc.
		}else{
			var node = this.domNode, parent = this.domNode.parentNode;
			return (node.style.display != 'none') && (node.style.visibility != 'hidden') && !domClass.contains(node, "dijitHidden") &&
					parent && parent.style && (parent.style.display != 'none');
		}
	},

	_onShow: function(){
		// summary:
		//		Called when the ContentPane is made visible
		// description:
		//		For a plain ContentPane, this is called on initialization, from startup().
		//		If the ContentPane is a hidden pane of a TabContainer etc., then it's
		//		called whenever the pane is made visible.
		//
		//		Does layout/resize of child widget(s)

		if(this._needLayout){
			// If a layout has been scheduled for when we become visible, do it now
			this._layout(this._changeSize, this._resultSize);
		}

		this.inherited(arguments);

		// Need to keep track of whether ContentPane has been shown (which is different than
		// whether or not it's currently visible).
		this._wasShown = true;
	}
});

});

},
'dijit/form/_ButtonMixin':function(){
define("dijit/form/_ButtonMixin", [
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.setSelectable
	"dojo/_base/event", // event.stop
	"../registry"		// registry.byNode
], function(declare, dom, event, registry){

// module:
//		dijit/form/_ButtonMixin
// summary:
//		A mixin to add a thin standard API wrapper to a normal HTML button

return declare("dijit.form._ButtonMixin", null, {
	// summary:
	//		A mixin to add a thin standard API wrapper to a normal HTML button
	// description:
	//		A label should always be specified (through innerHTML) or the label attribute.
	//		Attach points:
	//			focusNode (required): this node receives focus
	//			valueNode (optional): this node's value gets submitted with FORM elements
	//			containerNode (optional): this node gets the innerHTML assignment for label
	// example:
	// |	<button data-dojo-type="dijit.form.Button" onClick="...">Hello world</button>
	//
	// example:
	// |	var button1 = new dijit.form.Button({label: "hello world", onClick: foo});
	// |	dojo.body().appendChild(button1.domNode);

	// label: HTML String
	//		Content to display in button.
	label: "",

	// type: [const] String
	//		Type of button (submit, reset, button, checkbox, radio)
	type: "button",

	_onClick: function(/*Event*/ e){
		// summary:
		//		Internal function to handle click actions
		if(this.disabled){
			event.stop(e);
			return false;
		}
		var preventDefault = this.onClick(e) === false; // user click actions
		if(!preventDefault && this.type == "submit" && !(this.valueNode||this.focusNode).form){ // see if a non-form widget needs to be signalled
			for(var node=this.domNode; node.parentNode; node=node.parentNode){
				var widget=registry.byNode(node);
				if(widget && typeof widget._onSubmit == "function"){
					widget._onSubmit(e);
					preventDefault = true;
					break;
				}
			}
		}
		if(preventDefault){
			e.preventDefault();
		}
		return !preventDefault;
	},

	postCreate: function(){
		this.inherited(arguments);
		dom.setSelectable(this.focusNode, false);
	},

	onClick: function(/*Event*/ /*===== e =====*/){
		// summary:
		//		Callback for when button is clicked.
		//		If type="submit", return true to perform submit, or false to cancel it.
		// type:
		//		callback
		return true;		// Boolean
	},

	_setLabelAttr: function(/*String*/ content){
		// summary:
		//		Hook for set('label', ...) to work.
		// description:
		//		Set the label (text) of the button; takes an HTML string.
		this._set("label", content);
		(this.containerNode||this.focusNode).innerHTML = content;
	}
});

});

},
'curam/pagination/StateController':function(){
/*
 * Modification History
 * --------------------
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 13-Jan-2012 JY [CR00300682] Fixed the default page size overriding issue.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 20-Apr-2010 MV [CR00193983] Make the model API's row indexes 1-based as per the design.
 * 16-Apr-2010 MV [???] Update GUI properly when the page size is changed.
 * 13-Apr-2010 MV [CR00192550] Update page size options, fixed a bug
 *                              with the last page number.
 * 18-Mar-2010 MV [CR00136536] Initial version.
 */

/**
 * @name curam.pagination.StateController
 *
 */
define("curam/pagination/StateController", ["curam/pagination",
        "curam/debug"
        ], function() {
  
var StateController = dojo.declare("curam.pagination.StateController", null, 
  /** @lends curam.pagination.StateController.prototype */ {
  
  /** Holds the current page size. */
  pageSize: undefined,

  /** Holds the currently displayed page number. Zero means no page displayed. */
  currentPage: 0,

  _listModel: undefined,

  _gui: undefined,

  constructor: function(listModel, gui) {
    this.pageSize = curam.pagination.defaultPageSize;
    this._listModel = listModel;

    this.pageSize = curam.pagination.defaultPageSize;
    // initialize GUI
    this._gui = gui;
    var state = {};
    state.pageSizeOptions = [15, 30, 45];
    state.pageSizeOptions.contains = function(val) {
      for(var i = 0; i < state.pageSizeOptions.length; i++) {
        if (state.pageSizeOptions[i] == val) {
          return true; 
        }
      }
      return false;
    };
    if (!state.pageSizeOptions.contains(curam.pagination.defaultPageSize)) {
      // include the configured default page size 
      state.pageSizeOptions.push(curam.pagination.defaultPageSize);
      state.pageSizeOptions.sort(function(a,b){return a - b});
    }
    state.currentPageSize = this.pageSize;
    state.directLinkRangeWidth = 3;
    state.lastPage = this._getLastPageNumber();
    this._gui.updateState(state);
    
    var handlers = {};
    handlers.first = dojo.hitch(this, this.gotoFirst);
    handlers.last = dojo.hitch(this, this.gotoLast);
    handlers.previous = dojo.hitch(this, this.gotoPrevious);
    handlers.next = dojo.hitch(this, this.gotoNext);
    handlers.page = dojo.hitch(this, this.gotoPage);
    handlers.pageSize = dojo.hitch(this, this.changePageSize);
    this._gui.setHandlers(handlers);
  },

  /**
   * Resets the pagination to default state.
   *
   * Keeps the current page size, but goes back to the first page.
   */
  reset: function() {
    // hide all rows - we need to do that, because the rows have been shuffled
    // underneath us and the pagination algorithms would not be able to update
    // the list correctly.
    this._listModel.hideRange(1, this._listModel.getRowCount());
    
    // reset the current page number
    this.currentPage = 0;
    
    this._gui.reset();
    
    this.gotoFirst();
  },

  gotoFirst: function() {
    if (this.currentPage != 1) {
      this.gotoPage(1);
    }
    // else do nothing - already on the first page
  },

  gotoLast: function() {
    var lastPageNumber = this._getLastPageNumber();
    if (this.currentPage != lastPageNumber) {
      this.gotoPage(lastPageNumber);
    }
    // else do nothing - already on the last page
  },

  gotoPrevious: function() {
    if (this.currentPage > 1) {
      this.gotoPage(this.currentPage - 1);
    }
    // else do nothing, already on the first page
  },

  gotoNext: function() {
    curam.debug.log("curam.pagination.StateController.gotoNext");
    var lastPageNumber = this._getLastPageNumber();
    if (this.currentPage < lastPageNumber) {
      this.gotoPage(this.currentPage + 1);
    }
    // else do nothing, already on the last page
  },

  gotoPage: function(pageNumber) {
    curam.debug.log("curam.pagination.StateController.gotoPage: ", 
                    pageNumber);
    if (this.currentPage != 0) {
      this._listModel.hideRange(this._calcRangeStart(this.currentPage),
          this._calcRangeEnd(this.currentPage));
    }
    
    this._listModel.showRange(this._calcRangeStart(pageNumber),
        this._calcRangeEnd(pageNumber));
    
    this.currentPage = pageNumber;

    this._updateGui();
  },

  changePageSize: function(newPageSize) {
    curam.debug.log("curam.pagination.StateController.changePageSize: ", 
      newPageSize);
    this.pageSize = newPageSize;
    
    var state = {};
    state.currentPageSize = newPageSize;
    state.lastPage = this._getLastPageNumber();
    this._gui.updateState(state);
    
    this.reset();
  },

  _calcRangeStart: function(pageNumber) {
    return (pageNumber * this.pageSize) - this.pageSize + 1;
  },

  _calcRangeEnd: function(pageNumber) {
    if (pageNumber != this._getLastPageNumber()) {
      return pageNumber * this.pageSize;
    
    } else {
      return this._listModel.getRowCount();
    }
  },

  _getLastPageNumber: function() {
    var numRows = this._listModel.getRowCount();
    var mod = numRows % this.pageSize;
    return ((numRows - mod) / this.pageSize) + (mod > 0 ? 1 : 0);
  },

  _updateGui: function() {
    var state = {};

    state.first = this.currentPage > 1;
    state.previous = state.first;
    state.next = this.currentPage < this._getLastPageNumber();
    state.last = state.next;
    state.currentPage = this.currentPage;
    state.rowInfo = [this._calcRangeStart(this.currentPage),
                     this._calcRangeEnd(this.currentPage),
                     this._listModel.getRowCount()];
    
    this._gui.updateState(state);
  }
});

return StateController;
});

},
'dojox/storage/LocalStorageProvider':function(){
// wrapped by build app
define("dojox/storage/LocalStorageProvider", ["dijit","dojo","dojox","dojo/require!dojox/storage/Provider,dojox/storage/manager"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage.LocalStorageProvider");

dojo.require("dojox.storage.Provider");
dojo.require("dojox.storage.manager");

dojo.declare(
	"dojox.storage.LocalStorageProvider",
	[dojox.storage.Provider],
	{
		store: null,

		initialize: function(){

			this.store = localStorage;

			this.initialized = true;
			dojox.storage.manager.loaded();
		},

		isAvailable: function(){ /*Boolean*/
			return typeof localStorage != 'undefined';
		},

		put: function(	/*string*/ key,
						/*object*/ value,
						/*function*/ resultsHandler,
						/*string?*/ namespace){

			// TODO: Use the events as specified in http://dev.w3.org/html5/webstorage/#the-storage-event ?
			//	Currently, the storage event is not reliable around browsers.

			this._assertIsValidKey(key);

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			var fullKey = this.getFullKey(key,namespace);

			// prepending a prefix to a string value
			// will result in that prefix not being
			// usable as a value, so we better use
			// toJson() always.
			value = dojo.toJson(value);

			try { // ua may raise an QUOTA_EXCEEDED_ERR exception
				this.store.setItem(fullKey,value);

				if(resultsHandler){
					resultsHandler(this.SUCCESS, key, null, namespace);
				}
			} catch(e) {
				if(resultsHandler){
					resultsHandler(this.FAILED, key, e.toString(), namespace);
				}
			}
		},

		get: function(/*string*/ key, /*string?*/ namespace){ /*Object*/
			this._assertIsValidKey(key);

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			// get our full key name, which is namespace + key
			key = this.getFullKey(key, namespace);

			return dojo.fromJson(this.store.getItem(key));
		},

		getKeys: function(/*string?*/ namespace){ /*Array*/
			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			namespace = '__'+namespace+'_'

			var keys = [];
			for(var i = 0; i < this.store.length; i++){
				var currentKey = this.store.key(i);
				if(this._beginsWith(currentKey,namespace)){
					currentKey = currentKey.substring(namespace.length);
					keys.push(currentKey);
				}
			}

			return keys;
		},

		clear: function(/*string?*/ namespace){
			// Um, well, the 'specs' in Provider.js say that if
			// no namespace is given, this method should nuke
			// the *complete* storage. As other components might
			// be using localStorage too, this might not be a
			// good idea, so this method won't do it.

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			namespace = '__'+namespace+'_';

			var keys = [];
			for(var i = 0; i < this.store.length; i++){
				if(this._beginsWith(this.store.key(i),namespace)){
					keys.push(this.store.key(i));
				}
			}

			dojo.forEach(keys, dojo.hitch(this.store, "removeItem"));
		},

		remove: function(/*string*/ key, /*string?*/ namespace){
			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			this.store.removeItem(this.getFullKey(key, namespace));
		},

		getNamespaces: function(){ /*string[]*/
			// There must be a better way than
			// to execute a regex on *every*
			// item in the store.

			var results = [ this.DEFAULT_NAMESPACE];

			var found = {};
			found[this.DEFAULT_NAMESPACE] = true;
			var tester = /^__([^_]*)_/;

			for(var i = 0; i < this.store.length; i++){
				var currentKey = this.store.key(i);
				if(tester.test(currentKey) == true){
					var currentNS = currentKey.match(tester)[1];
					if(typeof found[currentNS] == "undefined"){
						found[currentNS] = true;
						results.push(currentNS);
					}
				}
			}

			return results;
		},

		isPermanent: function(){ /*Boolean*/
			return true;
		},

		getMaximumSize: function(){ /* mixed */
			return dojox.storage.SIZE_NO_LIMIT;
		},

		hasSettingsUI: function(){ /*Boolean*/
			return false;
		},

		isValidKey: function(/*string*/ keyName){ /*Boolean*/
			if(keyName === null || keyName === undefined){
				return false;
			}

			return /^[0-9A-Za-z_-]*$/.test(keyName);
		},

		isValidNamespace: function(/*string*/ keyName){ /*Boolean*/
			// we *must* prevent namespaces from having
			// underscores - else lookup of namespaces
			// via RegEx (e.g. in getNamespaces ) would
			// return wrong results.
			//
			// The only way around this would be to
			// disallow underscores in keys.

			if(keyName === null || keyName === undefined){
				return false;
			}

			return /^[0-9A-Za-z-]*$/.test(keyName);
		},

		getFullKey: function(key, namespace){
			// checks for valid namespace and
			// key are already performed.
			return "__" + namespace + "_" + key;
		},

		_beginsWith: function(/* string */ haystack, /* string */ needle) {
			if(needle.length > haystack.length) {
				return false;
			}
			return haystack.substring(0,needle.length) === needle;
		},

		_assertIsValidNamespace: function(/* string */ namespace){
			if(this.isValidNamespace(namespace) === false){
				throw new Error("Invalid namespace given: " + namespace);
			}
		},

		_assertIsValidKey: function(/* string */ key){
			if(this.isValidKey(key) === false){
				throw new Error("Invalid key given: " + key);
			}
		}
	}
);

dojox.storage.manager.register("dojox.storage.LocalStorageProvider", new dojox.storage.LocalStorageProvider());
});

},
'curam/util/TabActionsMenu':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */
define("curam/util/TabActionsMenu", ["curam/tab",
        "curam/debug",
        "curam/define",
        "curam/util",
        "curam/util/Refresh",
        "curam/util/ResourceBundle"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 15-Apr-2013  SB  [CR00378721] Added aria-disabled attribute for disabled menuitems.
   * 23-Oct-2012  MV  [CR00347543] Refer to top level UIController.
   * 22-Oct-2012  SK  [CR00346419] Now cleans-up the dynamic menu item related 
   *    objects on tab close to avoid memory leak.
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 27-Oct-2010  SK  [CR00224193] Changed function for opening the menu item
        in modal dialog.
   * 26-Oct-2010  SJ  [CR00226152] Added File down load support for menu bar.
   * 15-Sep-2010  MV [CR00220152] Properly handle updates of lazily created menus.
   *    Also renamed and moved to comply with coding standards.
   * 26-Aug-2010 MV  [CR00217499] Replace the use of escape() with the proper
   *      function to encode URL parameters.
   * 19-Aug-2010 SJ  [CR00213476] Removed the support that parses page parameter in URL
   *                              from here and moved the same functionality to renderer.
   * 28-Jul-2010  PK  [CR00211736] Updated due to re-factoring of
   *                    tab-app-controller.js and tab-app-common.js.
   * 20-Jul-2010 MV  [CR00211031] Moved JavaScript code away from the renderer.
   * 12-Jul-2010 MV  [CR00210064] Do the visual styling using classes, rather than
   *                  manipulating styles directly.
   * 07-Jul-2010 MV  [CR00180694] Refactor to unify dynamic updates with
   *                  tab navigation. Move JavaScript code from renderer to here.
   * 19-May-2010 MV  [CR00166999] Check for dynamic menu bar data presence
   *                    and do nothing if there is no data.
   * 29-Apr-2010 MV  [CR00195109] Add debug output on refresh.
   * 01-Dec-2009 MV  [CR00180704] Move dynamicMenuBarData from global scope
   *                                      to a specific namespace.
   * 27-Nov-2009 MV  [CR00180379] Fix dynamic menu bar refresh when multiple
   *                                 tabs of the same type are open
   * 27-Nov-2009 MV  [CR00180297] Scope the dynamic menu bar data properly.
   * 16-Nov-2009 MV  [CR00172452] Style the disabled menu items as grayed out.
   * 06-Aug-2009 MLB [CR00163869] Renaming handleOnloadPage to refresh.
   * 25-Jun-2009 MV  [CR00161033] Documenting the code.
   * 24-Jun-2009 MV  [CR00160877] Implemented the code to update the menu bar
   *                              based on data returned by server.
   * 15-Jun-2009 MV  [CR00160095] Initial version.
   */
  
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  /**
   * Contains functions for the menu bar.
   */
  curam.define.singleton("curam.util.TabActionsMenu", {
    /** Holds the tab widget ids for menus that have been created. */
    _tabMenuStates: {},

    /**
     * Fresh data for the menu item enabled/disabled state is requested and based
     * on the response from the server the menu bar is updated.
     */
    getRefreshParams: function(tabWidgetId) {
      curam.debug.log("curam.util.TabActionsMenu.getRefreshParams(%s)",
          tabWidgetId);

      if (!curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId]) {
        curam.debug
          .log(bundle.getProperty("curam.util.TabActionsMenu.no.dynamic"));
        return null;
      }

      // create the parameters required by the loaders code on the server side
      var params = "menuId="
          + curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId].menuBarId;
      params += "&menuItemIds="
          + curam.util.toCommaSeparatedList(
              curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId]
                                                           .dynamicMenuItemIds);

      params += "&menuLoaders="
          + curam.util.toCommaSeparatedList(
              curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId]
                                                           .dynamicMenuLoaders);

      params += "&menuPageParameters="
          + curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId]
                                                         .pageParameters;

      return params;
    },

    /**
     * Loops through the menu items in the result structure and updates
     * the corresponding widgets.
     */
    updateMenuItemStates: function(tabWidetId, data) {
      var result = data.menuData;
      var updateFunc = function() {
        for (var i = 0; i < result.itemStates.length; i++) {
          curam.util.TabActionsMenu.updateMenuItemState(result.itemStates[i],
              tabWidetId);
        }
      };

      if (curam.util.TabActionsMenu._isMenuCreated(tabWidetId)) {
        updateFunc();

      } else {
        // defer the update until the menu exists
        var topWin = curam.util.getTopmostWindow();
        var unsubToken = topWin.dojo.subscribe(
            "/curam/menu/created", this, function(tabId) {
              curam.debug.log("Received /curam/menu/created " 
                + bundle.getProperty("curam.util.ExpandableLists.load.for"), 
                  tabId);
              if (tabId == tabWidetId) {
                curam.debug
                  .log(bundle.getProperty("curam.util.TabActionsMenu.match"));
                // mark as created
                curam.util.TabActionsMenu._tabMenuStates[tabId] = true;
                // update
                updateFunc();
                // from now on the menu exists so we don't need to listen anymore
                topWin.dojo.unsubscribe(unsubToken);
              }
            });
         curam.tab.unsubscribeOnTabClose(unsubToken, tabWidetId);
      }
    },

    /**
     * @returns {Boolean} True if actions menu for the specified tab exists,
     *    otherwise False.
     */
    _isMenuCreated: function(tabId) {
      return curam.util.TabActionsMenu._tabMenuStates[tabId] == true;
    },

    /**
     * Updates the widget corresponding to the specified menuItem structure.
     */
    updateMenuItemState: function(menuItem, tabWidgetId) {
      var widget = dijit.byId("menuItem_" + tabWidgetId + "_" + menuItem.id);
      if (widget != null) {
        widget.disabled = !menuItem.enabled;
        curam.util.swapState(widget.domNode,
            menuItem.enabled, "enabled", "disabled");
        curam.util.swapState(widget.domNode,
            menuItem.visible, "visible", "hidden");
        if(widget.disabled){
          widget.domNode.setAttribute("aria-disabled", "true");
        }
      }
    },

    setupHandlers: function(tabWidgetId) {
      // Summary:
      //    Setup the necessary handlers. The call to this function is generated
      //    in the menu bar renderer.

      curam.util.Refresh.setMenuBarCallbacks(
          curam.util.TabActionsMenu.updateMenuItemStates,
          curam.util.TabActionsMenu.getRefreshParams);

      var registerTabOpenHandler = function() {
        var refreshHandler = function(pageId, tabWidgetId) {
          return curam.util.Refresh.refreshMenuAndNavigation(
              tabWidgetId, true, true, true);
        };
        var handlerForTab =
          curam.tab.getHandlerForTab(refreshHandler, tabWidgetId);
        var topmostWin = curam.util.getTopmostWindow();
        var unsubscribeMenuRefresh = topmostWin.dojo.subscribe("curam.tabOpened",
            null,
            function(pageId, actualWidgetId) {
              handlerForTab(pageId ,actualWidgetId);
              topmostWin.dojo.unsubscribe(unsubscribeMenuRefresh);
            });
      };

      curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId]
                               .registerTabOpenHandler = registerTabOpenHandler;

      curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId]
                                                   .registerTabOpenHandler();
      curam.tab.executeOnTabClose(function() {
        curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId].registerTabOpenHandler = null;
        delete curam.util.TabActionsMenu.dynamicMenuBarData[tabWidgetId];
      }, tabWidgetId);
    },

    handleOnClick: function(url,fileDownLoadTypeInd) {
      if(fileDownLoadTypeInd){
        curam.tab.getTabController().handleDownLoadClick(url);
      
      } else {
        curam.tab.getTabController().handleLinkClick(url);
      }
    },

    handleOnClickModal: function(url, modalOptions) {
      var modalObject = {dialogOptions:modalOptions};
      curam.tab.getTabController().handleLinkClick(url, modalObject);
    }
  });

  return curam.util.TabActionsMenu;
});

},
'dijit/tree/TreeStoreModel':function(){
define("dijit/tree/TreeStoreModel", [
	"dojo/_base/array", // array.filter array.forEach array.indexOf array.some
	"dojo/aspect", // aspect.after
	"dojo/_base/declare", // declare
	"dojo/_base/json", // json.stringify
	"dojo/_base/lang" // lang.hitch
], function(array, aspect, declare, json, lang){

	// module:
	//		dijit/tree/TreeStoreModel
	// summary:
	//		Implements dijit.Tree.model connecting to a dojo.data store with a single
	//		root item.

	return declare("dijit.tree.TreeStoreModel", null, {
		// summary:
		//		Implements dijit.Tree.model connecting to a dojo.data store with a single
		//		root item.  Any methods passed into the constructor will override
		//		the ones defined here.

		// store: dojo.data.Store
		//		Underlying store
		store: null,

		// childrenAttrs: String[]
		//		One or more attribute names (attributes in the dojo.data item) that specify that item's children
		childrenAttrs: ["children"],

		// newItemIdAttr: String
		//		Name of attribute in the Object passed to newItem() that specifies the id.
		//
		//		If newItemIdAttr is set then it's used when newItem() is called to see if an
		//		item with the same id already exists, and if so just links to the old item
		//		(so that the old item ends up with two parents).
		//
		//		Setting this to null or "" will make every drop create a new item.
		newItemIdAttr: "id",

		// labelAttr: String
		//		If specified, get label for tree node from this attribute, rather
		//		than by calling store.getLabel()
		labelAttr: "",

	 	// root: [readonly] dojo.data.Item
		//		Pointer to the root item (read only, not a parameter)
		root: null,

		// query: anything
		//		Specifies datastore query to return the root item for the tree.
		//		Must only return a single item.   Alternately can just pass in pointer
		//		to root item.
		// example:
		//	|	{id:'ROOT'}
		query: null,

		// deferItemLoadingUntilExpand: Boolean
		//		Setting this to true will cause the TreeStoreModel to defer calling loadItem on nodes
		// 		until they are expanded. This allows for lazying loading where only one
		//		loadItem (and generally one network call, consequently) per expansion
		// 		(rather than one for each child).
		// 		This relies on partial loading of the children items; each children item of a
		// 		fully loaded item should contain the label and info about having children.
		deferItemLoadingUntilExpand: false,

		constructor: function(/* Object */ args){
			// summary:
			//		Passed the arguments listed above (store, etc)
			// tags:
			//		private

			lang.mixin(this, args);

			this.connects = [];

			var store = this.store;
			if(!store.getFeatures()['dojo.data.api.Identity']){
				throw new Error("dijit.Tree: store must support dojo.data.Identity");
			}

			// if the store supports Notification, subscribe to the notification events
			if(store.getFeatures()['dojo.data.api.Notification']){
				this.connects = this.connects.concat([
					aspect.after(store, "onNew", lang.hitch(this, "onNewItem"), true),
					aspect.after(store, "onDelete", lang.hitch(this, "onDeleteItem"), true),
					aspect.after(store, "onSet", lang.hitch(this, "onSetItem"), true)
				]);
			}
		},

		destroy: function(){
			var h;
			while(h = this.connects.pop()){ h.remove(); }
			// TODO: should cancel any in-progress processing of getRoot(), getChildren()
		},

		// =======================================================================
		// Methods for traversing hierarchy

		getRoot: function(onItem, onError){
			// summary:
			//		Calls onItem with the root item for the tree, possibly a fabricated item.
			//		Calls onError on error.
			if(this.root){
				onItem(this.root);
			}else{
				this.store.fetch({
					query: this.query,
					onComplete: lang.hitch(this, function(items){
						if(items.length != 1){
							throw new Error(this.declaredClass + ": query " + json.stringify(this.query) + " returned " + items.length +
							 	" items, but must return exactly one item");
						}
						this.root = items[0];
						onItem(this.root);
					}),
					onError: onError
				});
			}
		},

		mayHaveChildren: function(/*dojo.data.Item*/ item){
			// summary:
			//		Tells if an item has or may have children.  Implementing logic here
			//		avoids showing +/- expando icon for nodes that we know don't have children.
			//		(For efficiency reasons we may not want to check if an element actually
			//		has children until user clicks the expando node)
			return array.some(this.childrenAttrs, function(attr){
				return this.store.hasAttribute(item, attr);
			}, this);
		},

		getChildren: function(/*dojo.data.Item*/ parentItem, /*function(items)*/ onComplete, /*function*/ onError){
			// summary:
			// 		Calls onComplete() with array of child items of given parent item, all loaded.

			var store = this.store;
			if(!store.isItemLoaded(parentItem)){
				// The parent is not loaded yet, we must be in deferItemLoadingUntilExpand
				// mode, so we will load it and just return the children (without loading each
				// child item)
				var getChildren = lang.hitch(this, arguments.callee);
				store.loadItem({
					item: parentItem,
					onItem: function(parentItem){
						getChildren(parentItem, onComplete, onError);
					},
					onError: onError
				});
				return;
			}
			// get children of specified item
			var childItems = [];
			for(var i=0; i<this.childrenAttrs.length; i++){
				var vals = store.getValues(parentItem, this.childrenAttrs[i]);
				childItems = childItems.concat(vals);
			}

			// count how many items need to be loaded
			var _waitCount = 0;
			if(!this.deferItemLoadingUntilExpand){
				array.forEach(childItems, function(item){ if(!store.isItemLoaded(item)){ _waitCount++; } });
			}

			if(_waitCount == 0){
				// all items are already loaded (or we aren't loading them).  proceed...
				onComplete(childItems);
			}else{
				// still waiting for some or all of the items to load
				array.forEach(childItems, function(item, idx){
					if(!store.isItemLoaded(item)){
						store.loadItem({
							item: item,
							onItem: function(item){
								childItems[idx] = item;
								if(--_waitCount == 0){
									// all nodes have been loaded, send them to the tree
									onComplete(childItems);
								}
							},
							onError: onError
						});
					}
				});
			}
		},

		// =======================================================================
		// Inspecting items

		isItem: function(/* anything */ something){
			return this.store.isItem(something);	// Boolean
		},

		fetchItemByIdentity: function(/* object */ keywordArgs){
			this.store.fetchItemByIdentity(keywordArgs);
		},

		getIdentity: function(/* item */ item){
			return this.store.getIdentity(item);	// Object
		},

		getLabel: function(/*dojo.data.Item*/ item){
			// summary:
			//		Get the label for an item
			if(this.labelAttr){
				return this.store.getValue(item,this.labelAttr);	// String
			}else{
				return this.store.getLabel(item);	// String
			}
		},

		// =======================================================================
		// Write interface

		newItem: function(/* dojo.dnd.Item */ args, /*Item*/ parent, /*int?*/ insertIndex){
			// summary:
			//		Creates a new item.   See `dojo.data.api.Write` for details on args.
			//		Used in drag & drop when item from external source dropped onto tree.
			// description:
			//		Developers will need to override this method if new items get added
			//		to parents with multiple children attributes, in order to define which
			//		children attribute points to the new item.

			var pInfo = {parent: parent, attribute: this.childrenAttrs[0]}, LnewItem;

			if(this.newItemIdAttr && args[this.newItemIdAttr]){
				// Maybe there's already a corresponding item in the store; if so, reuse it.
				this.fetchItemByIdentity({identity: args[this.newItemIdAttr], scope: this, onItem: function(item){
					if(item){
						// There's already a matching item in store, use it
						this.pasteItem(item, null, parent, true, insertIndex);
					}else{
						// Create new item in the tree, based on the drag source.
						LnewItem=this.store.newItem(args, pInfo);
						if(LnewItem && (insertIndex!=undefined)){
							// Move new item to desired position
							this.pasteItem(LnewItem, parent, parent, false, insertIndex);
						}
					}
				}});
			}else{
				// [as far as we know] there is no id so we must assume this is a new item
				LnewItem=this.store.newItem(args, pInfo);
				if(LnewItem && (insertIndex!=undefined)){
					// Move new item to desired position
					this.pasteItem(LnewItem, parent, parent, false, insertIndex);
				}
			}
		},

		pasteItem: function(/*Item*/ childItem, /*Item*/ oldParentItem, /*Item*/ newParentItem, /*Boolean*/ bCopy, /*int?*/ insertIndex){
			// summary:
			//		Move or copy an item from one parent item to another.
			//		Used in drag & drop
			var store = this.store,
				parentAttr = this.childrenAttrs[0];	// name of "children" attr in parent item

			// remove child from source item, and record the attribute that child occurred in
			if(oldParentItem){
				array.forEach(this.childrenAttrs, function(attr){
					if(store.containsValue(oldParentItem, attr, childItem)){
						if(!bCopy){
							var values = array.filter(store.getValues(oldParentItem, attr), function(x){
								return x != childItem;
							});
							store.setValues(oldParentItem, attr, values);
						}
						parentAttr = attr;
					}
				});
			}

			// modify target item's children attribute to include this item
			if(newParentItem){
				if(typeof insertIndex == "number"){
					// call slice() to avoid modifying the original array, confusing the data store
					var childItems = store.getValues(newParentItem, parentAttr).slice();
					childItems.splice(insertIndex, 0, childItem);
					store.setValues(newParentItem, parentAttr, childItems);
				}else{
					store.setValues(newParentItem, parentAttr,
						store.getValues(newParentItem, parentAttr).concat(childItem));
				}
			}
		},

		// =======================================================================
		// Callbacks

		onChange: function(/*dojo.data.Item*/ /*===== item =====*/){
			// summary:
			//		Callback whenever an item has changed, so that Tree
			//		can update the label, icon, etc.   Note that changes
			//		to an item's children or parent(s) will trigger an
			//		onChildrenChange() so you can ignore those changes here.
			// tags:
			//		callback
		},

		onChildrenChange: function(/*===== parent, newChildrenList =====*/){
			// summary:
			//		Callback to do notifications about new, updated, or deleted items.
			// parent: dojo.data.Item
			// newChildrenList: dojo.data.Item[]
			// tags:
			//		callback
		},

		onDelete: function(/*dojo.data.Item*/ /*===== item =====*/){
			// summary:
			//		Callback when an item has been deleted.
			// description:
			//		Note that there will also be an onChildrenChange() callback for the parent
			//		of this item.
			// tags:
			//		callback
		},

		// =======================================================================
		// Events from data store

		onNewItem: function(/* dojo.data.Item */ item, /* Object */ parentInfo){
			// summary:
			//		Handler for when new items appear in the store, either from a drop operation
			//		or some other way.   Updates the tree view (if necessary).
			// description:
			//		If the new item is a child of an existing item,
			//		calls onChildrenChange() with the new list of children
			//		for that existing item.
			//
			// tags:
			//		extension

			// We only care about the new item if it has a parent that corresponds to a TreeNode
			// we are currently displaying
			if(!parentInfo){
				return;
			}

			// Call onChildrenChange() on parent (ie, existing) item with new list of children
			// In the common case, the new list of children is simply parentInfo.newValue or
			// [ parentInfo.newValue ], although if items in the store has multiple
			// child attributes (see `childrenAttr`), then it's a superset of parentInfo.newValue,
			// so call getChildren() to be sure to get right answer.
			this.getChildren(parentInfo.item, lang.hitch(this, function(children){
				this.onChildrenChange(parentInfo.item, children);
			}));
		},

		onDeleteItem: function(/*Object*/ item){
			// summary:
			//		Handler for delete notifications from underlying store
			this.onDelete(item);
		},

		onSetItem: function(item, attribute /*===== , oldValue, newValue =====*/){
			// summary:
			//		Updates the tree view according to changes in the data store.
			// description:
			//		Handles updates to an item's children by calling onChildrenChange(), and
			//		other updates to an item by calling onChange().
			//
			//		See `onNewItem` for more details on handling updates to an item's children.
			// item: Item
			// attribute: attribute-name-string
			// oldValue: object | array
			// newValue: object | array
			// tags:
			//		extension

			if(array.indexOf(this.childrenAttrs, attribute) != -1){
				// item's children list changed
				this.getChildren(item, lang.hitch(this, function(children){
					// See comments in onNewItem() about calling getChildren()
					this.onChildrenChange(item, children);
				}));
			}else{
				// item's label/icon/etc. changed.
				this.onChange(item);
			}
		}
	});
});

},
'curam/layout/ScrollingTabController':function(){
/*
 * Copyright 2010-2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.layout.ScrollingTabController
 * @namespace Customized dijit.layout.ScrollingTabController class that adds
 *    rounded corners to tabs.
 * 
 */
define("curam/layout/ScrollingTabController", ["dijit/layout/ScrollingTabController",
        "curam/debug"
        ], function(ScrollingTabController) {

/*
 * Modification History
 * --------------------
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 10-Jan-2011  KW  [CR00240897] Curam Logo is now hard-coded. Also added new
 *                    element to application banner to accommodate new styling.
 * 18-Nov-2010  MV [CR00231387] Replaced the compressed version with the proper
 *    source.
 */

var CuramScrollingTabController = dojo.declare("curam.layout.ScrollingTabController", ScrollingTabController,
/**
 * @lends curam.layout.ScrollingTabController.prototype
 */
{
  onStartup: function(){
    this.inherited(arguments);
      this.updateTabStyle();
  },
  
  updateTabStyle:function() {
    var kids = this.getChildren();
    curam.debug
      .log("curam.layout.ScrollingTabController.updateTabStyle kids = ", 
          this.domNode);
    
    dojo.forEach(kids , function(button,index,array) {
      dojo.removeClass(button.domNode, ["first-class", "last-class"] );
      
      if (index == 0) {
        dojo.addClass(button.domNode,"first");
      
      } else if(index == array.length - 1) {
        dojo.addClass(button.domNode,"last");
      }
    });
    
    //Apply new classes and elements related to the updated v6
    //banner style
    var newBanner = dojo.query(".nowrapTabStrip", this.domNode)[0];
    dojo.replaceClass(newBanner, "nowrapSecTabStrip", "nowrapTabStrip");
    
    var bannerEnding = document.createElement("div");
    dojo.addClass(bannerEnding, "block-slope");
    dojo.addClass(bannerEnding, "dijitTab");
    bannerEnding.innerHTML="&#x200B;";
    
    newBanner.appendChild(bannerEnding);
    }
  });

  return CuramScrollingTabController;  
});

},
'url:dijit/templates/TooltipDialog.html':"<div role=\"presentation\" tabIndex=\"-1\">\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" data-dojo-attach-point=\"containerNode\" role=\"dialog\"></div>\n\t</div>\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\"></div>\n</div>\n",
'dojo/dnd/TimedMoveable':function(){
define("dojo/dnd/TimedMoveable", ["../main", "./Moveable"], function(dojo) {
	// module:
	//		dojo/dnd/TimedMoveable
	// summary:
	//		TODOC

	/*=====
	dojo.declare("dojo.dnd.__TimedMoveableArgs", [dojo.dnd.__MoveableArgs], {
		// timeout: Number
		//		delay move by this number of ms,
		//		accumulating position changes during the timeout
		timeout: 0
	});
	=====*/

	// precalculate long expressions
	var oldOnMove = dojo.dnd.Moveable.prototype.onMove;

	dojo.declare("dojo.dnd.TimedMoveable", dojo.dnd.Moveable, {
		// summary:
		//		A specialized version of Moveable to support an FPS throttling.
		//		This class puts an upper restriction on FPS, which may reduce
		//		the CPU load. The additional parameter "timeout" regulates
		//		the delay before actually moving the moveable object.

		// object attributes (for markup)
		timeout: 40,	// in ms, 40ms corresponds to 25 fps

		constructor: function(node, params){
			// summary:
			//		an object that makes a node moveable with a timer
			// node: Node||String
			//		a node (or node's id) to be moved
			// params: dojo.dnd.__TimedMoveableArgs
			//		object with additional parameters.

			// sanitize parameters
			if(!params){ params = {}; }
			if(params.timeout && typeof params.timeout == "number" && params.timeout >= 0){
				this.timeout = params.timeout;
			}
		},

		onMoveStop: function(/* dojo.dnd.Mover */ mover){
			if(mover._timer){
				// stop timer
				clearTimeout(mover._timer);
				// reflect the last received position
				oldOnMove.call(this, mover, mover._leftTop)
			}
			dojo.dnd.Moveable.prototype.onMoveStop.apply(this, arguments);
		},
		onMove: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
			mover._leftTop = leftTop;
			if(!mover._timer){
				var _t = this;	// to avoid using dojo.hitch()
				mover._timer = setTimeout(function(){
					// we don't have any pending requests
					mover._timer = null;
					// reflect the last received position
					oldOnMove.call(_t, mover, mover._leftTop);
				}, this.timeout);
			}
		}
	});

	return dojo.dnd.TimedMoveable;
	
});

},
'dojox/storage/BehaviorStorageProvider':function(){
// wrapped by build app
define("dojox/storage/BehaviorStorageProvider", ["dijit","dojo","dojox","dojo/require!dojox/storage/Provider,dojox/storage/manager"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage.BehaviorStorageProvider");

dojo.require("dojox.storage.Provider");
dojo.require("dojox.storage.manager");

dojo.declare(
	"dojox.storage.BehaviorStorageProvider",
	[dojox.storage.Provider],
	{
		store: null,

		storeName: '__dojox_BehaviorStorage',

		keys: [],

		initialize: function(){
			try{
				this.store = this._createStore();
				this.store.load(this.storeName);
			}catch(e){
				throw new Error("Store is not available: " + e);
			}

			var keys = this.get('keys','dojoxSystemNS');
			this.keys = keys || [];

			this.initialized = true;
			dojox.storage.manager.loaded();

		},

		isAvailable: function(){ /*Boolean*/
			// This is not completely true. UserData may
			// be disabled in security settings. To *really*
			// check if this is available, one needs to wait
			// until the store is successfully initialized...
			return dojo.isIE && dojo.isIE >= 5;
		},

		_createStore: function() {
			var storeNode = dojo.create(
				'link',
				{id: this.storeName + 'Node', style: {'display':'none'}},
				dojo.query('head')[0]
			);
			storeNode.addBehavior('#default#userdata');

			return storeNode;
		},

		put: function(	/*string*/ key,
						/*object*/ value,
						/*function*/ resultsHandler,
						/*string?*/ namespace){

			this._assertIsValidKey(key);

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			var fullKey = this.getFullKey(key,namespace);
			value = dojo.toJson(value);

			this.store.setAttribute(fullKey, value);
			this.store.save(this.storeName);

			var success = this.store.getAttribute(fullKey) === value;
			if(success){
				this._addKey(fullKey);
				this.store.setAttribute('__dojoxSystemNS_keys', dojo.toJson(this.keys));
				this.store.save(this.storeName);
			}

			if(resultsHandler){
				resultsHandler(success ? this.SUCCESS : this.FAILED, key, null, namespace);
			}
		},

		get: function(/*string*/ key, /*string?*/ namespace){ /*Object*/
			this._assertIsValidKey(key);

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			key = this.getFullKey(key, namespace);

			return dojo.fromJson(this.store.getAttribute(key));
		},

		getKeys: function(/*string?*/ namespace){ /*Array*/
			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			namespace = '__'+namespace+'_';

			var keys = [];
			for(var i = 0; i < this.keys.length; i++){
				var currentKey = this.keys[i];
				if(this._beginsWith(currentKey,namespace)){
					currentKey = currentKey.substring(namespace.length);
					keys.push(currentKey);
				}
			}

			return keys;
		},

		clear: function(/*string?*/ namespace){
			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			namespace = '__'+namespace+'_';

			var keys = [];
			for(var i = 0; i < this.keys.length; i++){
				var currentKey = this.keys[i];
				if(this._beginsWith(currentKey,namespace)){
					keys.push(currentKey);
				}
			}

			dojo.forEach(keys, function(key){
				this.store.removeAttribute(key);
				this._removeKey(key);
			}, this);

			this.put('keys', this.keys, null, 'dojoxSystemNS');
			this.store.save(this.storeName);
		},

		remove: function(/*string*/ key, /*string?*/ namespace){
			this._assertIsValidKey(key);

			namespace = namespace||this.DEFAULT_NAMESPACE;
			this._assertIsValidNamespace(namespace);

			key = this.getFullKey(key, namespace);
			this.store.removeAttribute(key);

			this._removeKey(key);
			this.put('keys', this.keys, null, 'dojoxSystemNS');
			this.store.save(this.storeName);

		},

		getNamespaces: function(){ /*string[]*/


			var results = [ this.DEFAULT_NAMESPACE];

			var found = {};
			found[this.DEFAULT_NAMESPACE] = true;
			var tester = /^__([^_]*)_/;

			for(var i = 0; i < this.keys.length; i++){
				var currentKey = this.keys[i];
				if(tester.test(currentKey) == true){
					var currentNS = currentKey.match(tester)[1];
					if(typeof found[currentNS] == "undefined"){
						found[currentNS] = true;
						results.push(currentNS);
					}
				}
			}

			return results;

		},

		isPermanent: function(){ /*Boolean*/
			return true;
		},

		getMaximumSize: function(){ /* mixed */
			// this *might* be more, depending on the zone
			// of the current site. But 64k is guaranteed.
			return 64;
		},

		hasSettingsUI: function(){ /*Boolean*/
			return false;
		},

		isValidKey: function(/*string*/ keyName){ /*Boolean*/
			if(keyName === null || keyName === undefined){
				return false;
			}

			return /^[0-9A-Za-z_-]*$/.test(keyName);
		},

		isValidNamespace: function(/*string*/ keyName){ /*Boolean*/

			if(keyName === null || keyName === undefined){
				return false;
			}

			return /^[0-9A-Za-z-]*$/.test(keyName);
		},

		getFullKey: function(key, namespace){
			// checks for valid namespace and
			// key are already performed.
			return "__" + namespace + "_" + key;
		},

		_beginsWith: function(/* string */ haystack, /* string */ needle) {
			if(needle.length > haystack.length) {
				return false;
			}
			return haystack.substring(0,needle.length) === needle;
		},

		_assertIsValidNamespace: function(/* string */ namespace){
			if(this.isValidNamespace(namespace) === false){
				throw new Error("Invalid namespace given: " + namespace);
			}
		},

		_assertIsValidKey: function(/* string */ key){
			if(this.isValidKey(key) === false){
				throw new Error("Invalid key given: " + key);
			}
		},

		_addKey: function(key){
			this._removeKey(key);
			this.keys.push(key);
		},

		_removeKey: function(key){
			this.keys = dojo.filter(this.keys,function(item){ return item !== key;},this);
		}
	}
);

dojox.storage.manager.register("dojox.storage.BehaviorStorageProvider", new dojox.storage.BehaviorStorageProvider());
});

},
'url:dijit/layout/templates/TabContainer.html':"<div class=\"dijitTabContainer\">\n\t<div class=\"dijitTabListWrapper\" data-dojo-attach-point=\"tablistNode\"></div>\n\t<div data-dojo-attach-point=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer\"></div>\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container\" data-dojo-attach-point=\"containerNode\"></div>\n</div>\n",
'dijit/hccss':function(){
define("dijit/hccss", [
	"require",			// require.toUrl
	"dojo/_base/config", // config.blankGif
	"dojo/dom-class", // domClass.add domConstruct.create domStyle.getComputedStyle
	"dojo/dom-construct", // domClass.add domConstruct.create domStyle.getComputedStyle
	"dojo/dom-style", // domClass.add domConstruct.create domStyle.getComputedStyle
	"dojo/ready", // ready
	"dojo/_base/sniff", // has("ie") has("mozilla")
	"dojo/_base/window" // win.body
], function(require, config, domClass, domConstruct, domStyle, ready, has, win){

	// module:
	//		dijit/hccss
	// summary:
	//		Test if computer is in high contrast mode, and sets dijit_a11y flag on <body> if it is.

	if(has("ie") || has("mozilla")){	// NOTE: checking in Safari messes things up
		// priority is 90 to run ahead of parser priority of 100
		ready(90, function(){
			// summary:
			//		Detects if we are in high-contrast mode or not

			// create div for testing if high contrast mode is on or images are turned off
			var div = domConstruct.create("div",{
				id: "a11yTestNode",
				style:{
					cssText:'border: 1px solid;'
						+ 'border-color:red green;'
						+ 'position: absolute;'
						+ 'height: 5px;'
						+ 'top: -999px;'
						+ 'background-image: url("' + (config.blankGif || require.toUrl("dojo/resources/blank.gif")) + '");'
				}
			}, win.body());

			// test it
			var cs = domStyle.getComputedStyle(div);
			if(cs){
				var bkImg = cs.backgroundImage;
				var needsA11y = (cs.borderTopColor == cs.borderRightColor) || (bkImg != null && (bkImg == "none" || bkImg == "url(invalid-url:)" ));
				if(needsA11y){
					domClass.add(win.body(), "dijit_a11y");
				}
				if(has("ie")){
					div.outerHTML = "";		// prevent mixed-content warning, see http://support.microsoft.com/kb/925014
				}else{
					win.body().removeChild(div);
				}
			}
		});
	}
});

},
'dijit/popup':function(){
define("dijit/popup", [
	"dojo/_base/array", // array.forEach array.some
	"dojo/aspect",
	"dojo/_base/connect",	// connect._keypress
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.isDescendant
	"dojo/dom-attr", // domAttr.set
	"dojo/dom-construct", // domConstruct.create domConstruct.destroy
	"dojo/dom-geometry", // domGeometry.isBodyLtr
	"dojo/dom-style", // domStyle.set
	"dojo/_base/event", // event.stop
	"dojo/has",
	"dojo/keys",
	"dojo/_base/lang", // lang.hitch
	"dojo/on",
	"dojo/_base/window", // win.body
	"./place",
	"./BackgroundIframe",
	"."	// dijit (defining dijit.popup to match API doc)
], function(array, aspect, connect, declare, dom, domAttr, domConstruct, domGeometry, domStyle, event, has, keys, lang, on, win,
			place, BackgroundIframe, dijit){

	// module:
	//		dijit/popup
	// summary:
	//		Used to show drop downs (ex: the select list of a ComboBox)
	//		or popups (ex: right-click context menus)


	/*=====
	dijit.popup.__OpenArgs = function(){
		// popup: Widget
		//		widget to display
		// parent: Widget
		//		the button etc. that is displaying this popup
		// around: DomNode
		//		DOM node (typically a button); place popup relative to this node.  (Specify this *or* "x" and "y" parameters.)
		// x: Integer
		//		Absolute horizontal position (in pixels) to place node at.  (Specify this *or* "around" parameter.)
		// y: Integer
		//		Absolute vertical position (in pixels) to place node at.  (Specify this *or* "around" parameter.)
		// orient: Object|String
		//		When the around parameter is specified, orient should be a list of positions to try, ex:
		//	|	[ "below", "above" ]
		//		For backwards compatibility it can also be an (ordered) hash of tuples of the form
		//		(around-node-corner, popup-node-corner), ex:
		//	|	{ "BL": "TL", "TL": "BL" }
		//		where BL means "bottom left" and "TL" means "top left", etc.
		//
		//		dijit.popup.open() tries to position the popup according to each specified position, in order,
		//		until the popup appears fully within the viewport.
		//
		//		The default value is ["below", "above"]
		//
		//		When an (x,y) position is specified rather than an around node, orient is either
		//		"R" or "L".  R (for right) means that it tries to put the popup to the right of the mouse,
		//		specifically positioning the popup's top-right corner at the mouse position, and if that doesn't
		//		fit in the viewport, then it tries, in order, the bottom-right corner, the top left corner,
		//		and the top-right corner.
		// onCancel: Function
		//		callback when user has canceled the popup by
		//			1. hitting ESC or
		//			2. by using the popup widget's proprietary cancel mechanism (like a cancel button in a dialog);
		//			   i.e. whenever popupWidget.onCancel() is called, args.onCancel is called
		// onClose: Function
		//		callback whenever this popup is closed
		// onExecute: Function
		//		callback when user "executed" on the popup/sub-popup by selecting a menu choice, etc. (top menu only)
		// padding: dijit.__Position
		//		adding a buffer around the opening position. This is only useful when around is not set.
		this.popup = popup;
		this.parent = parent;
		this.around = around;
		this.x = x;
		this.y = y;
		this.orient = orient;
		this.onCancel = onCancel;
		this.onClose = onClose;
		this.onExecute = onExecute;
		this.padding = padding;
	}
	=====*/

	/*=====
	dijit.popup = {
		// summary:
		//		Used to show drop downs (ex: the select list of a ComboBox)
		//		or popups (ex: right-click context menus).
		//
		//		Access via require(["dijit/popup"], function(popup){ ... }).

		moveOffScreen: function(widget){
			// summary:
			//		Moves the popup widget off-screen.
			//		Do not use this method to hide popups when not in use, because
			//		that will create an accessibility issue: the offscreen popup is
			//		still in the tabbing order.
			// widget: dijit._WidgetBase
			//		The widget
		},

		hide: function(widget){
			// summary:
			//		Hide this popup widget (until it is ready to be shown).
			//		Initialization for widgets that will be used as popups
			//
			// 		Also puts widget inside a wrapper DIV (if not already in one)
			//
			//		If popup widget needs to layout it should
			//		do so when it is made visible, and popup._onShow() is called.
			// widget: dijit._WidgetBase
			//		The widget
		},

		open: function(args){
			// summary:
			//		Popup the widget at the specified position
			// example:
			//		opening at the mouse position
			//		|		popup.open({popup: menuWidget, x: evt.pageX, y: evt.pageY});
			// example:
			//		opening the widget as a dropdown
			//		|		popup.open({parent: this, popup: menuWidget, around: this.domNode, onClose: function(){...}});
			//
			//		Note that whatever widget called dijit.popup.open() should also listen to its own _onBlur callback
			//		(fired from _base/focus.js) to know that focus has moved somewhere else and thus the popup should be closed.
			// args: dijit.popup.__OpenArgs
			//		Parameters
			return {};	// Object specifying which position was chosen
		},

		close: function(popup){
			// summary:
			//		Close specified popup and any popups that it parented.
			//		If no popup is specified, closes all popups.
			// widget: dijit._WidgetBase?
			//		The widget, optional
		}
	};
	=====*/

	function destroyWrapper(){
		// summary:
		//		Function to destroy wrapper when popup widget is destroyed.
		//		Left in this scope to avoid memory leak on IE8 on refresh page, see #15206.
		if(this._popupWrapper){
			domConstruct.destroy(this._popupWrapper);
			delete this._popupWrapper;
		}
	}

	var PopupManager = declare(null, {
		// _stack: dijit._Widget[]
		//		Stack of currently popped up widgets.
		//		(someone opened _stack[0], and then it opened _stack[1], etc.)
		_stack: [],

		// _beginZIndex: Number
		//		Z-index of the first popup.   (If first popup opens other
		//		popups they get a higher z-index.)
		_beginZIndex: 1000,

		_idGen: 1,

		_createWrapper: function(/*Widget*/ widget){
			// summary:
			//		Initialization for widgets that will be used as popups.
			//		Puts widget inside a wrapper DIV (if not already in one),
			//		and returns pointer to that wrapper DIV.

			var wrapper = widget._popupWrapper,
				node = widget.domNode;

			if(!wrapper){
				// Create wrapper <div> for when this widget [in the future] will be used as a popup.
				// This is done early because of IE bugs where creating/moving DOM nodes causes focus
				// to go wonky, see tests/robot/Toolbar.html to reproduce
				wrapper = domConstruct.create("div", {
					"class":"dijitPopup",
					style:{ display: "none"},
					role: "presentation"
				}, win.body());
				wrapper.appendChild(node);

				var s = node.style;
				s.display = "";
				s.visibility = "";
				s.position = "";
				s.top = "0px";

				widget._popupWrapper = wrapper;
				aspect.after(widget, "destroy", destroyWrapper, true);
			}

			return wrapper;
		},

		moveOffScreen: function(/*Widget*/ widget){
			// summary:
			//		Moves the popup widget off-screen.
			//		Do not use this method to hide popups when not in use, because
			//		that will create an accessibility issue: the offscreen popup is
			//		still in the tabbing order.

			// Create wrapper if not already there
			var wrapper = this._createWrapper(widget);

			domStyle.set(wrapper, {
				visibility: "hidden",
				top: "-9999px",		// prevent transient scrollbar causing misalign (#5776), and initial flash in upper left (#10111)
				display: ""
			});
		},

		hide: function(/*Widget*/ widget){
			// summary:
			//		Hide this popup widget (until it is ready to be shown).
			//		Initialization for widgets that will be used as popups
			//
			// 		Also puts widget inside a wrapper DIV (if not already in one)
			//
			//		If popup widget needs to layout it should
			//		do so when it is made visible, and popup._onShow() is called.

			// Create wrapper if not already there
			var wrapper = this._createWrapper(widget);

			domStyle.set(wrapper, "display", "none");
		},

		getTopPopup: function(){
			// summary:
			//		Compute the closest ancestor popup that's *not* a child of another popup.
			//		Ex: For a TooltipDialog with a button that spawns a tree of menus, find the popup of the button.
			var stack = this._stack;
			for(var pi=stack.length-1; pi > 0 && stack[pi].parent === stack[pi-1].widget; pi--){
				/* do nothing, just trying to get right value for pi */
			}
			return stack[pi];
		},

		open: function(/*dijit.popup.__OpenArgs*/ args){
			// summary:
			//		Popup the widget at the specified position
			//
			// example:
			//		opening at the mouse position
			//		|		popup.open({popup: menuWidget, x: evt.pageX, y: evt.pageY});
			//
			// example:
			//		opening the widget as a dropdown
			//		|		popup.open({parent: this, popup: menuWidget, around: this.domNode, onClose: function(){...}});
			//
			//		Note that whatever widget called dijit.popup.open() should also listen to its own _onBlur callback
			//		(fired from _base/focus.js) to know that focus has moved somewhere else and thus the popup should be closed.

			var stack = this._stack,
				widget = args.popup,
				orient = args.orient || ["below", "below-alt", "above", "above-alt"],
				ltr = args.parent ? args.parent.isLeftToRight() : domGeometry.isBodyLtr(),
				around = args.around,
				id = (args.around && args.around.id) ? (args.around.id+"_dropdown") : ("popup_"+this._idGen++);

			// If we are opening a new popup that isn't a child of a currently opened popup, then
			// close currently opened popup(s).   This should happen automatically when the old popups
			// gets the _onBlur() event, except that the _onBlur() event isn't reliable on IE, see [22198].
			while(stack.length && (!args.parent || !dom.isDescendant(args.parent.domNode, stack[stack.length-1].widget.domNode))){
				this.close(stack[stack.length-1].widget);
			}

			// Get pointer to popup wrapper, and create wrapper if it doesn't exist
			var wrapper = this._createWrapper(widget);


			domAttr.set(wrapper, {
				id: id,
				style: {
					zIndex: this._beginZIndex + stack.length
				},
				"class": "dijitPopup " + (widget.baseClass || widget["class"] || "").split(" ")[0] +"Popup",
				dijitPopupParent: args.parent ? args.parent.id : ""
			});

			if(has("bgIframe") && !widget.bgIframe){
				// setting widget.bgIframe triggers cleanup in _Widget.destroy()
				widget.bgIframe = new BackgroundIframe(wrapper);
			}

			// position the wrapper node and make it visible
			var best = around ?
				place.around(wrapper, around, orient, ltr, widget.orient ? lang.hitch(widget, "orient") : null) :
				place.at(wrapper, args, orient == 'R' ? ['TR','BR','TL','BL'] : ['TL','BL','TR','BR'], args.padding);

			wrapper.style.display = "";
			wrapper.style.visibility = "visible";
			widget.domNode.style.visibility = "visible";	// counteract effects from _HasDropDown

			var handlers = [];

			// provide default escape and tab key handling
			// (this will work for any widget, not just menu)
			handlers.push(on(wrapper, connect._keypress, lang.hitch(this, function(evt){
				if(evt.charOrCode == keys.ESCAPE && args.onCancel){
					event.stop(evt);
					args.onCancel();
				}else if(evt.charOrCode === keys.TAB){
					event.stop(evt);
					var topPopup = this.getTopPopup();
					if(topPopup && topPopup.onCancel){
						topPopup.onCancel();
					}
				}
			})));

			// watch for cancel/execute events on the popup and notify the caller
			// (for a menu, "execute" means clicking an item)
			if(widget.onCancel && args.onCancel){
				handlers.push(widget.on("cancel", args.onCancel));
			}

			handlers.push(widget.on(widget.onExecute ? "execute" : "change", lang.hitch(this, function(){
				var topPopup = this.getTopPopup();
				if(topPopup && topPopup.onExecute){
					topPopup.onExecute();
				}
			})));

			stack.push({
				widget: widget,
				parent: args.parent,
				onExecute: args.onExecute,
				onCancel: args.onCancel,
				onClose: args.onClose,
				handlers: handlers
			});

			if(widget.onOpen){
				// TODO: in 2.0 standardize onShow() (used by StackContainer) and onOpen() (used here)
				widget.onOpen(best);
			}

			return best;
		},

		close: function(/*Widget?*/ popup){
			// summary:
			//		Close specified popup and any popups that it parented.
			//		If no popup is specified, closes all popups.

			var stack = this._stack;

			// Basically work backwards from the top of the stack closing popups
			// until we hit the specified popup, but IIRC there was some issue where closing
			// a popup would cause others to close too.  Thus if we are trying to close B in [A,B,C]
			// closing C might close B indirectly and then the while() condition will run where stack==[A]...
			// so the while condition is constructed defensively.
			while((popup && array.some(stack, function(elem){return elem.widget == popup;})) ||
				(!popup && stack.length)){
				var top = stack.pop(),
					widget = top.widget,
					onClose = top.onClose;

				if(widget.onClose){
					// TODO: in 2.0 standardize onHide() (used by StackContainer) and onClose() (used here)
					widget.onClose();
				}

				var h;
				while(h = top.handlers.pop()){ h.remove(); }

				// Hide the widget and it's wrapper unless it has already been destroyed in above onClose() etc.
				if(widget && widget.domNode){
					this.hide(widget);
				}

				if(onClose){
					onClose();
				}
			}
		}
	});

	return (dijit.popup = new PopupManager());
});

},
'dijit/layout/TabContainer':function(){
define("dijit/layout/TabContainer", [
	"dojo/_base/lang", // lang.getObject
	"dojo/_base/declare", // declare
	"./_TabContainerBase",
	"./TabController",
	"./ScrollingTabController"
], function(lang, declare, _TabContainerBase, TabController, ScrollingTabController){

/*=====
	var _TabContainerBase = dijit.layout._TabContainerBase;
	var TabController = dijit.layout.TabController;
	var ScrollingTabController = dijit.layout.ScrollingTabController;
=====*/

	// module:
	//		dijit/layout/TabContainer
	// summary:
	//		A Container with tabs to select each child (only one of which is displayed at a time).


	return declare("dijit.layout.TabContainer", _TabContainerBase, {
		// summary:
		//		A Container with tabs to select each child (only one of which is displayed at a time).
		// description:
		//		A TabContainer is a container that has multiple panes, but shows only
		//		one pane at a time.  There are a set of tabs corresponding to each pane,
		//		where each tab has the name (aka title) of the pane, and optionally a close button.

		// useMenu: [const] Boolean
		//		True if a menu should be used to select tabs when they are too
		//		wide to fit the TabContainer, false otherwise.
		useMenu: true,

		// useSlider: [const] Boolean
		//		True if a slider should be used to select tabs when they are too
		//		wide to fit the TabContainer, false otherwise.
		useSlider: true,

		// controllerWidget: String
		//		An optional parameter to override the widget used to display the tab labels
		controllerWidget: "",

		_makeController: function(/*DomNode*/ srcNode){
			// summary:
			//		Instantiate tablist controller widget and return reference to it.
			//		Callback from _TabContainerBase.postCreate().
			// tags:
			//		protected extension

			var cls = this.baseClass + "-tabs" + (this.doLayout ? "" : " dijitTabNoLayout"),
				TabController = lang.getObject(this.controllerWidget);

			return new TabController({
				id: this.id + "_tablist",
				dir: this.dir,
				lang: this.lang,
				textDir: this.textDir,
				tabPosition: this.tabPosition,
				doLayout: this.doLayout,
				containerId: this.id,
				"class": cls,
				nested: this.nested,
				useMenu: this.useMenu,
				useSlider: this.useSlider,
				tabStripClass: this.tabStrip ? this.baseClass + (this.tabStrip ? "":"No") + "Strip": null
			}, srcNode);
		},

		postMixInProperties: function(){
			this.inherited(arguments);

			// Scrolling controller only works for horizontal non-nested tabs
			if(!this.controllerWidget){
				this.controllerWidget = (this.tabPosition == "top" || this.tabPosition == "bottom") && !this.nested ?
							"dijit.layout.ScrollingTabController" : "dijit.layout.TabController";
			}
		}
	});
});

},
'dijit/form/_FormValueWidget':function(){
define("dijit/form/_FormValueWidget", [
	"dojo/_base/declare", // declare
	"dojo/_base/sniff", // has("ie")
	"./_FormWidget",
	"./_FormValueMixin"
], function(declare, has, _FormWidget, _FormValueMixin){

/*=====
var _FormWidget = dijit.form._FormWidget;
var _FormValueMixin = dijit.form._FormValueMixin;
=====*/

// module:
//		dijit/form/_FormValueWidget
// summary:
//		FormValueWidget


return declare("dijit.form._FormValueWidget", [_FormWidget, _FormValueMixin],
{
	// summary:
	//		Base class for widgets corresponding to native HTML elements such as <input> or <select> that have user changeable values.
	// description:
	//		Each _FormValueWidget represents a single input value, and has a (possibly hidden) <input> element,
	//		to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)
	//		works as expected.

	// Don't attempt to mixin the 'type', 'name' attributes here programatically -- they must be declared
	// directly in the template as read by the parser in order to function. IE is known to specifically
	// require the 'name' attribute at element creation time.  See #8484, #8660.

	_layoutHackIE7: function(){
		// summary:
		//		Work around table sizing bugs on IE7 by forcing redraw

		if(has("ie") == 7){ // fix IE7 layout bug when the widget is scrolled out of sight
			var domNode = this.domNode;
			var parent = domNode.parentNode;
			var pingNode = domNode.firstChild || domNode; // target node most unlikely to have a custom filter
			var origFilter = pingNode.style.filter; // save custom filter, most likely nothing
			var _this = this;
			while(parent && parent.clientHeight == 0){ // search for parents that haven't rendered yet
				(function ping(){
					var disconnectHandle = _this.connect(parent, "onscroll",
						function(){
							_this.disconnect(disconnectHandle); // only call once
							pingNode.style.filter = (new Date()).getMilliseconds(); // set to anything that's unique
							setTimeout(function(){ pingNode.style.filter = origFilter }, 0); // restore custom filter, if any
						}
					);
				})();
				parent = parent.parentNode;
			}
		}
	}
});

});

},
'curam/util/UimDialog':function(){
/*
 * Copyright 2010-2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/*
 * Modification History
 * --------------------
 * 25-Mar-2014  MV  [CR00423311] Handle usage from an external application.   
 * 06-Jul-2011  KW  [CR00275353] Correctly set the o3rpu value in openUrl()
 *                                function.
 * 01-Feb-2011  MV  [CR00250399] Fix the call to openModalDialog() function.
 * 21-Jan-2011  MV  [CR00243263] Fix the new openUrl function to return
 *    the dialog object. 
 * 14-Jan-2011  MK  [CR00240138] Added the openUrl() function. 
 * 13-Jan-2011  MV  [CR00241667] Added ready() function, updated documentation.
 * 19-Nov-2010  MV  [CR00231655] Added the get() function.
 * 01-Nov-2010  SD  [CR00225331] Initial version.
 */

define("curam/util/UimDialog", ["curam/util/RuntimeContext",
        "curam/util/external",
        "curam/util",
        "curam/define",
        "curam/dialog",
        "curam/util/DialogObject"
        ], function(RuntimeContext, external) {
  
  /**
   * @name curam.util.UimDialog
   * @namespace Provides the ability to open UIM content in a Curam dialog
   * and interact with the dialog window.<p/>
   * 
   * The API provides support for both opening a UIM page in a new dialog
   * and for accessing a dialog which is already open. See the <code>open()</code>
   * and <code>get()</code> functions.<p/>
   *  
   * It is required that the UIM page you are opening in the dialog resides
   * on the same Internet domain as the page the API is used from.<p/>
   * 
   * Example:<p/>
   * <pre>
   * dojo.require('curam.util.UimDialog');
   * 
   * var dialogObject = curam.util.UimDialog.open(
   *   'MyPage.do', { myParam:'1' }, {width:500,height:300});
   * 
   * dialogObject.registerBeforeCloseHandler(function() { alert("test"); });
   * dialogObject.registerOnDisplayHandler(function() {
   *   setTimeout(1000, function() { dialogObject.close() });
   * });
   * </pre><p/>
   *
   * It is possible to execute custom code on dialog open and/or close.<p/>
   * 
   * To add a customised handler function to a supported event:<ul>
   * <li>Make the UimDialog API call to open or get the dialog, which will
   *  return a {@link curam.util.DialogObject} object.
   * <li>This object will let you register handlers for the supported
   * <code>OnDisplay</code> and <code>BeforeClose</code> events.</li></ul>
   * <p/>
   * 
   * Lastly you can close the dialog by calling the <code>close()</code>
   * function.<p/>
   */





















  curam.define.singleton("curam.util.UimDialog",
  /**
   * @lends curam.util.UimDialog.prototype
   */
  {
    /**
     * Opens the specified UIM page in a Curam dialog.
     * 
     * @param {String} path URL path to the page to display in the dialog, without
     *              the query string.
     * @param {Object} pageParameters An object containing the required page
     *      parameters, or null if no page parameters are required.
     *      The following format is expected:
     *                        <code>{ param1Name:"value", param2Name:248 }</code>
     *      The infrastructure handles URL-encoding the values so do NOT encode
     *      them yourself.
     * @param {Object} [dialogSize] An object representing the required size
     *    of the dialog in pixels. The following form is required:
     *        <code>{ width:500, height:300 }</code> If size is not specified
     *      the default size will be used instead.
     *      
     * @returns {curam.util.DialogObject} An object, representing the dialog.
     */
    open: function(path, pageParameters, dialogSize) {    
      var url = path + curam.util.makeQueryString(pageParameters);    
      return this.openUrl(url, dialogSize);
    },

    /**
     * Opens the specified UIM page in a Curam dialog.
     * 
     * @param {String} path URL path to the page to display in the dialog, including
     *              the query string.
     *              
     * @param {Object} [dialogSize] An object representing the required size
     *    of the dialog in pixels. The following form is required:
     *        <code>{ width:500, height:300 }</code> If size is not specified
     *      the default size will be used instead.
     *
     * @returns {curam.util.DialogObject} An object, representing the dialog.
     */
    openUrl: function(url, dialogSize) {












      // generate a unique token, this is to be used to retrieve the
      // correct dialogID
      var uimToken = curam.util.getCacheBusterParameter();

      // create dialog object to be returned to the user
      var myDialogObject = new curam.util.DialogObject(uimToken);

      var windowOptions = null;
      if (dialogSize) {
        windowOptions = "width=" + dialogSize.width
        + ",height=" + dialogSize.height;
      }

      // call into modal logic with unique token
      curam.util.openModalDialog({ href: this._addRpu(url) },
          windowOptions, null, null, uimToken);

      return myDialogObject;
    },
    
    _addRpu: function(url) {
      var newUrl = url;
      
      if (curam.tab.inTabbedUI()) {
        // we are in tabbed UI, set RPU to the active tab content iframe
        var iframe = curam.tab.getContentPanelIframe();
        if (iframe) {
          newUrl = curam.util.setRpu(
              url, new RuntimeContext(iframe.contentWindow));
        }

      } else if (external.inExternalApp()) {
        // we are in the external application, try to get parent UIM iframe
        var parent = external.getUimParentWindow();
        if (parent) {
          newUrl = curam.util.setRpu(
              url, new RuntimeContext(parent));
        }
      }
      // else - unable to set RPU, this is valid for example in ext app fragment
      // scenarios

      return newUrl;
    },
    
    /**
     * Returns a dialog object corresponding to the runtime context
     * of the calling page.
     * 
     * If the calling page is not loaded in a dialog or the dialog infrastructure
     * is not yet initialized then exception will be thrown. In this case use the
     * ready() function to execute your code at the right point in time. 
     * 
     * @returns {curam.util.DialogObject} An object, representing the dialog.
     */
    get: function() {
      if (curam.dialog._id == null) {
        throw "Dialog infrastructure not ready.";
      }
      return new curam.util.DialogObject(null, curam.dialog._id);
    },

    /**
     * Executes the callback function when the dialog infrastructure
     * in the current runtime context becomes ready. If the infrastructure
     * is ready by the time this function is called, then the callback function
     * is executed immediately.
     * 
     * @param {Function} callback
     *    The function to run.
     */
    ready: function(callback) {
      if (curam.dialog._id == null) {
        // Dialog infrastructure not ready.
        dojo.subscribe("/curam/dialog/ready", callback);

      } else {
        // infrastructure ready - call the code now
        callback();
      }
    },

    /**
     * @private
     */
    _getDialogFrameWindow: function(dialogId) {
      var dialogWidget = window.top.dijit.byId(dialogId);
      return dialogWidget.uimController.getIFrame().contentWindow;
    }
  });
  
  return curam.util.UimDialog;
});

},
'dijit/tree/_dndContainer':function(){
define("dijit/tree/_dndContainer", [
	"dojo/aspect",	// aspect.after
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.add domClass.remove domClass.replace
	"dojo/_base/event",	// event.stop
	"dojo/_base/lang", // lang.getObject lang.mixin lang.hitch
	"dojo/mouse",	// mouse.enter, mouse.leave
	"dojo/on"
], function(aspect, declare, domClass, event, lang, mouse, on){

	// module:
	//		dijit/tree/_dndContainer
	// summary:
	//		This is a base class for `dijit.tree._dndSelector`, and isn't meant to be used directly.
	//		It's modeled after `dojo.dnd.Container`.

	return declare("dijit.tree._dndContainer", null, {

		// summary:
		//		This is a base class for `dijit.tree._dndSelector`, and isn't meant to be used directly.
		//		It's modeled after `dojo.dnd.Container`.
		// tags:
		//		protected

		/*=====
		// current: DomNode
		//		The currently hovered TreeNode.rowNode (which is the DOM node
		//		associated w/a given node in the tree, excluding it's descendants)
		current: null,
		=====*/

		constructor: function(tree, params){
			// summary:
			//		A constructor of the Container
			// tree: Node
			//		Node or node's id to build the container on
			// params: dijit.tree.__SourceArgs
			//		A dict of parameters, which gets mixed into the object
			// tags:
			//		private
			this.tree = tree;
			this.node = tree.domNode;	// TODO: rename; it's not a TreeNode but the whole Tree
			lang.mixin(this, params);

			// class-specific variables
			this.current = null;	// current TreeNode's DOM node

			// states
			this.containerState = "";
			domClass.add(this.node, "dojoDndContainer");

			// set up events
			this.events = [
				// container level events
				on(this.node, mouse.enter, lang.hitch(this, "onOverEvent")),
				on(this.node, mouse.leave,	lang.hitch(this, "onOutEvent")),

				// switching between TreeNodes
				aspect.after(this.tree, "_onNodeMouseEnter", lang.hitch(this, "onMouseOver"), true),
				aspect.after(this.tree, "_onNodeMouseLeave", lang.hitch(this, "onMouseOut"), true),

				// cancel text selection and text dragging
				on(this.node, "dragstart", lang.hitch(event, "stop")),
				on(this.node, "selectstart", lang.hitch(event, "stop"))
			];
		},

		destroy: function(){
			// summary:
			//		Prepares this object to be garbage-collected

			var h;
			while(h = this.events.pop()){ h.remove(); }

			// this.clearItems();
			this.node = this.parent = null;
		},

		// mouse events
		onMouseOver: function(widget /*===== , evt =====*/){
			// summary:
			//		Called when mouse is moved over a TreeNode
			// widget: TreeNode
			// evt: Event
			// tags:
			//		protected
			this.current = widget;
		},

		onMouseOut: function(/*===== widget, evt =====*/){
			// summary:
			//		Called when mouse is moved away from a TreeNode
			// widget: TreeNode
			// evt: Event
			// tags:
			//		protected
			this.current = null;
		},

		_changeState: function(type, newState){
			// summary:
			//		Changes a named state to new state value
			// type: String
			//		A name of the state to change
			// newState: String
			//		new state
			var prefix = "dojoDnd" + type;
			var state = type.toLowerCase() + "State";
			//domClass.replace(this.node, prefix + newState, prefix + this[state]);
			domClass.replace(this.node, prefix + newState, prefix + this[state]);
			this[state] = newState;
		},

		_addItemClass: function(node, type){
			// summary:
			//		Adds a class with prefix "dojoDndItem"
			// node: Node
			//		A node
			// type: String
			//		A variable suffix for a class name
			domClass.add(node, "dojoDndItem" + type);
		},

		_removeItemClass: function(node, type){
			// summary:
			//		Removes a class with prefix "dojoDndItem"
			// node: Node
			//		A node
			// type: String
			//		A variable suffix for a class name
			domClass.remove(node, "dojoDndItem" + type);
		},

		onOverEvent: function(){
			// summary:
			//		This function is called once, when mouse is over our container
			// tags:
			//		protected
			this._changeState("Container", "Over");
		},

		onOutEvent: function(){
			// summary:
			//		This function is called once, when mouse is out of our container
			// tags:
			//		protected
			this._changeState("Container", "");
		}
	});
});

},
'dijit/focus':function(){
define("dijit/focus", [
	"dojo/aspect",
	"dojo/_base/declare", // declare
	"dojo/dom", // domAttr.get dom.isDescendant
	"dojo/dom-attr", // domAttr.get dom.isDescendant
	"dojo/dom-construct", // connect to domConstruct.empty, domConstruct.destroy
	"dojo/Evented",
	"dojo/_base/lang", // lang.hitch
	"dojo/on",
	"dojo/ready",
	"dojo/_base/sniff", // has("ie")
	"dojo/Stateful",
	"dojo/_base/unload", // unload.addOnWindowUnload
	"dojo/_base/window", // win.body
	"dojo/window", // winUtils.get
	"./a11y",	// a11y.isTabNavigable
	"./registry",	// registry.byId
	"."		// to set dijit.focus
], function(aspect, declare, dom, domAttr, domConstruct, Evented, lang, on, ready, has, Stateful, unload, win, winUtils,
			a11y, registry, dijit){

	// module:
	//		dijit/focus
	// summary:
	//		Returns a singleton that tracks the currently focused node, and which widgets are currently "active".

/*=====
	dijit.focus = {
		// summary:
		//		Tracks the currently focused node, and which widgets are currently "active".
		//		Access via require(["dijit/focus"], function(focus){ ... }).
		//
		//		A widget is considered active if it or a descendant widget has focus,
		//		or if a non-focusable node of this widget or a descendant was recently clicked.
		//
		//		Call focus.watch("curNode", callback) to track the current focused DOMNode,
		//		or focus.watch("activeStack", callback) to track the currently focused stack of widgets.
		//
		//		Call focus.on("widget-blur", func) or focus.on("widget-focus", ...) to monitor when
		//		when widgets become active/inactive
		//
		//		Finally, focus(node) will focus a node, suppressing errors if the node doesn't exist.

		// curNode: DomNode
		//		Currently focused item on screen
		curNode: null,

		// activeStack: dijit._Widget[]
		//		List of currently active widgets (focused widget and it's ancestors)
		activeStack: [],

		registerIframe: function(iframe){
			// summary:
			//		Registers listeners on the specified iframe so that any click
			//		or focus event on that iframe (or anything in it) is reported
			//		as a focus/click event on the <iframe> itself.
			// description:
			//		Currently only used by editor.
			// returns:
			//		Handle with remove() method to deregister.
		},

		registerWin: function(targetWindow, effectiveNode){
			// summary:
			//		Registers listeners on the specified window (either the main
			//		window or an iframe's window) to detect when the user has clicked somewhere
			//		or focused somewhere.
			// description:
			//		Users should call registerIframe() instead of this method.
			// targetWindow: Window?
			//		If specified this is the window associated with the iframe,
			//		i.e. iframe.contentWindow.
			// effectiveNode: DOMNode?
			//		If specified, report any focus events inside targetWindow as
			//		an event on effectiveNode, rather than on evt.target.
			// returns:
			//		Handle with remove() method to deregister.
		}
	};
=====*/

	var FocusManager = declare([Stateful, Evented], {
		// curNode: DomNode
		//		Currently focused item on screen
		curNode: null,

		// activeStack: dijit._Widget[]
		//		List of currently active widgets (focused widget and it's ancestors)
		activeStack: [],

		constructor: function(){
			// Don't leave curNode/prevNode pointing to bogus elements
			var check = lang.hitch(this, function(node){
				if(dom.isDescendant(this.curNode, node)){
					this.set("curNode", null);
				}
				if(dom.isDescendant(this.prevNode, node)){
					this.set("prevNode", null);
				}
			});
			aspect.before(domConstruct, "empty", check);
			aspect.before(domConstruct, "destroy", check);
		},

		registerIframe: function(/*DomNode*/ iframe){
			// summary:
			//		Registers listeners on the specified iframe so that any click
			//		or focus event on that iframe (or anything in it) is reported
			//		as a focus/click event on the <iframe> itself.
			// description:
			//		Currently only used by editor.
			// returns:
			//		Handle with remove() method to deregister.
			return this.registerWin(iframe.contentWindow, iframe);
		},

		registerWin: function(/*Window?*/targetWindow, /*DomNode?*/ effectiveNode){
			// summary:
			//		Registers listeners on the specified window (either the main
			//		window or an iframe's window) to detect when the user has clicked somewhere
			//		or focused somewhere.
			// description:
			//		Users should call registerIframe() instead of this method.
			// targetWindow:
			//		If specified this is the window associated with the iframe,
			//		i.e. iframe.contentWindow.
			// effectiveNode:
			//		If specified, report any focus events inside targetWindow as
			//		an event on effectiveNode, rather than on evt.target.
			// returns:
			//		Handle with remove() method to deregister.

			// TODO: make this function private in 2.0; Editor/users should call registerIframe(),

			var _this = this;
			var mousedownListener = function(evt){
				_this._justMouseDowned = true;
				setTimeout(function(){ _this._justMouseDowned = false; }, 0);

				// workaround weird IE bug where the click is on an orphaned node
				// (first time clicking a Select/DropDownButton inside a TooltipDialog)
				if(has("ie") && evt && evt.srcElement && evt.srcElement.parentNode == null){
					return;
				}

				_this._onTouchNode(effectiveNode || evt.target || evt.srcElement, "mouse");
			};

			// Listen for blur and focus events on targetWindow's document.
			// IIRC, I'm using attachEvent() rather than dojo.connect() because focus/blur events don't bubble
			// through dojo.connect(), and also maybe to catch the focus events early, before onfocus handlers
			// fire.
			// Connect to <html> (rather than document) on IE to avoid memory leaks, but document on other browsers because
			// (at least for FF) the focus event doesn't fire on <html> or <body>.
			var doc = has("ie") ? targetWindow.document.documentElement : targetWindow.document;
			if(doc){
				if(has("ie")){
					targetWindow.document.body.attachEvent('onmousedown', mousedownListener);
					var activateListener = function(evt){
						// IE reports that nodes like <body> have gotten focus, even though they have tabIndex=-1,
						// ignore those events
						var tag = evt.srcElement.tagName.toLowerCase();
						if(tag == "#document" || tag == "body"){ return; }

						// Previous code called _onTouchNode() for any activate event on a non-focusable node.   Can
						// probably just ignore such an event as it will be handled by onmousedown handler above, but
						// leaving the code for now.
						if(a11y.isTabNavigable(evt.srcElement)){
							_this._onFocusNode(effectiveNode || evt.srcElement);
						}else{
							_this._onTouchNode(effectiveNode || evt.srcElement);
						}
					};
					doc.attachEvent('onactivate', activateListener);
					var deactivateListener =  function(evt){
						_this._onBlurNode(effectiveNode || evt.srcElement);
					};
					doc.attachEvent('ondeactivate', deactivateListener);

					return {
						remove: function(){
							targetWindow.document.detachEvent('onmousedown', mousedownListener);
							doc.detachEvent('onactivate', activateListener);
							doc.detachEvent('ondeactivate', deactivateListener);
							doc = null;	// prevent memory leak (apparent circular reference via closure)
						}
					};
				}else{
					doc.body.addEventListener('mousedown', mousedownListener, true);
					doc.body.addEventListener('touchstart', mousedownListener, true);
					var focusListener = function(evt){
						_this._onFocusNode(effectiveNode || evt.target);
					};
					doc.addEventListener('focus', focusListener, true);
					var blurListener = function(evt){
						_this._onBlurNode(effectiveNode || evt.target);
					};
					doc.addEventListener('blur', blurListener, true);

					return {
						remove: function(){
							doc.body.removeEventListener('mousedown', mousedownListener, true);
							doc.body.removeEventListener('touchstart', mousedownListener, true);
							doc.removeEventListener('focus', focusListener, true);
							doc.removeEventListener('blur', blurListener, true);
							doc = null;	// prevent memory leak (apparent circular reference via closure)
						}
					};
				}
			}
		},

		_onBlurNode: function(/*DomNode*/ /*===== node =====*/){
			// summary:
			// 		Called when focus leaves a node.
			//		Usually ignored, _unless_ it *isn't* followed by touching another node,
			//		which indicates that we tabbed off the last field on the page,
			//		in which case every widget is marked inactive
			this.set("prevNode", this.curNode);
			this.set("curNode", null);

			if(this._justMouseDowned){
				// the mouse down caused a new widget to be marked as active; this blur event
				// is coming late, so ignore it.
				return;
			}

			// if the blur event isn't followed by a focus event then mark all widgets as inactive.
			if(this._clearActiveWidgetsTimer){
				clearTimeout(this._clearActiveWidgetsTimer);
			}
			this._clearActiveWidgetsTimer = setTimeout(lang.hitch(this, function(){
				delete this._clearActiveWidgetsTimer;
				this._setStack([]);
				this.prevNode = null;
			}), 100);
		},

		_onTouchNode: function(/*DomNode*/ node, /*String*/ by){
			// summary:
			//		Callback when node is focused or mouse-downed
			// node:
			//		The node that was touched.
			// by:
			//		"mouse" if the focus/touch was caused by a mouse down event

			// ignore the recent blurNode event
			if(this._clearActiveWidgetsTimer){
				clearTimeout(this._clearActiveWidgetsTimer);
				delete this._clearActiveWidgetsTimer;
			}

			// compute stack of active widgets (ex: ComboButton --> Menu --> MenuItem)
			var newStack=[];
			try{
				while(node){
					var popupParent = domAttr.get(node, "dijitPopupParent");
					if(popupParent){
						node=registry.byId(popupParent).domNode;
					}else if(node.tagName && node.tagName.toLowerCase() == "body"){
						// is this the root of the document or just the root of an iframe?
						if(node === win.body()){
							// node is the root of the main document
							break;
						}
						// otherwise, find the iframe this node refers to (can't access it via parentNode,
						// need to do this trick instead). window.frameElement is supported in IE/FF/Webkit
						node=winUtils.get(node.ownerDocument).frameElement;
					}else{
						// if this node is the root node of a widget, then add widget id to stack,
						// except ignore clicks on disabled widgets (actually focusing a disabled widget still works,
						// to support MenuItem)
						var id = node.getAttribute && node.getAttribute("widgetId"),
							widget = id && registry.byId(id);
						if(widget && !(by == "mouse" && widget.get("disabled"))){
							newStack.unshift(id);
						}
						node=node.parentNode;
					}
				}
			}catch(e){ /* squelch */ }

			this._setStack(newStack, by);
		},

		_onFocusNode: function(/*DomNode*/ node){
			// summary:
			//		Callback when node is focused

			if(!node){
				return;
			}

			if(node.nodeType == 9){
				// Ignore focus events on the document itself.  This is here so that
				// (for example) clicking the up/down arrows of a spinner
				// (which don't get focus) won't cause that widget to blur. (FF issue)
				return;
			}

			this._onTouchNode(node);

			if(node == this.curNode){ return; }
			this.set("curNode", node);
		},

		_setStack: function(/*String[]*/ newStack, /*String*/ by){
			// summary:
			//		The stack of active widgets has changed.  Send out appropriate events and records new stack.
			// newStack:
			//		array of widget id's, starting from the top (outermost) widget
			// by:
			//		"mouse" if the focus/touch was caused by a mouse down event

			var oldStack = this.activeStack;
			this.set("activeStack", newStack);

			// compare old stack to new stack to see how many elements they have in common
			for(var nCommon=0; nCommon<Math.min(oldStack.length, newStack.length); nCommon++){
				if(oldStack[nCommon] != newStack[nCommon]){
					break;
				}
			}

			var widget;
			// for all elements that have gone out of focus, set focused=false
			for(var i=oldStack.length-1; i>=nCommon; i--){
				widget = registry.byId(oldStack[i]);
				if(widget){
					widget._hasBeenBlurred = true;		// TODO: used by form widgets, should be moved there
					widget.set("focused", false);
					if(widget._focusManager == this){
						widget._onBlur(by);
					}
					this.emit("widget-blur", widget, by);
				}
			}

			// for all element that have come into focus, set focused=true
			for(i=nCommon; i<newStack.length; i++){
				widget = registry.byId(newStack[i]);
				if(widget){
					widget.set("focused", true);
					if(widget._focusManager == this){
						widget._onFocus(by);
					}
					this.emit("widget-focus", widget, by);
				}
			}
		},

		focus: function(node){
			// summary:
			//		Focus the specified node, suppressing errors if they occur
			if(node){
				try{ node.focus(); }catch(e){/*quiet*/}
			}
		}
	});

	var singleton = new FocusManager();

	// register top window and all the iframes it contains
	ready(function(){
		var handle = singleton.registerWin(win.doc.parentWindow || win.doc.defaultView);
		if(has("ie")){
			unload.addOnWindowUnload(function(){
				handle.remove();
				handle = null;
			})
		}
	});

	// Setup dijit.focus as a pointer to the singleton but also (for backwards compatibility)
	// as a function to set focus.
	dijit.focus = function(node){
		singleton.focus(node);	// indirection here allows dijit/_base/focus.js to override behavior
	};
	for(var attr in singleton){
		if(!/^_/.test(attr)){
			dijit.focus[attr] = typeof singleton[attr] == "function" ? lang.hitch(singleton, attr) : singleton[attr];
		}
	}
	singleton.watch(function(attr, oldVal, newVal){
		dijit.focus[attr] = newVal;
	});

	return singleton;
});

},
'curam/util/ExpandableLists':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

define("curam/util/ExpandableLists", ["curam/util",
        "curam/debug",
        "curam/UIMController",
        "curam/util/ui/refresh/RefreshEvent",
        "curam/define",
        "curam/contentPanel",
        "curam/util/ResourceBundle"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 28-Sep-2013  BOS [CR00396277] Initial version.
   */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  /**
   * @namespace Functions specific to expandable lists.
   */
  curam.define.singleton("curam.util.ExpandableLists", {
    /**
     * Holds the minimum allowed height of an expanded details row for each
     * individual list. The values are put in this array by the page generator
     * and are taken from the UIM where the app developer can set
     * the MINIMUM_EXPANDED_HEIGHT attribute of the DETAILS_ROW element.
     * @private
     */
    _minimumExpandedHeight: [],

    /** Holds state data for lists in the current runtime context. **/
    stateData: [],
    
    /** @private */
    _LIST_ID_PREFIX: "list-id-",

    /** @private */
    _ROW_ID_PREFIX: "row-id-",
    
    /** @private */
    _EVENT_TOGGLE: "/curam/list/row/toggle",

    /** @private */
    _EVENT_TYPE_EXPANDED: "Expanded",
    
    /** @private */
    _EVENT_TYPE_COLLAPSED: "Collapsed",
    
    /**
     * Handles toggle events on all lists. The event received contains
     * the list-specific information.
     */
    setupToggleHandler: function() {
      dojo.ready(function() {
        var _this = curam.util.ExpandableLists;

        var handler = function(listId, rowId, eventType) {
          // types: Expanded | Collapsed
          curam.debug.log(bundle
            .getProperty("curam.util.ExpandableLists.event", 
                         [eventType, listId, rowId]));
          
          if (eventType == _this._EVENT_TYPE_EXPANDED) {
            var listData = _this._getListData(listId);

            var rowFound = dojo.filter(listData.expandedRows, function(item) {
              return item == rowId;
            });
            if (rowFound.length == 0) {
              listData.expandedRows.push(rowId);
            }
          
          } else {
            // if Collapsed
            var listData = _this._getListData(listId);
            
            // remove the row from the list
            listData.expandedRows =
                dojo.filter(listData.expandedRows, function(item) {
                  return item != rowId;
                });
            
            if (listData.expandedRows.length == 0) {
              _this._removeListData(listId);
            }
          }

          curam.debug
            .log("curam.util.ExpandableLists.setupToggleHandler stateData: ",
                 _this.stateData);
        };
        // no need to unsubscribe explicitly - handler will be scraped on page
        // refresh 
        dojo.subscribe(_this._EVENT_TOGGLE, this, handler);
        
        // no need to unsubscribe explicitly - handler will be scraped on page
        // refresh 
        dojo.subscribe("/curam/page/refresh", this, _this._saveStateData);
      });
    },
    
    /**
     * Saves the current state data to persistent storage.
     * @private
     */
    _saveStateData: function() {
      var _this = curam.util.ExpandableLists;

      // save the data
      curam.debug.log("/curam/page/refresh" + bundle
        .getProperty("curam.util.ExpandableLists.refresh"), _this.stateData);
      
      curam.util.runStorageFn(function() {
        try {
          dojo.forEach(_this.stateData, function(item) {
            var data = dojo.toJson(item);
            curam.debug.log(
              bundle.getProperty("curam.util.ExpandableLists.exception"), data);
            var context = curam.util.getTopmostWindow().dojox;
            context.storage.put(_this._sanitizeKey(item.listId), data);
          });

        } catch (e) {
          curam.debug.log(
              bundle.getProperty("curam.util.ExpandableLists.exception"), e);
        }
      });
    },
    
    /**
     * Ensures the key value conforms to the rules required by the underlying
     * storage mechanism.
     * @private
     * @return The key value changed in such a way that it can be used
     *    as a storage key.
     */
    _sanitizeKey: function(key) {
      return key.replace("-", "_");
    },
    
    /**
     * Loads state for the specified list from the persistent storage.
     * 
     * The call to this function is generated into the page by gen-jsp.xsl
     * or the corresponding DUIM renderer.
     * 
     * @param listId
     *    ID of the list to load state for.
     */
    loadStateData: function(listId) {
      if (typeof(window.curamDialogRedirecting) != "undefined") {
        curam.debug.log("curam.util.ExpandableLists.loadStateData " 
          + bundle.getProperty("curam.util.ExpandableLists.load.exit"));
        return;
      }
      var _this = curam.util.ExpandableLists;

      var loadFunction = function() {
        curam.debug.log("curam.util.ExpandableLists.loadStateData " +
          + bundle.getProperty("curam.util.ExpandableLists.load.for"), listId);

        var context = curam.util.getTopmostWindow().dojox;
        var stateDataJson = context.storage.get(_this._sanitizeKey(listId));
        if(stateDataJson && stateDataJson != "") {
          var stateData = dojo.fromJson(stateDataJson);
          var listNodes = dojo.query("table." + _this._LIST_ID_PREFIX + listId);
          
          dojo.forEach(stateData.expandedRows, function(item) {
            curam.debug.log(bundle
              .getProperty("curam.util.ExpandableLists.load.row"), item);
            // only look in the context of the corresponding list - covers
            // scenarios with multiple lists on the same page that have rows
            // with identical ID (technically possible)
            var rowNodes = dojo.query("tr." + _this._ROW_ID_PREFIX + item,
                listNodes[0]);
            
            if (rowNodes.length > 0) {
              var result = dojo.query("a.list-details-row-toggle",
                  cm.prevSibling(rowNodes[0], "tr"));
              if (result.length == 1) {
                _this._toggleDetailsRow(result[0]);

              } else {
                curam.debug.log(bundle
                  .getProperty("curam.util.ExpandableLists.load.button" 
                    + ".disabled"));
              }
            
            } else {
              curam.debug.log(bundle
                .getProperty("curam.util.ExpandableLists.load.row.disabled"));
            }
          });
          
          // Wipe the saved data for the specified list
          context.storage.put(_this._sanitizeKey(listId), "");
        
        } else {
          curam.debug.log(bundle
            .getProperty("curam.util.ExpandableLists.load.no.data"));
        }
      };
      
      // execute the load action
      dojo.ready(function() { curam.util.runStorageFn(loadFunction); });
    },
    
    /**
     * Returns the list state data object for the specified list.
     * The data object is created if it doesn't yet exist.
     * @private
     * 
     * @param listId Id of the list to get data for.
     */
    _getListData: function(listId) {
      var allData = curam.util.ExpandableLists.stateData;
      
      var listData = dojo.filter(allData, function(item) {
        return item.listId == listId;
      });
      
      if (listData.length == 0) {
        listData.push({ listId: listId, expandedRows: [] });
        allData.push(listData[0]);
      }

      return listData[0];
    },
    
    /**
     * Removes the list state data object for the specified list.
     * @private
     * 
     * @param listId
     *    ID of the list for which to remove data
     */
    _removeListData: function(listId) {
      var _this = curam.util.ExpandableLists;
      _this.stateData = dojo.filter(_this.stateData, function(item) {
        return item.listId != listId;
      });
    },
    
    /**
     * Handler triggered on click of expand/collapse button in advanced lists.
     * @param event
     *    The click event object.
     */
    toggleListDetailsRow: function(event) {
      if (event) {
        // event that standardizes the event object across browsers
        event = dojo.fixEvent(event);
        dojo.stopEvent(event);

        // This is the element with the onlick handler, an anchor element
        // generated in gen-jsp.xsl.
        var expandCollapseButton = event.currentTarget;
        
        curam.util.ExpandableLists._toggleDetailsRow(expandCollapseButton);
      }
    },

    /**
     * This function improves the performance of expandable lists, especially
     * those lists containing a large number of rows. This is achieved by lazy 
     * loading the UIMController widget for the row to be expanded.
     * 
     * The details needed to create the UIMController are first created in the 
     * ExpandableListRowRenderer and stored within a <div> tag within the hidden
     * row. This <div> is deleted after the UimController widget is created.
     * 
     */
    _generateUimController: function(detailsRow) {
      // retrieve relevant variables from within the hidden details row
      var detailsRowContent = dojo.query("td", detailsRow)[0];
      var hiddenRowDetails = dojo.query("div", detailsRow)[0];

      // construct the widget
      var uimController = new curam.UIMController({
        uid:                dojo.attr(hiddenRowDetails, "uid"),
        url:                dojo.attr(hiddenRowDetails, "url"),
        iframeId:           dojo.attr(hiddenRowDetails, "iframeId"),
        iframeClassList:    dojo.attr(hiddenRowDetails, "iframeClassList"),
        loadFrameOnCreate:  dojo.attr(hiddenRowDetails, "loadFrameOnCreate")
      });
      
      // add generated widget content to hidden details row
      detailsRowContent.appendChild(uimController.domNode);
      
      // remove original node containing widget setup details, the data is no 
      //longer needed
      if (hiddenRowDetails && detailsRowContent) {
        detailsRowContent.removeChild(hiddenRowDetails);
      }
      
      return uimController;
    },
    
    /**
     * Toggles the details row for the specified button.
     * @private
     *
     * @param expandCollapseButton
     *    The toggle button for the row that should be toggled.
     */
    _toggleDetailsRow: function(expandCollapseButton) {
      curam.debug.log("curam.util.ExpandableLists._toggleDetailsRow " 
        + bundle.getProperty("curam.util.ExpandableLists.load.for"), 
          expandCollapseButton);
      
      var _this = curam.util.ExpandableLists;

      // get the main row - it is the parent row of the expand\collapse node
      var tableRow = cm.getParentByType(expandCollapseButton, "tr");
      
      // get the hidden details row which is assumed to be the previous sibling
      // of the main row.
      var detailsRow = cm.nextSibling(tableRow, "tr");
      
      var expand = !_this.isDetailsRowExpanded(detailsRow);

      _this._handleStripingAndRoundedCorners(tableRow, detailsRow, expand);

      //var iframeNodeList = dojo.query("iframe", detailsRow);
      var divNodeList = dojo.query("div.uimController", detailsRow);
      var uimControllerNode = null;
      var uimController = null;
      
      // lazy load uimController widget if it does not already exist (this will 
      // occur the first time the hidden row is expanded)
      if (divNodeList == null || divNodeList.length == 0) {
        uimController = _this._generateUimController(detailsRow);
        
      } else {
        uimControllerNode = divNodeList[0];
        uimController = dijit.byNode(uimControllerNode);
      }

      if (typeof(uimController) == "undefined" || uimController == null) {
        throw "UIMController Dijit not found for node: " + uimControllerNode;
      }      
      var iframeSrc = dojo.attr(uimController.frame, "src");
      var triggerResize = false;
      
      // toggle the row expanded state, do that before loading page
      _this.setDetailsRowExpandedState(tableRow, detailsRow, expand,
          expandCollapseButton);
      
      var def = new dojo.Deferred();
      // only set it if it doesn't exist already.
      if (!iframeSrc || iframeSrc == null || iframeSrc == "") {
        uimController.loadPage(def);

      } else {
        triggerResize = true;
        def.callback();
      }
      
      def.addCallback(function() {
        var inPageNav = uimController.hasInPageNavigation();
        
        // this is being determined after the page is loaded
        triggerResize = triggerResize || inPageNav;
        
        if (inPageNav) {
          // explicitly hide the in-page navigation tabs
          // this is to ensure the nav tabs are hidden when the row is collapsed 
          uimController.showTabContainer(expand);
        }
        
        // now resize to accomodate in-page nav tabs
        if (triggerResize) {
          curam.util.ExpandableLists.resizeExpandableListAncestors(window);
        }

        // publish the corresponding toggle event to drive remembering state across
        // page refreshes
        var eventType = expand ? _this._EVENT_TYPE_EXPANDED
            : _this._EVENT_TYPE_COLLAPSED;
        var listId = _this._findListId(detailsRow);
        var rowId = curam.util.getSuffixFromClass(detailsRow, _this._ROW_ID_PREFIX);
        dojo.publish(_this._EVENT_TOGGLE, [ listId, rowId, eventType ]);

        // Publish the row expanded/collapsed state to the parent.
        if (!curam.util.ExpandableLists._isExternalApp(window)) {
          var eventType =
              expand ? "ListDetailsRow.Expand" : "ListDetailsRow.Collapse";
          var onClickDetails = {
            url: dojo.attr(uimController.frame, "src"),
            eventType: eventType
          };
  
          var sourceTab = curam.tab.getSelectedTab();
          
          if (sourceTab) {
            var tabWidgetId = curam.tab.getTabWidgetId(sourceTab);
  
            curam.util.getTopmostWindow().dojo.publish("expandedList.toggle",
              [window.frameElement, onClickDetails, tabWidgetId]);  
          } 
        }
      });
    },
    
    _handleStripingAndRoundedCorners: function(tableRow, detailsRow, isExpanding) {
      var odd       = "odd";
      var even      = "even";
      var no_border = "row-no-border";
      var odd_last  = "odd-last-row";
      var even_last = "even-last-row";
      
      if(!curam.util.ExpandableLists._isLastRow(tableRow, detailsRow)) {
        // copy striping classes onto the details row 
        if (dojo.hasClass(tableRow, odd)) {
          dojo.addClass(detailsRow, odd);
        
        } else if (dojo.hasClass(tableRow, even)) {
          dojo.addClass(detailsRow, even);
        }
      
      } else {
        // on last row - handle rounded corners
        if (isExpanding) {
          if (dojo.hasClass(tableRow, odd_last)) {
            dojo.removeClass(tableRow, odd_last);
            dojo.addClass(tableRow, odd);
            
            dojo.addClass(detailsRow, odd);
            dojo.addClass(detailsRow, odd_last);
          
          } else if (dojo.hasClass(tableRow, even_last)) {
            dojo.removeClass(tableRow, even_last);
            dojo.addClass(tableRow, even);

            dojo.addClass(detailsRow, even);
            dojo.addClass(detailsRow, even_last);
          }
          
        } else { // is collapsing
          if (dojo.hasClass(tableRow, odd)) {
            dojo.removeClass(tableRow, odd);
            dojo.addClass(tableRow, odd_last);
            
            // details row hidden, remove all classes
            dojo.removeClass(detailsRow, odd_last);
            dojo.removeClass(detailsRow, odd);
          
          } else if (dojo.hasClass(tableRow, even)) {
            dojo.removeClass(tableRow, even);
            dojo.addClass(tableRow, even_last);

            // details row hidden, remove all classes
            dojo.removeClass(detailsRow, even);
            dojo.removeClass(detailsRow, even_last);
          }
        }
      }
      
      // set border
      if (isExpanding) {
        dojo.addClass(tableRow, no_border);

      } else {
        dojo.removeClass(tableRow, no_border);
      }
      
      // When the table row is expanded,class " collapsed" should be
      // removed from details row
      if (dojo.hasClass(tableRow, no_border)) {
       dojo.removeClass(detailsRow, "collapsed");
      } else {
      dojo.addClass(detailsRow, "collapsed");
      }
    },

    /**
     * Sets the appropriate CSS classes to style the details row accordingly
     * to 
     */
    setDetailsRowExpandedState: function(mainRowNode, detailsRowNode, expand,
        /*optional*/expandCollapseButton) {
      
      // Now we have the button and the row element, toggle the appropriate CSS
      // styles on them.
    
      // By default the row will have the "collapsed" style on it when first
      // displayed. See commons.css for details plus an explanation for why this
      // is done the opposite way to the button below (Summary: we couldn't get
      // a reliable way to override "display:none;" on the table row)
      
      // The value returned from isDetailsRowExpanded is used as there is an issue when 
      // Pagesize is changed and  collapsed class is not removed and added back 
      // properly on toggle :CR00387473
      var expanded = curam.util.ExpandableLists.isDetailsRowExpanded(detailsRowNode);
      dojo.removeClass(detailsRowNode, "collapsed");
      if (!expanded) {
        dojo.addClass(detailsRowNode, "collapsed");
      }

      // When theres any other page of list displayed,the expanded details row
      // should be hidden inheriting the table row.
      if(mainRowNode.style.display=="none"){
        detailsRowNode.setAttribute("style","display:none");
      }else{
        detailsRowNode.removeAttribute("style");
      }
      
      // By default the button will *not* have the "expanded" style. See
      // commons.css for details.
      if (expandCollapseButton) {
        if (expand) {
          dojo.addClass(expandCollapseButton, "expanded");
        
        } else {
          dojo.removeClass(expandCollapseButton, "expanded");
        }
      }
    },
    
    _isLastRow: function(tableRow, detailsRow) {
      return dojo.hasClass(tableRow, "even-last-row")
      || dojo.hasClass(tableRow, "odd-last-row")
      || dojo.hasClass(detailsRow, "even-last-row")
      || dojo.hasClass(detailsRow, "odd-last-row");
    },

    /**
     * Determines the state of the specified details row.
     * 
     * @param detailsRowNode
     *    The details row to examine.
     * 
     * @return True if expanded, False if collapsed. 
     */
    isDetailsRowExpanded: function(detailsRowNode) {
      return !dojo.hasClass(detailsRowNode, "collapsed");
    },
    
    /**
     * Invoked in response to the load event from the page in the
     * expandable list panel's iframe. It is hooked into the standardized page
     * load event system (onLoad.js) in ExpandableListRowRenderer.java.
     *
     * @param iframeID
     *    The iframe's ID.
     * @param context
     *    The context object containing the page height.
     */
    listRowFrameLoaded: function(iframeID, context) {
      curam.debug.log("========= " 
        + bundle.getProperty("curam.util.ExpandableLists.page.load") 
          + " =======");
      curam.debug.log(iframeID);
      curam.debug.log(dojo.toJson(context));
      var iframe = dojo.byId(iframeID);
      if (!iframe) {
        throw "List Row Expanded: No iframe found";
      }

      if (!iframe._spExpListPageLoadListener) {
        // The first time a page is loaded in the frame, setup a listener to
        // subsequent page loads.
        //curam.contentPanel.initSmartPanelExpListPageLoadListener();

        // the first time a frame is loaded we don't want to fire an event.
        iframe._spExpListPageLoadListener = "true";

      } else {
        if (!curam.util.ExpandableLists._isExternalApp(window)) {
          curam.contentPanel.publishSmartPanelExpListPageLoad(iframe);
        }
      }
      
      // guard the minimum allowed height of the expanded details panel
      var listId = curam.util.ExpandableLists._findListId(iframe);
      var minExpHeight =
          curam.util.ExpandableLists.getMinimumExpandedHeight(listId);
      var height = context.height;
      if (height < minExpHeight) {
        curam.debug.log(bundle
          .getProperty("curam.util.ExpandableLists.min.height", 
                       [minExpHeight]));
        height = minExpHeight;

      } else {
        curam.debug.log(bundle
          .getProperty("curam.util.ExpandableLists.height", [height]));
      }
      
      // set the height
      curam.util.ExpandableLists._resizeIframe(iframe, height);

      // now that this panel has changed, we have to trigger a resize in any
      // ancestors (if this is a nested expandable list).
      curam.util.ExpandableLists.resizeExpandableListAncestors(window);
      
      curam.util.ExpandableLists._setFrameTitle(iframe, context);
      
      // this processing should not occur for an external application.
      if (!curam.util.ExpandableLists._isExternalApp(window)) {
        // notify the refresh mechanism that the inline page has been loaded.
        var sourceTab = curam.tab.getSelectedTab();
        if (sourceTab) {
          var tabWidgetId = curam.tab.getTabWidgetId(sourceTab);
          var topWin = curam.util.getTopmostWindow();
          topWin.curam.util.Refresh.getController(tabWidgetId).pageLoaded(
            context.pageID,
            curam.util.ui.refresh.RefreshEvent.prototype.SOURCE_CONTEXT_INLINE);  
        }
      }
      curam.debug.log("================================================");
    },
    
    /**
     * Resizes the iframe to have the specified height.
     *
     * @private
     *
     * @param iframe
     *    The iframe to resize.
     * @param height
     *    The new height for the iframe.
     */
    _resizeIframe: function(iframe, height) {
      dojo.style(iframe, { height: height + "px" });
    },
    
    /**
     * Set iframe title for expanded row.
     *
     * @private
     *
     * @param iframe
     *    The iframe.
     * @param context
     *    The context object containing the page title.
     */
    _setFrameTitle: function(iframe, context) {
      iframe.title = iframe.title + " " + context.title;
    },
    
    /**
     * Finds list ID of the list that contains the specified element.
     *
     * @private
     *
     * @param element
     *    The element to find the list id for.
     * 
     * @return ID of the list that contains the specified element.
     */
    _findListId: function(element) {
      return curam.util.getSuffixFromClass(
          cm.getParentByType(element, "table"),
          curam.util.ExpandableLists._LIST_ID_PREFIX);
    },
    
    /**
     * When an expandable list changes size, call this method to trigger
     * a re-size in its ancestors.
     *
     * TODO: This is a recursive method which re-sizes ancestor iframe elements.
     * It is called from both "listRowFrameLoaded", in response to page load
     * events, and "setDetailsRowExpandedState", in response to a panel being
     * expanded or collapses (i.e. **not** a page load).
     * Can we implement a generic "page re-sized" event system similar to 
     * "onLoad.js"? How would it interact with onLoad.js? 
     * For now this method will stick to re-cursively re-sizing ancestor iframes.
     * 
     * @param theWindow
     *    The window on which the resize operation should be applied.
     */
    resizeExpandableListAncestors: function(theWindow) {
      curam.debug.log(
          "curam.util.ExpandableLists.resizeExpandableListAncestors: ", 
            theWindow.location.href);
      
      // Check if the current window is loaded in an expandable list iframe.
      // ExpandableListRowRenderer adds the "expanded_row_iframe" class which is
      // used as the indicator of a nested expandable list here.
      if (theWindow
          && theWindow !== window.top
          && typeof(theWindow.frameElement) != "undefined" 
          && (dojo.hasClass(theWindow.frameElement, "expanded_row_iframe")
              || curam.util.ExpandableLists.isNestedUIM(theWindow))) {
        
        // The frame which is contained in "theWindow" has already be re-sized by
        // "listRowFrameLoaded", which in turn means that this window's (theWindow)
        // height has also changed. As this window is also in an expandable list,
        // we need to get it's height and then update it's containing frame.
        var newPageHeight = theWindow.curam.util.getPageHeight();
        curam.debug.log("curam.util.ExpandableLists" 
            + ".resizeExpandableListAncestors: " 
            + bundle.getProperty("curam.util.ExpandableLists.resize.height"), 
              newPageHeight);
        curam.util.ExpandableLists._resizeIframe(
            theWindow.frameElement, newPageHeight);
        
        curam.util.ExpandableLists.resizeExpandableListAncestors(
            theWindow.parent);
      
      } else {
        curam.debug.log("curam.util.ExpandableLists" 
            + ".resizeExpandableListAncestors: "  
            + bundle.getProperty("curam.util.ExpandableLists.resize.end"));
        return;
      }
    },
    
    /**
     * Utility method to check the supplied window object has a Nested UIM
     * context.
     * @param theWindow A instance of a window object.
     */
    isNestedUIM: function(theWindow) {
      if (theWindow && theWindow.jsScreenContext) {
        return theWindow.jsScreenContext.hasContextBits("NESTED_UIM");

      } else {
        return false;
      }
    },
    
    /**
     * Utility method to check the supplied window object has a EXTAPP
     * context.
     * @param theWindow A instance of a window object.
     */
    _isExternalApp: function(theWindow) {
      if (theWindow && theWindow.jsScreenContext) {
        return theWindow.jsScreenContext.hasContextBits("EXTAPP");
      } else {
        return false;
      }
    },
    
    /**
     * Sets the minimum allowed height for the expanded rows in the specified
     * list.
     *
     * @param listId
     *    The list to set the height for.
     * @param minExpHeight
     *    The height value in pixels.
     */
    setMinimumExpandedHeight: function(listId, minExpHeight) {
      curam.util.ExpandableLists._minimumExpandedHeight.push({
          listId: listId,
          minExpHeight: minExpHeight
      });
    },
    
    /**
     * Retrieves the minimum allowed height of the expanded details row
     * for the specified list. If no data is found for the list,
     * the function returns default minimum height of 30 pixels.
     *
     * @param listId
     *    The list to set the height for.
     * @return The minimum allowed height of the expanded details row in pixels
     *    or 50 if no data is found.
     */
    getMinimumExpandedHeight: function(listId) {
      var data = dojo.filter(
          curam.util.ExpandableLists._minimumExpandedHeight, function(item) {
            return item.listId == listId;
          });
      if (data.length == 1) {
        return data[0].minExpHeight;

      } else {
        curam.debug.log(bundle
          .getProperty("curam.util.ExpandableLists.default.height"), listId);
        return 30;
      }
    }
  });
  
  return curam.util.ExpandableLists;
});

},
'curam/tab':function(){
/*
 * Copyright 2009-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/tab", ["curam/define",
        "curam/util",
        "curam/util/ScreenContext"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 25-Mar-2014  MV  [CR00423311] Add function to detect internal application.  
   * 28-Sep-2013  BOS [CR00396277] Modified getSelectedTab() and 
   *                    onSectionSelected() functions to ensure an undefined. 
   *                    tab container handled correctly.
   * 28-Sep-2011  MV  [CR00288956] Refactored code to get separate
   *      getCurrentSectionId function.
   * 29-Jul-2011  MV  [CR00269970] Added missing semicolons.
   * 14-Feb-2011  PK  [CR00251730] Added "refreshMainContentPanel" method.
   * 14-Jan-2011  DG  [CR00242400] Changed "getContainerTab" to do a bottom-up
   *                    search. This is much, much simpler.
   * 12-Jan-2011  DG  [CR00238642] Fixed "getContainerTab" to find the tab for an
   *                    node even if the tab is not in the currently selected
   *                    section. Added copyright notice.
   * 17-Nov-2010  DG  [CR00217921] Clean-up of selected tab retrieval.
   * 27-Oct-2010  SK  [CR00224193] the situation where the content panel frame
   *                    is not present is now allowed.
   * 28-Jul-2010  PK  [CR00211736] Updated due to re-factoring of
   *                    tab-app-controller.js.
   * 21-Jul-2010  PK  [CR00211095] Added methods for handling default pages in a
   *                    section.
   * 16-Jul-2010  MV  [CR00210541] Fixed the getTabContainer() function to also
   *                    work in contexts other than the main window.
   * 28-Jun-2010  SD  [CR00204622] Smart Panel additions.
   * 02-Jul-2010  PK  [CR00203531] Updated to support section tab container.
   * 04-Jun-2010  MV  [CR00202412] Generalize the code that executes functions
   *                    on tab close.
   * 11-Feb-2010  MV  [CR00188844] Code format cleanup.
   * 27-Nov-2009  MV  [CR00180297] Pass the tab widget ID to the handlers.
   * 24-Nov-2009  MV  [CR00175837] Remove debug output from getTabCOntainer.
   * 20-Nov-2009  MV  [CR00175581] Fix getSelectedTab function, remove
   *                    refreshCurrentTab function, add getTabController function.
   * 18-Nov-2009  MV  [CR00172452] Add more tab related functions.
   * 03-Sep-2009  MLB [CR00164883] Added function to refresh the current tab.
   * 06-Aug-2009  MV  [CR00164029] Initial version.
   * 24-Jun-2010 BD  [CR00204119] Updated how the content panel iframe is returned
   */
  /**
   * Contains functions of general use for the tabbed UI.
   */
  curam.define.singleton("curam.tab", {
    SECTION_TAB_CONTAINER_ID: "app-sections-container-dc",
    SMART_PANEL_IFRAME_ID: "curam_tab_SmartPanelIframe",
    toBeExecutedOnTabClose: [],
    
    /**
     * @private
     *
     * Used for testing: when this is set by the test code the value
     * will be returned from the getSelectedTab() function instead of the real
     * selected tab.
     */
    _mockSelectedTab: null,

    // Returns the currently selected tab widget.
    getSelectedTab: function(sectionID) {
      // supports testing code that uses curam.tab API
      if (curam.tab._mockSelectedTab) {
        return curam.tab._mockSelectedTab;
      }

      if (curam.tab.getTabContainer(sectionID)) {
        return curam.tab.getTabContainer(sectionID).selectedChildWidget;
      }    
    },

    getTabContainer: function(sectionID) {
      return curam.tab.getTabContainerFromSectionID(sectionID
          || curam.tab.getCurrentSectionId());
    },
    
    /**
     * Determines ID of the currently selected section.
     * By default throws an error when no current section is found.
     * 
     * @param {boolean} [suppressNotFoundError] If this option is set to true
     *          the function will not throw err when no current section
     *          is found.
     * 
     * @return ID of the currently selected section or null
     *          if "suppressNotFoundError" parameter is true.
     */
    getCurrentSectionId: function(suppressNotFoundError) {
      var sectionTabContainer = curam.util.getTopmostWindow().dijit.byId(
          curam.tab.SECTION_TAB_CONTAINER_ID);
      if (sectionTabContainer) {
        // children of the curam.tab.SECTION_TAB_CONTAINER_ID have id's that
        // start with the section ID and have a 4 character suffix. See
        // the ApplicationSectionRenderer.
        var childID = sectionTabContainer.selectedChildWidget.domNode.id;
        return childID.substring(0, childID.length - 4);

      } else {
        if (!suppressNotFoundError) {
          throw new Error(
              "curam.tab.getCurrentSectionId() - application section"
                + " tab container not found");
        }
      }

      return null;
    },
    
    /**
     * Determines whether we are running within a tabbed UI (internal
     * application) or not.
     * 
     * @return True if we are in tabbed UI, otherwise false.
     */
    inTabbedUI: function() {
      return curam.tab.getCurrentSectionId(true) != null;
    },

    getTabContainerFromSectionID: function(sectionID) {
      var tabContainer = dijit.byId(sectionID + "-stc");
      // TODO: not sure what this should do now that sections have been
      // introduced
      if (!tabContainer && window.parent && window.parent != window) {
        tabContainer =
          curam.util.getTopmostWindow().dijit.byId(sectionID + "-stc");
      }
      return tabContainer;
    },

    // Returns the unique widget ID for the specified tab.
    getTabWidgetId: function(tab) {
      return tab.id;
    },

    // Returns the unique widget ID for the currently selected tab.
    getSelectedTabWidgetId: function() {
      return curam.tab.getTabWidgetId(curam.tab.getSelectedTab());
    },

    /**
     * Gets the tab that contains the given node. The node is typically the
     * "iframe" element (or its parent element) within the tab, but it can be
     * any other descendant node of the tab widget.
     *
     * @param {Node} node The node within the tab to be identified.
     * @return The tab content pane containing the given node.
     */
    getContainerTab: function(node) {
      var widget = dijit.getEnclosingWidget(node);

      if (widget && !widget.tabDescriptor) {
        // A valid tab has a "curam.tab.TabDescriptor" object. This is probably
        // a different widget nested within the tab. Look further up the tree.
        widget = curam.tab.getContainerTab(widget.domNode.parentNode);
      }

      if (!widget || !widget.tabDescriptor) {
        throw "Containing tab widget could not be found for node: " + node;
      }
      return widget;
    },

    // Returns the iframe corresponding to the main content panel
    // of the specified tab.
    // If the tab parameter is not provided the selected tab will be used instead.
    getContentPanelIframe: function(tab) {
      var targetTab = tab ? tab : curam.tab.getSelectedTab(),
          iframe = null;
      
      if (targetTab) {
        iframe = dojo.query("iframe", targetTab.domNode).filter(
            function(item) {
              // is-cp-iframe output by "ContentPanelRenderer".
              return dojo.attr(item,"iscpiframe") == "true";
            })[0];
      }
      return iframe ? iframe : null;
    },
    
    /**
     * Refreshes the main content panel for the specified tab. If the tab is not
     * specified, the currently selected one will be used.
     * @tab The tab to reload the main content panel for. 
     */
    refreshMainContentPanel: function(tab) {
      var iframe = curam.tab.getContentPanelIframe(tab);
      iframe.contentWindow.curam.util.publishRefreshEvent();
      iframe.contentWindow.location.reload(true);
    },

    // Returns the iframe corresponding to the main content panel
    // of the specified tab.
    // If the tab parameter is not provided the selected tab will be used instead.
    getSmartPanelIframe: function(tab) {
      var targetTab = tab ? tab : curam.tab.getSelectedTab();
      var iframe =
        dojo.query("iframe", targetTab.domNode).filter(
            function(item) {
              return item.id == curam.tab.SMART_PANEL_IFRAME_ID;
            })[0];

      return iframe;
    },

    unsubscribeOnTabClose: function(unsubscribeToken, tabWidgetId) {
      curam.tab.toBeExecutedOnTabClose.push(function(actualTabWidgetId) {
        if (tabWidgetId == actualTabWidgetId) {
          dojo.unsubscribe(unsubscribeToken);
          return true;
        }

        return false;
      });
    },

    executeOnTabClose: function(func, tabWidgetId) {
      curam.tab.toBeExecutedOnTabClose.push(function(actualTabWidgetId) {
        if (tabWidgetId == actualTabWidgetId) {
          func();
          return true;
        }

        return false;
      });
    },

    doExecuteOnTabClose: function(tabWidgetId) {
      var remainingFuncs = new Array();
      for (var i = 0; i < curam.tab.toBeExecutedOnTabClose.length; i ++) {
        var func = curam.tab.toBeExecutedOnTabClose[i];
        if (!func(tabWidgetId)) {
          remainingFuncs.push(func);
        }
      }

      curam.tab.toBeExecutedOnTabClose = remainingFuncs;
    },

    // Returns a handler function that handles the /curam/main-content/page/loaded events,
    // but only for the specified tab.
    getHandlerForTab: function(handler, tabWidgetId) {
      return function(pageId, actualTabWidgetId) {
        if (actualTabWidgetId == tabWidgetId) {
          handler(pageId, tabWidgetId);
        } else {
          // no action - event was for a different tab
        }
      };
    },

    getTabController: function() {
      return curam.util.getTopmostWindow().curam.ui.UIController;
    },

    initTabLinks: function(tabWindow) {
      if (typeof(window.pageContainsClassicIEG) != "undefined"
          && window.pageContainsClassicIEG == true) {
        return;      
      }
      dojo.query("a").forEach(
        function(link) {
          if (link.href.indexOf('#') != 0
              && link.href.indexOf('javascript:') != 0
              && (link.href.indexOf('Page.do') > -1
                        || link.href.indexOf('Frame.do') > -1)) {
            if (link.href.indexOf('&o3ctx') < 0
              && link.href.indexOf('?o3ctx') < 0) {
              var separator = (link.href.indexOf('?') > -1) ? "&" : "?";
          link.href += separator + jsScreenContext.toRequestString();
            }
          }
       });
      elements = document.forms;
      for (var i = 0; i < elements.length; ++i) {
        elem = elements[i];
        var ctxField = dojo.byId('o3ctx');
        if (!ctxField) {
          var ctx = new curam.util.ScreenContext();
          ctx.setContextBits('ACTION');
          dojo.create("input", {"type": "hidden", "name": "o3ctx",
                                 "value": ctx.getValue()
                               }, elem);
        }
        dojo.create("input", {"type": "hidden", "name": "o3prv",
              "value": jsPageID}, elem);
      }

      if (elements.length > 0) {
        curam.util.getTopmostWindow().dojo.publish("curam.fireNextRequest", []);
      }
    },

    initContent: function(window, pageId) {
      var contentDiv = dojo.byId('content');
      dojo.removeClass(contentDiv, "hidden-panel");
      return;
    },

    /**
     * This setups a listener on the SECTION_TAB_CONTAINER_ID tab container to
     * handle when a section tab is selected. This method is invoked from
     * JavaScript output from the ApplicationsSectionsRenderer Java class.
     */
    setupSectionSelectionListener: function() {
      dojo.subscribe(curam.tab.SECTION_TAB_CONTAINER_ID + "-selectChild",
          curam.tab.onSectionSelected) ;
    },

    /**
     * Checks if a section has a default page specified and if the section is
     * currently "empty" (i.e. nothing displayed in it). If so, it loads the
     * default default in the section.
     *
     * This function responds to the standard "selectChild" event provided by the
     * Dijit TabContainer and is setup by the setupSectionSelectionListener method
     * above.
     */
    onSectionSelected: function(section) {
      // The curamDefaultPageID attribute is added by the setSectionDefaultPage
      // method below. The Dijit TabContainer selectChild event passes the
       // selected child to the listener.
      if (section.curamDefaultPageID) {
        // The section has a default page. Check if anything has been opened up
        // in this section already. If not, then we trigger a request for that
        // page.

        // The tab container containing the "object" tabs will either be a direct
        // child of the sections tab container, or it will be nested within
        // a border container.
        var objectTabContainer;
        if (section.id.substring(
              section.id.length - 4, section.id.length) == "-sbc") {
          // This means it's a border container so extract the section ID and
          // find the nested tab container.
          var sectionID = section.id.substring(0, section.id.length - 4);
          objectTabContainer = curam.tab.getTabContainer(sectionID);
        } else {
          // This means the object tab container is a direct child of the section
          // tab container, so it's passed in by the "selectChild" event of the
          // section tab container.
          objectTabContainer = section;
        }

        // If the tab container does not have any children, then load the
        // default page.
        if (objectTabContainer 
          && objectTabContainer.getChildren().length == 0) {
            curam.tab.getTabController().handleUIMPageID(
              section.curamDefaultPageID, true);
         // TODO: now that the page has been loaded, can we set a flag on the
         // section so the code *before* the getChildren().length == 0 above
         // is not executed again. Just a minor optimization.
        }
        return true;
      }
      return false;
    },

    /**
     * Sets the section's default pageID as a custom attribute on the Dijit
     * container. The container can be either a border container or a tab
     * container which has a specific naming convention which is the section ID
     * plus a suffix of "-sbc" for a border container and "-stc" for a tab
     * container. The ApplicationSectionsRenderer generates the call to this
     * function and will set the containers ID appropriately.
     */
    setSectionDefaultPage: function(sectionDijitContainerID, defaultPageID) {
      var dijitContainer = dijit.byId(sectionDijitContainerID);
      if (dijitContainer) {
        // The "curamDefaultPageID" custom attribute is used by the
        // onSectionSelected method above.
        dijitContainer.curamDefaultPageID = defaultPageID;
      } else {
        throw "curam.tab.setSectionDefaultPage() - cannot find section dijit ID:"
              + sectionDijitContainerID;
      }
    },
    
    /**
     * Notifies the Smart Panel that its content page is loaded and ready to
     * receive updates from the tab's content page. This is done by publishing
     * an event, or, if the listeners are not set up yet, an attribute set on
     * the Smart Panel frame is used.
     */
    publishSmartPanelContentReady: function() {
            var rendererLoadedEvent = "smartpanel.content.loaded";
            //use the window object as cannot assume the currently selected tab is
            //the tab containing the Smart Panel of interest.
            var smartPanel = window.frameElement; 
            smartPanel.setAttribute("_SPContentLoaded", "true");
            curam.util.getTopmostWindow().dojo.publish(rendererLoadedEvent, [smartPanel]);
    }
    
  });

  return curam.tab;
});

},
'dojo/text':function(){
define("dojo/text", ["./_base/kernel", "require", "./has", "./_base/xhr"], function(dojo, require, has, xhr){
	// module:
	//		dojo/text
	// summary:
	//		This module implements the !dojo/text plugin and the dojo.cache API.
	// description:
	//		We choose to include our own plugin to leverage functionality already contained in dojo
	//		and thereby reduce the size of the plugin compared to various foreign loader implementations.
	//		Also, this allows foreign AMD loaders to be used without their plugins.
	//
	//		CAUTION: this module is designed to optionally function synchronously to support the dojo v1.x synchronous
	//		loader. This feature is outside the scope of the CommonJS plugins specification.

	var getText;
	if(1){
		getText= function(url, sync, load){
			xhr("GET", {url:url, sync:!!sync, load:load});
		};
	}else{
		// TODOC: only works for dojo AMD loader
		if(require.getText){
			getText= require.getText;
		}else{
			console.error("dojo/text plugin failed to load because loader does not support getText");
		}
	}

	var
		theCache= {},

		strip= function(text){
			//Strips <?xml ...?> declarations so that external SVG and XML
			//documents can be added to a document without worry. Also, if the string
			//is an HTML document, only the part inside the body tag is returned.
			if(text){
				text= text.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, "");
				var matches= text.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
				if(matches){
					text= matches[1];
				}
			}else{
				text = "";
			}
			return text;
		},

		notFound = {},

		pending = {},

		result= {
			dynamic:
				// the dojo/text caches it's own resources because of dojo.cache
				true,

			normalize:function(id, toAbsMid){
				// id is something like (path may be relative):
				//
				//	 "path/to/text.html"
				//	 "path/to/text.html!strip"
				var parts= id.split("!"),
					url= parts[0];
				return (/^\./.test(url) ? toAbsMid(url) : url) + (parts[1] ? "!" + parts[1] : "");
			},

			load:function(id, require, load){
				// id is something like (path is always absolute):
				//
				//	 "path/to/text.html"
				//	 "path/to/text.html!strip"
				var
					parts= id.split("!"),
					stripFlag= parts.length>1,
					absMid= parts[0],
					url = require.toUrl(parts[0]),
					text = notFound,
					finish = function(text){
						load(stripFlag ? strip(text) : text);
					};
				if(absMid in theCache){
					text = theCache[absMid];
				}else if(url in require.cache){
					text = require.cache[url];
				}else if(url in theCache){
					text = theCache[url];
				}
				if(text===notFound){
					if(pending[url]){
						pending[url].push(finish);
					}else{
						var pendingList = pending[url] = [finish];
						getText(url, !require.async, function(text){
							theCache[absMid]= theCache[url]= text;
							for(var i = 0; i<pendingList.length;){
								pendingList[i++](text);
							}
							delete pending[url];
						});
					}
				}else{
					finish(text);
				}
			}
		};

	dojo.cache= function(/*String||Object*/module, /*String*/url, /*String||Object?*/value){
		//	 * (string string [value]) => (module, url, value)
		//	 * (object [value])        => (module, value), url defaults to ""
		//
		//	 * if module is an object, then it must be convertable to a string
		//	 * (module, url) module + (url ? ("/" + url) : "") must be a legal argument to require.toUrl
		//	 * value may be a string or an object; if an object then may have the properties "value" and/or "sanitize"
		var key;
		if(typeof module=="string"){
			if(/\//.test(module)){
				// module is a version 1.7+ resolved path
				key = module;
				value = url;
			}else{
				// module is a version 1.6- argument to dojo.moduleUrl
				key = require.toUrl(module.replace(/\./g, "/") + (url ? ("/" + url) : ""));
			}
		}else{
			key = module + "";
			value = url;
		}
		var
			val = (value != undefined && typeof value != "string") ? value.value : value,
			sanitize = value && value.sanitize;

		if(typeof val == "string"){
			//We have a string, set cache value
			theCache[key] = val;
			return sanitize ? strip(val) : val;
		}else if(val === null){
			//Remove cached value
			delete theCache[key];
			return null;
		}else{
			//Allow cache values to be empty strings. If key property does
			//not exist, fetch it.
			if(!(key in theCache)){
				getText(key, true, function(text){
					theCache[key]= text;
				});
			}
			return sanitize ? strip(theCache[key]) : theCache[key];
		}
	};

	return result;

/*=====
dojo.cache = function(module, url, value){
	// summary:
	//		A getter and setter for storing the string content associated with the
	//		module and url arguments.
	// description:
	//		If module is a string that contains slashes, then it is interpretted as a fully
	//		resolved path (typically a result returned by require.toUrl), and url should not be
	//		provided. This is the preferred signature. If module is a string that does not
	//		contain slashes, then url must also be provided and module and url are used to
	//		call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated.
	//		If value is specified, the cache value for the moduleUrl will be set to
	//		that value. Otherwise, dojo.cache will fetch the moduleUrl and store it
	//		in its internal cache and return that cached value for the URL. To clear
	//		a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the
	//		the URL contents, only modules on the same domain of the page can use this capability.
	//		The build system can inline the cache values though, to allow for xdomain hosting.
	// module: String||Object
	//		If a String with slashes, a fully resolved path; if a String without slashes, the
	//		module name to use for the base part of the URL, similar to module argument
	//		to `dojo.moduleUrl`. If an Object, something that has a .toString() method that
	//		generates a valid path for the cache item. For example, a dojo._Url object.
	// url: String
	//		The rest of the path to append to the path derived from the module argument. If
	//		module is an object, then this second argument should be the "value" argument instead.
	// value: String||Object?
	//		If a String, the value to use in the cache for the module/url combination.
	//		If an Object, it can have two properties: value and sanitize. The value property
	//		should be the value to use in the cache, and sanitize can be set to true or false,
	//		to indicate if XML declarations should be removed from the value and if the HTML
	//		inside a body tag in the value should be extracted as the real value. The value argument
	//		or the value property on the value argument are usually only used by the build system
	//		as it inlines cache content.
	//	example:
	//		To ask dojo.cache to fetch content and store it in the cache (the dojo["cache"] style
	//		of call is used to avoid an issue with the build system erroneously trying to intern
	//		this example. To get the build system to intern your dojo.cache calls, use the
	//		"dojo.cache" style of call):
	//		| //If template.html contains "<h1>Hello</h1>" that will be
	//		| //the value for the text variable.
	//		| var text = dojo["cache"]("my.module", "template.html");
	//	example:
	//		To ask dojo.cache to fetch content and store it in the cache, and sanitize the input
	//		 (the dojo["cache"] style of call is used to avoid an issue with the build system
	//		erroneously trying to intern this example. To get the build system to intern your
	//		dojo.cache calls, use the "dojo.cache" style of call):
	//		| //If template.html contains "<html><body><h1>Hello</h1></body></html>", the
	//		| //text variable will contain just "<h1>Hello</h1>".
	//		| var text = dojo["cache"]("my.module", "template.html", {sanitize: true});
	//	example:
	//		Same example as previous, but demostrates how an object can be passed in as
	//		the first argument, then the value argument can then be the second argument.
	//		| //If template.html contains "<html><body><h1>Hello</h1></body></html>", the
	//		| //text variable will contain just "<h1>Hello</h1>".
	//		| var text = dojo["cache"](new dojo._Url("my/module/template.html"), {sanitize: true});
	return val; //String
};
=====*/
});


},
'curam/i18n':function(){
define("curam/i18n", ["curam/define"
        ], function() {
  
  curam.define.singleton("curam.i18n", {
    values: {},

    set: function(key, value){
      curam.i18n.values[key]=value; 
    },
    
    get: function(key){
      return curam.i18n.values[key];
    }

   });
  
  return curam.i18n;
});

},
'dojo/i18n':function(){
define("dojo/i18n", ["./_base/kernel", "require", "./has", "./_base/array", "./_base/config", "./_base/lang", "./_base/xhr", "./json"],
	function(dojo, require, has, array, config, lang, xhr, json) {
	// module:
	//		dojo/i18n
	// summary:
	//		This module implements the !dojo/i18n plugin and the v1.6- i18n API
	// description:
	//		We choose to include our own plugin to leverage functionality already contained in dojo
	//		and thereby reduce the size of the plugin compared to various loader implementations. Also, this
	//		allows foreign AMD loaders to be used without their plugins.


	true || has.add("dojo-preload-i18n-Api",
		// if true, define the preload localizations machinery
		1
	);

	true || has.add("dojo-v1x-i18n-Api",
		// if true, define the v1.x i18n functions
		1
	);

	var
		thisModule= dojo.i18n=
			// the dojo.i18n module
			{},

		nlsRe=
			// regexp for reconstructing the master bundle name from parts of the regexp match
			// nlsRe.exec("foo/bar/baz/nls/en-ca/foo") gives:
			// ["foo/bar/baz/nls/en-ca/foo", "foo/bar/baz/nls/", "/", "/", "en-ca", "foo"]
			// nlsRe.exec("foo/bar/baz/nls/foo") gives:
			// ["foo/bar/baz/nls/foo", "foo/bar/baz/nls/", "/", "/", "foo", ""]
			// so, if match[5] is blank, it means this is the top bundle definition.
			// courtesy of http://requirejs.org
			/(^.*(^|\/)nls)(\/|$)([^\/]*)\/?([^\/]*)/,

		getAvailableLocales= function(
			root,
			locale,
			bundlePath,
			bundleName
		){
			// return a vector of module ids containing all available locales with respect to the target locale
			// For example, assuming:
			//	 * the root bundle indicates specific bundles for "fr" and "fr-ca",
			//	 * bundlePath is "myPackage/nls"
			//	 * bundleName is "myBundle"
			// Then a locale argument of "fr-ca" would return
			//	 ["myPackage/nls/myBundle", "myPackage/nls/fr/myBundle", "myPackage/nls/fr-ca/myBundle"]
			// Notice that bundles are returned least-specific to most-specific, starting with the root.
			//
			// If root===false indicates we're working with a pre-AMD i18n bundle that doesn't tell about the available locales;
			// therefore, assume everything is available and get 404 errors that indicate a particular localization is not available
			//

			for(var result= [bundlePath + bundleName], localeParts= locale.split("-"), current= "", i= 0; i<localeParts.length; i++){
				current+= (current ? "-" : "") + localeParts[i];
				if(!root || root[current]){
					result.push(bundlePath + current + "/" + bundleName);
				}
			}
			return result;
		},

		cache= {},

		getL10nName= dojo.getL10nName = function(moduleName, bundleName, locale){
			locale = locale ? locale.toLowerCase() : dojo.locale;
			moduleName = "dojo/i18n!" + moduleName.replace(/\./g, "/");
			bundleName = bundleName.replace(/\./g, "/");
			return (/root/i.test(locale)) ?
				(moduleName + "/nls/" + bundleName) :
				(moduleName + "/nls/" + locale + "/" + bundleName);
		},

		doLoad = function(require, bundlePathAndName, bundlePath, bundleName, locale, load){
			// get the root bundle which instructs which other bundles are required to construct the localized bundle
			require([bundlePathAndName], function(root){
				var current= lang.clone(root.root),
					availableLocales= getAvailableLocales(!root._v1x && root, locale, bundlePath, bundleName);
				require(availableLocales, function(){
					for (var i= 1; i<availableLocales.length; i++){
						current= lang.mixin(lang.clone(current), arguments[i]);
					}
					// target may not have been resolve (e.g., maybe only "fr" exists when "fr-ca" was requested)
					var target= bundlePathAndName + "/" + locale;
					cache[target]= current;
					load();
				});
			});
		},

		normalize = function(id, toAbsMid){
			// id may be relative
			// preload has form *preload*<path>/nls/<module>*<flattened locales> and
			// therefore never looks like a relative
			return /^\./.test(id) ? toAbsMid(id) : id;
		},

		getLocalesToLoad = function(targetLocale){
			var list = config.extraLocale || [];
			list = lang.isArray(list) ? list : [list];
			list.push(targetLocale);
			return list;
		},

		load = function(id, require, load){
			//
			// id is in one of the following formats
			//
			//	1. <path>/nls/<bundle>
			//		=> load the bundle, localized to config.locale; load all bundles localized to
			//      config.extraLocale (if any); return the loaded bundle localized to config.locale.
			//
			//  2. <path>/nls/<locale>/<bundle>
			//		=> load then return the bundle localized to <locale>
			//
			//  3. *preload*<path>/nls/<module>*<JSON array of available locales>
			//		=> for config.locale and all config.extraLocale, load all bundles found
			//		   in the best-matching bundle rollup. A value of 1 is returned, which
			//         is meaningless other than to say the plugin is executing the requested
			//         preloads
			//
			// In cases 1 and 2, <path> is always normalized to an absolute module id upon entry; see
			// normalize. In case 3, it <path> is assumed to be absolue; this is arranged by the builder.
			//
			// To load a bundle means to insert the bundle into the plugin's cache and publish the bundle
			// value to the loader. Given <path>, <bundle>, and a particular <locale>, the cache key
			//
			//   <path>/nls/<bundle>/<locale>
			//
			// will hold the value. Similarly, then plugin will publish this value to the loader by
			//
			//   define("<path>/nls/<bundle>/<locale>", <bundle-value>);
			//
			// Given this algorithm, other machinery can provide fast load paths be preplacing
			// values in the plugin's cache, which is public. When a load is demanded the
			// cache is inspected before starting any loading. Explicitly placing values in the plugin
			// cache is an advanced/experimental feature that should not be needed; use at your own risk.
			//
			// For the normal AMD algorithm, the root bundle is loaded first, which instructs the
			// plugin what additional localized bundles are required for a particular locale. These
			// additional locales are loaded and a mix of the root and each progressively-specific
			// locale is returned. For example:
			//
			// 1. The client demands "dojo/i18n!some/path/nls/someBundle
			//
			// 2. The loader demands load(some/path/nls/someBundle)
			//
			// 3. This plugin require's "some/path/nls/someBundle", which is the root bundle.
			//
			// 4. Assuming config.locale is "ab-cd-ef" and the root bundle indicates that localizations
			//    are available for "ab" and "ab-cd-ef" (note the missing "ab-cd", then the plugin
			//    requires "some/path/nls/ab/someBundle" and "some/path/nls/ab-cd-ef/someBundle"
			//
			// 5. Upon receiving all required bundles, the plugin constructs the value of the bundle
			//    ab-cd-ef as...
			//
			//      mixin(mixin(mixin({}, require("some/path/nls/someBundle"),
			//        require("some/path/nls/ab/someBundle")),
			//          require("some/path/nls/ab-cd-ef/someBundle"));
			//
			//    This value is inserted into the cache and published to the loader at the
			//    key/module-id some/path/nls/someBundle/ab-cd-ef.
			//
			// The special preload signature (case 3) instructs the plugin to stop servicing all normal requests
			// (further preload requests will be serviced) until all ongoing preloading has completed.
			//
			// The preload signature instructs the plugin that a special rollup module is available that contains
			// one or more flattened, localized bundles. The JSON array of available locales indicates which locales
			// are available. Here is an example:
			//
			//   *preload*some/path/nls/someModule*["root", "ab", "ab-cd-ef"]
			//
			// This indicates the following rollup modules are available:
			//
			//   some/path/nls/someModule_ROOT
			//   some/path/nls/someModule_ab
			//   some/path/nls/someModule_ab-cd-ef
			//
			// Each of these modules is a normal AMD module that contains one or more flattened bundles in a hash.
			// For example, assume someModule contained the bundles some/bundle/path/someBundle and
			// some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as folllows:
			//
			// define({
			//   some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,
			//   some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,
			// });
			//
			// E.g., given this design, preloading for locale=="ab" can execute the following algorithm:
			//
			// require(["some/path/nls/someModule_ab"], function(rollup){
			//   for(var p in rollup){
			//     var id = p + "/ab",
			//     cache[id] = rollup[p];
			//     define(id, rollup[p]);
			//   }
			// });
			//
			// Similarly, if "ab-cd" is requested, the algorithm can determine that "ab" is the best available and
			// load accordingly.
			//
			// The builder will write such rollups for every layer if a non-empty localeList  profile property is
			// provided. Further, the builder will include the following cache entry in the cache associated with
			// any layer.
			//
			//   "*now":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}
			//
			// The *now special cache module instructs the loader to apply the provided function to context-require
			// with respect to the particular layer being defined. This causes the plugin to hold all normal service
			// requests until all preloading is complete.
			//
			// Notice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case
			// where the target locale has a single segment and a layer depends on a single bundle:
			//
			// Without Preloads:
			//
			//   1. Layer loads root bundle.
			//   2. bundle is demanded; plugin loads single localized bundle.
			//
			// With Preloads:
			//
			//   1. Layer causes preloading of target bundle.
			//   2. bundle is demanded; service is delayed until preloading complete; bundle is returned.
			//
			// In each case a single transaction is required to load the target bundle. In cases where multiple bundles
			// are required and/or the locale has multiple segments, preloads still requires a single transaction whereas
			// the normal path requires an additional transaction for each additional bundle/locale-segment. However all
			// of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading
			// algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.
			//
			if(1){
				var split = id.split("*"),
					preloadDemand = split[1]=="preload";
				if(preloadDemand){
					if(!cache[id]){
						// use cache[id] to prevent multiple preloads of the same preload; this shouldn't happen, but
						// who knows what over-aggressive human optimizers may attempt
						cache[id] = 1;
						preloadL10n(split[2], json.parse(split[3]), 1);
					}
					// don't stall the loader!
					load(1);
				}
				if(preloadDemand || waitForPreloads(id, require, load)){
					return;
				}
			}

			var match= nlsRe.exec(id),
				bundlePath= match[1] + "/",
				bundleName= match[5] || match[4],
				bundlePathAndName= bundlePath + bundleName,
				localeSpecified = (match[5] && match[4]),
				targetLocale=  localeSpecified || dojo.locale,
				loadTarget= bundlePathAndName + "/" + targetLocale,
				loadList = localeSpecified ? [targetLocale] : getLocalesToLoad(targetLocale),
				remaining = loadList.length,
				finish = function(){
					if(!--remaining){
						load(lang.delegate(cache[loadTarget]));
					}
				};
			array.forEach(loadList, function(locale){
				var target = bundlePathAndName + "/" + locale;
				if(1){
					checkForLegacyModules(target);
				}
				if(!cache[target]){
					doLoad(require, bundlePathAndName, bundlePath, bundleName, locale, finish);
				}else{
					finish();
				}
			});
		};

	if(has("dojo-unit-tests")){
		var unitTests = thisModule.unitTests = [];
	}

	if(1 || 1){
		var normalizeLocale = thisModule.normalizeLocale= function(locale){
				var result = locale ? locale.toLowerCase() : dojo.locale;
				return result == "root" ? "ROOT" : result;
			},

			isXd = function(mid){
				return (1 && 1) ?
					require.isXdUrl(require.toUrl(mid + ".js")) :
					true;
			},

			preloading = 0,

			preloadWaitQueue = [],

			preloadL10n = thisModule._preloadLocalizations = function(/*String*/bundlePrefix, /*Array*/localesGenerated, /*boolean*/ guaranteedAmdFormat){
				//	summary:
				//		Load available flattened resource bundles associated with a particular module for dojo.locale and all dojo.config.extraLocale (if any)
				//
				//  descirption:
				//		Only called by built layer files. The entire locale hierarchy is loaded. For example,
				//		if locale=="ab-cd", then ROOT, "ab", and "ab-cd" are loaded. This is different than v1.6-
				//		in that the v1.6- would lonly load ab-cd...which was *always* flattened.
				//
				//		If guaranteedAmdFormat is true, then the module can be loaded with require thereby circumventing the detection algorithm
				//		and the extra possible extra transaction.
				//

				function forEachLocale(locale, func){
					// given locale= "ab-cd-ef", calls func on "ab-cd-ef", "ab-cd", "ab", "ROOT"; stops calling the first time func returns truthy
					var parts = locale.split("-");
					while(parts.length){
						if(func(parts.join("-"))){
							return true;
						}
						parts.pop();
					}
					return func("ROOT");
				}

				function preload(locale){
					locale = normalizeLocale(locale);
					forEachLocale(locale, function(loc){
						if(array.indexOf(localesGenerated, loc)>=0){
							var mid = bundlePrefix.replace(/\./g, "/")+"_"+loc;
							preloading++;
							(isXd(mid) || guaranteedAmdFormat ? require : syncRequire)([mid], function(rollup){
								for(var p in rollup){
									cache[p + "/" + loc] = rollup[p];
								}
								--preloading;
								while(!preloading && preloadWaitQueue.length){
									load.apply(null, preloadWaitQueue.shift());
								}
							});
							return true;
						}
						return false;
					});
				}

				preload();
				array.forEach(dojo.config.extraLocale, preload);
			},

			waitForPreloads = function(id, require, load){
				if(preloading){
					preloadWaitQueue.push([id, require, load]);
				}
				return preloading;
			};
	}

	if(1){
		// this code path assumes the dojo loader and won't work with a standard AMD loader
		var evalBundle=
				// use the function ctor to keep the minifiers away (also come close to global scope, but this is secondary)
				new Function(
					"__bundle",                // the bundle to evalutate
					"__checkForLegacyModules", // a function that checks if __bundle defined __mid in the global space
					"__mid",                   // the mid that __bundle is intended to define

					// returns one of:
					//		1 => the bundle was an AMD bundle
					//		a legacy bundle object that is the value of __mid
					//		instance of Error => could not figure out how to evaluate bundle

					  // used to detect when __bundle calls define
					  "var define = function(){define.called = 1;},"
					+ "    require = function(){define.called = 1;};"

					+ "try{"
					+		"define.called = 0;"
					+		"eval(__bundle);"
					+		"if(define.called==1)"
								// bundle called define; therefore signal it's an AMD bundle
					+			"return 1;"

					+		"if((__checkForLegacyModules = __checkForLegacyModules(__mid)))"
								// bundle was probably a v1.6- built NLS flattened NLS bundle that defined __mid in the global space
					+			"return __checkForLegacyModules;"

					+ "}catch(e){}"
					// evaulating the bundle was *neither* an AMD *nor* a legacy flattened bundle
					// either way, re-eval *after* surrounding with parentheses

					+ "try{"
					+ 		"return eval('('+__bundle+')');"
					+ "}catch(e){"
					+ 		"return e;"
					+ "}"
				),

			syncRequire= function(deps, callback){
				var results= [];
				array.forEach(deps, function(mid){
					var url= require.toUrl(mid + ".js");

					function load(text){
						var result = evalBundle(text, checkForLegacyModules, mid);
						if(result===1){
							// the bundle was an AMD module; re-inject it through the normal AMD path
							// we gotta do this since it could be an anonymous module and simply evaluating
							// the text here won't provide the loader with the context to know what
							// module is being defined()'d. With browser caching, this should be free; further
							// this entire code path can be circumvented by using the AMD format to begin with
							require([mid], function(bundle){
								results.push(cache[url]= bundle);
							});
						}else{
							if(result instanceof Error){
								console.error("failed to evaluate i18n bundle; url=" + url, result);
								result = {};
							}
							// nls/<locale>/<bundle-name> indicates not the root.
							results.push(cache[url] = (/nls\/[^\/]+\/[^\/]+$/.test(url) ? result : {root:result, _v1x:1}));
						}
					}

					if(cache[url]){
						results.push(cache[url]);
					}else{
						var bundle= require.syncLoadNls(mid);
						// don't need to check for legacy since syncLoadNls returns a module if the module
						// (1) was already loaded, or (2) was in the cache. In case 1, if syncRequire is called
						// from getLocalization --> load, then load will have called checkForLegacyModules() before
						// calling syncRequire; if syncRequire is called from preloadLocalizations, then we
						// don't care about checkForLegacyModules() because that will be done when a particular
						// bundle is actually demanded. In case 2, checkForLegacyModules() is never relevant
						// because cached modules are always v1.7+ built modules.
						if(bundle){
							results.push(bundle);
						}else{
							if(!xhr){
								try{
									require.getText(url, true, load);
								}catch(e){
									results.push(cache[url]= {});
								}
							}else{
								xhr.get({
									url:url,
									sync:true,
									load:load,
									error:function(){
										results.push(cache[url]= {});
									}
								});
							}
						}
					}
				});
				callback && callback.apply(null, results);
			},

			checkForLegacyModules = function(target){
				// legacy code may have already loaded [e.g] the raw bundle x/y/z at x.y.z; when true, push into the cache
				for(var result, names = target.split("/"), object = dojo.global[names[0]], i = 1; object && i<names.length-1; object = object[names[i++]]){}
				if(object){
					result = object[names[i]];
					if(!result){
						// fallback for incorrect bundle build of 1.6
						result = object[names[i].replace(/-/g,"_")];
					}
					if(result){
						cache[target] = result;
					}
				}
				return result;
			};

		thisModule.getLocalization= function(moduleName, bundleName, locale){
			var result,
				l10nName= getL10nName(moduleName, bundleName, locale).substring(10);
			load(l10nName, (!isXd(l10nName) ? syncRequire : require), function(result_){ result= result_; });
			return result;
		};

		if(has("dojo-unit-tests")){
			unitTests.push(function(doh){
				doh.register("tests.i18n.unit", function(t){
					var check;

					check = evalBundle("{prop:1}");
					t.is({prop:1}, check); t.is(undefined, check[1]);

					check = evalBundle("({prop:1})");
					t.is({prop:1}, check); t.is(undefined, check[1]);

					check = evalBundle("{'prop-x':1}");
					t.is({'prop-x':1}, check); t.is(undefined, check[1]);

					check = evalBundle("({'prop-x':1})");
					t.is({'prop-x':1}, check); t.is(undefined, check[1]);

					check = evalBundle("define({'prop-x':1})");
					t.is(1, check);

					check = evalBundle("this is total nonsense and should throw an error");
					t.is(check instanceof Error, true);
				});
			});
		}
	}

	return lang.mixin(thisModule, {
		dynamic:true,
		normalize:normalize,
		load:load,
		cache:cache
	});
});

},
'dojox/encoding/digests/SHA1':function(){
define("dojox/encoding/digests/SHA1", ["./_base"], function(dxd) {

	/*=====
		dxd = dojox.encoding.digests;
	=====*/

/*
 * A port of Paul Johnstone's SHA1 implementation
 *
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 *
 * Dojo port by Tom Trenka
 */

	var chrsz=8,	//	change to 16 for unicode.
		mask=(1<<chrsz)-1;

	function R(n,c){ return (n<<c)|(n>>>(32-c)); }
	function FT(t,b,c,d){
		if(t<20){ return (b&c)|((~b)&d); }
		if(t<40){ return b^c^d; }
		if(t<60){ return (b&c)|(b&d)|(c&d); }
		return b^c^d;
	}
	function KT(t){ return (t<20)?1518500249:(t<40)?1859775393:(t<60)?-1894007588:-899497514; }

	function core(x,len){
		x[len>>5]|=0x80<<(24-len%32);
		x[((len+64>>9)<<4)+15]=len;

		var w=new Array(80), a=1732584193, b=-271733879, c=-1732584194, d=271733878, e=-1009589776;
		for(var i=0; i<x.length; i+=16){
			var olda=a, oldb=b, oldc=c, oldd=d, olde=e;
			for(var j=0;j<80;j++){
				if(j<16){ w[j]=x[i+j]; }
				else { w[j]=R(w[j-3]^w[j-8]^w[j-14]^w[j-16],1); }
				var t = dxd.addWords(dxd.addWords(R(a,5),FT(j,b,c,d)),dxd.addWords(dxd.addWords(e,w[j]),KT(j)));
				e=d; d=c; c=R(b,30); b=a; a=t;
			}
			a=dxd.addWords(a,olda);
			b=dxd.addWords(b,oldb);
			c=dxd.addWords(c,oldc);
			d=dxd.addWords(d,oldd);
			e=dxd.addWords(e,olde);
		}
		return [a, b, c, d, e];
	}

	function hmac(data, key){
		var wa=toWord(key);
		if(wa.length>16){ wa=core(wa, key.length*chrsz); }

		var ipad=new Array(16), opad=new Array(16);
		for(var i=0;i<16;i++){
			ipad[i]=wa[i]^0x36363636;
			opad[i]=wa[i]^0x5c5c5c5c;
		}

		var hash=core(ipad.concat(toWord(data)),512+data.length*chrsz);
		return core(opad.concat(hash), 512+160);
	}

	function toWord(s){
		var wa=[];
		for(var i=0, l=s.length*chrsz; i<l; i+=chrsz){
			wa[i>>5]|=(s.charCodeAt(i/chrsz)&mask)<<(32-chrsz-i%32);
		}
		return wa;	//	word[]
	}

	function toHex(wa){
		//	slightly different than the common one.
		var h="0123456789abcdef", s=[];
		for(var i=0, l=wa.length*4; i<l; i++){
			s.push(h.charAt((wa[i>>2]>>((3-i%4)*8+4))&0xF), h.charAt((wa[i>>2]>>((3-i%4)*8))&0xF));
		}
		return s.join("");	//	string
	}

	function _toString(wa){
		var s=[];
		for(var i=0, l=wa.length*32; i<l; i+=chrsz){
			s.push(String.fromCharCode((wa[i>>5]>>>(32-chrsz-i%32))&mask));
		}
		return s.join("");	//	string
	}

	function toBase64(/* word[] */wa){
		//	summary:
		//		convert an array of words to base64 encoding, should be more efficient
		//		than using dojox.encoding.base64
		var p="=", tab="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s=[];
		for(var i=0, l=wa.length*4; i<l; i+=3){
			var t=(((wa[i>>2]>>8*(3-i%4))&0xFF)<<16)|(((wa[i+1>>2]>>8*(3-(i+1)%4))&0xFF)<<8)|((wa[i+2>>2]>>8*(3-(i+2)%4))&0xFF);
			for(var j=0; j<4; j++){
				if(i*8+j*6>wa.length*32){
					s.push(p);
				} else {
					s.push(tab.charAt((t>>6*(3-j))&0x3F));
				}
			}
		}
		return s.join("");	//	string
	};

	//	public function
	dxd.SHA1=function(/* String */data, /* dojox.encoding.digests.outputTypes? */outputType){
		//	summary:
		//		Computes the SHA1 digest of the data, and returns the result according to output type.
		var out=outputType||dxd.outputTypes.Base64;
		var wa=core(toWord(data), data.length*chrsz);
		switch(out){
			case dxd.outputTypes.Raw:{
				return wa;	//	word[]
			}
			case dxd.outputTypes.Hex:{
				return toHex(wa);	//	string
			}
			case dxd.outputTypes.String:{
				return _toString(wa);	//	string
			}
			default:{
				return toBase64(wa);	//	string
			}
		}
	}

	//	make this private, for later use with a generic HMAC calculator.
	dxd.SHA1._hmac=function(/* string */data, /* string */key, /* dojox.encoding.digests.outputTypes? */outputType){
		//	summary:
		//		computes the digest of data, and returns the result according to type outputType
		var out=outputType || dxd.outputTypes.Base64;
		var wa=hmac(data, key);
		switch(out){
			case dxd.outputTypes.Raw:{
				return wa;	//	word[]
			}
			case dxd.outputTypes.Hex:{
				return toHex(wa);	//	string
			}
			case dxd.outputTypes.String:{
				return _toString(wa);	//	string
			}
			default:{
				return toBase64(wa);	//	string
			}
		}
	};

	return dxd.SHA1;
});

},
'dojo/data/util/simpleFetch':function(){
define("dojo/data/util/simpleFetch", ["dojo/_base/lang", "dojo/_base/window", "./sorter"], 
  function(lang, winUtil, sorter) {
	// module:
	//		dojo/data/util/simpleFetch
	// summary:
	//		TODOC

var simpleFetch = lang.getObject("dojo.data.util.simpleFetch", true);

simpleFetch.fetch = function(/* Object? */ request){
	//	summary:
	//		The simpleFetch mixin is designed to serve as a set of function(s) that can
	//		be mixed into other datastore implementations to accelerate their development.
	//		The simpleFetch mixin should work well for any datastore that can respond to a _fetchItems()
	//		call by returning an array of all the found items that matched the query.  The simpleFetch mixin
	//		is not designed to work for datastores that respond to a fetch() call by incrementally
	//		loading items, or sequentially loading partial batches of the result
	//		set.  For datastores that mixin simpleFetch, simpleFetch
	//		implements a fetch method that automatically handles eight of the fetch()
	//		arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope
	//		The class mixing in simpleFetch should not implement fetch(),
	//		but should instead implement a _fetchItems() method.  The _fetchItems()
	//		method takes three arguments, the keywordArgs object that was passed
	//		to fetch(), a callback function to be called when the result array is
	//		available, and an error callback to be called if something goes wrong.
	//		The _fetchItems() method should ignore any keywordArgs parameters for
	//		start, count, onBegin, onItem, onComplete, onError, sort, and scope.
	//		The _fetchItems() method needs to correctly handle any other keywordArgs
	//		parameters, including the query parameter and any optional parameters
	//		(such as includeChildren).  The _fetchItems() method should create an array of
	//		result items and pass it to the fetchHandler along with the original request object
	//		-- or, the _fetchItems() method may, if it wants to, create an new request object
	//		with other specifics about the request that are specific to the datastore and pass
	//		that as the request object to the handler.
	//
	//		For more information on this specific function, see dojo.data.api.Read.fetch()
	request = request || {};
	if(!request.store){
		request.store = this;
	}
	var self = this;

	var _errorHandler = function(errorData, requestObject){
		if(requestObject.onError){
			var scope = requestObject.scope || winUtil.global;
			requestObject.onError.call(scope, errorData, requestObject);
		}
	};

	var _fetchHandler = function(items, requestObject){
		var oldAbortFunction = requestObject.abort || null;
		var aborted = false;

		var startIndex = requestObject.start?requestObject.start:0;
		var endIndex = (requestObject.count && (requestObject.count !== Infinity))?(startIndex + requestObject.count):items.length;

		requestObject.abort = function(){
			aborted = true;
			if(oldAbortFunction){
				oldAbortFunction.call(requestObject);
			}
		};

		var scope = requestObject.scope || winUtil.global;
		if(!requestObject.store){
			requestObject.store = self;
		}
		if(requestObject.onBegin){
			requestObject.onBegin.call(scope, items.length, requestObject);
		}
		if(requestObject.sort){
			items.sort(sorter.createSortFunction(requestObject.sort, self));
		}
		if(requestObject.onItem){
			for(var i = startIndex; (i < items.length) && (i < endIndex); ++i){
				var item = items[i];
				if(!aborted){
					requestObject.onItem.call(scope, item, requestObject);
				}
			}
		}
		if(requestObject.onComplete && !aborted){
			var subset = null;
			if(!requestObject.onItem){
				subset = items.slice(startIndex, endIndex);
			}
			requestObject.onComplete.call(scope, subset, requestObject);
		}
	};
	this._fetchItems(request, _fetchHandler, _errorHandler);
	return request;	// Object
};

return simpleFetch;
});

},
'curam/util':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012,2013. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*
 * Modification History
 * --------------------
 * 15-Apr-2014  JY [CR00425261] Refactored the print function to allow printing
 *                              the context panel.
 * 20-Feb-2014  AS [CR00414442] Skipped arrow and validation div of filtering 
 *                              select in doSetFocus and added a new method to 
 *                              focus the help icon on tab navigation after end 
 *                              of modal dialog. 
 * 28-Sep-2013  BOS [CR00396277] Added tests for undefined selected tab.
 * 07-Jun-2013 NLH  [CR00385557] Added highContrastModeType() funtion.
 * 11-Mar-2013  SB  [CR00372052] Added iframeTitleFallBack() function.
 * 21-Feb-2013  SB  [CR00369658] Updated setupGenericKeyHandler() to
					handle year field in Date Selector correctly.
 * 20-Feb-2013  MV  [CR00367727] Prevent opening multiple dialogs at once
 *      by clicking on link in quick succession.
 * 14-Dec-2012  SB  [CR00352283] Added removeRoleRegion() function to remove
 * 					aria role from multiselect.
 * 14-Dec-2012  JY  [CR00360602] Remove the hardcoded height for the actions 
 *                               panel.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 08-Nov-2012  SB  [CR00350381] Added focus setting code for error and
 *                  informational messages.
 * 23-Oct-2012  MV  [CR00347543] Refer to top level UIController.
 * 03-Oct-2012  SB  [CR00344085] Updated openGenericErrorModalDialog() function
 *      to include boolean check for error or warning modal.
 * 01-Oct-2012  MV  [CR00345339] Improve a way to determine topmost window.
 * 24-Sep-2012  MV  [CR00345119] Handle mailto: links properly across browsers.
 * 17-Sep-2012  MK  [CR00344397] Updated incorrect calls to method called 
 *              hasClass to reference correct method called contains instead.
 * 17-Sep-2012  SB  [CR00341890] Added title attribute for page level action
 * 				    menu of the type submit.
 * 11-Sep-2012  MV  [CR00339639] Use local storage API from topmost window to
 *      avoid loading storage for every page. Move a function to this module. 
 * 06-Sep-2012  AF  [CR00330559] Added skip link focus method.
 * 31-Aug-2012  MK  [CR00339638] Reverted connect and disconnect functions back
 *              to previous versions. Added in searchButtonStatus that was 
 *              missed in the merge from TI_60.
 * 23-Aug-2012  BOS [CR00338361] Added the openGenericErrorModalDialog fucntion. 
 * 23-Jul-2012  MV  [CR00336202] Handle gracefully when no tab is open on dialog
 *              submit. Migrate to take on Dojo 1.7.3
 * 26-Jun-2012  SB  [CR00332545] Added searchButtonStatus() function.
 * 28-May-2012  MV  [CR00326704] Fix click event handling for row action menus.
 * 30-Apr-2012  MK  [CR00319243] Updated condition in isSameUrl function to
 *      check if the base string is the same. 
 * 24-Apr-2012  AF  [CR00317721] Updated online help URL in openHelpPage method. 
 * 14-Mar-2012  SB  [CR00312247] Added openAbout() function
 * 07-Feb-2012  MV  [CR00301458] Code cleanup - added comments,
 *      removed unused code.
 * 13-Dec-2011  BOS [CR00299497] Updating the getTopmostWindow() function
 *                    to check that the Screen Context is defined.
 * 02-Dec-2011  BOS [CR00298234] Updating the getTopmostWindow() function
 *                 in order to support portlets.
 * 05-Oct-2011  PK  [CR00289859] Dojo 1.6.1 upgrade and IE9+ support. 
 * 06-Sep-2011  MV  [CR00286500] Don't fail when Preferences anchor not found. 
 * 05-Aug-2011  MV  [CR00283589] Remove incorrect code from connect().
 * 02-Aug-2011  MV  [CR00283023] Some refactoring to allow unit testing.
 * 01-Aug-2011  MV  [CR00283020] Refactored redirectWindow() to allow unit
 *      testing.
 * 29-Jul-2011  MV  [CR00269970] Define curam.util using dojo.mixin to avoid
 *      overwriting other class definitions in the same package. Add support
 *      for new UI refresh handling implementation.
 * 28-Jul-2011  MV  [] Handle the FORCE_REFRESH case fully
 *      in redirectWindow()
 * 05-Jul-2011  KW  [CR00275353] Added setRpu() function and refactored
 *                                openLocaleSelector().
 * 18-Jul-2011  KW  [CR00277581] Connect() now strips '#' from end of event URL
 * 13-Jun-2011  MV  [CR00269902] Avoid 404 error coming from bad RPU.
 * 25-May-2011  MV  [CR00267843] Add function for setting up the Preferences
 *    link.
 * 29-Apr-2011  SC  [CR00264826] Modified page load event to include context.
 * 27-Apr-2011  MV [CR00265188] Added support for opening pages in new tab from
 *    dialog opened in the INLINE_PAGE context.
 * 11-Apr-2011  AF [CR00262956] Modified setupGenericKeyHandler method to
 *                              support device independence.  
 * 01-Apr-2011  KW [CR00262936] Altered 'alterScrollableListBottomBorder' to
 *                              run after page has loaded
 * 25-Mar-2011  SK [TEC-6335] Removed jsModals indicator as modals are always
 *     on for v6 
 * 25-Feb-2011  MV [CR00254937] Honour the RPU set by LinkTag when redirecting
 *     content panel.
 * 25-Feb-2011  MV [CR00254380] Prepare for fix: Honour the RPU set by LinkTag
 *    when redirecting content panel.
 * 18-Feb-2011  MV [CR00247527] Do not block submit when text field has focus.
 * 16-Feb-2011  MV [CR00252701] Fix the isSameUrl() function to work for action
 *    pages that take no parameters.
 * 07-Feb-2011  SJ [CR00247527]  Fixed dropdown submit issue.
 * 07-Jan-2011  MV  [CR00251284] Add support for button load mask.
 * 31-Jan-2011  MK [CR00250297]  Update the clickButton function to handle both
 *    an object and an id as an argument.
 * 28-Jan-2011  MV [CR00245381]  Remove obsolete help settings for dialogs.
 * 26-Jan-2011  MV  [CR00244801] Added another type of refresh behaviour. Strip
 *    o3rpu from RPU value.
 * 25-Jan-2011  MV  [CR00244623] Refactored the function for firing onsubmit
 *    events to work with the latest tab infrastructure changes.
 * 25-Jan-2011  PK  [CR00244773] Filtered all CDEJ parameters from comparison
 *                    in isSameURL. Previously only __o3rpu was filtered.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 21-Jan-2011  MV  [CR00243263] Add 1px to page height when in list row.
 *    Implement "force refresh" behaviour.
 * 20-Jan-2010  AF  [CR00243728] Added page toolbar button mouse effects.
 * 20-Jan-2010  MK  [CR00243648] Update getPageHeight function to take into
 *                    account the wizard progress bar.
 * 18-Jan-2010  AF  [CR00243204] Modified replaceSubmitButton function for the
 *                               agenda player.
 * 17-Jan-2010 MV [CR00242255] Remove the use of dijit.focus()
 * 16-Jan-2010  PK  [CR00242698] Changed file down load method for list row
 *                    menus so errors will be correctly reported.
 * 14-Jan-2011  MK  [CR00240138] Updated showModalDialog function to remove
 *                    contexts that were not needed in a modal.
 * 06-Jan-2011 KW [CR00240549] Added function to prevent overlapping of Action
 *                             set buttons of modals
 * 04-Jan-2011 MV [CR00240081] Fixes to the getPageHeight() function.
 * 15-Dec-2010 KW [CR00238785] Stopped the refresh event when submit button
 *                             clicked
 * 10-Dec-2010  AF  [CR00233054] Added button mouse event functions that will
 *                               add specific CSS class names when modal and
 *                               cluster buttons are clicked or rolled over.
 * 07-Dec-2010  MV  [CR00233442] Adjustments to the getPageHeight() function
 *    to bring the expandable list detail row more in line with
 *    the specification.
 * 08-Dec-2010  SJ  [CR00229344] Added the print functionality.
 * 03-Dec-2010  MV  [CR00232963] Optimize swapState() function.
 * 30-Nov-2010  MV  [CR00232623] Remove extra height when in-page navigation
 *    is present.
 * 24-Nov-2010  PK  [TEC-XXXX] Added NESTED_UIM context.
 * 23-Nov-2010  MV  [CR00232063] Remove page loading mask.
 * 18-Nov-2010 MV [CR00231387] Connect to DOM events with a function that will
 *    automatically disconnect on page unload.
 * 18-Nov-2010  SJ [CR00228391]Fixed the issue with OPEN_NEW attribute on
 *                   List Row Actions Menu links.
 * 01-Nov-2010  SD  [CR00225331] An extra parameter has been added to both
 *                     openModalDialog and showModalDialog functions for
 *                     UIMDialog API.
 * 27-Oct-2010  SK   [CR00224193] Changed the redirection of the window so that
       the absence of the content panel not caused failure.
 * 14-Oct-2010  MV [CR00223441] Move functions to different namespaces.
 *    Add getSuffixFromClass function.
 * 29-Sep-2010  MV  [CR00221605] Enable submitting by pressing Enter. Check
 *    for existence of dijit before accesing it.
 * 18-Sep-2010  PK  [CR00204622] Ensure when a page loads for the first time
 *                    in an expandable list, only the "expandedList.toggle"
 *                    event is processed.
 * 17-Sep-2010  MV  [CR00220607] Set page focus only when the whole page
 *                    is loaded. Use dijit.focus() instead of plain element
 *                    focus().
 * 14-Sep-2010  MV  [CR00220152] Add the getLastPathSegmentWithQueryString
 *                    function and also use it where appropriate in this file.
 * 10-Sep-2010  MV  [CR00219824] The focus setting function now indicates
 *                    the result via its return value.
 * 14-Sep-2010  PK  [CR00219843] Fixed expandable list sizing.
 * 08-Sep-2010  MV  [CR00219540] Add support for loading pages in the same
 *                    dialog from the list actions menu.
 * 27-Aug-2010  MV  [CR00217499] Added the makeQueryString() function. Replaced
 *                  the use of escape() with the correct function.
 * 05-Jul-2010 BD [CR00204119]  Introduced use of UIMController in place of
 *                              iframe for expandable lists to cater for
 *                              In Page Navigation tabs.
 * 28-Jul-2010  PK  [CR00211736] Updated due to re-factoring of
 *                    tab-app-controller.js.
 * 27-Jul-2010  MK  [CR00211743] Optional display the help icon on a modal
 *                    dialog.
 * 22-Jul-2010  MV  [CR00211225] Fix page height calculation for inline row
 *                    pages.
 * 22-Jul-2010  JY  [CR00210937] add 10px spacing at the top of the actions
 *                    panel.
 * 20-Jul-2010  MV  [CR00211031] doSetFocus(): handle pages with no HTML form.
 * 15-Jul-2010  MV  [CR00210541] Moved focus handling for modals to
 *                    ModalDialog.js
 * 12-Jul-2010  MV  [CR00210064] Added swapState() function.
 * 10-Jul-2010  OK  [CR00209714] Added setupRemovePageMask function.
 * 06-Jul-2010  MV  [CR00180694] Added toCommaSeparatedList() function.
 * 05-Jul-2010  SOS [CR00209386] Added try/catch to getPageHeight() for when
 *                    it's called in a hidden iframe.
 * 02-Jul-2010  PK  [CR00203531] Extra null check added to listRowFrameLoaded
 *                    method.
 * 26-Jun-2010  MV  [CR00204069] Added getPageHeight() function. Used Curam
 *                    debug logger throughout the file.
 * 18-Jun-2010  MV  [CR00203864] Remove the code for automatically resizing the
 *                    details panel.
 * 17-Jun-2010  MV  [CR00202490] Create the iframe for expandable lists on
 *                    demand only.
 * 15-Jun-2010  FG  [CR00202535] Added in some further functions required by the
 *                    application search functionality.
 * 01-Jun-2010  FG  [CR00200968] Added in some functions required by the
 *                    application search functionality.
 * 11-May-2010  SJ  [CR00198617] Implemented caching on expandable list row
 *                    level actions. As a fix CACHE_BUSTER,
 *                    CACHE_BUSTER_PARAM_NAME parameters are added and the same
 *                    are appended to the iframe source.
 * 11-May-2010  MV  [CR00196066] Added stripeTable() function.
 * 22-Apr-2010  AF  [CR00194043] Added 3 pixels to autoSizeDetailsPane's frame
 *                    height which removes an unwanted vertical scroll bar from
 *                    appearing on the details panel.
 * 23-Apr-2010  MV  [CR00194352] Avoid adding extra ampersand in
 *                    addUrlParameter() if there are no more parameters to add.
 * 07-Apr-2010  BD  [CR00191597] Renamed resizeDetailsPanel() function to
 *                    autoSizeDetailsPanel() to better reflect its function.
 *                    Refactored to handle new html structure.
 * 18-Mar-2010  PK  [CR00191211] Added toggleListDetailsRow.
 * 24-Feb-2010  MV  [CR00189738] Re-enable focus on the first editable field in
 *                    modals.
 * 23-Feb-2010  AF  [CR00189289] Added iframe title as a parameter in the iframe
 *                    upload publish event.
 * 16-Feb-2010  BD  [CR00183006] Add try/catch block to addContentWidthListener
 *                    function. Swallows an exception that does not effect the
 *                    application.
 * 08-Jan-2010  MV  [CR00182272] Added a localizable error message for the
 *                    language selector.
 * 11-Dec-2009  MV  [CR00173949] Remove the SrPopUp target from the modal
 *                    handler form.
 * 25-Nov-2009  MV  [CR00175955] Set focus to the first control when the
 *                    curam.modalDisplayed event happens.
 * 24-Nov-2009  MV  [CR00175837] Add new fireTabOpenedEvent function and a
 *                    missing require for curam.tab.
 * 20-Nov-2009  MV  [CR00175615] Fix the firePageSubmittedEvent function.
 * 20-Nov-2009  MV  [CR00175581] Fix the curam.tab.redirectContentPanel call.
 */
  
define("curam/util", ["dojo/dom", "dijit/registry",
        "dojo/dom-construct",
        "dojo/ready",
        "dojo/_base/window",
        "dojo/dom-style",
        "dojo/_base/array",
        "dojo/dom-class",
        "dojo/topic",
        "dojo/_base/event",
        "dojo/query",
        "dojo/has",
        "dojo/_base/unload",
        "dojo/dom-geometry",
        "dojo/_base/json",
        "dojo/dom-attr",
        "dojo/_base/lang",
        "dojo/on",
        
        "curam/define",
        /* "dojox/storage", */
        "curam/debug",
        "curam/util/RuntimeContext",
        "curam/util/Constants",
        "dojo/_base/sniff",
        "cm/_base/_dom",
        "curam/util/ResourceBundle"
        ], function(dom, registry, domConstruct, ready, windowBase, style,
            array, domClass, topic, dojoEvent, query, has, unload,
            geom, json, attr, lang, on) {

/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");
  
/**
 * @name      curam.util
 * @namespace Functions for generic utiltities across CDEJ.
 */
curam.define.singleton("curam.util",
/**
 * @lends curam.util.prototype
 */
{
  PREVENT_CACHE_FLAG: "o3pc",
  INFORMATIONAL_MSGS_STORAGE_ID: "__informationals__",
  ERROR_MESSAGES_CONTAINER: "error-messages-container",
  ERROR_MESSAGES_LIST: "error-messages",
  CACHE_BUSTER: 0,
  CACHE_BUSTER_PARAM_NAME: "o3nocache",
  msgLocaleSelectorActionPage: "$not-locaized$ Usage of the Language Selector is not permitted from an editable page that has previously been submitted.",

  insertCssText: function(cssString, styleNodeId) {
    var id = styleNodeId ? styleNodeId : "_runtime_stylesheet_";
      var styleSheetNode = dom.byId(id);
    var rmNode;

    if(styleSheetNode) {
      if(styleSheetNode.styleSheet) {
        cssString = styleSheetNode.styleSheet.cssText + cssString;
        rmNode = styleSheetNode;
        rmNode.setAttribute("id", "_nodeToRm");
      } else {
        styleSheetNode.appendChild(document.createTextNode(cssString));
        return;
      }
    }

    var pa = document.getElementsByTagName('head')[0];
      styleSheetNode = domConstruct.create("style", {
      type: "text/css",
      id: id
    });

    if(styleSheetNode.styleSheet) {
      styleSheetNode.styleSheet.cssText = cssString;
    }
    else{
      styleSheetNode.appendChild(document.createTextNode(cssString));
    }
    pa.appendChild(styleSheetNode);
    if(rmNode) {
      rmNode.parentNode.removeChild(rmNode);
    }
  },

  fireRefreshTreeEvent: function() {
      if (dojo.global.parent && dojo.global.parent.amIFrame) {
        var wpl = dojo.global.parent.loader;
    }
    if(wpl && wpl.dojo) {
      wpl.dojo.publish("refreshTree");
    }
  },

  /**
   * Invoked when a form is submitted on a page in any context.
   *
   * This event tracks submitting of pages anywhere in the application
   * to enable proper UI refresh handling.
   * 
   * @param {String} context Specifies the context in which the submit
   *     happenned. The expected values are [main-content|dialog].
   */
  firePageSubmittedEvent: function(context) {
    require(["curam/tab"], function() {
      /*
       * This function is executed at onsubmit event and the call to
       * curam.tab.getContainerTab() below was failing in this scenario.
       * Using curam.tab.getSelectedTab() instead works fine.
       * Note that before refactoring to remove the use of getSelectedTab()
       * further changes will have to be made to make it work.
       */
      var sourceTab = curam.tab.getSelectedTab();
      if (sourceTab) {
        var tabWidgetId = curam.tab.getTabWidgetId(sourceTab);
  
        var topWin = curam.util.getTopmostWindow();
        var ctx = (context == "dialog")
            ? curam.util.ui.refresh.RefreshEvent.prototype.SOURCE_CONTEXT_DIALOG
            : curam.util.ui.refresh.RefreshEvent.prototype.SOURCE_CONTEXT_MAIN;
        topWin.curam.util.Refresh.getController(tabWidgetId).pageSubmitted(
                dojo.global.jsPageID, ctx);
        topWin.dojo.publish("/curam/main-content/page/submitted",
                [dojo.global.jsPageID, tabWidgetId]);

      } else {
        curam.debug.log("/curam/main-content/page/submitted: " // don't localize
            + bundle.getProperty("curam.util.no.open")); // FIXME: localize
      }
    });
  },

  fireTabOpenedEvent: function(tabWidgetId) {
    // Publish the tab opened event
    curam.util.getTopmostWindow().dojo.publish("curam.tabOpened",
          [dojo.global.jsPageID, tabWidgetId]);
  },

  /**
   * Setup the submit event publisher for the main content panel.
   */
  setupSubmitEventPublisher: function() {
      ready(function() {
        var form = dom.byId('mainForm');
      if (form) {
        curam.util.connect(form, 'onsubmit', function() {
          curam.util.firePageSubmittedEvent("main-content");
        });
      }
    });
  },

  getScrollbar: function(){
    //  summary
    //  returns the width of a scrollbar.

    //  set up the test nodes.
      var scroll = domConstruct.create("div", {}, windowBase.body());

      style.set(scroll, {
      width: "100px",
      height: "100px",
      overflow: "scroll",
      position: "absolute",
      top: "-300px",
      left: "0px"
    });

      var test = domConstruct.create("div", {}, scroll);

      style.set(test, {
      width: "400px",
      height: "400px"
    });

    var width = scroll.offsetWidth - scroll.clientWidth;
      domConstruct.destroy(scroll);

    //  we return an object because we may add additional info in the future.
    return { width: width };  //  object
  },

  // Returns true if the page is in a modal dialog, false otherwise.
  isModalWindow: function() {
    // the window.curamModal flag is set in curam.dialog.initModal()
      return (dojo.global.curamModal === undefined) ? false : true;
  },

  /**
   * Gets the top most window. If the screen context is set and contains the 
   * portlet context then the inner most window is returned, otherwise the 
   * topmost window window is returned starting with the current window object.
   */
  getTopmostWindow: function() {
    // check topmost window cache and cache it if it is not yet cached 
    if (typeof (dojo.global._curamTopmostWindow) == "undefined") {
      var parentWin = dojo.global;
      // if the screen context contains portlet context then
      // return parent window
      if (typeof(dojo.global.jsScreenContext) != "undefined" 
            && dojo.global.jsScreenContext.hasContextBits('CONTEXT_PORTLET')) {
          dojo.global._curamTopmostWindow = parentWin;
      } else if (parentWin.__extAppTopWin) {
        dojo.global._curamTopmostWindow = parentWin;
      } else {
        while (parentWin.parent != parentWin) {
          parentWin = parentWin.parent;
          if (parentWin.__extAppTopWin) {
            // found the top window of a public facing app
            break;
          }
        }
        dojo.global._curamTopmostWindow = parentWin;
      }
    }
    
    // report cases of incorrect topmost window
    if (dojo.global._curamTopmostWindow.location.href.indexOf(
        "AppController.do") < 0
        && typeof(dojo.global._curamTopmostWindow.__extAppTopWin) 
           == "undefined") {
      curam.debug.log(bundle.getProperty("curam.util.wrong.window")
          + dojo.global._curamTopmostWindow.location.href);
    }

    return dojo.global._curamTopmostWindow;
  },

  getUrlParamValue: function(url, paramName) {
    var qPos = url.indexOf("?");
    if(qPos < 0) {return null;}
    var paramStr = url.substring(qPos + 1, url.length);

    function getVal(delim) {
      var params = paramStr.split(delim);

      paramName += "=";
      for(var i = 0; i < params.length; i++) {
        if(params[i].indexOf(paramName) == 0){
          return params[i].split("=")[1];
        }
      }
    }

    return getVal("&") || getVal("");
  },

  addUrlParam: function(href, paramName, paramValue, prepend) {
    var hasQ = href.indexOf("?") > -1;
    var doPrepend = prepend ? prepend : 'undefined';

    if (!hasQ || (doPrepend == false)) {
      return href + (hasQ ? "&" : "?") + paramName + "=" + paramValue;

    } else {
      var parts = href.split("?");
      href = parts[0] + "?" + paramName + "=" + paramValue + (parts[1] != "" ? ("&" + parts[1]) : "");
      return href;
    }
  },

  replaceUrlParam: function(href, paramName, newValue) {
    href = curam.util.removeUrlParam(href, paramName);
    return curam.util.addUrlParam(href, paramName, newValue);
  },

  removeUrlParam: function(url, paramName, /*optional*/paramValue) {
    var qPos = url.indexOf("?");
    if(qPos < 0) {return url;}
    if(url.indexOf(paramName + "=") < 0){return url;}//shortcut

    var paramStr = url.substring(qPos + 1, url.length);
    var params = paramStr.split("&");
    var value;
    var paramParts, doRemove;

    for(var i = 0; i < params.length; i++) {
      if (params[i].indexOf(paramName+"=") == 0) {
        doRemove = false;
        if(paramValue) {
          paramParts = params[i].split("=");
          if (paramParts.length > 1) {
            if (paramParts[1] == paramValue){
              doRemove = true;
            }

          } else if ( paramValue == "") {
            doRemove = true;
          }

        } else {
          doRemove = true;
        }

        if(doRemove) {
          //remove the parameter from the array
          params.splice(i, 1);
          //in case the param is in the url more than once, keep checking
          i--;
        }
      }
    }
    return url.substring(0, qPos + 1) + params.join("&");
  },

  //Remove the hash symbol, and everything that follows it, from a url.
  stripHash: function(url) {
    var idx = url.indexOf("#");
    if(idx < 0){return url;}
    return url.substring(0, url);
  },

  /**
   * Compares the specified URLs.
   * 
   * This ignores the order of parameters - identical parameters in different
   * orders will still return true.
   * 
   * If the second href is omitted, it defaults to the location
   * of the specified runtime context.
   * 
   * @param href1 First HREF.
   * @param href2 Second HREF.
   * @param rtc current runtime context.
   * 
   * @return True if the two urls are the same, false otherwise.
   */
  isSameUrl: function(href1, href2, rtc) {
    if (!href2) {
      href2 = rtc.getHref();
    }
    if (href1.indexOf("#") == 0) {
      return true;
    }

    // Remove the # symbols from the comparison.
    var hashIdx = href1.indexOf('#');
    if (hashIdx > -1) {
      //If the first URL starts with a #, then it is automatically equal to the
      //second URL
      if (hashIdx == 0) {
        return true;
      }

      var urlParts1 = href1.split("#");
      var hashIdx2 = href2.indexOf("#");

      //If the second URL has a hash symbol, remove it and everything after it,
      //then do the comparison
      if (hashIdx2 > -1) {
        if (hashIdx2 == 0) {
          return true;
        }
        href2 = href2.split("#")[0];
      }
      return urlParts1[0] == href2;
    }

    var stripPageOrActionFromUrl = function(url) {
      var idx = url.lastIndexOf("Page.do");
      var len = 7;
      if (idx < 0) {
        idx = url.lastIndexOf("Action.do");
        len = 9;
      }
      if (idx < 0) {
        idx = url.lastIndexOf("Frame.do");
        len = 8;
      }
      if (idx > -1 && idx == url.length - len) {
        return url.substring(0, idx);
      }
      return url;
    };

    var rp = curam.util.removeUrlParam;

    var here = curam.util.stripHash(rp(href2,
                    curam.util.Constants.RETURN_PAGE_PARAM));
    var there = curam.util.stripHash(rp(href1,
                    curam.util.Constants.RETURN_PAGE_PARAM));
    var partsThere = there.split("?");
    var partsHere = here.split("?");

    //Remove the Action.do or Page.do from the url
    partsHere[0] = stripPageOrActionFromUrl(partsHere[0]);
    partsThere[0] = stripPageOrActionFromUrl(partsThere[0]);

      // This check to see if the page names are the same assumes that the
      // functions above to strip parameters and page or actions from the url
      // have been run first. So the end of each string is only the name of
      // the page.
    var baseEqual = (partsHere[0] == partsThere[0]
          || partsHere[0].match(partsThere[0]+"$")==partsThere[0]);
      
    if (!baseEqual) {
      return false;
    }

    if (partsHere.length == 1 && partsThere.length == 1 && baseEqual) {
      //If the base URL is equal, and the parameter string is exactly equal,
      //then don't bother checking the unordered parameters. Just return true,
      //because they're equal
      return true;

    } else {
      //Check the values of all of the parameters, ignoring order of url
      //parameters
      var paramsHere;
      var paramsThere;
      if (typeof partsHere[1] != "undefined" && partsHere[1] != "") {
        paramsHere = partsHere[1].split("&");

      } else {
        // if there aren't any parameters create an empty array
        paramsHere = new Array();
      }

      if (typeof partsThere[1] != "undefined" && partsThere[1] != "") {
        paramsThere = partsThere[1].split("&");

      } else {
        // if there aren't any parameters create an empty array
        paramsThere = new Array();
      }

      // don't include CDEJ parameters in the comparison
      curam.debug.log(
          "curam.util.isSameUrl: paramsHere " 
          + bundle.getProperty("curam.util.before")
          + paramsHere.length);
        paramsHere = array.filter(paramsHere, curam.util.isNotCDEJParam);
      curam.debug.log(
          "curam.util.isSameUrl: paramsHere "
          + bundle.getProperty("curam.util.after")
          + paramsHere.length);

      curam.debug.log(
          "curam.util.isSameUrl: paramsHere " 
          + bundle.getProperty("curam.util.before")
          + paramsThere.length);
        paramsThere = array.filter(paramsThere, curam.util.isNotCDEJParam);
        curam.debug.log(
            "curam.util.isSameUrl: paramsHere "
            + bundle.getProperty("curam.util.after")
          + paramsThere.length);

      if (paramsHere.length != paramsThere.length) {
        return false;
      }

      var paramMap = {};
      var param;
      for (var i = 0; i < paramsHere.length; i++) {
        param = paramsHere[i].split("=");
        paramMap[param[0]] = param[1];
      }
      for (var i = 0; i < paramsThere.length; i++) {
        param = paramsThere[i].split("=");
        if (paramMap[param[0]] != param[1]) {
          curam.debug.log(bundle.getProperty("curam.util.no.match",
              [param[0], param[1], paramMap[param[0]]]));
          return false;
        }
      }
    }

    //If the base url is the same, and all the parameters match, then
    //the urls are equal
    return true;
  },

  /**
   * Tests if the specified parameter name isn't a CDEJ parameter. It is used by
     * the array.filter used in the isSameUrl method.
   *
   * TODO: There is a similar method in PageRequest.js. Attempted to re-factor
   * but led to JavaScript errors in PageRequest.js when it was executed. Need
   * more time to work out dependency problem, for now duplicating the method.
   *
   * @return true if the specified parameter name is a CDEJ parameter, false
   *         otherwise.
   */
  isNotCDEJParam: function(paramName) {
    return !((paramName.charAt(0) == 'o' && paramName.charAt(1) == '3')
           || (paramName.charAt(0) == '_' && paramName.charAt(1) == '_'
               && paramName.charAt(2) == 'o' && paramName.charAt(3) == '3'));
  },

  //Sets one or more attributes on a DOM node. The map looks like:
  //{ type:'text', value:'This is text', style:'width:100px'}
  setAttributes: function(node, map) {
    for(var x in map) {
      node.setAttribute(x, map[x]);
    }
  },

  //This should be called if a pop up page has submitted a form, stating that
  //if this page is redirected to itself, rather than ignoring it, it should
  //refresh the browser.
  invalidatePage: function() {
    curam.PAGE_INVALIDATED = true;

      var parentWin = dojo.global.dialogArguments
          ? dojo.global.dialogArguments[0]:opener;

    if(parentWin && parentWin != dojo.global) {
      try {
        parentWin.curam.util.invalidatePage();

      } catch(e) {
        curam.debug.log(bundle.getProperty("curam.util.error"), e);
      }
    }
  },
  
  /**
   * Sends the window to a new URL. This needs to be done differently depending
   * on whether or not the window is modal (IE only).
   * @param force
   *    If set to true, it does not matter if the href is the same as
   *    the current href or not, it will be refreshed.
   * @param ignoreFrame
   *    If true, then any other frames on the page are not refreshed.
   */
  redirectWindow: function(href, force, ignoreFrames) {
    var rtc = new curam.util.RuntimeContext(dojo.global);
    var redirectContentPanelInDifferentFrameRootContext =
      function(context, rootObject, href, forceLoad, justRefresh) {
        curam.util.getFrameRoot(context, rootObject)
            .curam.util.redirectContentPanel(href, forceLoad, justRefresh);
      };
      curam.util._doRedirectWindow(href, force, ignoreFrames,
          dojo.global.jsScreenContext, rtc, curam.util.publishRefreshEvent,
        redirectContentPanelInDifferentFrameRootContext);
  },
  
  _doRedirectWindow: function(href, force, ignoreFrames, screenContext, rtc,
      publishRefreshEvent, redirectContentPanelInDifferentFrameRootContext) {
    if (href && curam.util.isActionPage(href)) {
      // Avoid 404 error coming from bad RPU. This is temporary,
      // will be properly fixed by TEC-7123.
      curam.debug.log(bundle.getProperty("curam.util.stopping"), href);
      return;
    }

    var rpl = curam.util.replaceUrlParam;
    //check if we are in the frameset context
    var inFrame = screenContext.hasContextBits('TREE')
                 || screenContext.hasContextBits('AGENDA')
                   || screenContext.hasContextBits('ORG_TREE');

    if(curam.util.FORCE_REFRESH) {
      //If the FORCE_REFRESH parameter is set, in dialog.js, then ignore the
      //href parameter and just reload the page. This is done for the user
      //preferences dialog, so that it doesn't lose the __o3rpu parameter,
      //but can be used in other places too.
      href = rpl(rtc.getHref(), curam.util.PREVENT_CACHE_FLAG,
                 (new Date()).getTime());
      if(curam.util.isModalWindow() || inFrame) {
        publishRefreshEvent();
          dojo.global.location.href = href;

      } else {
        if (screenContext.hasContextBits('LIST_ROW_INLINE_PAGE')
            || screenContext.hasContextBits('NESTED_UIM')) {
          
          curam.util._handleInlinePageRefresh(href);

        } else {
          publishRefreshEvent();
          if (dojo.global.location !== curam.util.getTopmostWindow().location) {
            require(["curam/tab"], function() {
              redirectContentPanelInDifferentFrameRootContext(dojo.global,
                  curam.tab.getTabController().ROOT_OBJ, href, true, true);
            });
          }
        }
      }
      return;
    }

    var u = curam.util;
    //if the URL is identical, it's not a real redirect, so do nothing.
    //This solves the case of a Cancel button being clicked in a modal window.
    var rtc = new curam.util.RuntimeContext(dojo.global);
    if(!inFrame && !force && !curam.PAGE_INVALIDATED
        && u.isSameUrl(href, null, rtc)) {
      return;
    }

    //If in a modal dialog, then submit a form via a 'POST', as doing a normal
    //redirect
    if(curam.util.isModalWindow() || inFrame) {

      //make sure that the modal parameter is set, and that a timestamp is added
      //to prevent the resulting page from being cached.
      href = rpl(rpl(href, "o3frame", "modal"),
        curam.util.PREVENT_CACHE_FLAG, (new Date()).getTime());
        var form = domConstruct.create("form", {
        action:href,
        method:"POST"
      });

      //modals launched from Agenda Player in modal do not need artificial post
      if (!inFrame) {

          if(!dom.byId("o3ctx")) {
          // The o3ctx may exist on the url passed into this method already.
          // So, remove it and reset the form action.
          // This is a last-minute fix for an issue found during JDE 009
          // testing.
          form.action =
            curam.util.removeUrlParam(form.action, "o3ctx");
            var input1 = domConstruct.create("input", {
            type: "hidden", id: "o3ctx", name:"o3ctx",
            value: screenContext.getValue()
          }, form);
        }
          windowBase.body().appendChild(form);
        publishRefreshEvent();
        form.submit();
      }
      if(!ignoreFrames) {
        if (inFrame) {
          curam.util.redirectFrame(href);
        }
      }

    } else {
      //The base context case; no frameset, these are not supported in the tab
      //content panel. Just change the href
      if (screenContext.hasContextBits("LIST_ROW_INLINE_PAGE")
          || screenContext.hasContextBits("NESTED_UIM")) {
        
        curam.util._handleInlinePageRefresh(href);

      } else {
        publishRefreshEvent();
        if (dojo.global.location !== curam.util.getTopmostWindow().location) {
          if (screenContext.hasContextBits("EXTAPP")) {
            var topWindow = window.top;
            topWindow.dijit.byId("curam-app").updateMainContentIframe(href);
          } else {
            require(["curam/tab"], function() {
              curam.util.getFrameRoot(dojo.global,
                  curam.tab.getTabController().ROOT_OBJ)
                     .curam.util.redirectContentPanel(href, force);
            });            
          }
        }
      }
    }
  },
  
  /**
   * Closing modal dialog opened from expanded list row or nested UIM.
   * Either Redirect expanded row iframe or open the url in a new tab,
   * depending on whether the target page is mapped to some tab or not.
   */
  _handleInlinePageRefresh: function(href) {
    curam.debug.log(bundle.getProperty("curam.util.closing.modal"), href);

    /*
     * The following code is based on assumption that inline pages are not
     * mapped to any tabs. If this is the case then the inline frame will
     * be refreshed. If the page is mapped to a tab then it will open in that
     * tab rather than in the inline frame.
     */
    var pageRequest = new curam.ui.PageRequest(href);
    require(["curam/tab"], function() {
      curam.tab.getTabController().checkPage(pageRequest, function(request) {
        // refresh the inline frame
        curam.util.publishRefreshEvent();
        dojo.global.location.reload(true);
      });
    });
  },

  /**
   * @param url
   *    The URL to redirect to.
   * @param forceLoad
   *    Load the page even if the existing URL is the same.
   * @param justRefresh
   *    Do not change to a different URL, only refresh the existing page.
   */
  redirectContentPanel: function(url, forceLoad, justRefresh) {
    require(["curam/tab"], function() {
      // add the return page parameter
      var iframe = curam.tab.getContentPanelIframe();
      var newUrl = url;
      if (iframe != null) {
        var rpu = curam.util.Constants.RETURN_PAGE_PARAM;
        var o3rpuValue = null;
        if (url.indexOf(rpu + "=") >= 0) { // if the url has RPU param
          curam.debug.log("curam.util.redirectContentPanel: " 
            + bundle.getProperty("curam.util.rpu"));
          o3rpuValue = decodeURIComponent(curam.util.getUrlParamValue(url, rpu));
        }
        // or the specified URL has no __o3rpu parameter - just pass through
        
        if (o3rpuValue) {
          // strip the __o3rpu parameter form the RPU value
          o3rpuValue = curam.util.removeUrlParam(o3rpuValue, rpu);

          newUrl = curam.util.replaceUrlParam(url, rpu,
              encodeURIComponent(o3rpuValue));
        }
      }
      var uimPageRequest = new curam.ui.PageRequest(newUrl);
      if (forceLoad) {
        uimPageRequest.forceLoad = true;
      }
      if (justRefresh) {
        uimPageRequest.justRefresh = true;
      }
      curam.tab.getTabController().handlePageRequest(uimPageRequest);
    });
  },

  //Redirects a page in a frame, and refreshes all other frames.
  //If 'href' is not set, then the current window is not refreshed,
  //just the other frames.
  redirectFrame: function(href) {
      if (dojo.global.jsScreenContext.hasContextBits('AGENDA')) {
      var target = curam.util.getFrameRoot(dojo.global, "wizard").targetframe;
      target.curam.util.publishRefreshEvent();
      target.location.href = href;

      } else if (dojo.global.jsScreenContext.hasContextBits('ORG_TREE')) {//lazy tree
      var target = curam.util.getFrameRoot(dojo.global, "orgTreeRoot");
        /* FIXME: this code expects that curam.util and dojo are loaded
         * and avaialble in the target context. Instead it should call require()
         * to load the required module. 
         */
      target.curam.util.publishRefreshEvent();
      target.dojo.publish("orgTree.refreshContent", [ href ]);

    } else { //tree frameset
      var treeRef = curam.util.getFrameRoot(dojo.global, "iegtree");
      var navigator = treeRef.navframe || treeRef.frames[0];
      var contents = treeRef.contentframe || treeRef.frames['contentframe'];
      contents.curam.util.publishRefreshEvent();
      if (curam.PAGE_INVALIDATED || navigator.curam.PAGE_INVALIDATED) {
        var newHref = curam.util.modifyUrlContext(href, 'ACTION');
        contents.location.href = newHref;

      } else {
        contents.location.href = href;
      }
    }

    //Return true, indicating that a redirect did take place.
    return true;
  },

  publishRefreshEvent: function() {
      topic.publish("/curam/page/refresh");
  },

  /**
   * Opens a basic error modal dialog using the href 
   * <code>generic-modal-error.jspx</code>. The paramters are used to contruct
   * the full URL to the dialog.
   * 
   * @param windowOptions       The windows options to specifiy the width and 
   *                              height of the dialog.
   * @param titleProp           The property key to be used when localizing
   *                              the text of the title on the dialog.
   * @param messageProp         The property key to be used when localizing
   *                              the message on the dialog.
   * @param messagePlaceholder1 The first placeholder to be within the message
   *                              on the dialog. THis will not be set if it is 
   *                              undefined.
   * @param isErrorModal        The boolean value to indicate whether it is an
   *                            error modal or a warning modal.            
   */
  openGenericErrorModalDialog: function(windowOptions, titleProp, 
      messageProp, messagePlaceholder1, isErrorModal) {
    var url;
    var msgPlaceholder1;
    var sc = new curam.util.ScreenContext('MODAL');
    var titlePropertyName = "titlePropertyName=" + titleProp + "&";
    var messagePropertyName = "messagePropertyName=" + messageProp + "&";
    var isErrormodal = "errorModal=" + isErrorModal + "&";
    
    if (messagePlaceholder1) {
      msgPlaceholder1 = "messagePlaceholder1=" + messagePlaceholder1 +"&";
      url ="generic-modal-error.jspx?" + titlePropertyName + messagePropertyName 
        + msgPlaceholder1 + isErrormodal + sc.toRequestString();
    } else {
      url ="generic-modal-error.jspx?" + titlePropertyName + messagePropertyName 
      + sc.toRequestString();
    }
    // TODO: May also want to take into account whether window options are set
    // or not -- BOS
    curam.util.openModalDialog({href:url}, windowOptions);
  },

  // Opens a modal dialog.
  // This is the public API function.
  // The function can take an anchor tag or an event as its first parameter
  // The uimToken parameter is only used in conjunction with the UIMDialog API.
  openModalDialog: function(
    eventOrAnchorTag, windowOptions, left, top, uimToken) {

    var href;
    if(!eventOrAnchorTag || !eventOrAnchorTag.href) {
      // it is an event
        eventOrAnchorTag = dojoEvent.fix(eventOrAnchorTag);

      var target = eventOrAnchorTag.target;
        while(target.tagName != "A" && target != windowBase.body()){
        target = target.parentNode;
      }

      href = target.href;

      //Mark the anchor tag as a modal dialog opener, so that other listeners on
      //it, e.g. the List Context Menus in /jscript/curam/listMenu.js, ignore
      //clicks on it.
      target._isModal = true;

        dojoEvent.stop(eventOrAnchorTag);

    } else {
      // it is an anchorTag
      href = eventOrAnchorTag.href;
      eventOrAnchorTag._isModal = true;
    }

        require(["curam/dialog"]);
    var opts = curam.dialog.parseWindowOptions(windowOptions);
    curam.util.showModalDialog(href, eventOrAnchorTag,
          opts['width'], opts['height'], left, top,  false, null, null, uimToken);
    return false;
  },

  // Shows a modal dialog.
  // Internal function, used from the public openModalDialog() function above
  // and also from pop-up-related code (omega3-util.js).

  // The uimToken parameter is only used in conjunction with the UIMDialog API.

  // @param realParent
  //            The parent window the request to open modal originated from.
  showModalDialog: function(url, eventOrAnchorTag,
      width, height, left, top, resizable, status, realParent, uimToken) {

    // handling nested modals ->
    // if called from within modal, redirect call to the parent window.
    var topmostWindow = curam.util.getTopmostWindow();
    if (dojo.global != topmostWindow) {
      curam.debug.log(
          "curam.util.showModalDialog: " 
            + bundle.getProperty("curam.util.redirecting.modal"));
      topmostWindow.curam.util.showModalDialog(url, eventOrAnchorTag,
          width, height, left, top, resizable, status, dojo.global, uimToken);
      return;
    }

    var rup = curam.util.replaceUrlParam;
    url = rup(url, "o3frame","modal");
    url = curam.util.modifyUrlContext(url, 'MODAL', 'TAB|LIST_ROW_INLINE_PAGE|LIST_EVEN_ROW|NESTED_UIM');
    url = rup(url, curam.util.PREVENT_CACHE_FLAG, (new Date()).getTime());
    curam.debug.log(bundle.getProperty("curam.util.modal.url"), url);

    if (width) {
      width = typeof(width) == 'number' ? width : parseInt(width);
    }
    if (height) {
      height = typeof(height) == 'number' ? height : parseInt(height);
    }
    
    // Prevent multiple further requests for modal until this one is processed
    if (!curam.util._isModalCurrentlyOpening()) {
      curam.util._setModalCurrentlyOpening(true);

      require(["curam/ModalDialog"]);
      new curam.ModalDialog({href: url,
                             width: width,
                             height: height,
                             openNode: (eventOrAnchorTag && eventOrAnchorTag.target) ? eventOrAnchorTag.target : null,
                             parentWindow: realParent,
                             uimToken: uimToken});
    }
  },
  
  /**
   * Determine if a modal is being opened at this time.
   *
   * @returns True if modal open operation is in progress, otherwise false.
   */
  _isModalCurrentlyOpening: function() {
    return curam.util.getTopmostWindow().curam.util._modalOpenInProgress;
  },
  
  /**
   * Set the flag indicating if a modal is being opened at this time.
   *
   * @param isOpening {Boolean} Value for the flag, either true or false.
   */
  _setModalCurrentlyOpening: function(isOpening) {
    curam.util.getTopmostWindow().curam.util._modalOpenInProgress = isOpening;
  },
  
  setupPreferencesLink: function(href) {
      ready(function() {
        var prefsAnchor = query(".user-preferences")[0];
      if (prefsAnchor) {
        if (typeof(prefsAnchor._disconnectToken) == "undefined") {
          prefsAnchor._disconnectToken = curam.util.connect(prefsAnchor,
              "onclick", curam.util.openPreferences);
        }
        
        if (!href) {
            href = dojo.global.location.href;
        }
        if (curam.util.isActionPage(href)) {
          // disable the link
            domClass.replace(prefsAnchor, "disabled", "enabled");
          prefsAnchor._curamDisable = true;

        } else {
            domClass.replace(prefsAnchor, "enabled", "disabled");
          prefsAnchor._curamDisable = false;
        }

      } else {
        curam.debug.log(bundle.getProperty("curam.util.no.setup"));
      }
    });
  },
  
  openPreferences: function(event) {
      dojoEvent.stop(event);
    
    if (event.target._curamDisable) {
      // link disabled, do nothing
      return;
    }
    
    require(["curam/tab"], function() {
      curam.tab.getTabController().handleLinkClick(
          "user-prefs-editor.jspx", {dialogOptions:"width=450"});
    });
  },
  
  openAbout: function(event) {
      dojoEvent.stop(event);
      require(["curam/tab"], function() {
        curam.tab.getTabController().handleLinkClick(
            "about.jsp", {dialogOptions:"width=645,height=480"});
      });
  },
  

  addMinWidthCalendarCluster: function(id){

      var contentNode = dom.byId(id);
    var i = 0;

    function addWidth(evt){
        array.forEach(contentNode.childNodes, function(node){
          if(domClass.contains(node, "cluster")){
            style.set(node, "width", "97%");
          if(node.clientWidth < 700){
              style.set(node, "width", "700px");
          }
        }
      });
    }//end function addWidth

      if(has("ie") > 6){
        array.forEach(contentNode.childNodes, function(node){
          if(domClass.contains(node, "cluster")){
            style.set(node, "minWidth", "700px");
        }
      });
    } else {
        on(dojo.global, 'resize', addWidth);
        ready(addWidth);
    }
  },

  addPopupFieldListener: function(id){
      if(!has("ie") || has("ie") > 6){
      return;
    }
    if(!curam.util._popupFields) {
      function doResize(evt){
        var actionWidth=0;
        var j = 0;
        var x = 0;
        var arr = curam.util._popupFields;
          array.forEach(curam.util._popupFields, function(id){
            var fieldNode = dom.byId(id);
            query("> .popup-actions", fieldNode).forEach(function(node){
            actionWidth = node.clientWidth + 30;
          });

            query("> .desc", fieldNode).forEach(function(node){
              style.set(node, "width",
              Math.max(0, fieldNode.clientWidth - actionWidth) + "px");
          });
        });
      }// end doResize function
      curam.util._popupFields = [id];
        on(dojo.global, 'resize', doResize);
        ready(doResize);
    } else {
     curam.util._popupFields.push(id);
    }
  },

  /**
   * Sets the width and height (on IE6) of the main content area and sidebar
   * when the window is resized. The sidebar is not always included on a page.
   */
  addContentWidthListener: function(id) {
      if (has("ie") > 6) {
      // don't do if IE is 7 and higher
      return;
    }
      var setStyle = style.set;
      var hasClass = domClass.contains;

    function doResize(evt) {
      var i = 0;
        var contentNode = dom.byId("content");
      if (contentNode) {
        var width = contentNode.clientWidth;

        // Only set the height of the content if the footer is present,
        // and if the browser is Internet Explorer 6
          if (has("ie") == 6 && dom.byId("footer")) {
            var contentHeight = windowBase.body().clientHeight - 100;
          setStyle(contentNode, "height", contentHeight + "px");
            var sideNode = dom.byId("sidebar");
          if (sideNode) {
            setStyle(sideNode, "height", contentHeight + "px");
          }
        }

        try{
            query("> .page-title-bar", contentNode).forEach(function(node){
              var marginW = geom.getMarginSize(node).w
                  - geom.getContentBox(node).w;
              if (!has("ie")) {
              marginW +=1;
            }
            width =  contentNode.clientWidth - marginW;
              style.set(node, "width", width + "px");
          });
        }catch(e){
        // Do nothing. If the page-title-bar does not exist it won't need to be resized.
        }

          query("> .page-description", contentNode).style("width", width + "px");
          query("> .in-page-navigation", contentNode).style("width", width + "px");
      }
    }

    curam.util.subscribe("/clusterToggle", doResize);
    curam.util.connect(dojo.global, 'onresize', doResize);
      ready(doResize);
  },

  //depending on the final row and height of the visible scrollable area
  //we will have to add/remove the bottom border on the final row
  alterScrollableListBottomBorder: function(id, maxHeight){

    var visibleAreaHeight = maxHeight;
    var queryText = "#" + id + " table"; //to find the table contained in the div

    function alterBorder() {
        var scrollTable = query(queryText)[0];
      if (scrollTable.offsetHeight >= visibleAreaHeight) { //scrollbar visible & active
        //dont want a border on final row, if an odd row
          var lastRow = query(".odd-last-row", scrollTable)[0];
        if (typeof lastRow != "undefined") {
            domClass.add(lastRow, "no-bottom-border");
        }
      }
      else if (scrollTable.offsetHeight < visibleAreaHeight) { //scrollbar visible & inactive
        //we want a border on final row, if an even row
          var lastRow = query(".even-last-row", scrollTable)[0];
        if (typeof lastRow != "undefined") {
            domClass.add(lastRow, "add-bottom-border");
        }
      }
      else {
        curam.debug.log("curam.util.alterScrollableListBottomBorder: " 
          + bundle.getProperty("curam.util.code"));
      }
    }
    //added onLoad event to stop IE7 reading table heght before it is fully loaded
      ready(alterBorder);

  },

  //Set the width (on IE6) of the file upload button and its associated textfield,
  // and it will be auto resized when the window is resized.
  addFileUploadResizeListener:function(code){

    function fileUploadResize(evt){

        if(query(".widget")){

                query(".widget").forEach(function(widgetNode){
                var width = widgetNode.clientWidth;
                    if(query(".fileUpload", widgetNode)){

                        query(".fileUpload", widgetNode).forEach(function(fileUploadNode){
                        fileUploadWidth = width/30;
                        if(fileUploadWidth < 4){
                          fileUploadNode.size= 1;
                        }
                        else{
                          fileUploadNode.size= fileUploadWidth;
                        }
                      });
                  }
              });
          }
    }
      on(dojo.global, 'resize', fileUploadResize);
      ready(fileUploadResize);
  },


  //Opens a pop up dialog, non-modal, in the centre of the screen.
  openCenteredNonModalWindow: function(url, width, height, name) {
    // Fudge factors for window decoration space.
    width = Number(width);
    height = Number(height);
    var offsetLeft = (screen.width - width) / 2;
    var offsetTop = (screen.height - height) / 2;

    height = offsetTop < 0 ? screen.height : height;
    offsetTop = Math.max(0, offsetTop);

    width = offsetLeft < 0 ? screen.width : width;
    offsetLeft = Math.max(0, offsetLeft);

    var left = "left", top = "top";
      if(has("ff")) {
       left = "screenX", top = "screenY";
    }
    var defaultOptions = "location=no, menubar=no, status=no, toolbar=no, "
                         + "scrollbars=yes, resizable=no";

      var newWin = dojo.global.open(url, name || "name",
      'width=' + width + ', height=' + height + ', ' +
      left + '=' + offsetLeft + ',' + top + '=' + offsetTop + ',' +
            defaultOptions );
    // Enforce the size of the window.
    newWin.resizeTo(width, height);

    // Enforce the position of the window
    newWin.moveTo(offsetLeft, offsetTop);
    newWin.focus();
  },

  adjustTargetContext: function(win, href) {
      if (win && win.dojo.global.jsScreenContext) {
        var oldContext = win.dojo.global.jsScreenContext;
        oldContext.updateStates(dojo.global.jsScreenContext);
      return curam.util.replaceUrlParam(href, "o3ctx", oldContext.getValue());
    }
    return href;
    // TO DO: what context is needed to return here if the conditional
    // returns false?
    // Will be looked at in TEC-7946
  },

  modifyUrlContext: function(url, addBits, clearBits) {
    var newUrl = url;
    var ctx = new curam.util.ScreenContext();
    var valueInUrl = curam.util.getUrlParamValue(url, "o3ctx");
    if (valueInUrl) {
      ctx.setContext(valueInUrl);
    } else {
      ctx.clear();
    }
    if (addBits) {
      ctx.addContextBits(addBits);
    }
    if (clearBits) {
      ctx.clear(clearBits);
    }
    newUrl = curam.util.replaceUrlParam(url, "o3ctx", ctx.getValue());
    return newUrl;
  },

  updateCtx: function(initialValue) {
  var valueInUrl = curam.util.getUrlParamValue(initialValue, "o3ctx");
  if (!valueInUrl) {
    return initialValue;
  }
    return curam.util.modifyUrlContext(initialValue, null, 'MODAL');
  },

  getFrameRoot: function(thisWindow, rootObjectName) {
    var found = false;
    var topRef = thisWindow;
    if (topRef) {
      while (topRef != top && !topRef.rootObject) {
        topRef = topRef.parent;
      }
      if (topRef.rootObject) {
        found = (topRef.rootObject == rootObjectName);
      }
    }

    return found ? topRef : null;
  },

  //Saves HTML for informational messages locally on the clients machine.
  //This is used by modal windows to store informational messages before they
  //shut down. The parent page then loads these messages using
  //curam.util.loadInformationalMsgs, and clears the local
  //stored versions, so they are only loaded once.
  saveInformationalMsgs: function(callback) {
    curam.util.runStorageFn(function() {
      try {
          var context = curam.util.getTopmostWindow().dojox;
          context.storage.put(curam.util.INFORMATIONAL_MSGS_STORAGE_ID,
              json.toJson({
              //Store the page ID, so these messages are only loaded back onto
              //the same page as the one on which they were saved.
                pageID: windowBase.body().id,

              //Store the entire set of messages, including the header, the
              //<ul> element and it's contents. This will be used in most cases.
                total: dom.byId(curam.util.ERROR_MESSAGES_CONTAINER).innerHTML,

              //Save just the <li> elements. If the parent page already has
              //informational messages, these are appended to the existing list.
              //This should not happen really, but is possible. I think...
              //Either way, this doesn't hurt.
                listItems: dom.byId(curam.util.ERROR_MESSAGES_LIST).innerHTML
          }));

      } catch (e) {
        curam.debug.log(bundle.getProperty("curam.util.exception"), e);
      }
    },
    callback);
  },

  //Runs a function that uses dojox.storage. This makes it wait for the manager
  //to be initialized.  If the storage manager is ready, this function is run
  //immediately.
  runStorageFn: function(fn, callback) {
    var runAction = function() {
      fn();
      if(callback) {
        setTimeout(callback, 10);
      }
    };
    var context = curam.util.getTopmostWindow().dojox;
    require(["dojox/storage"], function() {
      var mgr = context.storage.manager;
      if (mgr.isInitialized()) {
        //If the storage manager is ready, just run the function
        runAction();
      } else {
        //Run the function when the manager is ready. If an addOnLoad method is
        //available use it, otherwise use the on function.
        if (mgr.addOnLoad) {
          mgr.addOnLoad(runAction);
        } else{
          var wrapper = {exp: runAction};
          on(mgr, "loaded", wrapper, "exp");
        }
      }
    });
  },

  //Disables the loading of informational messages on the current page.
  //This prevents the messages being cleared for a modal dialog's parent page
  //if the loadInformationalMsgs function runs on the page after the messages
  //are saved using the saveInformationalMsgs function.
  disableInformationalLoad: function() {
    curam.util._informationalsDisabled = true;
  },

  redirectDirectUrl: function() {
      ready(function(){
        if (dojo.global.parent == dojo.global) {
        var url = document.location.href;
        var idx=url.lastIndexOf("/");
        if (idx > -1) {
          if (idx <= url.length) {  
           url = url.substring(idx + 1);
         }
        } 
        
          dojo.global.location = jsBaseURL + "/AppController.do?o3gtu=" + encodeURIComponent(url);
      }
    });
  },
  
  //Loads any informational messages from local storage, and puts them
  //on the page. If they exist, they are wiped out, so that they only show once.
  loadInformationalMsgs: function() {
      ready(function(){
      // no informational messages are to be displayed within the context panel
        if(dojo.global.jsScreenContext.hasContextBits('CONTEXT_PANEL')) {
          return;
        }

      if(curam.util._informationalsDisabled) { return;}
      //run this function when the storage is ready.
      curam.util.runStorageFn(function() {
          var context = curam.util.getTopmostWindow().dojox;
          var msgs = context.storage.get(curam.util.INFORMATIONAL_MSGS_STORAGE_ID);

        // If informational messages are stored locally, insert them into the
        // page
        if(msgs && msgs != "") {
          //Deserialize the messages from text to a JSON object
            msgs = json.fromJson(msgs);

          //Wipe out the messages so they are only loaded once
          //We could use the dojox.storage.remove method here, but it is not
          //supported by all storage implementations, so just make it an empty
          //string.
            context.storage.put(curam.util.INFORMATIONAL_MSGS_STORAGE_ID, "");
            var div = dom.byId(curam.util.ERROR_MESSAGES_CONTAINER);
            var list = dom.byId(curam.util.ERROR_MESSAGES_LIST);

          //Only load the messages on the same page as they were saved.
          //The body of each page has it's ID set, which is the name of the
          //UIM file, more or less, and is therefore unique.
            if(msgs.pageID != windowBase.body().id) {
            return;
          }

          // If there are somehow messages already on the page, do not override
          // them, just append to them.
          if(list) {
            //Don't append duplicate informational messages.
              var tempUL = domConstruct.create("ul", {
              innerHTML: msgs.listItems
            });

            //Create an array of the LI elements already in the list.
            var currentLIs = [];
            for(var i = 0; i < list.childNodes.length; i++) {
              if(list.childNodes[i].tagName == "LI"){
                currentLIs.push(list.childNodes[i]);
              }
            }

            //Go through the existing messages to check for duplicates
            //If no duplicate informational message exists, then append the
            //message to the existing list of messages.
            var skip = false;
            var nodes = tempUL.childNodes;
            for(var i = 0; i < nodes.length; i++) {
              skip = false;
              for(var j = 0; j < currentLIs.length; j++) {
                if(nodes[i].innerHTML == currentLIs[j].innerHTML) {
                  skip = true;
                  break;
                }
              }
              if(!skip) {
                list.appendChild(nodes[i]);
                i--;
              }
            }
          } else if(div){
            div.innerHTML = msgs.total;
          } 
        }
        var informationalMessage = dojo.byId('error-messages');
          if (informationalMessage && !dojo.global.jsScreenContext.hasContextBits("MODAL")) {
            informationalMessage.focus();
          }
      });
    });
  },

  /**
   * sets focus to the input field with the biggest value
   * of tabindex property.
   */
   setFocus: function() {
    var isModal = curam.util.getUrlParamValue(
          dojo.global.location.href, "o3frame") == "modal";
    if (!isModal) {
      // for pages in main content call setFocus here, modals will
      // do it differently in ModalDialog.js
        ready(curam.util.doSetFocus);
    }
  },

  /**
   * Set focus on the first editable field in the page. If there are no editable
   * fields, the function does not do anything. In case the first editable field
   * is a FilteringSelect widget than it skipd the arrow and validation container
   * and sets the focus on the input container of FilteringSelect widget.
   *
   * @returns {Boolean} True if focus has been set to the first editable field.
   *                    False if there are no editable fields in the page.
   */
  doSetFocus: function() {
    var firstIdx = -1;  // marks the first element to set focus to
    var customIdx = -1; // marks any override of the first element
    var form = document.forms[0];
    if (!form) {
      // no editable fields - nothing to do
      return false;
    }
    var elements = form.elements;
    var l = elements.length;
    var elem;
    
    for (var i = 0; i < l; i++) {
      elem = elements[i];
      // we check firstIdx to prevent having to iterate over the
      // elements twice to find the first and custom fields for focus
      if (firstIdx == -1 && (
          elem.type == 'select-one'
          || elem.type == 'text'
          || elem.tagName == "TEXTAREA") 
          && !domClass.contains(elem, "dijitArrowButtonInner")
          && !domClass.contains(elem, "dijitValidationInner")) {
        firstIdx = i;
      }
      if (elem.tabIndex == '1') {
        // reset the tab index to prevent it having an effect on
        // screen tabbing.
        elem.tabIndex = 0;
        customIdx = i;
        break; // once we've found an override, no need to keep looping.
      }
    }

    var elem;
    if (customIdx != -1) {
      elem = elements[customIdx];

    } else if (firstIdx != -1) {
      elem = elements[firstIdx];
    }

    try {
      var errorMessage = dojo.byId('error-messages');
      if (errorMessage) {
        errorMessage.focus();
      } else {
      elem.focus();
      }
    } catch(e) {
      curam.debug.log(bundle.getProperty("curam.util.error.focus"), e.message);
      return false;
    }

    return true;
  },

  openLocaleSelector: function(event) {
      event = dojoEvent.fix(event);
    var target = event.target;
    while(target && target.tagName != "A") {
      target = target.parentNode;
    }
    var loc = target.href;
    var rpu = curam.util.getUrlParamValue(loc, "__o3rpu");
    // strip the __o3rpu parameter form the RPU value
    rpu = curam.util.removeUrlParam(rpu, "__o3rpu");
    var href="user-locale-selector.jspx" + "?__o3rpu=" + rpu;

      if (!curam.util.isActionPage(dojo.global.location.href)) {
      openModalDialog({href:href},"width=500,height=300",200,150); 

    } else {
      alert(curam.util.msgLocaleSelectorActionPage);
    }

    return false;
  },

  isActionPage: function(url) {
    var pageAndQuery = curam.util.getLastPathSegmentWithQueryString(url);
    var pageName = pageAndQuery.split("?")[0];
    return pageName.indexOf("Action.do") > -1;
  },

  closeLocaleSelector: function(event) {
      event = dojoEvent.fix(event);
      dojoEvent.stop(event);

      dojo.global.close();
    return false;
  },

  /**
   * Retrieves the remaining part of a class name which has the specified prefix.
   * E.g. for <theNode class="class1 class2 thePrefix-remaining-part-of-name" />
   * the call to curam.util.getSuffixFromClass(theNode, "thePrefix-")
   * will return "remaining-part-of-name".
   *
   * @param node
   *          The note to get the class from.
   * @param prefix
   *          The prefix to find the class by.
   * @returns
   *    If the class with the prefix is found it returns the remaining
   *    part of the class name. If the class is not found, returns null.
   *    If more than one class is found, it returns the first occurrence.
   */
  getSuffixFromClass: function(node, prefix) {
      var classes = attr.get(node, "class").split(" ");
      var namesFound = array.filter(classes, function(className) {
      return className.indexOf(prefix) == 0;
    });
    if (namesFound.length > 0) {
      return namesFound[0].split(prefix)[1];

    } else {
      return null;
    }
  },

  getCacheBusterParameter : function() {
    return this.CACHE_BUSTER_PARAM_NAME + "=" + new Date().getTime() + "_"
        + this.CACHE_BUSTER++;
  },

  /**
   * Add classes to table rows to allow striping in appearance.
   * Handles expandable and paginated lists in a specific way.
   */
  stripeTable: function(table, isExpandableList, lastVisibleRowIndex) {
    var tbody = table.tBodies[0];
    var mainRowStep = (isExpandableList ? 2 : 1);

    // for a list with one row do nothing
    if (tbody.rows.length < mainRowStep) {
      return;
    }

    var rows = tbody.rows;

    for (var i = 0; i < rows.length; i += mainRowStep) {
      curam.debug.log(
          "curam.util.stripeTable(%s, %s): i = %s", table, isExpandableList, i);

      // collect rows to change (to include details row in expandable lists)
      var rowsToChange = [ rows[i] ];
      // checking for existence of details row - if list is empty, there might
      // be just one empty row
      if (isExpandableList && rows[i + 1]) {
        rowsToChange.push(rows[i + 1]);
      }

      // remove classes before adding the right ones
        array.forEach(rowsToChange, function(row) {
          domClass.remove(row, "odd-last-row");
          domClass.remove(row, "even-last-row");
      });

      if (i % (2 * mainRowStep) == 0) {
          array.forEach(rowsToChange, function(row) {
          cm.replaceClass(row, 'odd', 'even');
        });

        if (i == lastVisibleRowIndex) {
            array.forEach(rowsToChange, function(row) {
              domClass.add(row, "odd-last-row");
          });
        }

      } else {
          array.forEach(rowsToChange, function(row) {
          cm.replaceClass(row, 'even', 'odd');
        });

        if (i == lastVisibleRowIndex) {
            array.forEach(rowsToChange, function(row) {
              domClass.add(row, "even-last-row");
          });
        }
      }
    }
  },

  fillString: function(fillChar, count) {
    // summary:
    //  Creates a string of 'x' repeating characters
    var string = "";
    while (count > 0) {
      string += fillChar;
      count-=1;
    }
    return string;
 },

  updateHeader: function(qId, newHeader, answer, source) {
      var header = dom.byId('header_' + qId);
    header.firstChild.nextSibling.innerHTML = newHeader;
      answerCell = dom.byId('chosenAnswer_' + qId);
    answerCell.innerHTML = answer;
      sourceCell = dom.byId('chosenSource_' + qId);
    sourceCell.innerHTML = source;
  },
 
  search: function(textWidgetID, typeWidgetID){
     // summary:
     //              Invokes the required search page for an application search as
     //              specified by the associated configuration data. How this
     //              is done is described below:
     //
     // description:
     //              <ol>
     //                <li>
     //                  Retrieving the value of the business object select drop
     //                  down. This value includes a business object code and
     //                  also a page identifier.
     //                </li>
     //                <li>
     //                  Retrieving the value of the input text control which
     //                  specifies the search text to be used.
     //                </li>
     //                <li>
     //                  If the drop list of business objects has been
     //                  specified in the associated configuration data, the
     //                  page identifier specified by the selected option will
     //                  be used to construct a URL using the
     //                  <code>searchText</code> and <code>searchType</code>
     //                  page parameters and that page is invoked.
     //                </li>
     //                <li>
     //                  If the drop list of business objects has not been
     //                  specified in the associated configuration data, the
     //                  default search page specified will be used to construct
     //                  a URL using the <code>searchText</code> page parameter
     //                  only and then that page is invoked.
     //                </li>
     //              </ol>
     //              <P>
     //              The data used here is generated by a renderer so therefore
     //              no validations are performed and it is assumed that the
     //              data is in the correct format for parsing.
     // textWidgetID:
     //              The identifier of the text input control for the application
     //              search which is used to retrieve the text to be used in the
     //              application search. The value taken from this field is
     //              associated with the <code>searchText</code> page parameter
     //              of the search page being invoked.
     // typeWidgetID:
     //              The identifier of the drop down control for the application
     //              search which is used to retrieve the business object type
     //              to be used in the application search. The value taken from
     //              this field is associated with the <code>searchType</code>
     //              page parameter of the search page being invoked. Note that
     //              this is optional as the list of business objects to search
     //              for is an optional element of an application search.
 
    // TODO: Move this function into the application view JavaScript file when
    // it becomes available -- FG.
 
    // Retrieve the search text from the input control.
      var searchText = registry.byId(textWidgetID).get("value");
    // The search type, if specified, from the drop down list of business
    // objects. This is a combination of the type and the page identifier
    // so split these out here.
      var searchTypeWidget = registry.byId(typeWidgetID);
    var currentlySelectedItem
          = searchTypeWidget ? searchTypeWidget.get("value"): null;
    var searchType = "";
    var pageIDFromSearchOptions;
    var tokens;
 
    if(currentlySelectedItem){
      // The currently selected item consists of the search type and the page
      // identifier to use in the search.
      tokens = currentlySelectedItem.split("|");
      searchType = tokens[0];
      pageIDFromSearchOptions = tokens[1];
    }
 
    var defaultSearchPageID = curam.util.defaultSearchPageID;
 
    // If the select box has not been specified, then the page identifier is
    // the default page identifier. Construct the page to be invoked.
    var searchPageURL = "";
    if (searchType==="") {
      searchPageURL = defaultSearchPageID + "Page.do?searchText="
                                              + encodeURIComponent(searchText);
    } else {
      searchPageURL = pageIDFromSearchOptions + "Page.do?searchText="
                          + encodeURIComponent(searchText) + "&searchType="
                            + encodeURIComponent(searchType);
    }
    // Call the function that will load the search page.
    var searchPageRequest = new curam.ui.PageRequest(searchPageURL);
    require(["curam/tab"], function() {
      curam.tab.getTabController().handlePageRequest(searchPageRequest);
    });
  },
 
  updateDefaultSearchText: function(typeWidgetID, textWidgetID){
    // summary:
    //              Updates the search text input control in the application
    //              search widget with some initial text from the item selected
    //              in the associated list of search business objects.
    //
    // description:
    //              Retrieves the initial text from the item selected in the list
    //              of business objects drop down and sets the place holder
    //              attribute of the application search text input control with
    //              this initial text. This is called from the
    //              <code>onChange()</code> event of the application search drop
    //              down list.
    // typeWidgetID:
    //              The identifier of the drop down control for the application
    //              search which is used to retrieve the initial text that is
    //              set in the place holder attribute of the associated text
    //              input control each time the value of the drop down list
    //              is changed. This initial text acts as an aid to the user
    //              when performing the search as it offers them a hint as to
    //              what should be entered into the text area for the type of
    //              search being performed.
    // textWidgetID:
    //              The identifier of the text input control whose place
    //              holder attribute will be set with initial text to aid the
    //              user perform the search.
 
    // TODO: Move this function into the application view JavaScript file when
    // it becomes available -- FG.
 
      var searchTypeWidget = registry.byId(typeWidgetID);
      var textWidget = registry.byId(textWidgetID);
    var currentlySelectedItem
      = searchTypeWidget ? searchTypeWidget.get("value"): null;
    // The initial text is the third token in the string.
    var str = currentlySelectedItem.split("|")[2];
 
      textWidget.set("placeHolder", str);
  },
 
  updateSearchBtnState: function(textWidgetID, btnID){
    // summary:
    //              Enables or disables the search anchor for an application
    //              search depending on whether this is text specified for the
    //              search.
    //
    // description:
    //              The search anchor specified for an application search is
    //              disabled if no text has been specified in the text input
    //              control. This function is called on the
    //              <code>onKeyPress</code> of the text input control so that when
    //              a user enters some text, the search anchor is enabled to allow
    //              that user perform the search.
    // textWidgetID:
    //              The identifier of the text input control for the application
    //              search which is used to determine if that text box contains
    //              any text. If it does, then the search anchor is enabled,
    //              otherwise it is disabled.
    // btnID:
    //              The identifier of the search anchor for the application search
    //              and this is used to retrieve the control to enable or disable
    //              depending on whether there is text in the associated search
    //              text input control.
 
    // TODO: Move this function into the application view JavaScript file when
    // it becomes available -- FG.
      var widget = registry.byId(textWidgetID);
      var btn = dom.byId(btnID);
      var value = widget.get("value");
 
      if(!value || lang.trim(value).length < 1){
        domClass.add(btn, "dijitDisabled");
      } else {
        domClass.remove(btn, "dijitDisabled");
    }
  },
 
  furtherOptionsSearch: function() {
 
    // summary:
    //              Invokes the page specified for the further options link
    //              in an application search.
    //
    // description:
    //               The further options search page is invoked by retrieving
    //               the page identifier specified in the configuration
    //               data, constructing a page request for that URL and
    //               calling the function to handle that request.
    //               <P>
    //               Validations performed elsewhere should ensure that the
    //               data is specified in the correct fashion and hence there
    //               are no validations invoked here.
 
    // TODO: Move this function into the application view JavaScript file when
    // it becomes available -- FG.
 
    // Retrieve the page identifier for the further options link.
    var furtherOptionsPageURL = curam.util.furtherOptionsPageID + "Page.do";
 
    // Call the function that will load the search page.
    var furtherSearchOptionsPageRequest
        = new curam.ui.PageRequest(furtherOptionsPageURL);
    require(["curam/tab"], function() {
      curam.tab.getTabController().handlePageRequest(
          furtherSearchOptionsPageRequest);
    });
  },
  
  searchButtonStatus: function(btnID){
    // summary:
	//              Returns true if the button is not disabled 
	//
	// description:
	//              The search anchor specified for an application search is
	//              disabled if no text has been specified in the text input
	//              control. This function is called on the
	//              <code>onKeyPress</code> of the text input control if this function returns true.
	// btnID:
	//              The identifier of the search anchor for the application search
	//              and this is used to retrieve the control to enable or disabled
	var btn = dojo.byId(btnID);
	if(!dojo.hasClass(btn,"dijitDisabled")){
	  return true;
	}
  }, 
 
  /**
  * Return the height of the page contents for the current width.
  * Note that if the width changes, the contents height might change as well.
  *
  * Note: this algorithm is dependent on the structure of the
  * DOM. Changes to the page layout will probably break this.
  *
  * @return page height.
  */
  getPageHeight: function() {
    var defaultHeight = 400;
    var resultingHeight = 0;
 
      if (query("frameset").length > 0) {
      /* Detect framesets and use default height for them.
      * Normally frameset windows should have fixed height specified
      * by the developer, but this is for the cases in which the developer
      * forgets to specify the height.
      */
      curam.debug.log(
        "curam.util.getPageHeight() " 
          + bundle.getProperty("curam.util.default.height"),
      defaultHeight);
      resultingHeight = defaultHeight;
 
    } else {
      // create function for determinning bottom coordinate of an element
      var bottom = function(node) {
        if (!node) {
          curam.debug.log(bundle.getProperty("curam.util.node"));
          return 0;
        }
 
        // Use getMarginBoxSimple if it's available
          var mb = geom.getMarginSize(node);
          var pos = geom.position(node);
 
        return pos.y + mb.h;
      };
 
        if (dojo.global.jsScreenContext.hasContextBits('LIST_ROW_INLINE_PAGE')) {
        // in case we are in list details row, just use the bottom spacer div
          var bottomSpacerDiv = query("div.bottom")[0];
        var divBottom = bottom(bottomSpacerDiv);
 
        curam.debug.log(
          bundle.getProperty("curam.util.page.height"), divBottom);
        curam.debug.log(bundle.getProperty("curam.util.ie7.issue"));
        resultingHeight = divBottom + 1;
 
      } else {
          var contentObj = dom.byId("content") || dom.byId("wizard-content");
 
        // find the bottom-most node
          var nodes = query("> *", contentObj).filter(function(n) {
          // leave out script and hidden nodes
          return n.tagName.indexOf("SCRIPT") < 0
            && style.get(n, "visibility") != "hidden"
            && style.get(n, "display") != "none";
        });
        var bottomNode = nodes[0];
        for (var i = 1; i < nodes.length; i++) {
          if(bottom(nodes[i]) >= bottom(bottomNode)) {
            bottomNode = nodes[i];
          }
        }
 
        // first count in the main contents height
        resultingHeight = bottom(bottomNode);
        curam.debug.log("curam.util.getPageHeight() " 
            + bundle.getProperty("curam.util.base.height"), resultingHeight);
 
        // count in modal dialog action set, if present
        var doesActionSetExist = query(".actions-panel", windowBase.body());
        
        if (doesActionSetExist.length > 0) {
          // Only one actions panel exists in one modal, we can get the height
          // of this panel dynamically.
          var actionsPanelHeight = geom.getMarginBox(doesActionSetExist[0]).h;

          curam.debug.log("curam.util.getPageHeight() " 
              + bundle.getProperty("curam.util.panel.height"));
            
          // Add the actions panel height to the total page height, here we
          // presume the actions panel is always positioned at the bottom of
          // the page.
          resultingHeight += actionsPanelHeight;
            
          // Then add additional 10px spacing at the top of the actions panel.
          resultingHeight += 10;
        }
 
        // in case we are in the details panel, count in the title bar height
          var detailsPanel = query("body.details");
        if (detailsPanel.length > 0) {
          curam.debug.log("curam.util.getPageHeight() " 
              + bundle.getProperty("curam.util.bar.height"));
            resultingHeight += 20;
        }
      }
    }
 
      curam.debug.log("curam.util.getPageHeight() " 
          + bundle.getProperty("curam.util.returning"), resultingHeight);
    return resultingHeight;
  },
 
  /**
  * Takes an array and from its elements it creates a comma separated
  * string of values, which is then returned.
  */
  toCommaSeparatedList: function(inputArray) {
    var result = "";
    for (var i = 0; i < inputArray.length; i++) {
      result += inputArray[i];
      if (i < inputArray.length -1) {
        result += ",";
      }
    }
    return result;
  },
 
  /**
   * Bring focus to skip link destination placeholder.
   */
  skipLinkFocus: function() {
    var dest = dojo.byId('skip-dest');
    if (dest) {
      dest.focus();
    }
  },
  
  /**
  * Registers a handler for submitting a form when Enter key is pressed.
  *
  * Called from the PageTag - will be called on every page in any context,
  * main content, dialog, etc.
  */
  setupGenericKeyHandler: function() {
      ready(function() {
      // The handler is never explicitly deregistered - disappears when
      // the runtime context is destroyed (new page loaded)
      var f = function(event) {
        
        // On ESC key handling: When ESC key is pressed and in a modal, 
        // the modal will close automatically.
        if (dojo.global.jsScreenContext.hasContextBits('MODAL')
            && event.keyCode == 27) {
          var ev = dojoEvent.fix(event);
          var dropdown = registry.byId(ev.target.id);
          var isDropdown =
            typeof dropdown != "undefined" && dropdown.baseClass == "dijitTextBox dijitComboBox";
          if (!isDropdown) {
            curam.dialog.closeModalDialog();
          }      
        }
        
        // On ENTER key handle the event
        if (event.keyCode == 13) {
            var ev = dojoEvent.fix(event);

        // only submit form when certain input fields have focus. This allows
        // for normal keyboard selection (example: pressing enter on date
        // selector icon) to happen without the form submitting.
 
    var isText = ev.target.type == "text";
    var isRadio = ev.target.type == "radio";
    var isCheckbox = ev.target.type == "checkbox";
    var isMultiSelect = ev.target.type == "select-multiple";
    var isPassword = ev.target.type == "password";
 
    var combo = registry.byId(ev.target.id);
    // Added a check so that form is not submitted when "Enter" key
    // is pressend in open state of dropdown.
    if (typeof combo != "undefined") {
      var comboWidget = registry.byNode(dojo.byId("widget_" + ev.target.id));
      if(comboWidget && comboWidget.enterKeyOnOpenDropDown) {
        comboWidget.enterKeyOnOpenDropDown = false;
        return false;
      }
    }
    
    var isCombo =
    typeof combo != "undefined" && combo.baseClass == "dijitComboBox";
    if ((!isText && !isRadio && !isCheckbox && !isMultiSelect
    && !isPassword) || isCombo ) {
      return true;
    }
    var defaultSubmitButton = null;
      var explicitDefaultBtnArray = query(".curam-default-action");
    // take the default button if set
    if (explicitDefaultBtnArray.length > 0) {
      defaultSubmitButton = explicitDefaultBtnArray[0];
 
    } else {
      // otherwise take the first found submit button
        var submitButtonsArr = query("input[type='submit']");
      if (submitButtonsArr.length > 0) {
        defaultSubmitButton = submitButtonsArr[0];
      }
    }
    // now click the button found
    if (defaultSubmitButton != null) {
        dojoEvent.stop(dojoEvent.fix(event));
      curam.util.clickButton(defaultSubmitButton);
      return false;
    }
	//Focus remains in the date selector on ENTER
    dojo.require("curam.dateSelectorUtil");
    var isInputyear = dojo.byId("year");
    if (isInputyear) {
      dojo.stopEvent(dojo.fixEvent(event));
      
      //Enter key updates the calendar
      curam.dateSelectorUtil.updateCalendar();
     }
        }
 
        // otherwise let the event continue
        return true;
      };
 
        // event must be onKeyUp, as the ESC key event is not fired during an
        // onKeyPress event.
        curam.util.connect(windowBase.body(), "onkeyup", f);
    });
  },
 
  /**
  * Returns true is key press event is triggered by the enter key.
  * Used by context panel toggle icon and list/cluster toggle icons.
  */  
  enterKeyPress: function(event) { 
    if(event.keyCode == 13) {
      return true;
    }
  },
  
  /**
   * Catches SHIFT + TAB keyboard event on modal help and close icon.
   * When tabbing backward, once visible button is encountered in the 
   * modal title bar the focus is looped back to the last button in 
   * the modal button bar.
   */  
   isShiftTab: function(e) { 
     if(e.shiftKey && e.keyCode == 9) {
       var elem, evt = e ? e:event;
       if (evt.srcElement) {
         elem = evt.srcElement;
       } else if (evt.target){
         elem = evt.target;
       }
       
       if (elem.previousSibling.className == "dijitDialogHelpIcon") {
         return false;
       } else {
         var modalId = elem.parentElement.parentElement.id;
         var endModal = dojo.byId("end-" + modalId);
         if (endModal) {
           endModal.focus();
         }
       }
     }
   },
 
   /**
    * When using tab navigation focus should come of help icon of title bar after the end of modal.
    * This is called from a keydown event on end of modal and sets the focus on help icon of title bar.
    */
   focusHelpIconOnTab: function(e) { 
     if(!e.shiftKey && e.keyCode == 9) {
       var helpIcon = dojo.query(".dijitDialogHelpIcon")[0];
       if (helpIcon) {
         setTimeout(function() { helpIcon.focus(); }, 5);
       }
     }
   },
   
  /**
  * Given a DOM node, boolean state and class names for true and false
  * alternatives, the function sets the appropriate classes on the node.
  */
  swapState: function(node, state, classTrue, classFalse) {
    if (state) {
        domClass.replace(node, classTrue, classFalse);
 
    } else {
        domClass.replace(node, classFalse, classTrue);
    }
  },
 
  /**
  * Creates a URL query string including the leading question mark
  * from the specified page parameters.
  * The function handles URL-encoding of the values so do NOT encode them.
  *
  * @param params Object in the following format:
  *                { param1Name:"value", param2Name:248 }
  */
  makeQueryString: function(params) {
    if (!params || params.length == 0) {
      return "";
    }
 
    var result = [];
    for (var paramName in params) {
      result.push(paramName + "=" + encodeURIComponent(params[paramName]));
    }
 
    return "?" + result.join("&");
  },
 
  /**
  * Handles the onClick event for the list action menu items.
  *
  * @param url
  *          The URL of the required page.
  * @param sameDialog
  *          True if we re in a dialog and the page flow should stay
  *          in the same dialog.
  */
    clickHandlerForListActionMenu: function(url, sameDialog, newWindow, event) {
    // TODO: This handler was intended only for the list row actions menu but
    // is now being used for page level actions menus also, so re-name
    // appropriately. Also, *some* of the code in this method is duplicated
    // in the "clickHandler" method of UIMPageAdaptor.js. AS LONG AS THESE
    // METHODS ARE SEPARATE, ANY UPDATES TO THE LOGIC BELOW MUST BE ANALYZED
    // TO SEE IF THEY NEED TO BE APPLIED IN THE "UIMPageAdaptor" CLASS.
    if (sameDialog) {
      var href = curam.util.replaceUrlParam(url, "o3frame", "modal");
        var ctx = dojo.global.jsScreenContext;
      ctx.addContextBits('MODAL');
      href = curam.util.replaceUrlParam(href, "o3ctx", ctx.getValue());
      curam.util.redirectWindow(href);
      return;
    }
 
    // create a dummy anchor object
    var anchor = { href: url };
 
        require(["curam/ui/UIMPageAdaptor"]);
    if (curam.ui.UIMPageAdaptor.allowLinkToContinue(anchor)) {
      // In the case of a list action menu the click event is no longer coming
      // from an anchor element, instead it's a Diji MenuItem. Explicitly
      // setting window.location fakes the same behaviour as clicking the anchor
      // element. This will handle the sceanrios tested by allowLinkToContinue,
      // which are file downloads and the mailto link.
      // TODO: Can this method just return and let the event continue without
      // setting window.location....??? Seems to be other event handers
      // supressing this, so going with this approach for now.
        dojo.global.location = url;
      return;
    }
 
    // if we have an anchor, stop the click event and perform standard tab
    // processing (i.e. should it open in a new tab etc.)
    if (anchor != null) {
        if (event) {
          dojoEvent.fix(event);
          dojoEvent.stop(event);
      }
 
      if (!anchor.href || anchor.href.length == 0) {
        // the event has been stopped, just return if it has no href.
        // any onclick handlers attached to the link will have executed by now.
        return;
      }
      if (newWindow && !curam.util.isInternal(url)) {
          dojo.global.open(url);
 
      } else if (curam.ui.UIMPageAdaptor.isLinkValidForTabProcessing(anchor)) {
        var uimPageRequest = new curam.ui.PageRequest(anchor.href);
        if (dojo.global.jsScreenContext.hasContextBits("LIST_ROW_INLINE_PAGE")
          || dojo.global.jsScreenContext.hasContextBits("NESTED_UIM")) {
          uimPageRequest.pageHolder = dojo.global;
        }
        require(["curam/tab"], function() {
          curam.tab.getTabController().handlePageRequest(uimPageRequest);
        });
      }
    }
    // Otherwise we let the event continue uninterrupted.
  },
 
  /**
     * Gets browser to action a mailto: link in a separate iframe.
     * This is to avoid issues with page unloading when mailto link is clicked
     * on some browsers.
     * 
     * @param event The onclick DOM event.
     * @param url The URL of the link, including the mailto: protocol.
     */
    clickHandlerForMailtoLinks: function(event, url) {
      // stop anchor click from propagating and changing page
      dojo.stopEvent(event);

      // is there existing iframe to reuse?
      var iframe = dojo.query("#mailto_frame")[0];
      if (!iframe) {
        // no frame to reuse - create a new one
        iframe = dojo.io.iframe.create("mailto_frame", "");
      }
      
      // get browser to action the mailto: link in separate frame
      iframe.src = url;
      
      // return false as per convention for DOM click handlers
      return false;
    },
   
    /**
  * Decides whether or not the URL is internal.
  *
  * @param {String} url
  *            URL to extract data from.
  *
  * @returns true if the URL is internal false it it is external.
  */
  isInternal: function(url) {
    var path = url.split("?")[0];
    // Occurrence of Page.do determines whether or not it is internal URL.
    // It is assumed that, the external URL's would not have Page.do as it
    // fixed internal action call for curam.
    // TODO : Determining the URL is internal based on Page.do is a
    // brittle solution.Implement the improved solution.
    var occurrence = path.match("Page.do");
    if (occurrence!= null) {
      return true;
    }
    return false;
  },
 
  /**
  * Takes a URL and extracts its last path segment with the query string.
  *
  * @param {String} url
  *            URL to extract data from.
  *
  * @returns The last path segment of the URL with the query string,
  *      if it is part of the URL.
  */
  getLastPathSegmentWithQueryString: function(url) {
    var pathAndParams = url.split("?");
    var pathComponents = pathAndParams[0].split("/");
    return pathComponents[pathComponents.length - 1]
    + (pathAndParams[1] ? "?" + pathAndParams[1] : "");
  },
 
  /**
  * Replaces standard submit buttons with anchor tags when no images are used.
  */
  replaceSubmitButton: function(name) {
    if(curam.replacedButtons[name] == "true") {
      return;
    }
 
    /*
    * In the agenda player search for input elements where the name attribute
    * ends with SUM. This is required because an extra string of SUM is
    * appended onto the end of the name attribute value in the agenda player.
    * For all other submit buttons in the application we'll search for the
    * input fields the normal way to ensure we're not breaking any older
    * functionality.
    */
    var buttonId = '__o3btn.' + name;
    var inputList;
      if (dojo.global.jsScreenContext.hasContextBits('AGENDA')) {
        inputList = query("input[id='" + buttonId + "']");
 
    } else {
        inputList = query("input[name='" + buttonId + "']");
    }
 
    /*
    * You can supply 3 parameters to the forEach method of the dojo node list.
    * The current node, the index, and the node list itself.
    */
    inputList.forEach(function(replacedButton, index, theButtons) {
      replacedButton.tabIndex = -1;
      var parentSpan = replacedButton.parentNode;
 
      var buttonId = "btn-id-" + index;
      curam.util.setupWidgetLoadMask("a." + buttonId);
      
      var cssClass = 'ac initially-hidden-widget ' + buttonId;
      if(domClass.contains(replacedButton, "first-action-control")) {
        cssClass += ' first-action-control';
      }
      
      var newLink = domConstruct.create("a", {
        "class": cssClass,
        href: "#"
      }, replacedButton, "before");
 
      var pageLevelMenu = dojo.query(".page-level-menu")[0];
      if(pageLevelMenu) {
    	  dojo.attr(newLink,"title",replacedButton.value);
      }
      
      /*
      * Adding filler span to create spacing between buttons. This is needed
      * because if spacing is added to anchor element using CSS, the spacing is
      * still clickable in IE.
      */
        domConstruct.create("span", {
        "class": "filler"
      }, newLink, "before");
 
      // Adding span elements inside anchor tag to display rounded corners.
        var left = domConstruct.create("span", {
        "class": "left-corner"
      }, newLink);
 
        var right = domConstruct.create("span", {
        "class": "right-corner"
      }, left);
 
      // Changed from using inner HTML.
        var middle = domConstruct.create("span", {
        "class": "middle"}, right );
 
        middle.appendChild(document.createTextNode(replacedButton.value));
 
        curam.util.addActionControlClass(newLink);
 
          on(newLink, "click", function(event) {
          curam.util.clickButton(this._submitButton);
            dojoEvent.stop(event);
        });
 
        /*
        * Record the submit button on the link. This is for modal dialogs, so it
        * can distinguish a submit anchor tag from a normal anchor tag.
        *
        * NB: We have a temporary situation where we have 3 page-level-action
        * sets. 2 actions sets are the existing top and bottom ones, but they are
        * currently hidden. The third is the new button bar at the bottom of the
        * page. This is outside of the HTML form which means the "_submitButton"
        * variable was being set to a button that didn't have an associated form.
        * This caused errors in our modal dialog code. The temporary solution is
            * to set all _submitButtons to the first button found (theButtons[0])
            * which is guaranteed to be inside the form. The real solution
            * is to re-do the new button bar work so it is within the form.
        */
        newLink._submitButton = theButtons[0];
 
          domClass.add(replacedButton, 'hidden-button');
    });
 
    curam.replacedButtons[name] = "true";
  },
 
  /**
  * Adds a listener that will display the widget specified by query.
  *
  *  @param query
  *      Query of the widget to setup load mask for.
  */
    setupWidgetLoadMask: function(queryString) {
    curam.util.subscribe('/curam/page/loaded', function() {
        var widget = query(queryString)[0];
      if (widget) {
          style.set(widget, 'visibility', 'visible');
 
      } else {
        curam.debug.log("setupButtonLoadMask: " 
          + bundle.getProperty("curam.util.not.found") + "'" + queryString
         + "'" + bundle.getProperty("curam.util.ignore.mask"));
      }
    });
  },
 
  /**
  * Optionaly replaces standard submit buttons within agenda player.
  */
  optReplaceSubmitButton: function(name) {
    if (curam.util.getFrameRoot(dojo.global,"wizard") == null) {
      curam.util.replaceSubmitButton(name);
      return;
    }
    var navigator = curam.util.getFrameRoot(dojo.global,"wizard").navframe.wizardNavigator;
    if (navigator.delegatesSubmit[jsPageID] != 'assumed') {
      curam.util.replaceSubmitButton(name);
    }
  },
 
  /**
  * Clicks a HTML button.
  *
  * @param buttonObj the button object or the id of the button object.
  */
  clickButton: function(buttonObj) {
      var theForm = dom.byId("mainForm");
    var hiddenButton;
 
    // if we have no argument, then return
    if (!buttonObj) {
      curam.debug.log("curam.util.clickButton: " 
        + bundle.getProperty("curam.util..no.arg"));
      return;
    }
 
    // if the argument is a string, then we assume it is the id of the
    // input element and search for it.
    if (typeof(buttonObj) == "string") {
      var buttonObjID = buttonObj;
      curam.debug.log("curam.util.clickButton: " 
        + bundle.getProperty("curam.util.searching")
        + bundle.getProperty("curam.util.id.of") + "'" + buttonObjID + "'.");
        buttonObj = query("input[id='"  + buttonObjID + "']")[0];
 
      // if we still have not found the input element, the return
      if (!buttonObj.form && !buttonObj.id) {
        curam.debug.log("curam.util.clickButton: " 
            + bundle.getProperty("curam.util.searched")
            + bundle.getProperty("curam.util.id.of") + "'" + buttonObjID 
            + bundle.getProperty("curam.util.exiting"));
        return;
      }
    }
 
    // In the agenda player search for input elements where the name attribute
    // ends with SUM. This is required because an extra string of SUM is
    // appended onto the end of the name attribute value in the agenda player.
    // For all other submit buttons in the application we'll search for the
    // hidden buttons the normal way to ensure we're not breaking any older
    // functionality.
      if (dojo.global.jsScreenContext.hasContextBits('AGENDA')) {
      hiddenButton = buttonObj;
  
      } else {
        hiddenButton = query("input[name='" + buttonObj.id + "']", theForm)[0];
    }
    try {
      // if the page is being submitted to self, publish event to enable
      // code to be run before refresh - used for example for saving list state
      // data to be restored on the page reload
        if (attr.get(theForm, "action").indexOf(jsPageID) == 0) {
        curam.util.publishRefreshEvent();
      }
      hiddenButton.click();
  
    } catch(e) {
      curam.debug.log(bundle.getProperty("curam.util.exception.clicking"));
    }
  },
 
  /**
  * Handles click event on the page level print button.
  * Invokes the windows print function to print the context panel
  * and main content area.
  *
  * @param event the click event object.
  *
  */
  printPage:function(event) {
    
    dojoEvent.stop(event);
    
    var mainAreaWindow = dojo.window.get(event.currentTarget.ownerDocument);
    var mainAreaIframeNode = mainAreaWindow.frameElement;
    
    var searchNode = mainAreaIframeNode;
    
    // find the tab conent holder div which holds each tab.
    while(searchNode 
                    && !dojo.hasClass(searchNode, "tab-content-holder")){
            searchNode = searchNode.parentNode;
    }
    
    var tabContentHolderNode = searchNode;
    
    var contextPanel = dojo.query(".detailsPanelFrame", tabContentHolderNode)[0];
    
    if (contextPanel != undefined && contextPanel != null) {
      contextPanel.contentWindow.focus();
      contextPanel.contentWindow.print();
    }
    
    mainAreaWindow.focus();
    mainAreaWindow.print();
    
    return false;

  },
 
  /**
  * Handles onmousedown event on the page toolbar buttons.
  * Adds a class name of selected to allow for CSS selected effect.
  *
  * @param event the click event object.
  *
  */
  addSelectedClass:function(event) {
      domClass.add(event.target,"selected");
  },
 
  /**
  * Handles onmouseup event on the page toolbar buttons.
  * Removes class name of selected..
  *
  * @param event the click event object.
  *
  */
  removeSelectedClass:function(event) {
      domClass.remove(event.target,"selected");
  },
 
  /**
  * Opens up the page level help page in new window.
  *
  * @param event the mouse click event.
  * @param event the help tag.
  *
  */
  openHelpPage: function(event, helpUrl){
      dojoEvent.stop(event);
    //opens up the constructed URL in new window.
      dojo.global.open(helpUrl);
  },
 
  /**
  * Connects the handler to the specified event on the specified object
  * and ensures it is disconnected when the page is unloaded.
  *
  * @param object
  *    The object to connect to.
  * @param eventName
  *    Name of the event to connect to.
  * @param handler
  *    The handler for the event.
  *
  * @return The disconnect token to be used with curam.util.disconnect()
  *    function.
  */
  connect: function(object, eventName, handler) {
    // wrap in another function to allow fixing event before passsing
    // to the handler
    var h = function(event) {
        handler(dojoEvent.fix(event));
    };

      if (has("ie") && has("ie") < 9) {
      object.attachEvent(eventName, h);
 
        unload.addOnWindowUnload(function() {
        object.detachEvent(eventName, h);
      });
 
      return { object: object, eventName: eventName, handler: h };
 
    } else {
        // The dojo/on API takes event names without the "on" prefix.
        var eventNameWithoutOn = eventName;
        if (eventName.indexOf("on") == 0) {
          eventNameWithoutOn = eventName.slice(2);
        }
        var dt = on(object, eventNameWithoutOn, h);
   
        unload.addOnWindowUnload(function() {
          dt.remove();
      });
 
      return dt;
    }
  },
 
  disconnect: function(token) {
      if (has("ie") && has("ie") < 9) {
      token.object.detachEvent(token.eventName, token.handler);
      } else {
        token.remove();
    }
  },
 
  /**
  * Subscribes the handler to the specified topic in the current runtime
  * context and ensures it is unsubscribed when the page is unloaded.
  *
  * @param topicName
  *    Name of the topic to subscribe to.
  * @param handler
  *    The handler for the topic.
  */
  subscribe: function(topicName, handler) {
      var st = topic.subscribe(topicName, handler);
      unload.addOnWindowUnload(function() {
        st.remove();
    });
 
    return st;
  },
 
  unsubscribe: function(token) {
      token.remove();
  },
 
  /**
  * Retrieves all action controls in action set.
  *
  * @param panelId
  *   ID of action set element.
  */
  addActionControlClickListener:function(panelId){
      var actionsPanel = dom.byId(panelId);
      var actionControlList = query(".ac", actionsPanel);
    if (actionControlList.length > 0) {
      for(var i = 0; i < actionControlList.length; i++) {
        var acNode = actionControlList[i];
        curam.util.addActionControlClass(acNode);
      }
    }
  },
 
  /**
  * Adds a CSS class names to modal buttons that have been clicked.
  * This allows specific styling to be applied when buttons in a selected
  * state.
  *
  * @param acNode
  *    Modal action button node
  */
  addActionControlClass:function(acNode){
    curam.util.connect(acNode, "onmousedown",function(){
        domClass.add(acNode, "selected-button");
      curam.util.connect(acNode, "onmouseout",function(){
          domClass.remove(acNode, "selected-button");
      });
    });
  },
 
  /**
  * Gets all cluster level action sets contained in the content panel.
  *
  */
  getClusterActionSet:function(){
      var contentNode = dom.byId("content");
      var clusterActionSets = query(".blue-action-set", contentNode);
    if (clusterActionSets.length > 0){
      for (var i=0; i<clusterActionSets.length; i++) {
        curam.util.addActionControlClickListener(clusterActionSets[i]);
      }
    }
  },
 
  /**
  * Adjust Button spacing, if needed, to prevent them overlapping
  */
  adjustActionButtonWidth:function() {
      if (has("ie") == 8) {
        ready(function() {
          if (dojo.global.jsScreenContext.hasContextBits('MODAL')) {
            query(".action-set > a").forEach(function(node) {
            if(node.childNodes[0].offsetWidth > node.offsetWidth) {
                style.set(node, "width", node.childNodes[0].offsetWidth + "px");
                style.set(node, "display", "block");
                style.set(node, "display", "inline-block");
            }
          });
        }
      });
    }
  },
 
  /**
  * Sets the '__o3rpu' parameter for the URL. This parameter is an enocoded
  * value and holds the requesting URL and its parameters. This function may add
  * additonal parameters to the requesting URL prior to encoding it.
  *
  * @param {String} url
  *     The requested URL
  * @param {curam.util.RuntimeContext} rtc
  *     RunTimeContext Object - provides access to Window object.
  * @param {Array} [extraParaArray]
  *     An optional array of extra parametes to be added to the requesting URL.
  *     The expected array structure is
  *     [{key:"x1",value:"y1"},{key:"x2",value:"y2"},...]
  * @return The requested URL with the '__o3rpu' parameter appended.
  */
  setRpu:function(url, rtc, /*optional*/ extraParaArray){
    //Throw exception if null/blank values passed in
    if(!url||!rtc||!rtc.getHref()){
      throw {
        name:"Unexpected values",
        message:"This value not allowed for url or rtc"
      };
    }
 
    var o3rpuValue = curam.util.getLastPathSegmentWithQueryString(rtc.getHref());
 
    // strip the __o3rpu parameter from the RPU value
    o3rpuValue = curam.util.removeUrlParam(o3rpuValue, curam.util.Constants.RETURN_PAGE_PARAM);
 
    //Check for extra parameters passed in as {key:"",value:""} format
    if(extraParaArray){
      var i;
      for(i = 0; i < extraParaArray.length; i++) {
        if(!extraParaArray[i].key||!extraParaArray[i].value){
          throw {
            name:"undefined value error",
            message:"The object did not contain a valid key/value pair"
          };
        }
        o3rpuValue = curam.util.replaceUrlParam(o3rpuValue,
        extraParaArray[i].key, extraParaArray[i].value);
      }
    }
    var returnUrl = curam.util.replaceUrlParam(url, curam.util.Constants.RETURN_PAGE_PARAM, encodeURIComponent(o3rpuValue));
    curam.debug.log("curam.util.setRpu " 
      + bundle.getProperty("curam.util.added.rpu") + returnUrl);
    return returnUrl;
    },

    /**
     * Retrieves the base URL from the location.href property associated with 
     * the current DOM Window object.
     * <p>
     * The base URL is the contents of the URL up as far, and including, the
     * application name.
     * <p>
     * For example, if the value of location.href was 
     * "http://philippa:9080/TabTest/AppController.do" then the value returned
     * would be "http://philippa:9080/TabTest"
     * 
     * @return the base URL or null if the URL cannot be retrieved.
     *
     */
    retrieveBaseURL: function() {
      //The regular expression will match a path of the form 
      //[protocol]://[domain]/[name]. Where [protocol] can be any character
      //e.g. http. Where [domain] can be any character except for 
      //the forward slash character e.g. www.curamsoftware.com. Where [name] can 
      //be any character except for the forward slash character e.g. Curam.
      return dojo.global.location.href.match(".*://[^/]*/[^/]*");
    },
    
    removeRoleRegion:function(){
      var body = dojo.query("body")[0];
      dojo.removeAttr(body, "role");
    },
    
    /*
     * Function for iframe title fall back.
     * If PAGE_TITLE isn't specified in the UIM, this function takes care
     * of falling back to the navigation tab title or the application tab.
     */
    iframeTitleFallBack: function(){
      var currentiframe = curam.tab.getContainerTab(curam.tab.getContentPanelIframe());
      
      var iframe = dojo.byId(curam.tab.getContentPanelIframe());       
      var pageTitle = iframe.contentWindow.document.title;
      
      var currentAppTab = dojo.query("div.nowrapTabStrip.dijitTabContainerTop-tabs > div.dijitTabChecked.dijitChecked")[0];
      var currentAppTabName = dojo.query("span.tabLabel", currentAppTab)[0];
      
      var currentNavTab = dojo.query("div.nowrapTabStrip.dijitTabNoLayout > div.dijitTabChecked.dijitChecked", currentiframe.domNode)[0];
      var currentNavTabName = dojo.query("span.tabLabel", currentNavTab)[0];
      
      if(pageTitle && pageTitle!=null){
        return pageTitle;
      } else if (currentNavTab){
          return currentNavTabName.innerHTML;
      } else {
          return currentAppTabName.innerHTML;
      }
    },
    
    /**
     * Function to add a specific class to the last visible node (cluster, list
     * or action set) in the page content area. It only works specifically in
     * the external application.
     * 
     * @return There's no return value of this function.
     */
    addClassToLastNodeInContentArea: function() {
      var divNodes = query("> div", "content");
      var divNodesCount = divNodes.length;
      
      if (divNodesCount == 0) {
        return "No need to add";
      }
      
      var lastNode = divNodes[--divNodesCount];
      
      while (domClass.contains(lastNode, "hidden-action-set") && lastNode) {
        lastNode = divNodes[--divNodesCount];
      }
      
      domClass.add(lastNode, "last-node");
      
    },
    
    /*
     * Function to check Highcontrast mode
     * If High contrast mode is turned on the method checks the class name 
     * high-contrast on body element.
     */
    highContrastModeType: function(){      
      var highContrastMode = dojo.query("body.high-contrast")[0];
      return highContrastMode;
    }
  });

  return curam.util;
});

},
'curam/dialog':function(){
/*
 * Copyright 2012-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */
define("curam/dialog", ["curam/util",
        "curam/debug",
        "curam/util/external",
        "curam/util/Refresh",
        "curam/tab",
        "curam/util/RuntimeContext",
        "curam/define",
        "curam/util/onLoad",
        "cm/_base/_dom",
        "curam/util/ResourceBundle"
        ], function(util, trace, external) {

/*
 * Modification History
 * --------------------
 * 25-Mar-2014  MV  [CR00423311] Handle usage from an external application.
 * 10-Jul-2013  KW  [CR00391894] Remove reference o3_artificial_post parameter.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 11-Mar-2013  MV  [CR00373738] Remove change to close dialog when page
 *    is loaded. We'll do it differently in curam/ModalDialog.
 * 23-Oct-2012  MV  [CR00347543] Refer to top level UIController.
 * 24-Sep-2012  MV  [CR00345119] Revert the change to the function used for
 *      detecting when page unloads in a modal.
 * 24-Jul-2012  MK  [CR00336401] Wrapped contents of the closeModalDialog
 *    method in dojo.ready to prevent it closing the model before the page has
 *    finished loading.
 * 07-Feb-2012  MV  [CR00301458] Code cleanup.
 * 15-Sept-2011 MK  [CR00287680] Change the function that is used to detect a 
 *      page unloading in a modal. Changing from addOnUnload to addOnWindowUnload
 * 02-Aug-2011  MV  [CR00283023] Refactored modalEventHandler to allow
 *      unit testing. Avoid unwanted refresh when parent is an Action.do page.
 * 29-Jul-2011  MV [CR00269970] Add support for refreshing based on submit with
 *      inline page as parent. 
 * 11-Feb-2011  PK  [CR00251730] Added support for refreshing main content
 *                    panel on submit.
 * 28-Jan-2011  MV  [CR00245381] Catch Access denied error when accessing
 *    external sites.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 13-Jan-2011  MV  [CR00241667] Fire event when the dialog infrastructure
 *    is ready.
 * 05-Jan-2011  SK  [CR00239843] Previous page id parameter is not added any
 *                  longer to the form submits from Agenda Player.
 * 12-Jan-2011  SK  [CR00241719] Added the option to close modal without
 *                               the parent redirect.
 * 29-Nov-2010  MV  [CR00232623] Add in a hack to properly unregister a handler
 *    on page unload when using agenda player.
 * 23-Nov-2010  MV  [CR00232063] Remove page loading mask.
 * 19-Nov-2010 MV [CR00231655] Store the display status and dialog size
 *     in the runtime context.
 * 18-Nov-2010 MV [CR00231387] Connect to DOM events with a function that will
 *    automatically disconnect on page unload.
 * 27-Oct-2010  MV  [CR00224488] Refactor for the dialog closing to work well
 *    with new HTML structure.
 * 26-Oct-2010  SK  [CR00224193] The situation where the dialog is opened from
 *                               non-page parent is now handled correctly.
   * 14-Oct-2010  MV  [CR00223441] Move functions to util namespace. Remove
 *    double invoking of a function.
 * 07-Oct-2010  MV  [CR00221605] Refactor for dialogs to work with the generic
 *    key handler that submits the page when Enter is pressed.
 * 17-Sep-2010  MV  [CR00220607] Removed a dead branch of code.
 * 27-Aug-2010  MV  [CR00217499] Refactored to remove hacks previously needed
 *                    to support the agenda player. Documentation comments
 *                    switched to jsdoc.
 * 21-Jul-2010  MV  [CR00211225] Indicate in the `onLoad` context that modal
 *                    is closing.
 * 24-Jun-2010  AF  [CR00202526] Removing reference to content-panel class name
 *                               in the calculateHeightByContents method.
 * 24-Jun-2010  MV  [CR00203864] Add debug output to autoheight calculation.
 * 09-Jun-2010  MV  [CR00202971] Remove the curam.iframeLoaded event,
 *                               add the height calculation function.
 * 04-Jun-2010  MV  [CR00202412] Simplify getting event identifier.
 * 23-Apr-2010  MV  [CR00194352] Fix screen context handling for HTML forms.
 * 11-Feb-2010  MV  [CR00188844] Add event identifier to the iframeLoaded event.
 * 11-Dec-2009  MV  [CR00173949] Remove the "SrPopUp" window name.
 * 24-Nov-2009  MV  [CR00175899] Only call the closeModal function if there
 *                                are no informational messages.
 * 20-Nov-2009  MV  [CR00175581] Replace curam.tab.refreshCurrentTab() call
   *                               with the correct util.redirectWindow().
   * 20-Nov-2009  MV  [CR00175615] Use the util.firePageSubmittedEvent
 *                                function.
 * 03-Sep-2009  MLB [CR00164883] Updated to refresh the current tab for user
 *                  preferences.
 * 07-Aug-2009  MV  [CR00164029] Notify the tabbed UI refresh mechanism
                                on submit. Reverted the previous change as now
                                the refresh is working as expected.
 * 23-Jul-2009  MV  [CR00162771] Updated to not refresh parent window when
 *                  in Tabbed UI.
 */

/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");
  
/**
 * @namespace Functions related to the Curam dialog support for UIMs.
 */
curam.define.singleton("curam.dialog", {
  MODAL_PREV_FLAG: "o3modalprev",
  MODAL_PREV_FLAG_INPUT: "curam_dialog_prev_marker",
  FORCE_CLOSE: false,
  ERROR_MESSAGES_HEADER: "error-messages-header",

  /**
   * Keeps track of the hierarchy of window objects for the open dialogs.
   * @private
   */
  _hierarchy: [],

  /**
   * ID of the dialog for the current context.
   * @private
   */
  _id: null,

  /**
   * @private
   */
  _displayedHandlerUnsToken: null,

  /**
   * True if the dialog has been displayed, false otherwise.
   * @private
   */
  _displayed: false,

  /**
   * Holds the current size of the dialog or null if it was not yet published.
   * @private
   */
  _size: null,

  /**
   * Indicates if the dialog should close without the parent redirection. 
   * @private
   */
  _justClose: false,

  validTargets: {
    "_top":true,"_self":true
  },

  initModal: function(pageId, messagesExist) {
    curam.dialog.pageId = pageId;
    curam.dialog.messagesExist = messagesExist;

      var topWin = util.getTopmostWindow();
    // receive the ID of the dialog
    var isIdSet = false;
    var unsToken = topWin.dojo.subscribe(
        "/curam/dialog/SetId", this, function(dialogId) {
            trace.log("curam.dialog: " 
              + bundle.getProperty("curam.dialog.id"), dialogId);
          curam.dialog._id = dialogId;
          isIdSet = true;

          topWin.dojo.unsubscribe(unsToken);
        });

    // trigger the dialog infrastructure init
    // also sets the dialog ID - see above
    topWin.dojo.publish("/curam/dialog/init");
    if (!isIdSet) {
      // unsubscribe, the modal infrastructure already initialized
      // or nobody listening for this particular event
        trace.log("curam.dialog: " + bundle.getProperty("curam.dialog.no.id"));
      topWin.dojo.unsubscribe(unsToken);
    }

    if(curam.dialog.closeDialog(false)) {
      // Do not do any more modal processing. Either the body is hidden off to
      // the left of the screen and messages are being displayed, or the window
      // has been closed.
      return;
    }

    // let us know when we are displayed
    curam.dialog._displayedHandlerUnsToken =
          util.getTopmostWindow().dojo.subscribe(
        "/curam/dialog/displayed", null, function(dialogID, size) {
          if (dialogID == curam.dialog._id) {
            curam.dialog._displayed = true;
            curam.dialog._size = size;

              util.getTopmostWindow().dojo.unsubscribe(
                curam.dialog._displayedHandlerUnsToken);
            curam.dialog._displayedHandlerUnsToken = null;
          }
        });
    // a hack to unsubscribe for agenda pages
    if (jsScreenContext.hasContextBits("AGENDA")
        || jsScreenContext.hasContextBits("TREE")) {

      dojo.addOnUnload(function() {
          util.getTopmostWindow().dojo.unsubscribe(
            curam.dialog._displayedHandlerUnsToken);
        curam.dialog._displayedHandlerUnsToken = null;
      });
    }

    //Wait for the page to load, then add onClick and onKey listeners to the
    //body element
    dojo.addOnLoad(function() {
      // Handle clicks in the dialog window
        util.connect(dojo.body(), "onclick", curam.dialog.modalEventHandler);

      // setup the forms in the page
      for (var i = 0; i < document.forms.length; i++) {
        var form = document.forms[i];
        curam.dialog.addFormInput(form, 'hidden', 'o3frame', 'modal');

        var ctxField = dojo.byId('o3ctx');
        var sc = new curam.util.ScreenContext(jsScreenContext.getValue());
        sc.addContextBits("ACTION|ERROR");
        ctxField.value = sc.getValue();

          util.connect(form, "onsubmit", curam.dialog.formSubmitHandler);
      }

      // mark as modal window - for later detection
        // by util.isModalWindow()
      window.curamModal = true;
    });

    dojo.addOnUnload(function() {
        util.getTopmostWindow().dojo.publish(
          "/curam/dialog/iframeUnloaded", [ curam.dialog._id, window ]);
    });

    if (isIdSet) {
      dojo.publish("/curam/dialog/ready");
    }
  },

  closeDialog: function(force) {
    if(force) {
      curam.dialog.forceClose();
    }
    var closeFunction = curam.dialog.checkClose(curam.dialog.pageId);
    if(closeFunction) {
        util.onLoad.addPublisher(function(context) {
        context.modalClosing = true;
      });

      //If the dialog window should close, but informational messages exist,
      //delay the closing of the window. Add a class to the messages to make
      //them visible, and place a button under them to close the window.action
      //If no messages exist, then just close the window, and optionally
      //redirect the parent page.
      if(curam.dialog.messagesExist) {
        dojo.addOnLoad(function(){
            var errMsgContainer = dojo.byId(util.ERROR_MESSAGES_CONTAINER);
            var errMsgNode = dojo.byId(util.ERROR_MESSAGES_LIST);
          var errMsgHeaderNode = dojo.byId(curam.dialog.ERROR_MESSAGES_HEADER);

          if(errMsgNode && errMsgHeaderNode) {
            //Save the messages locally, to be loaded by the next page that loads
            //which should be the parent page. The closeFunction is called
            //once the messages have been saved.
              util.saveInformationalMsgs(closeFunction);

            //Disable loading of informational messages in the popup,
            //so it doesn't run. This prevents a race condition which would wipe
            //out the messages before the parent page loads.
              util.disableInformationalLoad();

          } else {
            closeFunction();
          }
        });

      } else {
        //If no error messages exist, just run the close function.
        closeFunction();
      }
      //Return true, stating that the dialog is closing.
      return true;
    }
    //Return false, that the dialog is not closing.
    return false;
  },

  addFormInput: function(form, type, name, value) {
    return dojo.create("input", {
      "type": type,
      "name": name,
      "value": value
    }, form);
  },

  /**
   * Checks if the window should be closed. If the window should close, this
   * function returns another function which, when executed, closes the dialog,
   * and optionally redirects the parent page. If the window should not close,
   * it returns false.
   */
  checkClose: function(pageId) {
    if (curam.dialog._justClose) {
      return function() {
        curam.dialog.closeModalDialog();
      };
    }
	
    var parentWindow = curam.dialog.getParentWindow(window);
    if (!parentWindow) {
      return false;
    }

    //Check if the page is in a modal dialog, and if it is, whether or not
    //it should be closed.
    var href = window.location.href;
    var prevFlag = curam.dialog.MODAL_PREV_FLAG;

      var oldPageId = util.getUrlParamValue(href, prevFlag);
    var doClose = true;
    if (oldPageId) {
      if (parentWindow) {
        // If the URL parameter MODAL_PREV_FLAG is set, and is not the same
        // as the current page id, then shut down the dialog and redirect
        // the parent page the current URL. Remove the MODAL_PREV_FLAG
        if(oldPageId == pageId) {
          doClose=false;
        }
      }
    
    } else {
      doClose = false;
    }

      var scReq = util.getUrlParamValue(href, "o3ctx");
    if (scReq) {
      var sc = new curam.util.ScreenContext();
      sc.setContext(scReq);
      if (sc.hasContextBits('TREE|ACTION')) {
        doClose=false;
      }
    }

    if (doClose || curam.dialog.FORCE_CLOSE) {
      if (!curam.dialog.FORCE_CLOSE) {
        if (oldPageId=="user-prefs-editor") {
          return function() {
            if (parentWindow && parentWindow.location
                               !== util.getTopmostWindow().location) {
              curam.dialog.doRedirect(parentWindow);
            }
            curam.dialog.closeModalDialog();
          };
        }
        return function() {
            var rp = util.removeUrlParam;
          // Remove the modal and prevent cache flags from the url
          // before telling the parent to change it's location.
            href = rp(rp(rp(href, prevFlag), "o3frame"),util.PREVENT_CACHE_FLAG);
            href = util.adjustTargetContext(parentWindow, href);
          if (parentWindow && parentWindow.location
                                 !== util.getTopmostWindow().location) {
            curam.dialog.doRedirect(parentWindow, href, true);

          } else {
            curam.tab.getTabController().handleLinkClick(href);
          }
          curam.dialog.closeModalDialog();
        };

      } else {
        return function() {
          // In case there are some informational messages on the modal dialog,
          // make sure they are loaded in to the parent page, even if it
          // isn't refreshed.
            if (parentWindow !== util.getTopmostWindow()) {
            parentWindow.curam.util.loadInformationalMsgs();
          } //otherwise nowhere to show them
          
          curam.dialog.closeModalDialog();
        };
      }
    }
    return false;
  },

  /**
   * Returns the parent window of either the current window or of the specified
   * window.
   *
   * @param {window} [child] If specified, the dialog hierarchy will be used
   *      to look up the parent window.
   */
  getParentWindow: function(/*optional*/child) {
    if (!child) {
        trace.log("curam.dialog.getParentWindow(): " 
          + bundle.getProperty("curam.dialog.no.child"), window);
        trace.log("returning as parent = ", window.parent.location.href);
      return window.parent;
    }
      trace.log("curam.dialog.getParentWindow(): " 
        + bundle.getProperty("curam.dialog.child"), child.location.href);
    var hierarchy = curam.dialog._getDialogHierarchy();
    for (var i = 0; i < hierarchy.length; i++) {
      if (hierarchy[i] == child) {
        // the child found in the stack, parent is at the previous index
        var realParent = (i > 0) ? hierarchy[i - 1] : hierarchy[0];
          trace.log("curam.dialog.getParentWindow(): " 
            + bundle.getProperty("curam.dialog.parent.window"), realParent);
        return realParent;
      }
    }
    // the child NOT found in the stack
      trace.log("curam.dialog.getParentWindow(): " 
        + bundle.getProperty("curam.dialog.child.not.found"), 
        child.location.href);
      trace.log("curam.dialog.getParentWindow(): " 
        + bundle.getProperty("curam.dialog.hierarchy"), hierarchy);
    var ret = hierarchy.length > 0 ? hierarchy[hierarchy.length - 1] : undefined;
      trace.log("curam.dialog.getParentWindow(): " 
        + bundle.getProperty("curam.dialog.returning.parent"), 
          ret ? ret.location.href : "undefined");
    return ret;
  },

  /**
   * Dialog hierarchy is a way for the code to keep track of parent/opener
   * windows for the open modal dialogs. The window.parent property
   * cannot be used for this purpose, because for dojo dialogs it is always
   * pointing at the same parent window, so it does not reflect the real
   * dialog hierarchy.
   *
   * The hierarchy is implemented as a simple stack of consecutive window
   * objects.
   *
   * @returns Array The hierarchy of window objects.
   * @private
   */
  _getDialogHierarchy: function() {
    // the hierarchy is stored in the topmost window - the truly global context
      var topmostWindow = util.getTopmostWindow();
      topmostWindow.require(["curam/dialog"]);
    return topmostWindow.curam.dialog._hierarchy;
  },

  /**
   * Pushes the specified window onto the dialog hierarchy stack,
   * unless the window is already part of the stack.
   */
  pushOntoDialogHierarchy: function(newParent) {
    var hierarchy = curam.dialog._getDialogHierarchy();
    if (dojo.indexOf(hierarchy, newParent) < 0) {
      hierarchy.push(newParent);
        trace.log(bundle.getProperty("curam.dialog.add.hierarchy"), 
          newParent.location.href);
        trace.log(bundle.getProperty("curam.dialog.full.hierarchy"), hierarchy);
    }
  },

  /**
   * Removes the specified window from the dialog hierarchy stack.
   *
   * @param child The window object to remove from the dialog hierarchy.
   */
  removeFromDialogHierarchy: function(child) {
    var hierarchy = curam.dialog._getDialogHierarchy();
    if(!child || hierarchy[hierarchy.length - 1] == child) {
      hierarchy.pop();

    } else {
        trace.log("curam.dialog.removeFromDialogHierarchy(): " 
          + bundle.getProperty("curam.dialog.ignore.request"));
      try {
          trace.log(child.location.href);
      
      } catch(e) {
        // in scenarios where we open external site in a dialog, this call
        // causes Access denied exception - we just  catch it and continue
          trace.log(e.message);
      }
    }
  },

  stripPageOrActionFromUrl: function(url) {
    var idx = url.lastIndexOf("Page.do");
    var len = 7;
    if(idx < 0) {
      idx = url.lastIndexOf("Action.do");
      len = 9;
    }
    if(idx < 0) {
      idx = url.lastIndexOf("Frame.do");
      len = 8;
    }
    if(idx > -1 && idx == url.length - len){
      return url.substring(0, idx);
    }
    return url;
  },

  /**
   * @private
   * 
   * @param href
   * @param rtc
   * @param stripPageOrAction
   * @returns {Boolean}
   */
  _isSameBaseUrl: function(href, rtc, stripPageOrAction) {
    if(href && href.indexOf('#') == 0){return true;}
    var hrefSplit = href.split("?");
    var hereSplit = rtc.getHref().split("?");

    //If one url is relative, and the other is absolute, compensate by removing
    //everything except what's after the last "/"
    if(hrefSplit[0].indexOf("/") < 0) {
      var parts = hereSplit[0].split("/");
      hereSplit[0] = parts[parts.length -1];
    }
    if(hereSplit[0].indexOf("/") < 0) {
      var parts = hrefSplit[0].split("/");
      hrefSplit[0] = parts[parts.length -1];
    }

    if (stripPageOrAction && stripPageOrAction == true) {
      hrefSplit[0] = curam.dialog.stripPageOrActionFromUrl(hrefSplit[0]);
      hereSplit[0] = curam.dialog.stripPageOrActionFromUrl(hereSplit[0]);
    }

    if(hrefSplit[0] == hereSplit[0]){
      return true;
    }

    return false;
  },

  modalEventHandler: function(event) {
    curam.dialog._doHandleModalEvent(event,
        new curam.util.RuntimeContext(window),
        curam.dialog.closeModalDialog,
        curam.dialog.doRedirect);
  },
  
  /**
   * Hanldes the specified event.
   * 
   * @param e The event to handle.
   * @param rtc Runtime context.
   * @param closeDialog The function to be called to close the dialog.
   * @param doRedirect The function to be called to redirect the parent window
   *    to a new location.
   * @returns {Boolean} True if the event should continue, false if it should
   *    be stopped.
   */
  _doHandleModalEvent: function(e, rtc, closeDialog, doRedirect) {
    var target = e.target;
      var u = util;

    switch(target.tagName) {
      case 'INPUT':
        // If the user clicks a submit control, copy its "keepModal" attribute
        // on to the form it is in so that can be read by the onSubmit handler
        if(dojo.attr(target, "type") == "submit"
            && typeof target.form != "undefined") {

          target.form.setAttribute("keepModal", target.getAttribute("keepModal"));
        }
        return true;

      case 'IMG': case 'SPAN': case 'DIV':
        target = cm.getParentByType(target, 'A');
        if (target == null) {
          return;
        }
        //If the IMG, SPAN or DIV node has an anchor tag parent, leave it run
        //into the 'A' case after changing the target to the parent anchor tag.
      case 'A':
      //If the target is an anchor tag, just get out of the switch statement
        //and keep going in the function, unless the anchor tag is a
        //dynamically generated tag used to replace a submit button.
          //This replacement is done in util.replaceSubmitButton function.
        if(target._submitButton) {
          target._submitButton.form.setAttribute("keepModal",
                                target._submitButton.getAttribute("keepModal"));
          return;
        }
        break;
      default:
        //If we're not interested in this tag, ignore the event
        return true;
    }
    var stopEvent = dojo.stopEvent;

    var href = target.getAttribute("href");

    // handling the case of a cancel link where there is no o3rpu
    if (href == '') {
      closeDialog();
      return false;
    }

    if (href.indexOf("javascript") == 0) {
      return false;
    }
    var ctx = jsScreenContext;
    ctx.addContextBits('MODAL');

    // If the anchor tag does not have a href, we simply cancel the event.
    // Any onlick handlers attached directly to the anchor element will have
    // completed by the time this handler is called.
    if (!href) {
      return false;
    }

    //If the anchor tag is trying to open a new window, open it separately,
    //and do not change this page, or redirect the parent
    var targetWindow = target.getAttribute("target");
    if(targetWindow && !curam.dialog.validTargets[targetWindow]) {
      return true;
    }
    //Make sure that file download links do not close the modal dialog.
    //Instead, create an iframe on the fly, and set it's source to the file
    //that is to be downloaded.
    if(href && href.indexOf("/servlet/FileDownload?") > -1) {
      var iframe = dojo.create("iframe", {
        src: href
      }, dojo.body());
      iframe.style.display = 'none';
      stopEvent(e);
      return false;
    }

    //If the link is to a URL outside the Curam application, open the link in
    //a new window.
    if(dojo.hasClass(target, "external-link")) {
      return true;
    }

    // If the link is not going to result in the page changing,
    // then do nothing
      if(util.isSameUrl(href, null, rtc)) {
      // If the link is not simply linking in this page, then redirect the page.
      // otherwise just let the page jump to the local anchor tag.
      if(href.indexOf("#") < 0) {
         href = u.replaceUrlParam(href, "o3frame", "modal");
         href = u.replaceUrlParam(href, "o3ctx", ctx.getValue());
         doRedirect(window, href);
         return false;
      }
      return true;
    }
    if(href && curam.dialog._isSameBaseUrl(href, rtc, true)
        && !target.getAttribute("keepModal")){

      target.setAttribute("keepModal", "true");
    }

    var parentWindow = curam.dialog.getParentWindow(rtc.contextObject());
    
    if(target && target.getAttribute) {
      stopEvent(e);

      //If the link has the 'keepModal' attribute set to true, then
      // the new page should be opened in the same modal dialog.
      if(target.getAttribute("keepModal") == "true") {
        href = u.replaceUrlParam(href, "o3frame", "modal");
        href = u.replaceUrlParam(href, "o3ctx", ctx.getValue());
        doRedirect(window, href);

      // Otherwise the dialog will close and target will be opened in the parent
      // page
      } else if(parentWindow) {
        href = u.removeUrlParam(href, "o3frame");
        href = u.removeUrlParam(href, curam.dialog.MODAL_PREV_FLAG);
        
        if (parentWindow.location !== util.getTopmostWindow().location) {
          var parentRtc = new curam.util.RuntimeContext(parentWindow);
          var phref = parentRtc.getHref(); 
          phref = u.removeUrlParam(phref, "o3frame");
          
          // only redirect if the parent window is not already on the target
          // page 

          // for submitted action pages in the parent window only comapare
          // the base URL, ignoring any page parameters, because they are not
          // included in the Action.do type URL anyway
          if (util.isActionPage(phref)) {
            if (!curam.dialog._isSameBaseUrl(href, parentRtc, true)) {
              href = u.adjustTargetContext(parentWindow, href);
              doRedirect(parentWindow, href);
            }
            
          // for all other pages compare full URLS and only redirect if
          // the same page is not already loaded
          } else {
            if (!util.isSameUrl(href, phref)) {
              href = u.adjustTargetContext(parentWindow, href);
              curam.dialog.doRedirect(parentWindow, href);
            }
          }
        
        } else {
          //no tab opened
          var tabContext = new curam.util.ScreenContext('TAB');
          href = u.replaceUrlParam(href, "o3ctx", tabContext.getValue());
          curam.tab.getTabController().handleLinkClick(href);
        }

        closeDialog();
      }

      return false;
    }

    if (parentWindow && typeof(target) == "undefined" || target == null
      || target == "_self" || target == "") {
      stopEvent(e);
      href = href.replace(/[&?]o3frame=modal/g, "")
        .replace("%3Fo3frame%3Dmodal", "")
        .replace("?o3frame%3Dmodal", "");
      //modal closes, so the context should be replaced by the previous.
        href = util.updateCtx(href);
        if (parentWindow.location !== util.getTopmostWindow().location) {
        doRedirect(parentWindow, href);
      
      } else {
        //no tab opened
        var tabContext = new curam.util.ScreenContext('TAB');
        href = u.replaceUrlParam(href, "o3ctx", tabContext.getValue());
        curam.tab.getTabController().handleLinkClick(href);
      }
      
      closeDialog();
      return false;
    }

    //In this case, the page wants to open a popup window
    return true;
  },

  /**
   * This listener handles the onSubmit event of all forms on the page.
   * It adds the current page ID to the URL as the 'oldPageId' parameter
   * and if the window should be closed, it adds the 'MODAL_PREV_FLAG=true'
   * parameter to the URL.
   */
  formSubmitHandler: function(e) {
    var parentWindow = curam.dialog.getParentWindow(window);
    if(typeof parentWindow == "undefined") {
      return true;
    }

    e.target.method="post";
    e.target.setAttribute("target", window.name);
    var action = e.target.action;

    var prevFlag = curam.dialog.MODAL_PREV_FLAG;
    var flagInputId = curam.dialog.MODAL_PREV_FLAG_INPUT;
      var u = util;

    // If the input has previously been written to the form, delete it.
    // This is to handle multiple submissions, which can happen if an exception
    // is thrown during submission.
    var input = dojo.byId(flagInputId);
    if(input) {
      input.parentNode.removeChild(input);
    }

    // Set the page id in the url if the following page should close the modal
    // dialog if the id has changed. Add a hidden input to the form too, which
    // will be used if the form is a multi-part post containing a file.
    if(e.target.getAttribute("keepModal") != "true"
         && !jsScreenContext.hasContextBits('AGENDA')) {
      var multipart = 'multipart/form-data';
      if(e.target.enctype == multipart || e.target.encoding==multipart) {
        e.target.action = u.removeUrlParam(action, prevFlag);
        input = curam.dialog.addFormInput(e.target, "hidden", prevFlag,
                                          curam.dialog.pageId);
        input.setAttribute("id", flagInputId);
        input.id = flagInputId;

      } else {
        e.target.action = u.replaceUrlParam(action, prevFlag, curam.dialog.pageId);
      }

    } else {
      e.target.action = u.removeUrlParam(action, prevFlag);
    }

    //Tell the parent page that the modal it opened has submitted a form, so
    //that if the user clicks a 'Cancel' link later, the parent page will
    //refresh itself.
    parentWindow.curam.util.invalidatePage();

    // Hook into the overall tabbed UI refresh mechanism (except for external
    // application).
    if (!jsScreenContext.hasContextBits("EXTAPP")) {
      util.firePageSubmittedEvent("dialog");
    }
    return true;
  },

  /**
   * If this is called in the document head, then initModal will shut down
   * no matter what the conditions. This is like a window.close call,
   * except it will refresh the parent if necessary.
   */
  forceClose: function() {
    curam.dialog.FORCE_CLOSE = true;
  },

  /**
   * If this is called in the document head, then any call to
     * util.redirectWindow in the parent window will only refresh it,
   * instead of redirecting it to another URL.  This is primarily used
   * in the user preferences dialog.
   */
  forceParentRefresh: function() {
    var parentWindow = curam.dialog.getParentWindow(window);
    if(!parentWindow){return;}
    parentWindow.curam.util.FORCE_REFRESH = true;
  },

  closeModalDialog: function() {
    var topmostWindow = util.getTopmostWindow();
    if (curam.dialog._displayedHandlerUnsToken != null) {
      topmostWindow.dojo.unsubscribe(curam.dialog._displayedHandlerUnsToken);
      curam.dialog._displayedHandlerUnsToken = null;
    }

    if (typeof(curam.dialog._id) == "undefined" || curam.dialog._id == null) {
      var frameID = window.frameElement.id;
      var modalID = frameID.substring(7);  // remove "iframe-" prefix
      curam.dialog._id=modalID;
      trace.log("curam.dialog.closeModalDialog() " 
          + bundle.getProperty("curam.dialog.modal.id") + modalID);
    }
  
    trace.log("publishing /curam/dialog/close for ", curam.dialog._id);
    util.getTopmostWindow().dojo.publish(
        "/curam/dialog/close", [ curam.dialog._id ]);
    trace.log("publishing /curam/dialog/close for ", curam.dialog._id);
  },

  /**
   * Parses the window options string.
   *
   * @returns An object with window option properties. In case no windowOptions
   *          were passed if, empty object (with no properties) is returned.
   */
  parseWindowOptions: function(windowOptions) {
    var opts = {};

    if(windowOptions) {
        trace.log("curam.dialog.parseWindowOptions " 
          + bundle.getProperty("curam.dialog.parsing"), windowOptions);
      var tokens = windowOptions.split(',');
      var splitToken;
      for(var i = 0; i < tokens.length; i++) {
        splitToken = tokens[i].split('=');
        opts[splitToken[0]] = splitToken[1];
      }
        trace.log("done:", dojo.toJson(opts));

    } else {
        trace.log("curam.dialog.parseWindowOptions " 
          + bundle.getProperty("curam.dialog.no.options"));
    }

    return opts;
  },

  /**
   * Redirects to a new URL in the specified context.
   * 
   * @param context The runtime context in which the redirect will take place.
   * @param [href] URL of the target page or null.
   * @param [force] Indicates if the refresh should take place even
   *    if the href is the same as the current href.
   * @param [ignoreFrames] If true, then any other frames on the page are
   *    not refreshed.
   */
  doRedirect: function(context, href, force, ignoreFrames) {
    window.curamDialogRedirecting = true;

    context.curam.util.redirectWindow(href, force, ignoreFrames);
  },
  
  closeGracefully: function() {
    curam.dialog._justClose = true;
  }
  });
  
  return curam.dialog;
});

},
'dijit/_CssStateMixin':function(){
define("dijit/_CssStateMixin", [
	"dojo/touch",
	"dojo/_base/array", // array.forEach array.map
	"dojo/_base/declare",	// declare
	"dojo/dom-class", // domClass.toggle
	"dojo/_base/lang", // lang.hitch
	"dojo/_base/window" // win.body
], function(touch, array, declare, domClass, lang, win){

// module:
//		dijit/_CssStateMixin
// summary:
//		Mixin for widgets to set CSS classes on the widget DOM nodes depending on hover/mouse press/focus
//		state changes, and also higher-level state changes such becoming disabled or selected.

return declare("dijit._CssStateMixin", [], {
	// summary:
	//		Mixin for widgets to set CSS classes on the widget DOM nodes depending on hover/mouse press/focus
	//		state changes, and also higher-level state changes such becoming disabled or selected.
	//
	// description:
	//		By mixing this class into your widget, and setting the this.baseClass attribute, it will automatically
	//		maintain CSS classes on the widget root node (this.domNode) depending on hover,
	//		active, focus, etc. state.   Ex: with a baseClass of dijitButton, it will apply the classes
	//		dijitButtonHovered and dijitButtonActive, as the user moves the mouse over the widget and clicks it.
	//
	//		It also sets CSS like dijitButtonDisabled based on widget semantic state.
	//
	//		By setting the cssStateNodes attribute, a widget can also track events on subnodes (like buttons
	//		within the widget).

	// cssStateNodes: [protected] Object
	//		List of sub-nodes within the widget that need CSS classes applied on mouse hover/press and focus
	//.
	//		Each entry in the hash is a an attachpoint names (like "upArrowButton") mapped to a CSS class names
	//		(like "dijitUpArrowButton"). Example:
	//	|		{
	//	|			"upArrowButton": "dijitUpArrowButton",
	//	|			"downArrowButton": "dijitDownArrowButton"
	//	|		}
	//		The above will set the CSS class dijitUpArrowButton to the this.upArrowButton DOMNode when it
	//		is hovered, etc.
	cssStateNodes: {},

	// hovering: [readonly] Boolean
	//		True if cursor is over this widget
	hovering: false,

	// active: [readonly] Boolean
	//		True if mouse was pressed while over this widget, and hasn't been released yet
	active: false,

	_applyAttributes: function(){
		// This code would typically be in postCreate(), but putting in _applyAttributes() for
		// performance: so the class changes happen before DOM is inserted into the document.
		// Change back to postCreate() in 2.0.  See #11635.

		this.inherited(arguments);

		// Automatically monitor mouse events (essentially :hover and :active) on this.domNode
		array.forEach(["onmouseenter", "onmouseleave", touch.press], function(e){
			this.connect(this.domNode, e, "_cssMouseEvent");
		}, this);

		// Monitoring changes to disabled, readonly, etc. state, and update CSS class of root node
		array.forEach(["disabled", "readOnly", "checked", "selected", "focused", "state", "hovering", "active"], function(attr){
			this.watch(attr, lang.hitch(this, "_setStateClass"));
		}, this);

		// Events on sub nodes within the widget
		for(var ap in this.cssStateNodes){
			this._trackMouseState(this[ap], this.cssStateNodes[ap]);
		}
		// Set state initially; there's probably no hover/active/focus state but widget might be
		// disabled/readonly/checked/selected so we want to set CSS classes for those conditions.
		this._setStateClass();
	},

	_cssMouseEvent: function(/*Event*/ event){
		// summary:
		//	Sets hovering and active properties depending on mouse state,
		//	which triggers _setStateClass() to set appropriate CSS classes for this.domNode.

		if(!this.disabled){
			switch(event.type){
				case "mouseenter":
				case "mouseover":	// generated on non-IE browsers even though we connected to mouseenter
					this._set("hovering", true);
					this._set("active", this._mouseDown);
					break;

				case "mouseleave":
				case "mouseout":	// generated on non-IE browsers even though we connected to mouseleave
					this._set("hovering", false);
					this._set("active", false);
					break;

				case "mousedown":
				case "touchpress":
					this._set("active", true);
					this._mouseDown = true;
					// Set a global event to handle mouseup, so it fires properly
					// even if the cursor leaves this.domNode before the mouse up event.
					// Alternately could set active=false on mouseout.
					var mouseUpConnector = this.connect(win.body(), touch.release, function(){
						this._mouseDown = false;
						this._set("active", false);
						this.disconnect(mouseUpConnector);
					});
					break;
			}
		}
	},

	_setStateClass: function(){
		// summary:
		//		Update the visual state of the widget by setting the css classes on this.domNode
		//		(or this.stateNode if defined) by combining this.baseClass with
		//		various suffixes that represent the current widget state(s).
		//
		// description:
		//		In the case where a widget has multiple
		//		states, it sets the class based on all possible
		//	 	combinations.  For example, an invalid form widget that is being hovered
		//		will be "dijitInput dijitInputInvalid dijitInputHover dijitInputInvalidHover".
		//
		//		The widget may have one or more of the following states, determined
		//		by this.state, this.checked, this.valid, and this.selected:
		//			- Error - ValidationTextBox sets this.state to "Error" if the current input value is invalid
		//			- Incomplete - ValidationTextBox sets this.state to "Incomplete" if the current input value is not finished yet
		//			- Checked - ex: a checkmark or a ToggleButton in a checked state, will have this.checked==true
		//			- Selected - ex: currently selected tab will have this.selected==true
		//
		//		In addition, it may have one or more of the following states,
		//		based on this.disabled and flags set in _onMouse (this.active, this.hovering) and from focus manager (this.focused):
		//			- Disabled	- if the widget is disabled
		//			- Active		- if the mouse (or space/enter key?) is being pressed down
		//			- Focused		- if the widget has focus
		//			- Hover		- if the mouse is over the widget

		// Compute new set of classes
		var newStateClasses = this.baseClass.split(" ");

		function multiply(modifier){
			newStateClasses = newStateClasses.concat(array.map(newStateClasses, function(c){ return c+modifier; }), "dijit"+modifier);
		}

		if(!this.isLeftToRight()){
			// For RTL mode we need to set an addition class like dijitTextBoxRtl.
			multiply("Rtl");
		}

		var checkedState = this.checked == "mixed" ? "Mixed" : (this.checked ? "Checked" : "");
		if(this.checked){
			multiply(checkedState);
		}
		if(this.state){
			multiply(this.state);
		}
		if(this.selected){
			multiply("Selected");
		}

		if(this.disabled){
			multiply("Disabled");
		}else if(this.readOnly){
			multiply("ReadOnly");
		}else{
			if(this.active){
				multiply("Active");
			}else if(this.hovering){
				multiply("Hover");
			}
		}

		if(this.focused){
			multiply("Focused");
		}

		// Remove old state classes and add new ones.
		// For performance concerns we only write into domNode.className once.
		var tn = this.stateNode || this.domNode,
			classHash = {};	// set of all classes (state and otherwise) for node

		array.forEach(tn.className.split(" "), function(c){ classHash[c] = true; });

		if("_stateClasses" in this){
			array.forEach(this._stateClasses, function(c){ delete classHash[c]; });
		}

		array.forEach(newStateClasses, function(c){ classHash[c] = true; });

		var newClasses = [];
		for(var c in classHash){
			newClasses.push(c);
		}
    /* CURAM-FIX: replace followig line - only set className if classes are changed */
		// tn.className = newClasses.join(" ");
    var cls = newClasses.join(" ");
    if(cls != tn.className){
      tn.className = cls;
    }
    /* END CURAM-FIX */

		this._stateClasses = newStateClasses;
	},

	_trackMouseState: function(/*DomNode*/ node, /*String*/ clazz){
		// summary:
		//		Track mouse/focus events on specified node and set CSS class on that node to indicate
		//		current state.   Usually not called directly, but via cssStateNodes attribute.
		// description:
		//		Given class=foo, will set the following CSS class on the node
		//			- fooActive: if the user is currently pressing down the mouse button while over the node
		//			- fooHover: if the user is hovering the mouse over the node, but not pressing down a button
		//			- fooFocus: if the node is focused
		//
		//		Note that it won't set any classes if the widget is disabled.
		// node: DomNode
		//		Should be a sub-node of the widget, not the top node (this.domNode), since the top node
		//		is handled specially and automatically just by mixing in this class.
		// clazz: String
		//		CSS class name (ex: dijitSliderUpArrow).

		// Current state of node (initially false)
		// NB: setting specifically to false because domClass.toggle() needs true boolean as third arg
		var hovering=false, active=false, focused=false;

		var self = this,
			cn = lang.hitch(this, "connect", node);

		function setClass(){
			var disabled = ("disabled" in self && self.disabled) || ("readonly" in self && self.readonly);
			domClass.toggle(node, clazz+"Hover", hovering && !active && !disabled);
			domClass.toggle(node, clazz+"Active", active && !disabled);
			domClass.toggle(node, clazz+"Focused", focused && !disabled);
		}

		// Mouse
		cn("onmouseenter", function(){
			hovering = true;
			setClass();
		});
		cn("onmouseleave", function(){
			hovering = false;
			active = false;
			setClass();
		});
		cn(touch.press, function(){
			active = true;
			setClass();
		});
		cn(touch.release, function(){
			active = false;
			setClass();
		});

		// Focus
		cn("onfocus", function(){
			focused = true;
			setClass();
		});
		cn("onblur", function(){
			focused = false;
			setClass();
		});

		// Just in case widget is enabled/disabled while it has focus/hover/active state.
		// Maybe this is overkill.
		this.watch("disabled", setClass);
		this.watch("readOnly", setClass);
	}
});
});

},
'curam/tab/util':function(){
/*
 * Modification History
 * --------------------
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 22-Apr-2013 MV  [CR00381705] Moved getMarginBoxSimple().
 * 09-Oct-2012 BOS [CR00346368] Localized debug messages to console.
 * 12-Sep-2012 SB  [CR00342403] Added class name to details panel
 *                 div when collapsed, for accessibility purpose.
 * 02-May-2012 MK  [CR00323691] Use new Dojo AMD format.
 * 21-Jan-2011 DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 05-Jan-2011 KW  [CR00240549] Add class name when collapsed, allowing arrow's
 *                              direction to reflect state
 * 20-Jul-2010 JY  [CR00210937] Update the codes due to the
 *                  removing of border container around the
 *                  details panel and content panel.
 * 02-JUN-2010 JY  [CR00201673] Initial Version. function
 *                  for toggling details panel.
 */


/**
 * @name curam.tab.util
 * @namespace Function for toggling details panel.
 */
define("curam/tab/util", ["dojo/dom-geometry",
        "curam/define",
        "curam/debug",
        "curam/util/ResourceBundle"
        ], function(domGeom) {
  
/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");
  
curam.define.singleton("curam.tab.util", 
/** @lends curam.tab.util.prototype */    
{
        
        toggleDetailsPanel: function(event){
                event = dojo.fixEvent(event);
                
                dojo.stopEvent(event);
                var arrowNode = event.target;
                //stop another animation when current animation
                // is not finished
                if(arrowNode._animating){
                        return;
                }
                
                //animating
                arrowNode._animating = true;
                
                var searchNode = arrowNode.parentNode;
                
                //find the inner border container node for header panel and details panel
                while(searchNode 
                                && !dojo.hasClass(searchNode, "detailsPanel-bc")){
                        searchNode = searchNode.parentNode;
                }
                var borderContainerNode = searchNode;
                
                
                //find the summary pane node
                while(searchNode 
                                && !dojo.hasClass(searchNode, "summaryPane")){
                        searchNode = searchNode.parentNode;
                }
                var summaryPaneNode = searchNode;
                
                //find the outer container div for summary pane, splitter and nav-panel
                while(searchNode) {
                  if(dojo.hasClass(searchNode, "dijitBorderContainer") &&
                      !dojo.hasClass(searchNode, "detailsPanel-bc")){
                    break;
                  }
                  if(dojo.hasClass(searchNode, "tab-wrapper")){
                    break;
                  }
                  searchNode = searchNode.parentNode;
                }
                var TabWrapperNode = searchNode;       
                
                //find the detailsPanel and headerPane
                headerPanelNode = 
                    dojo.query(".detailsPanelTitleBar", borderContainerNode)[0];

                detailsPanelNode = 
                    dojo.query(".detailsContentPane", borderContainerNode)[0];
                
                //find the nav panel and splitter bar
                var kids = TabWrapperNode.children;
                var splitterBarNode = dojo.filter(kids, function(child){
                  if(dojo.hasClass(child, "splitter-pane") ||
                      dojo.hasClass(child, "dijitSplitterH")) {
                        return child;
                  }
                })[0];
                
                var navPanelNode = dojo.filter(kids, function(child){
                  if(dojo.hasClass(child, "nav-panel")){
                        return child;
                  }
                })[0];

                
                //get the height of header panel, border container height,
                //splitterBar height and navPanel height
                var headerHeight = domGeom.getMarginBoxSimple(headerPanelNode).h;
                var bcHeight = domGeom.getMarginBoxSimple(summaryPaneNode).h;               
                var splitterBarHeight = splitterBarNode.offsetHeight;
                var navPanelHeight = domGeom.getMarginBoxSimple(navPanelNode).h;
                var detailsPanelDiv = dojo.query(".detailsContentPane", borderContainerNode)[0];
                if(headerHeight != summaryPaneNode.clientHeight) {
                        //Details Panel is not collapsed, so collapse it
                        
                        //arrow reflects state
                        dojo.addClass(arrowNode, "collapsed");
                        dojo.addClass(detailsPanelDiv, "collapsed");
                        curam.debug
                          .log(bundle.getProperty("curam.tab.util.collapsing"));
                        //store the previous height of border container
                        //and nav panel
                        borderContainerNode._previousHeight = bcHeight;
                        navPanelNode._previousHeight = navPanelHeight;
                        //animate the summaryPane
                        dojo.animateProperty({
                                node: summaryPaneNode,
                                //duration for animating is half a sec
                                duration: 500,
                                properties: {
                                        height: {end: headerHeight}
                                }
                        }).play();
                        
                        if(dojo.hasClass(splitterBarNode, "splitter-pane")) {
                          dojo.animateProperty({
                            node: detailsPanelNode,
                            //duration for animating is half a sec
                            duration: 500,
                            properties: {
                                    height: {end: 0}
                            }
                          }).play();
                        }
                        
                        //animate the spliiterBar
                        dojo.animateProperty({
                                node: splitterBarNode,
                                //duration for animating is half a sec
                                duration: 500,
                                properties: {
                                        top: {end: (headerHeight + splitterBarHeight)}
                                }
                        }).play();
                        
                        //animate the navPanel
                        dojo.animateProperty({
                                node: navPanelNode,
                                duration: 500,
                                properties: {
                                        top: {end: (headerHeight + splitterBarHeight)}
                                },
                                onEnd: function(){
                                        //indicate the current animation is finished
                                        //and allow to start another
                                        arrowNode._animating = false;
                                        if(dojo.hasClass(splitterBarNode, "dijitSplitterH")) {
                                          dojo.style(navPanelNode, "height", 
                                              (navPanelNode._previousHeight + 
                                                  borderContainerNode._previousHeight
                                                 - headerHeight) + "px");
                                        }
                                }     
                        }).play();
                        
                        
                } else {
                        //Details panel is Collapsed, so expand it
                        
                        //arrow reflects state
                        dojo.removeClass(arrowNode, "collapsed");
                        dojo.removeClass(detailsPanelDiv, "collapsed");
                        curam.debug
                          .log(bundle.getProperty("curam.tab.util.expanding"));
                        //set the height of summary pane
                        dojo.style(summaryPaneNode, "height", 
                                        borderContainerNode._previousHeight + "px");
                        
                        //animate the details content pane
                        if(dojo.hasClass(splitterBarNode, "splitter-pane")) {
                          dojo.animateProperty({
                            node: detailsPanelNode,
                            //duration for animating is half a sec
                            duration: 500,
                            properties: {
                                    height: {end: borderContainerNode._previousHeight - headerHeight}
                            }
                          }).play();
                        }
                        
                        //animate splitterBar
                        dojo.animateProperty({
                                node: splitterBarNode,
                                duration: 500,
                                properties: {
                                        top: {end: (borderContainerNode._previousHeight
                                                        + splitterBarHeight)}
                                }
                        }).play();

                        //animate navPanel
                        dojo.animateProperty({
                                node: navPanelNode,
                                duration: 500,
                                properties: {
                                        top: {end: (borderContainerNode._previousHeight 
                                                        + splitterBarHeight)}
                                },
                                onEnd: function(){
                                        arrowNode._animating = false;
                                        if(dojo.hasClass(splitterBarNode, "dijitSplitterH")) {
                                          dojo.style(navPanelNode, "height", 
                                              navPanelNode._previousHeight + "px");
                                        }
                                }
                        }).play();
                }
        }

});

return curam.tab.util;
});

},
'curam/widget/DeferredDropDownButton':function(){
require({cache:{
'url:curam/widget/templates/DropDownButton.html':"<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\" role=\"presentation\"\n/></span>\n"}});
/* Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2013. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 15-Jan-2012  SB  [CR00357346] Override HTML template.
   * 09-Oct-2012  MK  [CR00355074] Fix typo. 
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 30-Aug-2011  MV  [CR00284416] Handle cases when no menu items are generated
   *    for a menu.
   * 27-Jan-2011  JY [CR00244789] Override the loadDropDown and openDropDown
   *                 method to set a flag variable "useCustomPlaceAlgorithm"
   *                 that will be used later by the function dijit._place()
   *                 in "dojo-hacks.js" file.
   * 15-Sep-2010  MV [CR00220152] Publish event when the menu is created.
   */

/**
 * @name curam.widget.DeferredDropDownButton
 * @namespace
 *    A DropDownButton which instantiates its contained menu the first
 *    time it is clicked.  This improves page start up performance over
 *    the standard dijit.DropDownButton.  It depends on the renderer
 *    to set the string value for its Menu template in the variable
 *    curam.widgetTemplates, using the widget ID to access it.
 *
 */
define("curam/widget/DeferredDropDownButton", ["dijit/form/DropDownButton",
        "dojo/text!curam/widget/templates/DropDownButton.html",
        "dijit/form/Button",
        "dijit/MenuItem",
        "curam/debug",
        "curam/util",
        "curam/util/ResourceBundle"
        ], function(DropDownButton, template) {

  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  var DeferredDropDownButton = dojo.declare(
      "curam.widget.DeferredDropDownButton", dijit.form.DropDownButton,
  
  /**
   * @lends curam.widget.DeferredDropDownButton.prototype
   */
  {
    templateString: template,
    /** Id of the related tab. */
    o3tabId: null,
    useCustomPlaceAlgorithm: false,
    
    /**
     * Overrides the DropDownButton startup function, and deliberately
     * skips invoking it, instead invoking the grandparent widgets
     * startup method.
     */
    startup: function() {
      if (this._started) {
        return;
      }
      
      var classes = dojo.attr(this.domNode, "class").split(" ");
      dojo.forEach(classes, dojo.hitch(this, function(elemClass) {
        if (elemClass.indexOf("tab-widget-id-") != -1) {
          this.o3tabId = elemClass.slice(14, elemClass.length);
        }
      }));

      // Get the widget template from the curam.widgetTemplates JSON object.
      // This must have been set by the Java renderer.  See MenuBarRenderer.java
      // CR00211189
      this.widgetTemplate = 
        curam.widgetTemplates ? curam.widgetTemplates[this.id] : null;
      dijit.form.Button.prototype.startup.apply(this);
    },
    
    /**
     * This is called when the contained menu should be shown.
     * If the menu has not yet been instantiated, use the widget
     * template to instantiate it.
     */
    toggleDropDown: function() {
      // If the dropdown has not been instantiated, and the widget template
      // has been specified, then instantiate the drop down widget.
      if(!this.dropDown && this.widgetTemplate) {
        // Unescape the widget template
        this.widgetTemplate = 
          this.widgetTemplate
            .split("&lt;").join("<")
            .split("&gt;").join(">")
            .split("&amp;").join("&")
            .split("&quot;").join("'")
            ;
        
        // Create a div and place the widget HTML inside it.  This is necessary
        // because the Dojo parser will only parse 'inside' and node, and not
        // include the node that you pass to it.
        var widgetWrapper = dojo.create("div", {
          innerHTML: this.widgetTemplate,
          style: {
            display: "none"
          }
        }, dojo.body());
        
        this.dropDown = dojo.parser.parse(widgetWrapper)[0];
        
        var menu = dijit.byNode(widgetWrapper.firstChild);
        if (menu.getChildren().length == 0) {
          // handle the case when all menu items are conditional and none
          // is actually added
          var mi = new dijit.MenuItem({
            disabled: true, label: LOCALISED_EMPTY_MENU_MARKER
          });
          menu.addChild(mi);
        }
        
        // Clear the template so 
        this.widgetTemplate = null;
        
        curam.debug.log(
            bundle.getProperty("curam.widget.DeferredDropDownButton.publish") 
            + " /curam/menu/created " 
            + bundle.getProperty("curam.widget.DeferredDropDownButton.for"), 
              this.o3tabId);
        var topWin = curam.util.getTopmostWindow();
        topWin.dojo.publish("/curam/menu/created", [ this.o3tabId ]);
      }
      this.inherited(arguments);
    },
    
    openDropDown: function(){
      // Set the useCustomPlaceAlgorithm to true
      curam.widget.DeferredDropDownButton.prototype.useCustomPlaceAlgorithm = true;
      
      this.inherited(arguments);

      // Reset the useCustomPlaceAlgorithm variable back to false
      curam.widget.DeferredDropDownButton.prototype.useCustomPlaceAlgorithm = false;
    }
  });
  
  return DeferredDropDownButton;
});

},
'dijit/form/FilteringSelect':function(){
define("dijit/form/FilteringSelect", [
	"dojo/data/util/filter", // filter.patternToRegExp
	"dojo/_base/declare", // declare
	"dojo/_base/Deferred", // Deferred.when
	"dojo/_base/lang", // lang.mixin
	"./MappedTextBox",
	"./ComboBoxMixin"
], function(filter, declare, Deferred, lang, MappedTextBox, ComboBoxMixin){

/*=====
	var MappedTextBox = dijit.form.MappedTextBox;
	var ComboBoxMixin = dijit.form.ComboBoxMixin;
=====*/

	// module:
	//		dijit/form/FilteringSelect
	// summary:
	//		An enhanced version of the HTML SELECT tag, populated dynamically


	return declare("dijit.form.FilteringSelect", [MappedTextBox, ComboBoxMixin], {
		// summary:
		//		An enhanced version of the HTML SELECT tag, populated dynamically
		//
		// description:
		//		An enhanced version of the HTML SELECT tag, populated dynamically. It works
		//		very nicely with very large data sets because it can load and page data as needed.
		//		It also resembles ComboBox, but does not allow values outside of the provided ones.
		//		If OPTION tags are used as the data provider via markup, then the
		//		OPTION tag's child text node is used as the displayed value when selected
		//		while the OPTION tag's value attribute is used as the widget value on form submit.
		//		To set the default value when using OPTION tags, specify the selected
		//		attribute on 1 of the child OPTION tags.
		//
		//		Similar features:
		//			- There is a drop down list of possible values.
		//			- You can only enter a value from the drop down list.  (You can't
		//				enter an arbitrary value.)
		//			- The value submitted with the form is the hidden value (ex: CA),
		//				not the displayed value a.k.a. label (ex: California)
		//
		//		Enhancements over plain HTML version:
		//			- If you type in some text then it will filter down the list of
		//				possible values in the drop down list.
		//			- List can be specified either as a static list or via a javascript
		//				function (that can get the list from a server)

		// required: Boolean
		//		True (default) if user is required to enter a value into this field.
		required: true,

		_lastDisplayedValue: "",

		_isValidSubset: function(){
			return this._opened;
		},

		isValid: function(){
			// Overrides ValidationTextBox.isValid()
			return !!this.item || (!this.required && this.get('displayedValue') == ""); // #5974
		},

		_refreshState: function(){
			if(!this.searchTimer){ // state will be refreshed after results are returned
				this.inherited(arguments);
			}
		},

		_callbackSetLabel: function(
						/*Array*/ result,
						/*Object*/ query,
						/*Object*/ options,
						/*Boolean?*/ priorityChange){
			// summary:
			//		Callback from dojo.store after lookup of user entered value finishes

			// setValue does a synchronous lookup,
			// so it calls _callbackSetLabel directly,
			// and so does not pass dataObject
			// still need to test against _lastQuery in case it came too late
			if((query && query[this.searchAttr] !== this._lastQuery) || (!query && result.length && this.store.getIdentity(result[0]) != this._lastQuery)){
				return;
			}
			if(!result.length){
				//#3268: don't modify display value on bad input
				//#3285: change CSS to indicate error
				this.set("value", '', priorityChange || (priorityChange === undefined && !this.focused), this.textbox.value, null);
			}else{
				this.set('item', result[0], priorityChange);
			}
		},

		_openResultList: function(/*Object*/ results, /*Object*/ query, /*Object*/ options){
			// Callback when a data store query completes.
			// Overrides ComboBox._openResultList()

			// #3285: tap into search callback to see if user's query resembles a match
			if(query[this.searchAttr] !== this._lastQuery){
				return;
			}
			this.inherited(arguments);

			if(this.item === undefined){ // item == undefined for keyboard search
				// If the search returned no items that means that the user typed
				// in something invalid (and they can't make it valid by typing more characters),
				// so flag the FilteringSelect as being in an invalid state
				this.validate(true);
			}
		},

		_getValueAttr: function(){
			// summary:
			//		Hook for get('value') to work.

			// don't get the textbox value but rather the previously set hidden value.
			// Use this.valueNode.value which isn't always set for other MappedTextBox widgets until blur
			return this.valueNode.value;
		},

		_getValueField: function(){
			// Overrides ComboBox._getValueField()
			return "value";
		},

		_setValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange, /*String?*/ displayedValue, /*item?*/ item){
			// summary:
			//		Hook so set('value', value) works.
			// description:
			//		Sets the value of the select.
			//		Also sets the label to the corresponding value by reverse lookup.
			if(!this._onChangeActive){ priorityChange = null; }

			if(item === undefined){
				if(value === null || value === ''){
					value = '';
					if(!lang.isString(displayedValue)){
						this._setDisplayedValueAttr(displayedValue||'', priorityChange);
						return;
					}
				}

				var self = this;
				this._lastQuery = value;
				Deferred.when(this.store.get(value), function(item){
					self._callbackSetLabel(item? [item] : [], undefined, undefined, priorityChange);
				});
			}else{
				this.valueNode.value = value;
				this.inherited(arguments);
			}
		},

		_setItemAttr: function(/*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue){
			// summary:
			//		Set the displayed valued in the input box, and the hidden value
			//		that gets submitted, based on a dojo.data store item.
			// description:
			//		Users shouldn't call this function; they should be calling
			//		set('item', value)
			// tags:
			//		private
			this.inherited(arguments);
			this._lastDisplayedValue = this.textbox.value;
		},

		_getDisplayQueryString: function(/*String*/ text){
			return text.replace(/([\\\*\?])/g, "\\$1");
		},

		_setDisplayedValueAttr: function(/*String*/ label, /*Boolean?*/ priorityChange){
			// summary:
			//		Hook so set('displayedValue', label) works.
			// description:
			//		Sets textbox to display label. Also performs reverse lookup
			//		to set the hidden value.  label should corresponding to item.searchAttr.

			if(label == null){ label = ''; }

			// This is called at initialization along with every custom setter.
			// Usually (or always?) the call can be ignored.   If it needs to be
			// processed then at least make sure that the XHR request doesn't trigger an onChange()
			// event, even if it returns after creation has finished
			if(!this._created){
				if(!("displayedValue" in this.params)){
					return;
				}
				priorityChange = false;
			}

			// Do a reverse lookup to map the specified displayedValue to the hidden value.
			// Note that if there's a custom labelFunc() this code
			if(this.store){
				this.closeDropDown();
				var query = lang.clone(this.query); // #6196: populate query with user-specifics

				// Generate query
				var qs = this._getDisplayQueryString(label), q;
				if(this.store._oldAPI){
					// remove this branch for 2.0
					q = qs;
				}else{
					// Query on searchAttr is a regex for benefit of dojo.store.Memory,
					// but with a toString() method to help dojo.store.JsonRest.
					// Search string like "Co*" converted to regex like /^Co.*$/i.
					q = filter.patternToRegExp(qs, this.ignoreCase);
					q.toString = function(){ return qs; };
				}
				this._lastQuery = query[this.searchAttr] = q;

				// If the label is not valid, the callback will never set it,
				// so the last valid value will get the warning textbox.   Set the
				// textbox value now so that the impending warning will make
				// sense to the user
				this.textbox.value = label;
				this._lastDisplayedValue = label;
				this._set("displayedValue", label);	// for watch("displayedValue") notification
				var _this = this;
				var options = {
					ignoreCase: this.ignoreCase,
					deep: true
				};
				lang.mixin(options, this.fetchProperties);
				this._fetchHandle = this.store.query(query, options);
				Deferred.when(this._fetchHandle, function(result){
					_this._fetchHandle = null;
					_this._callbackSetLabel(result || [], query, options, priorityChange);
				}, function(err){
					_this._fetchHandle = null;
					if(!_this._cancelingQuery){	// don't treat canceled query as an error
						console.error('dijit.form.FilteringSelect: ' + err.toString());
					}
				});
			}
		},

		undo: function(){
			this.set('displayedValue', this._lastDisplayedValue);
		}
	});
});

},
'dijit/_WidgetBase':function(){
define("dijit/_WidgetBase", [
	"require",			// require.toUrl
	"dojo/_base/array", // array.forEach array.map
	"dojo/aspect",
	"dojo/_base/config", // config.blankGif
	"dojo/_base/connect", // connect.connect
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.byId
	"dojo/dom-attr", // domAttr.set domAttr.remove
	"dojo/dom-class", // domClass.add domClass.replace
	"dojo/dom-construct", // domConstruct.create domConstruct.destroy domConstruct.place
	"dojo/dom-geometry",	// isBodyLtr
	"dojo/dom-style", // domStyle.set, domStyle.get
	"dojo/_base/kernel",
	"dojo/_base/lang", // mixin(), isArray(), etc.
	"dojo/on",
	"dojo/ready",
	"dojo/Stateful", // Stateful
	"dojo/topic",
	"dojo/_base/window", // win.doc.createTextNode
	"./registry"	// registry.getUniqueId(), registry.findWidgets()
], function(require, array, aspect, config, connect, declare,
			dom, domAttr, domClass, domConstruct, domGeometry, domStyle, kernel,
			lang, on, ready, Stateful, topic, win, registry){

/*=====
var Stateful = dojo.Stateful;
=====*/

/* CURAM-FIX: Extend ContentPane to allow P&S instrumentation. */
var curamPerfTrackingEnabled = typeof(dojo.global.perf) != "undefined";

// module:
//		dijit/_WidgetBase
// summary:
//		Future base class for all Dijit widgets.

// For back-compat, remove in 2.0.
if(!kernel.isAsync){
	ready(0, function(){
		var requires = ["dijit/_base/manager"];
		require(requires);	// use indirection so modules not rolled into a build
	});
}

// Nested hash listing attributes for each tag, all strings in lowercase.
// ex: {"div": {"style": true, "tabindex" true}, "form": { ...
var tagAttrs = {};
function getAttrs(obj){
	var ret = {};
	for(var attr in obj){
		ret[attr.toLowerCase()] = true;
	}
	return ret;
}

function nonEmptyAttrToDom(attr){
	// summary:
	//		Returns a setter function that copies the attribute to this.domNode,
	//		or removes the attribute from this.domNode, depending on whether the
	//		value is defined or not.
	return function(val){
		domAttr[val ? "set" : "remove"](this.domNode, attr, val);
		this._set(attr, val);
	};
}

return declare("dijit._WidgetBase", Stateful, {
	// summary:
	//		Future base class for all Dijit widgets.
	// description:
	//		Future base class for all Dijit widgets.
	//		_Widget extends this class adding support for various features needed by desktop.
	//
	//		Provides stubs for widget lifecycle methods for subclasses to extend, like postMixInProperties(), buildRendering(),
	//		postCreate(), startup(), and destroy(), and also public API methods like set(), get(), and watch().
	//
	//		Widgets can provide custom setters/getters for widget attributes, which are called automatically by set(name, value).
	//		For an attribute XXX, define methods _setXXXAttr() and/or _getXXXAttr().
	//
	//		_setXXXAttr can also be a string/hash/array mapping from a widget attribute XXX to the widget's DOMNodes:
	//
	//		- DOM node attribute
	// |		_setFocusAttr: {node: "focusNode", type: "attribute"}
	// |		_setFocusAttr: "focusNode"	(shorthand)
	// |		_setFocusAttr: ""		(shorthand, maps to this.domNode)
	// 		Maps this.focus to this.focusNode.focus, or (last example) this.domNode.focus
	//
	//		- DOM node innerHTML
	//	|		_setTitleAttr: { node: "titleNode", type: "innerHTML" }
	//		Maps this.title to this.titleNode.innerHTML
	//
	//		- DOM node innerText
	//	|		_setTitleAttr: { node: "titleNode", type: "innerText" }
	//		Maps this.title to this.titleNode.innerText
	//
	//		- DOM node CSS class
	// |		_setMyClassAttr: { node: "domNode", type: "class" }
	//		Maps this.myClass to this.domNode.className
	//
	//		If the value of _setXXXAttr is an array, then each element in the array matches one of the
	//		formats of the above list.
	//
	//		If the custom setter is null, no action is performed other than saving the new value
	//		in the widget (in this).
	//
	//		If no custom setter is defined for an attribute, then it will be copied
	//		to this.focusNode (if the widget defines a focusNode), or this.domNode otherwise.
	//		That's only done though for attributes that match DOMNode attributes (title,
	//		alt, aria-labelledby, etc.)

	// id: [const] String
	//		A unique, opaque ID string that can be assigned by users or by the
	//		system. If the developer passes an ID which is known not to be
	//		unique, the specified ID is ignored and the system-generated ID is
	//		used instead.
	id: "",
	_setIdAttr: "domNode",	// to copy to this.domNode even for auto-generated id's

	// lang: [const] String
	//		Rarely used.  Overrides the default Dojo locale used to render this widget,
	//		as defined by the [HTML LANG](http://www.w3.org/TR/html401/struct/dirlang.html#adef-lang) attribute.
	//		Value must be among the list of locales specified during by the Dojo bootstrap,
	//		formatted according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) (like en-us).
	lang: "",
	// set on domNode even when there's a focus node.   but don't set lang="", since that's invalid.
	_setLangAttr: nonEmptyAttrToDom("lang"),

	// dir: [const] String
	//		Bi-directional support, as defined by the [HTML DIR](http://www.w3.org/TR/html401/struct/dirlang.html#adef-dir)
	//		attribute. Either left-to-right "ltr" or right-to-left "rtl".  If undefined, widgets renders in page's
	//		default direction.
	dir: "",
	// set on domNode even when there's a focus node.   but don't set dir="", since that's invalid.
	_setDirAttr: nonEmptyAttrToDom("dir"),	// to set on domNode even when there's a focus node

	// textDir: String
	//		Bi-directional support,	the main variable which is responsible for the direction of the text.
	//		The text direction can be different than the GUI direction by using this parameter in creation
	//		of a widget.
	// 		Allowed values:
	//			1. "ltr"
	//			2. "rtl"
	//			3. "auto" - contextual the direction of a text defined by first strong letter.
	//		By default is as the page direction.
	textDir: "",

	// class: String
	//		HTML class attribute
	"class": "",
	_setClassAttr: { node: "domNode", type: "class" },

	// style: String||Object
	//		HTML style attributes as cssText string or name/value hash
	style: "",

	// title: String
	//		HTML title attribute.
	//
	//		For form widgets this specifies a tooltip to display when hovering over
	//		the widget (just like the native HTML title attribute).
	//
	//		For TitlePane or for when this widget is a child of a TabContainer, AccordionContainer,
	//		etc., it's used to specify the tab label, accordion pane title, etc.
	title: "",

	// tooltip: String
	//		When this widget's title attribute is used to for a tab label, accordion pane title, etc.,
	//		this specifies the tooltip to appear when the mouse is hovered over that text.
	tooltip: "",

	// baseClass: [protected] String
	//		Root CSS class of the widget (ex: dijitTextBox), used to construct CSS classes to indicate
	//		widget state.
	baseClass: "",

	// srcNodeRef: [readonly] DomNode
	//		pointer to original DOM node
	srcNodeRef: null,

	// domNode: [readonly] DomNode
	//		This is our visible representation of the widget! Other DOM
	//		Nodes may by assigned to other properties, usually through the
	//		template system's data-dojo-attach-point syntax, but the domNode
	//		property is the canonical "top level" node in widget UI.
	domNode: null,

	// containerNode: [readonly] DomNode
	//		Designates where children of the source DOM node will be placed.
	//		"Children" in this case refers to both DOM nodes and widgets.
	//		For example, for myWidget:
	//
	//		|	<div data-dojo-type=myWidget>
	//		|		<b> here's a plain DOM node
	//		|		<span data-dojo-type=subWidget>and a widget</span>
	//		|		<i> and another plain DOM node </i>
	//		|	</div>
	//
	//		containerNode would point to:
	//
	//		|		<b> here's a plain DOM node
	//		|		<span data-dojo-type=subWidget>and a widget</span>
	//		|		<i> and another plain DOM node </i>
	//
	//		In templated widgets, "containerNode" is set via a
	//		data-dojo-attach-point assignment.
	//
	//		containerNode must be defined for any widget that accepts innerHTML
	//		(like ContentPane or BorderContainer or even Button), and conversely
	//		is null for widgets that don't, like TextBox.
	containerNode: null,

/*=====
	// _started: Boolean
	//		startup() has completed.
	_started: false,
=====*/

	// attributeMap: [protected] Object
	//		Deprecated.   Instead of attributeMap, widget should have a _setXXXAttr attribute
	//		for each XXX attribute to be mapped to the DOM.
	//
	//		attributeMap sets up a "binding" between attributes (aka properties)
	//		of the widget and the widget's DOM.
	//		Changes to widget attributes listed in attributeMap will be
	//		reflected into the DOM.
	//
	//		For example, calling set('title', 'hello')
	//		on a TitlePane will automatically cause the TitlePane's DOM to update
	//		with the new title.
	//
	//		attributeMap is a hash where the key is an attribute of the widget,
	//		and the value reflects a binding to a:
	//
	//		- DOM node attribute
	// |		focus: {node: "focusNode", type: "attribute"}
	// 		Maps this.focus to this.focusNode.focus
	//
	//		- DOM node innerHTML
	//	|		title: { node: "titleNode", type: "innerHTML" }
	//		Maps this.title to this.titleNode.innerHTML
	//
	//		- DOM node innerText
	//	|		title: { node: "titleNode", type: "innerText" }
	//		Maps this.title to this.titleNode.innerText
	//
	//		- DOM node CSS class
	// |		myClass: { node: "domNode", type: "class" }
	//		Maps this.myClass to this.domNode.className
	//
	//		If the value is an array, then each element in the array matches one of the
	//		formats of the above list.
	//
	//		There are also some shorthands for backwards compatibility:
	//		- string --> { node: string, type: "attribute" }, for example:
	//	|	"focusNode" ---> { node: "focusNode", type: "attribute" }
	//		- "" --> { node: "domNode", type: "attribute" }
	attributeMap: {},

	// _blankGif: [protected] String
	//		Path to a blank 1x1 image.
	//		Used by <img> nodes in templates that really get their image via CSS background-image.
	_blankGif: config.blankGif || require.toUrl("dojo/resources/blank.gif"),

	//////////// INITIALIZATION METHODS ///////////////////////////////////////

	postscript: function(/*Object?*/params, /*DomNode|String*/srcNodeRef){
		// summary:
		//		Kicks off widget instantiation.  See create() for details.
		// tags:
		//		private
		this.create(params, srcNodeRef);
	},

	create: function(/*Object?*/params, /*DomNode|String?*/srcNodeRef){
		// summary:
		//		Kick off the life-cycle of a widget
		// params:
		//		Hash of initialization parameters for widget, including
		//		scalar values (like title, duration etc.) and functions,
		//		typically callbacks like onClick.
		// srcNodeRef:
		//		If a srcNodeRef (DOM node) is specified:
		//			- use srcNodeRef.innerHTML as my contents
		//			- if this is a behavioral widget then apply behavior
		//			  to that srcNodeRef
		//			- otherwise, replace srcNodeRef with my generated DOM
		//			  tree
		// description:
		//		Create calls a number of widget methods (postMixInProperties, buildRendering, postCreate,
		//		etc.), some of which of you'll want to override. See http://dojotoolkit.org/reference-guide/dijit/_WidgetBase.html
		//		for a discussion of the widget creation lifecycle.
		//
		//		Of course, adventurous developers could override create entirely, but this should
		//		only be done as a last resort.
		// tags:
		//		private

                /* CURAM-FIX: P&S */
                if(curamPerfTrackingEnabled) {
                        perf.widgetStartedLoadingCallback();
                }
                /* END CURAM-FIX */

		// store pointer to original DOM tree
		this.srcNodeRef = dom.byId(srcNodeRef);

		// For garbage collection.  An array of listener handles returned by this.connect() / this.subscribe()
		this._connects = [];

		// For widgets internal to this widget, invisible to calling code
		this._supportingWidgets = [];

		// this is here for back-compat, remove in 2.0 (but check NodeList-instantiate.html test)
		if(this.srcNodeRef && (typeof this.srcNodeRef.id == "string")){ this.id = this.srcNodeRef.id; }

		// mix in our passed parameters
		if(params){
			this.params = params;
			lang.mixin(this, params);
		}
		this.postMixInProperties();

		// generate an id for the widget if one wasn't specified
		// (be sure to do this before buildRendering() because that function might
		// expect the id to be there.)
		if(!this.id){
			this.id = registry.getUniqueId(this.declaredClass.replace(/\./g,"_"));
		}
		registry.add(this);

		this.buildRendering();

		if(this.domNode){
			// Copy attributes listed in attributeMap into the [newly created] DOM for the widget.
			// Also calls custom setters for all attributes with custom setters.
			this._applyAttributes();

			// If srcNodeRef was specified, then swap out original srcNode for this widget's DOM tree.
			// For 2.0, move this after postCreate().  postCreate() shouldn't depend on the
			// widget being attached to the DOM since it isn't when a widget is created programmatically like
			// new MyWidget({}).   See #11635.
			var source = this.srcNodeRef;
			if(source && source.parentNode && this.domNode !== source){
				source.parentNode.replaceChild(this.domNode, source);
			}
		}

		if(this.domNode){
			// Note: for 2.0 may want to rename widgetId to dojo._scopeName + "_widgetId",
			// assuming that dojo._scopeName even exists in 2.0
			this.domNode.setAttribute("widgetId", this.id);
		}
		this.postCreate();

		// If srcNodeRef has been processed and removed from the DOM (e.g. TemplatedWidget) then delete it to allow GC.
		if(this.srcNodeRef && !this.srcNodeRef.parentNode){
			delete this.srcNodeRef;
		}

		this._created = true;

                /* CURAM-FIX: P&S */
                if(curamPerfTrackingEnabled) {
                        perf.widgetLoadedCallback(this);
                }
                /* END CURAM-FIX */
	},

	_applyAttributes: function(){
		// summary:
		//		Step during widget creation to copy  widget attributes to the
		//		DOM according to attributeMap and _setXXXAttr objects, and also to call
		//		custom _setXXXAttr() methods.
		//
		//		Skips over blank/false attribute values, unless they were explicitly specified
		//		as parameters to the widget, since those are the default anyway,
		//		and setting tabIndex="" is different than not setting tabIndex at all.
		//
		//		For backwards-compatibility reasons attributeMap overrides _setXXXAttr when
		//		_setXXXAttr is a hash/string/array, but _setXXXAttr as a functions override attributeMap.
		// tags:
		//		private

		// Get list of attributes where this.set(name, value) will do something beyond
		// setting this[name] = value.  Specifically, attributes that have:
		//		- associated _setXXXAttr() method/hash/string/array
		//		- entries in attributeMap.
		var ctor = this.constructor,
			list = ctor._setterAttrs;
		if(!list){
			list = (ctor._setterAttrs = []);
			for(var attr in this.attributeMap){
				list.push(attr);
			}

			var proto = ctor.prototype;
			for(var fxName in proto){
				if(fxName in this.attributeMap){ continue; }
				var setterName = "_set" + fxName.replace(/^[a-z]|-[a-zA-Z]/g, function(c){ return c.charAt(c.length-1).toUpperCase(); }) + "Attr";
				if(setterName in proto){
					list.push(fxName);
				}
			}
		}

		// Call this.set() for each attribute that was either specified as parameter to constructor,
		// or was found above and has a default non-null value.   For correlated attributes like value and displayedValue, the one
		// specified as a parameter should take precedence, so apply attributes in this.params last.
		// Particularly important for new DateTextBox({displayedValue: ...}) since DateTextBox's default value is
		// NaN and thus is not ignored like a default value of "".
		array.forEach(list, function(attr){
			if(this.params && attr in this.params){
				// skip this one, do it below
			}else if(this[attr]){
				this.set(attr, this[attr]);
			}
		}, this);
		for(var param in this.params){
			this.set(param, this[param]);
		}
	},

	postMixInProperties: function(){
		// summary:
		//		Called after the parameters to the widget have been read-in,
		//		but before the widget template is instantiated. Especially
		//		useful to set properties that are referenced in the widget
		//		template.
		// tags:
		//		protected
	},

	buildRendering: function(){
		// summary:
		//		Construct the UI for this widget, setting this.domNode.
		//		Most widgets will mixin `dijit._TemplatedMixin`, which implements this method.
		// tags:
		//		protected

		if(!this.domNode){
			// Create root node if it wasn't created by _Templated
			this.domNode = this.srcNodeRef || domConstruct.create('div');
		}

		// baseClass is a single class name or occasionally a space-separated list of names.
		// Add those classes to the DOMNode.  If RTL mode then also add with Rtl suffix.
		// TODO: make baseClass custom setter
		if(this.baseClass){
			var classes = this.baseClass.split(" ");
			if(!this.isLeftToRight()){
				classes = classes.concat( array.map(classes, function(name){ return name+"Rtl"; }));
			}
			domClass.add(this.domNode, classes);
		}
	},

	postCreate: function(){
		// summary:
		//		Processing after the DOM fragment is created
		// description:
		//		Called after the DOM fragment has been created, but not necessarily
		//		added to the document.  Do not include any operations which rely on
		//		node dimensions or placement.
		// tags:
		//		protected
	},

	startup: function(){
		// summary:
		//		Processing after the DOM fragment is added to the document
		// description:
		//		Called after a widget and its children have been created and added to the page,
		//		and all related widgets have finished their create() cycle, up through postCreate().
		//		This is useful for composite widgets that need to control or layout sub-widgets.
		//		Many layout widgets can use this as a wiring phase.
		if(this._started){ return; }
		this._started = true;
		array.forEach(this.getChildren(), function(obj){
			if(!obj._started && !obj._destroyed && lang.isFunction(obj.startup)){
				obj.startup();
				obj._started = true;
			}
		});
	},

	//////////// DESTROY FUNCTIONS ////////////////////////////////

	destroyRecursive: function(/*Boolean?*/ preserveDom){
		// summary:
		// 		Destroy this widget and its descendants
		// description:
		//		This is the generic "destructor" function that all widget users
		// 		should call to cleanly discard with a widget. Once a widget is
		// 		destroyed, it is removed from the manager object.
		// preserveDom:
		//		If true, this method will leave the original DOM structure
		//		alone of descendant Widgets. Note: This will NOT work with
		//		dijit._Templated widgets.

		this._beingDestroyed = true;
		this.destroyDescendants(preserveDom);
		this.destroy(preserveDom);
	},

	destroy: function(/*Boolean*/ preserveDom){
		// summary:
		// 		Destroy this widget, but not its descendants.
		//		This method will, however, destroy internal widgets such as those used within a template.
		// preserveDom: Boolean
		//		If true, this method will leave the original DOM structure alone.
		//		Note: This will not yet work with _Templated widgets

		this._beingDestroyed = true;
		this.uninitialize();

		// remove this.connect() and this.subscribe() listeners
		var c;
		while((c = this._connects.pop())){
			c.remove();
		}

		// destroy widgets created as part of template, etc.
		var w;
		while((w = this._supportingWidgets.pop())){
			if(w.destroyRecursive){
				w.destroyRecursive();
			}else if(w.destroy){
				w.destroy();
			}
		}

		this.destroyRendering(preserveDom);
		registry.remove(this.id);
		this._destroyed = true;
	},

	destroyRendering: function(/*Boolean?*/ preserveDom){
		// summary:
		//		Destroys the DOM nodes associated with this widget
		// preserveDom:
		//		If true, this method will leave the original DOM structure alone
		//		during tear-down. Note: this will not work with _Templated
		//		widgets yet.
		// tags:
		//		protected

		if(this.bgIframe){
			this.bgIframe.destroy(preserveDom);
			delete this.bgIframe;
		}

		if(this.domNode){
			if(preserveDom){
				domAttr.remove(this.domNode, "widgetId");
			}else{
				domConstruct.destroy(this.domNode);
			}
			delete this.domNode;
		}

		if(this.srcNodeRef){
			if(!preserveDom){
				domConstruct.destroy(this.srcNodeRef);
			}
			delete this.srcNodeRef;
		}
	},

	destroyDescendants: function(/*Boolean?*/ preserveDom){
		// summary:
		//		Recursively destroy the children of this widget and their
		//		descendants.
		// preserveDom:
		//		If true, the preserveDom attribute is passed to all descendant
		//		widget's .destroy() method. Not for use with _Templated
		//		widgets.

		// get all direct descendants and destroy them recursively
		array.forEach(this.getChildren(), function(widget){
			if(widget.destroyRecursive){
				widget.destroyRecursive(preserveDom);
			}
		});
	},

	uninitialize: function(){
		// summary:
		//		Stub function. Override to implement custom widget tear-down
		//		behavior.
		// tags:
		//		protected
		return false;
	},

	////////////////// GET/SET, CUSTOM SETTERS, ETC. ///////////////////

	_setStyleAttr: function(/*String||Object*/ value){
		// summary:
		//		Sets the style attribute of the widget according to value,
		//		which is either a hash like {height: "5px", width: "3px"}
		//		or a plain string
		// description:
		//		Determines which node to set the style on based on style setting
		//		in attributeMap.
		// tags:
		//		protected

		var mapNode = this.domNode;

		// Note: technically we should revert any style setting made in a previous call
		// to his method, but that's difficult to keep track of.

		if(lang.isObject(value)){
			domStyle.set(mapNode, value);
		}else{
			if(mapNode.style.cssText){
				mapNode.style.cssText += "; " + value;
			}else{
				mapNode.style.cssText = value;
			}
		}

		this._set("style", value);
	},

	_attrToDom: function(/*String*/ attr, /*String*/ value, /*Object?*/ commands){
		// summary:
		//		Reflect a widget attribute (title, tabIndex, duration etc.) to
		//		the widget DOM, as specified by commands parameter.
		//		If commands isn't specified then it's looked up from attributeMap.
		//		Note some attributes like "type"
		//		cannot be processed this way as they are not mutable.
		//
		// tags:
		//		private

		commands = arguments.length >= 3 ? commands : this.attributeMap[attr];

		array.forEach(lang.isArray(commands) ? commands : [commands], function(command){

			// Get target node and what we are doing to that node
			var mapNode = this[command.node || command || "domNode"];	// DOM node
			var type = command.type || "attribute";	// class, innerHTML, innerText, or attribute

			switch(type){
				case "attribute":
					if(lang.isFunction(value)){ // functions execute in the context of the widget
						value = lang.hitch(this, value);
					}

					// Get the name of the DOM node attribute; usually it's the same
					// as the name of the attribute in the widget (attr), but can be overridden.
					// Also maps handler names to lowercase, like onSubmit --> onsubmit
					var attrName = command.attribute ? command.attribute :
						(/^on[A-Z][a-zA-Z]*$/.test(attr) ? attr.toLowerCase() : attr);

					domAttr.set(mapNode, attrName, value);
					break;
				case "innerText":
					mapNode.innerHTML = "";
					mapNode.appendChild(win.doc.createTextNode(value));
					break;
				case "innerHTML":
					mapNode.innerHTML = value;
					break;
				case "class":
					domClass.replace(mapNode, value, this[attr]);
					break;
			}
		}, this);
	},

	get: function(name){
		// summary:
		//		Get a property from a widget.
		//	name:
		//		The property to get.
		// description:
		//		Get a named property from a widget. The property may
		//		potentially be retrieved via a getter method. If no getter is defined, this
		// 		just retrieves the object's property.
		//
		// 		For example, if the widget has properties `foo` and `bar`
		//		and a method named `_getFooAttr()`, calling:
		//		`myWidget.get("foo")` would be equivalent to calling
		//		`widget._getFooAttr()` and `myWidget.get("bar")`
		//		would be equivalent to the expression
		//		`widget.bar2`
		var names = this._getAttrNames(name);
		return this[names.g] ? this[names.g]() : this[name];
	},

	set: function(name, value){
		// summary:
		//		Set a property on a widget
		//	name:
		//		The property to set.
		//	value:
		//		The value to set in the property.
		// description:
		//		Sets named properties on a widget which may potentially be handled by a
		// 		setter in the widget.
		//
		// 		For example, if the widget has properties `foo` and `bar`
		//		and a method named `_setFooAttr()`, calling
		//		`myWidget.set("foo", "Howdy!")` would be equivalent to calling
		//		`widget._setFooAttr("Howdy!")` and `myWidget.set("bar", 3)`
		//		would be equivalent to the statement `widget.bar = 3;`
		//
		//		set() may also be called with a hash of name/value pairs, ex:
		//
		//	|	myWidget.set({
		//	|		foo: "Howdy",
		//	|		bar: 3
		//	|	});
		//
		//	This is equivalent to calling `set(foo, "Howdy")` and `set(bar, 3)`

		if(typeof name === "object"){
			for(var x in name){
				this.set(x, name[x]);
			}
			return this;
		}
		var names = this._getAttrNames(name),
			setter = this[names.s];
		if(lang.isFunction(setter)){
			// use the explicit setter
			var result = setter.apply(this, Array.prototype.slice.call(arguments, 1));
		}else{
			// Mapping from widget attribute to DOMNode attribute/value/etc.
			// Map according to:
			//		1. attributeMap setting, if one exists (TODO: attributeMap deprecated, remove in 2.0)
			//		2. _setFooAttr: {...} type attribute in the widget (if one exists)
			//		3. apply to focusNode or domNode if standard attribute name, excluding funcs like onClick.
			// Checks if an attribute is a "standard attribute" by whether the DOMNode JS object has a similar
			// attribute name (ex: accept-charset attribute matches jsObject.acceptCharset).
			// Note also that Tree.focusNode() is a function not a DOMNode, so test for that.
			var defaultNode = this.focusNode && !lang.isFunction(this.focusNode) ? "focusNode" : "domNode",
				tag = this[defaultNode].tagName,
				attrsForTag = tagAttrs[tag] || (tagAttrs[tag] = getAttrs(this[defaultNode])),
				map =	name in this.attributeMap ? this.attributeMap[name] :
						names.s in this ? this[names.s] :
						((names.l in attrsForTag && typeof value != "function") ||
							/^aria-|^data-|^role$/.test(name)) ? defaultNode : null;
			if(map != null){
				this._attrToDom(name, value, map);
			}
			this._set(name, value);
		}
		return result || this;
	},

	_attrPairNames: {},		// shared between all widgets
	_getAttrNames: function(name){
		// summary:
		//		Helper function for get() and set().
		//		Caches attribute name values so we don't do the string ops every time.
		// tags:
		//		private

		var apn = this._attrPairNames;
		if(apn[name]){ return apn[name]; }
		var uc = name.replace(/^[a-z]|-[a-zA-Z]/g, function(c){ return c.charAt(c.length-1).toUpperCase(); });
		return (apn[name] = {
			n: name+"Node",
			s: "_set"+uc+"Attr",	// converts dashes to camel case, ex: accept-charset --> _setAcceptCharsetAttr
			g: "_get"+uc+"Attr",
			l: uc.toLowerCase()		// lowercase name w/out dashes, ex: acceptcharset
		});
	},

	_set: function(/*String*/ name, /*anything*/ value){
		// summary:
		//		Helper function to set new value for specified attribute, and call handlers
		//		registered with watch() if the value has changed.
		var oldValue = this[name];
		this[name] = value;
		if(this._watchCallbacks && this._created && value !== oldValue){
			this._watchCallbacks(name, oldValue, value);
		}
	},

	on: function(/*String*/ type, /*Function*/ func){
		// summary:
		//		Call specified function when event occurs, ex: myWidget.on("click", function(){ ... }).
		// description:
		//		Call specified function when event `type` occurs, ex: `myWidget.on("click", function(){ ... })`.
		//		Note that the function is not run in any particular scope, so if (for example) you want it to run in the
		//		widget's scope you must do `myWidget.on("click", lang.hitch(myWidget, func))`.

		return aspect.after(this, this._onMap(type), func, true);
	},

	_onMap: function(/*String*/ type){
		// summary:
		//		Maps on() type parameter (ex: "mousemove") to method name (ex: "onMouseMove")
		var ctor = this.constructor, map = ctor._onMap;
		if(!map){
			map = (ctor._onMap = {});
			for(var attr in ctor.prototype){
				if(/^on/.test(attr)){
					map[attr.replace(/^on/, "").toLowerCase()] = attr;
				}
			}
		}
		return map[type.toLowerCase()];	// String
	},

	toString: function(){
		// summary:
		//		Returns a string that represents the widget
		// description:
		//		When a widget is cast to a string, this method will be used to generate the
		//		output. Currently, it does not implement any sort of reversible
		//		serialization.
		return '[Widget ' + this.declaredClass + ', ' + (this.id || 'NO ID') + ']'; // String
	},

	getChildren: function(){
		// summary:
		//		Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.
		//		Does not return nested widgets, nor widgets that are part of this widget's template.
		return this.containerNode ? registry.findWidgets(this.containerNode) : []; // dijit._Widget[]
	},

	getParent: function(){
		// summary:
		//		Returns the parent widget of this widget
		return registry.getEnclosingWidget(this.domNode.parentNode);
	},

	connect: function(
			/*Object|null*/ obj,
			/*String|Function*/ event,
			/*String|Function*/ method){
		// summary:
		//		Connects specified obj/event to specified method of this object
		//		and registers for disconnect() on widget destroy.
		// description:
		//		Provide widget-specific analog to dojo.connect, except with the
		//		implicit use of this widget as the target object.
		//		Events connected with `this.connect` are disconnected upon
		//		destruction.
		// returns:
		//		A handle that can be passed to `disconnect` in order to disconnect before
		//		the widget is destroyed.
		// example:
		//	|	var btn = new dijit.form.Button();
		//	|	// when foo.bar() is called, call the listener we're going to
		//	|	// provide in the scope of btn
		//	|	btn.connect(foo, "bar", function(){
		//	|		console.debug(this.toString());
		//	|	});
		// tags:
		//		protected

		var handle = connect.connect(obj, event, this, method);
		this._connects.push(handle);
		return handle;		// _Widget.Handle
	},

	disconnect: function(handle){
		// summary:
		//		Disconnects handle created by `connect`.
		//		Also removes handle from this widget's list of connects.
		// tags:
		//		protected
		var i = array.indexOf(this._connects, handle);
		if(i != -1){
			handle.remove();
			this._connects.splice(i, 1);
		}
	},

	subscribe: function(t, method){
		// summary:
		//		Subscribes to the specified topic and calls the specified method
		//		of this object and registers for unsubscribe() on widget destroy.
		// description:
		//		Provide widget-specific analog to dojo.subscribe, except with the
		//		implicit use of this widget as the target object.
		// t: String
		//		The topic
		// method: Function
		//		The callback
		// example:
		//	|	var btn = new dijit.form.Button();
		//	|	// when /my/topic is published, this button changes its label to
		//	|   // be the parameter of the topic.
		//	|	btn.subscribe("/my/topic", function(v){
		//	|		this.set("label", v);
		//	|	});
		// tags:
		//		protected
		var handle = topic.subscribe(t, lang.hitch(this, method));
		this._connects.push(handle);
		return handle;		// _Widget.Handle
	},

	unsubscribe: function(/*Object*/ handle){
		// summary:
		//		Unsubscribes handle created by this.subscribe.
		//		Also removes handle from this widget's list of subscriptions
		// tags:
		//		protected
		this.disconnect(handle);
	},

	isLeftToRight: function(){
		// summary:
		//		Return this widget's explicit or implicit orientation (true for LTR, false for RTL)
		// tags:
		//		protected
		return this.dir ? (this.dir == "ltr") : domGeometry.isBodyLtr(); //Boolean
	},

	isFocusable: function(){
		// summary:
		//		Return true if this widget can currently be focused
		//		and false if not
		return this.focus && (domStyle.get(this.domNode, "display") != "none");
	},

	placeAt: function(/* String|DomNode|_Widget */reference, /* String?|Int? */position){
		// summary:
		//		Place this widget's domNode reference somewhere in the DOM based
		//		on standard domConstruct.place conventions, or passing a Widget reference that
		//		contains and addChild member.
		//
		// description:
		//		A convenience function provided in all _Widgets, providing a simple
		//		shorthand mechanism to put an existing (or newly created) Widget
		//		somewhere in the dom, and allow chaining.
		//
		// reference:
		//		The String id of a domNode, a domNode reference, or a reference to a Widget possessing
		//		an addChild method.
		//
		// position:
		//		If passed a string or domNode reference, the position argument
		//		accepts a string just as domConstruct.place does, one of: "first", "last",
		//		"before", or "after".
		//
		//		If passed a _Widget reference, and that widget reference has an ".addChild" method,
		//		it will be called passing this widget instance into that method, supplying the optional
		//		position index passed.
		//
		// returns:
		//		dijit._Widget
		//		Provides a useful return of the newly created dijit._Widget instance so you
		//		can "chain" this function by instantiating, placing, then saving the return value
		//		to a variable.
		//
		// example:
		// | 	// create a Button with no srcNodeRef, and place it in the body:
		// | 	var button = new dijit.form.Button({ label:"click" }).placeAt(win.body());
		// | 	// now, 'button' is still the widget reference to the newly created button
		// | 	button.on("click", function(e){ console.log('click'); }));
		//
		// example:
		// |	// create a button out of a node with id="src" and append it to id="wrapper":
		// | 	var button = new dijit.form.Button({},"src").placeAt("wrapper");
		//
		// example:
		// |	// place a new button as the first element of some div
		// |	var button = new dijit.form.Button({ label:"click" }).placeAt("wrapper","first");
		//
		// example:
		// |	// create a contentpane and add it to a TabContainer
		// |	var tc = dijit.byId("myTabs");
		// |	new dijit.layout.ContentPane({ href:"foo.html", title:"Wow!" }).placeAt(tc)

		if(reference.declaredClass && reference.addChild){
			reference.addChild(this, position);
		}else{
			domConstruct.place(this.domNode, reference, position);
		}
		return this;
	},

	getTextDir: function(/*String*/ text,/*String*/ originalDir){
		// summary:
		//		Return direction of the text.
		//		The function overridden in the _BidiSupport module,
		//		its main purpose is to calculate the direction of the
		//		text, if was defined by the programmer through textDir.
		//	tags:
		//		protected.
		return originalDir;
	},

	applyTextDir: function(/*===== element, text =====*/){
		// summary:
		//		The function overridden in the _BidiSupport module,
		//		originally used for setting element.dir according to this.textDir.
		//		In this case does nothing.
		// element: DOMNode
		// text: String
		// tags:
		//		protected.
	},

	defer: function(fcn, delay){ 
		// summary:
		//		Wrapper to setTimeout to avoid deferred functions executing
		//		after the originating widget has been destroyed.
		//		Returns an object handle with a remove method (that returns null) (replaces clearTimeout).
		// fcn: function reference
		// delay: Optional number (defaults to 0)
		// tags:
		//		protected.
		var timer = setTimeout(lang.hitch(this, 
			function(){ 
				timer = null;
				if(!this._destroyed){ 
					lang.hitch(this, fcn)(); 
				} 
			}),
			delay || 0
		);
		return {
			remove:	function(){
					if(timer){
						clearTimeout(timer);
						timer = null;
					}
					return null; // so this works well: handle = handle.remove();
				}
		};
	}
});

});

},
'dojo/cookie':function(){
define("dojo/cookie", ["./_base/kernel", "./regexp"], function(dojo, regexp) {
	// module:
	//		dojo/cookie
	// summary:
	//		TODOC


/*=====
dojo.__cookieProps = function(){
	//	expires: Date|String|Number?
	//		If a number, the number of days from today at which the cookie
	//		will expire. If a date, the date past which the cookie will expire.
	//		If expires is in the past, the cookie will be deleted.
	//		If expires is omitted or is 0, the cookie will expire when the browser closes.
	//	path: String?
	//		The path to use for the cookie.
	//	domain: String?
	//		The domain to use for the cookie.
	//	secure: Boolean?
	//		Whether to only send the cookie on secure connections
	this.expires = expires;
	this.path = path;
	this.domain = domain;
	this.secure = secure;
}
=====*/


dojo.cookie = function(/*String*/name, /*String?*/value, /*dojo.__cookieProps?*/props){
	//	summary:
	//		Get or set a cookie.
	//	description:
	// 		If one argument is passed, returns the value of the cookie
	// 		For two or more arguments, acts as a setter.
	//	name:
	//		Name of the cookie
	//	value:
	//		Value for the cookie
	//	props:
	//		Properties for the cookie
	//	example:
	//		set a cookie with the JSON-serialized contents of an object which
	//		will expire 5 days from now:
	//	|	dojo.cookie("configObj", dojo.toJson(config), { expires: 5 });
	//
	//	example:
	//		de-serialize a cookie back into a JavaScript object:
	//	|	var config = dojo.fromJson(dojo.cookie("configObj"));
	//
	//	example:
	//		delete a cookie:
	//	|	dojo.cookie("configObj", null, {expires: -1});
	var c = document.cookie, ret;
	if(arguments.length == 1){
		var matches = c.match(new RegExp("(?:^|; )" + regexp.escapeString(name) + "=([^;]*)"));
		ret = matches ? decodeURIComponent(matches[1]) : undefined; 
	}else{
		props = props || {};
// FIXME: expires=0 seems to disappear right away, not on close? (FF3)  Change docs?
		var exp = props.expires;
		if(typeof exp == "number"){
			var d = new Date();
			d.setTime(d.getTime() + exp*24*60*60*1000);
			exp = props.expires = d;
		}
		if(exp && exp.toUTCString){ props.expires = exp.toUTCString(); }

		value = encodeURIComponent(value);
		var updatedCookie = name + "=" + value, propName;
		for(propName in props){
			updatedCookie += "; " + propName;
			var propValue = props[propName];
			if(propValue !== true){ updatedCookie += "=" + propValue; }
		}
		document.cookie = updatedCookie;
	}
	return ret; // String|undefined
};

dojo.cookie.isSupported = function(){
	//	summary:
	//		Use to determine if the current browser supports cookies or not.
	//
	//		Returns true if user allows cookies.
	//		Returns false if user doesn't allow cookies.

	if(!("cookieEnabled" in navigator)){
		this("__djCookieTest__", "CookiesAllowed");
		navigator.cookieEnabled = this("__djCookieTest__") == "CookiesAllowed";
		if(navigator.cookieEnabled){
			this("__djCookieTest__", "", {expires: -1});
		}
	}
	return navigator.cookieEnabled;
};

return dojo.cookie;
});

},
'dijit/MenuBarItem':function(){
require({cache:{
'url:dijit/templates/MenuBarItem.html':"<div class=\"dijitReset dijitInline dijitMenuItem dijitMenuItemLabel\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<span data-dojo-attach-point=\"containerNode\"></span>\n</div>\n"}});
define("dijit/MenuBarItem", [
	"dojo/_base/declare", // declare
	"./MenuItem",
	"dojo/text!./templates/MenuBarItem.html"
], function(declare, MenuItem, template){

/*=====
	var MenuItem = dijit.MenuItem;
=====*/

	// module:
	//		dijit/MenuBarItem
	// summary:
	//		Item in a MenuBar that's clickable, and doesn't spawn a submenu when pressed (or hovered)


	var _MenuBarItemMixin = declare("dijit._MenuBarItemMixin", null, {
		templateString: template,

		// Map widget attributes to DOMNode attributes.
		_setIconClassAttr: null	// cancel MenuItem setter because we don't have a place for an icon
	});

	var MenuBarItem = declare("dijit.MenuBarItem", [MenuItem, _MenuBarItemMixin], {
		// summary:
		//		Item in a MenuBar that's clickable, and doesn't spawn a submenu when pressed (or hovered)

	});
	MenuBarItem._MenuBarItemMixin = _MenuBarItemMixin;	// dojox.mobile is accessing this


	return MenuBarItem;
});

},
'dojo/uacss':function(){
define("dojo/uacss", ["./dom-geometry", "./_base/lang", "./ready", "./_base/sniff", "./_base/window"],
	function(geometry, lang, ready, has, baseWindow){
	// module:
	//		dojo/uacss
	// summary:
	//		Applies pre-set CSS classes to the top-level HTML node, based on:
	//			- browser (ex: dj_ie)
	//			- browser version (ex: dj_ie6)
	//			- box model (ex: dj_contentBox)
	//			- text direction (ex: dijitRtl)
	//
	//		In addition, browser, browser version, and box model are
	//		combined with an RTL flag when browser text is RTL. ex: dj_ie-rtl.

	var
		html = baseWindow.doc.documentElement,
		ie = has("ie"),
		opera = has("opera"),
		maj = Math.floor,
		ff = has("ff"),
		boxModel = geometry.boxModel.replace(/-/,''),

		classes = {
			"dj_quirks": has("quirks"),

			// NOTE: Opera not supported by dijit
			"dj_opera": opera,

			"dj_khtml": has("khtml"),

			"dj_webkit": has("webkit"),
			"dj_safari": has("safari"),
			"dj_chrome": has("chrome"),

			"dj_gecko": has("mozilla")
		}; // no dojo unsupported browsers

	if(ie){
		classes["dj_ie"] = true;
		classes["dj_ie" + maj(ie)] = true;
		classes["dj_iequirks"] = has("quirks");
	}
	if(ff){
		classes["dj_ff" + maj(ff)] = true;
	}

	classes["dj_" + boxModel] = true;

	// apply browser, browser version, and box model class names
	var classStr = "";
	for(var clz in classes){
		if(classes[clz]){
			classStr += clz + " ";
		}
	}
	html.className = lang.trim(html.className + " " + classStr);

	// If RTL mode, then add dj_rtl flag plus repeat existing classes with -rtl extension.
	// We can't run the code below until the <body> tag has loaded (so we can check for dir=rtl).
	// priority is 90 to run ahead of parser priority of 100
	ready(90, function(){
		if(!geometry.isBodyLtr()){
			var rtlClassStr = "dj_rtl dijitRtl " + classStr.replace(/ /g, "-rtl ");
			html.className = lang.trim(html.className + " " + rtlClassStr + "dj_rtl dijitRtl " + classStr.replace(/ /g, "-rtl "));
		}
	});
	return has;
});

},
'curam/util/Refresh':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * -------------------- 
   * 07-Oct-2013  BOS [CR00396277] Refactored to take account that the selected
   *                    tab may be undefined.
   */

define("curam/util/Refresh", ["curam/util/Request",
        "curam/define",
        "curam/util",
        "curam/tab",
        "curam/debug",
        "curam/util/ContextPanel",
        "curam/util/ui/refresh/TabRefreshController",
        "curam/util/ResourceBundle"
        ], function(curamRequest) {
  
  /*
   * Modification History
   * --------------------
   * 11-Apr-2014  MV  [CR00424825] Move to common AJAX request API.
   * 07-Oct-2013  BOS [CR00396277] Refactoring to take account of the fact that
   *                    the selected tab may not be defined. 
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 05-Aug-2011  MV  [CR00283589] Stop the click event in refreshPage() function.
   * 29-Jul-2011  MV  [CR00269970] Make use of the new refresh controller.
   * 24-May-2011  MV  [CR00267843] Disallow auto refresh on submitted action pages.
   * 29-Apr-2011  SC  [CR00264826] Removed incorrect usage of getselectedtab.
   * 11-Feb-2011  PK  [CR00251730] Added support for refreshing main content
   *                    panel on submit.
   * 22-Dec-2010  MV  [CR00239864] Only call menu/nav loaders if there is request
   *                    for menu/nav update.
   * 14-Dec-2010  DG  [CR00217921] Updated for "tabDescriptor" on a tab panel.
   *                    Added copyright.
   * 30-Nov-2010  FG  [CR00232780] Add a new function that may be used to refresh
   *                    the page content and smart panel of a page.
   * 13-Jul-2010  MV  [CR00210064] Ensure tab menu and navigation is not updated
   *                   twice on tab load.
   * 07-Jul-2010  MV  [CR00180694] Refactor to unify dynamic updates of actions
   *                  menu and tab navigation. Move JavaScript code from renderer
   *                  to here.
   * 29-Apr-2010  MV  [CR00195109] Uncomment menu bar refresh code.
   * 26-Apr-2010  JS  [CR00197709] Removed refresh navigation bar code.
   * 27-Nov-2009  MV  [CR00180297] Pass the tab widget ID to the handlers.
   * 18-Nov-2009  MV  [CR00172452] Only call handlers for the corresponding tab.
   * 03-Aug-2009  MLB [CR00163869] Full refresh implementation.
   * 16-Jul-2009  MLB [CR00162701] Initial version.
   */
  
  /**
   * Creating Resource Bundle Object to access localized resources.
   */ 
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");

  /**
   * Contains functions for refreshing the various panels.
   */
  curam.define.singleton("curam.util.Refresh", {
    // flag if the content panel has been submitted
    submitted : false,
    // the id of the page that was submitted
    pageSubmitted : "",
    // array of refresh configuration for all tabs
    refreshConfig : [],

    menuBarCallback: null,
    navigationCallback: null,
    refreshedOnTabOpen: {},
    
    /** Holds references to refresh controllers for individual tabs. */
    _controllers: {},
    
    /** Holds reference to the page level refresh button anchor. */
    _pageRefreshButton: undefined,

    /**
     * Called by the MenuBarRenderer to register functions to be used
     * for dynamically updating the menu items.
     * 
     * The function is called once for each opened tab that has dynamic menu
     * items. The assumption is that all such tabs are using the same callbacks
     * so only the first call to this function is used to set the callbacks.
     * Subsequent calls are ignored.
     * 
     * @param updateMenuItemStates
     * @param getRefreshParams
     */
    setMenuBarCallbacks: function(updateMenuItemStates, getRefreshParams) {
      if (!curam.util.Refresh.menuBarCallback) {
        curam.util.Refresh.menuBarCallback = {
          updateMenuItemStates: updateMenuItemStates,
          getRefreshParams: getRefreshParams
        };
      }
    },

    /**
     * Called by the NavigationTabRenderer to register functions to be used
     * for dynamically updating the navigation items.
     * 
     * The function is called once for each opened tab that has dynamic
     * navigation items. The assumption is that all such tabs are using the same
     * callbacks so only the first call to this function is used to set
     * the callbacks. Subsequent calls are ignored.
     * 
     * @param updateNavItemStates
     * @param getRefreshParams
     */
    setNavigationCallbacks: function(updateNavItemStates, getRefreshParams) {
      if (!curam.util.Refresh.navigationCallback) {
        curam.util.Refresh.navigationCallback = {
          updateNavItemStates: updateNavItemStates,
          getRefreshParams: getRefreshParams
        };
      }
    },

    refreshMenuAndNavigation: function(tabWidgetId, refreshMenuBar,
        refreshNavigation, onTabOpen) {
      // Summary:
      //    Sends an AJAX request to get dynamic menu and navigation data
      //    and calls the functions for updating these components.
      curam.debug.log("curam.util.Refresh.refreshMenuAndNavigation: "
          + "tabWidgetId=%s, refreshMenuBar || refreshNavigation: %s || %s",
          tabWidgetId, refreshMenuBar, refreshNavigation);

      if (onTabOpen && curam.util.Refresh.refreshedOnTabOpen[tabWidgetId]) {
        // guard against situations where both menu and navigation onTabOpen
        // is called simultaneously
        curam.debug.log(bundle.getProperty("curam.util.Refresh.stop"));
        return;

      } else if(onTabOpen
            && !curam.util.Refresh.refreshedOnTabOpen[tabWidgetId]) {

        curam.debug.log(bundle.getProperty("curam.util.Refresh.tab.open"));
        // flag the fact onTabOpen was called and proceed with refreshing
        curam.util.Refresh.refreshedOnTabOpen[tabWidgetId] = true;

      } else {
        curam.debug.log(bundle
          .getProperty("curam.util.Refresh.detect.refresh"));
        // otherwise refresh as requested
        curam.debug.log(bundle.getProperty("curam.util.Refresh.refresh"));
      }

      if (!refreshMenuBar && !refreshNavigation) {
        // do nothing
        curam.debug.log(bundle.getProperty("curam.util.Refresh.no.refresh"));
        // reset the onTabOpen flag
        curam.util.Refresh.refreshedOnTabOpen[tabWidgetId] = false;
        return;
      }

      var callbacks = {
        /**
         * Handles the successful return of the AJAX call.
         */
        update: function(tabWidgetId, result, ioargs) {
          curam.debug.log(bundle
            .getProperty("curam.util.Refresh.dynamic.refresh"), result);
          var ncb = curam.util.Refresh.navigationCallback;
          curam.debug.log("refreshNavigation? ", refreshNavigation);
          if (refreshNavigation && result.navData && ncb) {
            ncb.updateNavItemStates(tabWidgetId, result);
          };
          var mcb = curam.util.Refresh.menuBarCallback;
          curam.debug.log("refreshMenuBar? ", refreshMenuBar);
          if (refreshMenuBar && result.menuData && mcb) {
            mcb.updateMenuItemStates(tabWidgetId, result);
          }
        },

        /**
         * Handles the failure case of the AJAX call made to get data
         * for the dynamic items.
         */
        error: function(error, ioargs) {
          curam.debug.log("========= " + bundle
            .getProperty("curam.util.Refresh.dynamic.failure") 
              + " ===========");
          curam.debug.log(bundle
            .getProperty("curam.util.Refresh.dynamic.error"), error);
          curam.debug.log(bundle
            .getProperty("curam.util.Refresh.dynamic.args"), ioargs);
          curam.debug.log("==================================================");
        }
      };

      // send the AJAX request
      var fullUrl = "servlet/JSONServlet?o3c=TAB_DYNAMIC_STATE_QUERY";
      var mcb = curam.util.Refresh.menuBarCallback;
      if (refreshMenuBar && mcb) {
        var menuParams = mcb.getRefreshParams( tabWidgetId);
        if (menuParams) {
          fullUrl += "&" + menuParams;
        }
      }
      var ncb = curam.util.Refresh.navigationCallback;
      if (refreshNavigation && ncb) {
        var navParams = ncb.getRefreshParams(tabWidgetId);
        if (navParams) {
          fullUrl += "&" + navParams;
        }
      }
      curam.debug.log(bundle
          .getProperty("curam.util.Refresh.dynamic.refresh.req"));
      curamRequest.post({
         url: fullUrl,
         handleAs: "json",
         preventCache: true,
         load: dojo.hitch(callbacks, "update", tabWidgetId),
         error: dojo.hitch(callbacks, "error")
      });
    },
    
    /**
     * Called by the tab renderer this function ensures that if config is added
     * repeatedly, it overrides any existing config for the same tab.
     * 
     * This caters for closing and reopening tabs.
     * 
     * @param {Object} config The tab refresh configuration to add.
     */
    addConfig: function(config) {
      var updated = false;
      
      // if the config for the tab is already added, replace it with the new one
      dojo.forEach(curam.util.Refresh.refreshConfig, function(existingConfig) {
        if (existingConfig.tab == config.tab) {
          existingConfig.config = config.config;
          
          updated = true;
        }
      });
      
      // otherwise just add as a new config
      if (!updated) {
        curam.util.Refresh.refreshConfig.push(config);
      }
    },

    /**
     * Called by the tab renderer this function instantiates the refresh
     * controller for the specified tab.
     * 
     * @param {String} tabWidgetId Widget ID of the tab to create refresh
     *    controller for.
     */
    setupRefreshController: function(tabWidgetId) {
      curam.debug.log("curam.util.Refresh.setupRefreshController " 
         + bundle.getProperty("curam.util.ExpandableLists.load.for"), 
           tabWidgetId);
      
      var selectedTab = dijit.byId(tabWidgetId);
      var tabId = selectedTab.tabDescriptor.tabID;
      
      var filteredConfigs = dojo.filter(curam.util.Refresh.refreshConfig,
          function(item) { return item.tab == tabId; });

      if (filteredConfigs.length == 1) {
        var refreshConfigTab = filteredConfigs[0];
        var ctl = new curam.util.ui.refresh.TabRefreshController(tabWidgetId, refreshConfigTab);
        curam.util.Refresh._controllers[tabWidgetId] = ctl;
        ctl.setRefreshHandler(curam.util.Refresh.handleRefreshEvent);
      
      } else {
        if (filteredConfigs.length == 0) {
          curam.debug.log(bundle
            .getProperty("curam.util.Refresh.no.dynamic.refresh"), tabWidgetId);
          var ctl = new curam.util.ui.refresh.TabRefreshController(tabWidgetId, null);
          curam.util.Refresh._controllers[tabWidgetId] = ctl;
        
        } else {
          throw "curam.util.Refresh: multiple dynamic refresh "
              + "configurations found for tab " + tabWidgetId;

        }
      }
      
      // destroy controller reference on tab close
      curam.tab.executeOnTabClose(function() {
        curam.util.Refresh._controllers[tabWidgetId].destroy();
        curam.util.Refresh._controllers[tabWidgetId] = undefined;
      }, tabWidgetId);
    },
    
    /**
     * Returns the refresh controller for the specified tab, throwing exception
     * in case controller doesn't exist for the tab.
     * 
     * @param tabWidgetId Widget ID of the tab.
     * 
     * @returns The refresh controller.
     */
    getController: function(tabWidgetId) {
      var ctl = curam.util.Refresh._controllers[tabWidgetId];
      if (!ctl) {
        throw "Refresh controller for tab '" + tabWidgetId + "' not found!";
      }
      return ctl;
    },
    
    /**
     * This is called by nested frames to notify the refresh controller of a page
     * load.
     * 
     * @param iframeId ID of the source iframe.
     * @param context The context in which the load happened.
     */
    handleOnloadNestedInlinePage: function(iframeId, context) {
      curam.debug.log("curam.util.Refresh.handleOnloadNestedInlinePage " 
        + bundle.getProperty("curam.util.Refresh.iframe", [iframeId, context]));
       var topmostWin = curam.util.getTopmostWindow();
       var tabWidgetId = undefined;

      // get the source tab of the nested page
      var sourceTab = curam.tab.getSelectedTab();
      if (sourceTab) {
        tabWidgetId = curam.tab.getTabWidgetId(sourceTab);  
      }

      if (tabWidgetId) {
        curam.debug.log(bundle.getProperty("curam.util.Refresh.parent"), 
                      tabWidgetId);
        topmostWin.curam.util.Refresh.getController(tabWidgetId).pageLoaded(
          context.pageID,
          curam.util.ui.refresh.RefreshEvent.prototype.SOURCE_CONTEXT_INLINE);
        topmostWin.dojo.publish("/curam/main-content/page/loaded",
          [context.pageID, tabWidgetId]);
        return true;
      }
      return false;
    },

    /**
     * Handles refresh events emitted by refresh controllers for tabs in the UI.
     * 
     * @param {Array} eventIds A list of refresh events to be processed.
     */
    handleRefreshEvent: function(eventIds) {
      var contextPanelRefreshHandler = function(tabWidgetId) {
        curam.util.ContextPanel.refresh(dijit.byId(tabWidgetId));
      };
      var mainContentRefreshHandler = function(tabWidgetId) {
        curam.tab.refreshMainContentPanel(dijit.byId(tabWidgetId));
      };
      var menuAndNavigationRefreshHandler =
      function(tabWidgetId, refreshMenuBar, refreshNavigation) {
        curam.util.Refresh.refreshMenuAndNavigation(
            tabWidgetId, refreshMenuBar, refreshNavigation);
      };
      curam.util.Refresh._doRefresh(eventIds, contextPanelRefreshHandler,
        mainContentRefreshHandler, menuAndNavigationRefreshHandler);
    },
    
    /**
     * Performs the actual refresh using the specified handlers.
     * THis is factored out to a separate function so that it can be unit tested.
     * 
     * @param {Array} eventIds A list of refresh events to be processed.
     * @param {Function} refreshContextPanel A handler to be called when context
     *            panel refresh is required.
     * @param refreshMainContent A handler to be called when main content panel
     *            refresh is required.
     * @param refreshMenuAndNavigation A handler to be called when menu
     *            and navigation refresh is required.
     */
    _doRefresh: function(eventIds, refreshContextPanel, refreshMainContent,
        refreshMenuAndNavigation) {

      var tabWidgetId = null;
      var refreshMenuBar = false;
      var refreshNavigation = false;
      var refreshContext = false;
      var refreshMain = false;
      var trc = curam.util.ui.refresh.TabRefreshController.prototype;
      dojo.forEach(eventIds, function(eventId) {
        var lastSlashIndex = eventId.lastIndexOf("/");
        var target = eventId.slice(0, lastSlashIndex);
        // all events are for the same tabWidgetId so just read the first one
        if (!tabWidgetId) {
          tabWidgetId = eventId.slice(lastSlashIndex + 1, eventId.length);
        }
        // now read the target part
        if (target == trc.EVENT_REFRESH_MENU) {
          refreshMenuBar = true;
        }
        if (target == trc.EVENT_REFRESH_NAVIGATION) {
          refreshNavigation = true;
        }
        if (target == trc.EVENT_REFRESH_CONTEXT) {
          refreshContext = true;
        }
        if (target == trc.EVENT_REFRESH_MAIN) {
          refreshMain = true;
        }
      });
      
      // perform the refreshes
      if (refreshContext) {
        // refreshes the context panel
        refreshContextPanel(tabWidgetId);
      }
      if (refreshMain) {
        refreshMainContent(tabWidgetId);
      }
      refreshMenuAndNavigation(tabWidgetId, refreshMenuBar, refreshNavigation);
    },
    
    setupRefreshButton:function(buttonClass) {
      dojo.ready(function() {
        var button = dojo.query("." + buttonClass)[0];
        if (!button) {
          throw "Refresh button not found: " + buttonClass;
        }
        curam.util.Refresh._pageRefreshButton = button;
        var href = window.location.href;
        if (curam.util.isActionPage(href)) {
          // disable the button
          dojo.addClass(button, "disabled");
          curam.util.Refresh._pageRefreshButton._curamDisable = true;

        } else {
          dojo.addClass(button, "enabled");
          curam.util.Refresh._pageRefreshButton["_curamDisable"] = undefined;
        }
        
        curam.util.getTopmostWindow().curam.util.setupPreferencesLink(href);
      });
    },
    
    /**
     * Sets the force refresh flag to true and then invokes the function
     * that refreshes the main content area of a page. An event is also fired
     * that ensures that the associated smart panel is also refreshed.
     */
    refreshPage: function(event){
      dojo.stopEvent(event);

      var href = window.location.href;
      var buttonDisabled = curam.util.Refresh._pageRefreshButton._curamDisable;
      if(buttonDisabled) {
        // do nothing
        return;
      }

      // Ensure that the force refresh flag is set to true and make a call to
      // the function that will carry out the refresh operation.
      curam.util.FORCE_REFRESH = true;
      curam.util.redirectWindow(href, true);
    }
  });
  
  return curam.util.Refresh;
});

},
'dijit/form/_FormWidget':function(){
define("dijit/form/_FormWidget", [
	"dojo/_base/declare",	// declare
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/ready",
	"../_Widget",
	"../_CssStateMixin",
	"../_TemplatedMixin",
	"./_FormWidgetMixin"
], function(declare, kernel, ready, _Widget, _CssStateMixin, _TemplatedMixin, _FormWidgetMixin){

/*=====
var _Widget = dijit._Widget;
var _TemplatedMixin = dijit._TemplatedMixin;
var _CssStateMixin = dijit._CssStateMixin;
var _FormWidgetMixin = dijit.form._FormWidgetMixin;
=====*/

// module:
//		dijit/form/_FormWidget
// summary:
//		FormWidget


// Back compat w/1.6, remove for 2.0
if(!kernel.isAsync){
	ready(0, function(){
		var requires = ["dijit/form/_FormValueWidget"];
		require(requires);	// use indirection so modules not rolled into a build
	});
}

return declare("dijit.form._FormWidget", [_Widget, _TemplatedMixin, _CssStateMixin, _FormWidgetMixin], {
	// summary:
	//		Base class for widgets corresponding to native HTML elements such as <checkbox> or <button>,
	//		which can be children of a <form> node or a `dijit.form.Form` widget.
	//
	// description:
	//		Represents a single HTML element.
	//		All these widgets should have these attributes just like native HTML input elements.
	//		You can set them during widget construction or afterwards, via `dijit._Widget.attr`.
	//
	//		They also share some common methods.

	setDisabled: function(/*Boolean*/ disabled){
		// summary:
		//		Deprecated.  Use set('disabled', ...) instead.
		kernel.deprecated("setDisabled("+disabled+") is deprecated. Use set('disabled',"+disabled+") instead.", "", "2.0");
		this.set('disabled', disabled);
	},

	setValue: function(/*String*/ value){
		// summary:
		//		Deprecated.  Use set('value', ...) instead.
		kernel.deprecated("dijit.form._FormWidget:setValue("+value+") is deprecated.  Use set('value',"+value+") instead.", "", "2.0");
		this.set('value', value);
	},

	getValue: function(){
		// summary:
		//		Deprecated.  Use get('value') instead.
		kernel.deprecated(this.declaredClass+"::getValue() is deprecated. Use get('value') instead.", "", "2.0");
		return this.get('value');
	},

	postMixInProperties: function(){
		// Setup name=foo string to be referenced from the template (but only if a name has been specified)
		// Unfortunately we can't use _setNameAttr to set the name due to IE limitations, see #8484, #8660.
		// Regarding escaping, see heading "Attribute values" in
		// http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.3.2
		this.nameAttrSetting = this.name ? ('name="' + this.name.replace(/'/g, "&quot;") + '"') : '';
		this.inherited(arguments);
	},

	// Override automatic assigning type --> focusNode, it causes exception on IE.
	// Instead, type must be specified as ${type} in the template, as part of the original DOM
	_setTypeAttr: null
});

});

},
'curam/contentPanel':function(){
define("curam/contentPanel", ["curam/util",
        "curam/tab",
        "curam/define",
        "curam/debug",
        "curam/ui/PageRequest"
        ], function(cu, ct) {
  
  /*
   * Modification History
   * --------------------
   * 11-Mar-2013  SB [CR00372052] Updated iframeOnloadHandler() to add
   *                              Content Panel Title.
   * 22-Oct-2012  SK [CR00346419] Now properly releasing smart panel, so 
   *            avoiding the related memory leak.
   * 11-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 17-Sep-2012  MV [CR00344216] Label content panel iframe as loaded when
   *            finished loading. 
   * 11-Sep-2012  MV [CR00339639] Use Dojo function for setting DOM attribute. 
   * 29-Jul-2011  MV [CR00269970] Notify the new refresh controller of page load.
   * 21-Aug-2011  JK  [TEC-6883]  Added Content Panel Title
   * 31-Jan-2011  MK [CR00250297] The smart panel now only responds to the 
   *              "expandedList.toggle" event if it has been raised from the 
   *              same tab as the smart panel itself exists on.
   * 05-Jul-2010 BD  [CR00204119] Add publisher to relay In Page Navigation events
   * 18-Sep-2010  PK  [CR00204622] Ensure when a page loads for the first time
   *                    in an expandable list, only the "expandedList.toggle"
   *                    event is processed.
   * 28-Jun-2010  SD  [CR00204622] Added event handling for Smart Panel.
   * 04-Jun-2010  MV  [CR00202412] Refactor to use the new standard onLoad
   *                    event manager.
   * 18-Nov-2009  MV  [CR00172452] Pass tab widget ID to the event handler.
   * 06-Aug-2009  MLB [CR00163869] Passing the page ID with the published topic.
   * 15-Jun-2009  MV  [CR00160095] Initial version.
   */

  /**
   * Contains functions for the content panel.
   */
  curam.define.singleton("curam.contentPanel", {

      initSmartPanelExpListPageLoadListener: function() {
        if (!cu.getTopmostWindow().dojo.body()._spListenerInitialized) {
          // TODO: can this class be re-factored so that we don't need both
          // "expandedList.pageLoaded" and "expandedList.pageLoaded.final" events?
          cu.getTopmostWindow().dojo.subscribe("expandedList.pageLoaded",
              curam.contentPanel.smartPanelExpListPageLoadListener);
          cu.getTopmostWindow().dojo.body()._spListenerInitialized
              = "true";
        }
      },

      /**
       * Listener for the "expandedList.pageLoaded" event. This is initialized in
       * initSmartPanelExpListPageLoadListener above.
       */
      smartPanelExpListPageLoadListener: function(data) {
        if (ct.getSmartPanelIframe()) {
          curam.contentPanel.checkSmartPanelLoaded(data,
            "ExpandedList.TabContentArea.Reloaded");
        }
      },

      /**
       * This method is invoked from "listRowFrameLoaded()" in "util.js" when a
       * page is loaded in an expandable panel on subsequent page loads after
       * the first page load. The "listRowFrameLoaded()" method in "util.js"
       * handles the distinction between first and subsequent page loads.
       */
      publishSmartPanelExpListPageLoad: function(iframe) {
        if (ct.getSmartPanelIframe()) {
          cu.getTopmostWindow().dojo.publish("expandedList.pageLoaded",
              [iframe.contentWindow.location.href]);
        }
      },

      setupOnLoad: function(iframeId, tabWidgetId) {
        curam.debug.log("curam.contenPanel: setupOnLoad: " + iframeId + " "
                        + tabWidgetId);

        // setup expandable lists page load listener
        curam.contentPanel.initSmartPanelExpListPageLoadListener();

        var handler = curam.contentPanel.iframeOnloadHandler;
        // subscribe for onLoad events on the iframe
        cu.onLoad.addSubscriber(iframeId, handler);

        // subscribe for events and republish into Smart Panel
        curam.contentPanel.targetSmartPanel(iframeId, tabWidgetId);

        // ensure removing the subscribers on tab close
        ct.executeOnTabClose(function() {
          cu.onLoad.removeSubscriber(iframeId, handler);
        }, tabWidgetId);
      },

      iframeOnloadHandler: function(iframeId, context) {
        // summary:
        //  Handles the onload event of the content panel iframe.
        var sourceTab = ct.getContainerTab(
            dojo.query("iframe." + iframeId)[0]);
        var tabWidgetId = ct.getTabWidgetId(sourceTab);
        
        var iframe = dojo.byId(iframeId);       
        var pageTitle = iframe.contentWindow.document.title;
        
        if(pageTitle == "") {
          var iframeTitle = curam.util.iframeTitleFallBack();
          iframe.contentWindow.document.title = iframeTitle;
        }
        dojo.attr(iframe, "title", CONTENT_PANEL_TITLE + " - " + curam.util.iframeTitleFallBack());
        dojo.attr(iframe, "data-done-loading", true);
        
        // Republish the IPN Data on a more targeted channel so only the correct
        // UIMController processes it.
        //var topic = curam.UIMController.prototype.EVENT.TOPIC_PREFIX + iframeId;
        //dojo.publish(topic, [context.inPageNavItems]);

        cu.Refresh.getController(tabWidgetId).pageLoaded(context.pageID,
            cu.ui.refresh.RefreshEvent.prototype.SOURCE_CONTEXT_MAIN);
        dojo.publish("/curam/main-content/page/loaded", [context.pageID, tabWidgetId]);
      },

      spOnLoadHandler: function(iframeId, context) {

        // find content panel iFrame
        var contentPanel = dojo.query("." + iframeId)[0];

        curam.contentPanel.checkSmartPanelLoaded(
          contentPanel.src, "TabContentArea.Reloaded");
      },

      checkSmartPanelLoaded : function(url, eventType) {
        // summary;
        // check if the Smart Panel is loaded, if not keep querying until it is

        var smartPanel = ct.getSmartPanelIframe();

        var spLoaded = dojo.attr(smartPanel, "iframeLoaded");

        if(spLoaded == "true") {
          curam.contentPanel.smartPanelPublisher(smartPanel, url, eventType);
        } else {
          var sourceTab = curam.tab.getContainerTab(smartPanel);
          var tabWidgetId = curam.tab.getTabWidgetId(sourceTab);
          var loadedF = dojo.subscribe("smartPanel.loaded", function(iframe) {
            if(iframe != smartPanel) {
              return;
            }
            curam.contentPanel.smartPanelPublisher(smartPanel, url, eventType);
          });
          curam.tab.unsubscribeOnTabClose(loadedF, tabWidgetId);
        }
      },

      smartPanelPublisher: function(smartPanel, url, eventType) {

        // parse the url
        var uimPageRequest = new curam.ui.PageRequest(url);

        // Target publish into smart panel iFrame
        smartPanel.contentWindow.dojo.publish(
          "contentPane.targetSmartPanel",
          [{'eventType': eventType,
            'pageId': uimPageRequest.pageID,
            'parameters': uimPageRequest.parameters}]);
      },

      targetSmartPanel: function(iframeId, tabWidgetId) {
        curam.debug.log("curam.contentPanel:targetSmartPanel(): "
            + iframeId + " " + tabWidgetId);
        // iframeId input parameter is that of content panel
        var smartPanelIFrame = ct.getSmartPanelIframe();

        var smartPanelTabWidgetId = tabWidgetId;
        // Ensure Smart Panel exists
        if(smartPanelIFrame) {
          var spId = curam.util.onLoad.defaultGetIdFunction(smartPanelIFrame);
          // 1. listen for onClick from expandable list
          var spOnClickSubscribe =
            dojo.subscribe("expandedList.toggle", function(iframeId, context, tabWidgetId) {
                  
                  // only respond to expandable lists that exist within the same tab
                  // as the smart panel.
                  if (smartPanelTabWidgetId === tabWidgetId){               
                curam.contentPanel.checkSmartPanelLoaded(context.url, 
                            context.eventType);
              }
            }
          );

          // 3. set up handler and subscribe for onLoad events
          var smartPanelOnLoad = curam.contentPanel.spOnLoadHandler;
          cu.onLoad.addSubscriber(iframeId, smartPanelOnLoad);

          // 4. ensure removing the subscribers on tab close
          ct.executeOnTabClose(function() {
            dojo.unsubscribe(spOnClickSubscribe);
            cu.onLoad.removeSubscriber(iframeId, smartPanelOnLoad);
            cu.onLoad.removeSubscriber(spId, curam.smartPanel._handleSmartPanelLoad);
          }, tabWidgetId);
        }
      }
  });
  
  return curam.contentPanel;
});

},
'curam/widget/Select':function(){
define("curam/widget/Select", ["dojo/dom-style",
        "dijit/popup",
        "dojo/dom-geometry",
        "dojo/_base/lang",
        "dojo/dom-attr",
        "dojo/dom-class",
        "dijit/form/Select"
        ], function(domStyle, popup, domGeometry, lang, domAttr, domClass) { 

  var Select = dojo.declare("curam.widget.Select", dijit.form.Select, {  

  /* COPY_PASTE_CUSTOMIZATION 
   * 
   * We need to comment out a single line that adds 16px on to the width. For 
   * some reason the first time a drop down is clicked on the width ends up
   * being too wide. When we comment out this line it operates correctly the
   * first time that you click on the drop down.*/
  openDropDown: function(){                
    
    // summary:
    //              Opens the dropdown for this widget.   To be called only when this.dropDown
    //              has been created and is ready to display (ie, it's data is loaded).
    // returns:
    //              return value of dijit.popup.open()
    // tags:
    //              protected
    var dropDown = this.dropDown,
            ddNode = dropDown.domNode,
            aroundNode = this._aroundNode || this.domNode,
            self = this;

    // Prepare our popup's height and honor maxHeight if it exists.

    // TODO: isn't maxHeight dependent on the return value from dijit.popup.open(),
    // ie, dependent on how much space is available (BK)

    if(!this._preparedNode){
            this._preparedNode = true;
            // Check if we have explicitly set width and height on the dropdown widget dom node
            if(ddNode.style.width){
                    this._explicitDDWidth = true;
            }
            if(ddNode.style.height){
                    this._explicitDDHeight = true;
            }
    }

    // Code for resizing dropdown (height limitation, or increasing width to match my width)
    if(this.maxHeight || this.forceWidth || this.autoWidth){
            var myStyle = {
                    display: "",
                    visibility: "hidden"
            };
            if(!this._explicitDDWidth){
                    myStyle.width = "";
            }
            if(!this._explicitDDHeight){
                    myStyle.height = "";
            }
            domStyle.set(ddNode, myStyle);

            // Figure out maximum height allowed (if there is a height restriction)
            var maxHeight = this.maxHeight;
            if(maxHeight == -1){
                    // limit height to space available in viewport either above or below my domNode
                    // (whichever side has more room)
                    var viewport = winUtils.getBox(),
                            position = domGeometry.position(aroundNode, false);
                    maxHeight = Math.floor(Math.max(position.y, viewport.h - (position.y + position.h)));
            }

            // Attach dropDown to DOM and make make visibility:hidden rather than display:none
            // so we call startup() and also get the size
            popup.moveOffScreen(dropDown);

            if(dropDown.startup && !dropDown._started){
                    dropDown.startup(); // this has to be done after being added to the DOM
            }
            // Get size of drop down, and determine if vertical scroll bar needed
            var mb = domGeometry.getMarginSize(ddNode);
            var overHeight = (maxHeight && mb.h > maxHeight);
            domStyle.set(ddNode, {
                    overflowX: "hidden",
                    overflowY: overHeight ? "auto" : "hidden"
            });
            
            if(overHeight){
                    mb.h = maxHeight;
                    if("w" in mb){
                            //>>>commented out 
                            //mb.w += 16;     // room for vertical scrollbar
                            //>>>commented out end
                    }
            }else{
                    delete mb.h;                                    
            }

            // Adjust dropdown width to match or be larger than my width
            if(this.forceWidth){
                    mb.w = aroundNode.offsetWidth;
            }else if(this.autoWidth){
                    mb.w = Math.max(mb.w, aroundNode.offsetWidth);
            }else{
                    delete mb.w;
            }

            // And finally, resize the dropdown to calculated height and width
            if(lang.isFunction(dropDown.resize)){
                    dropDown.resize(mb);
            }else{
                    domGeometry.setMarginBox(ddNode, mb);
            }
    }

    var retVal = popup.open({
            parent: this,
            popup: dropDown,
            around: aroundNode,
            orient: this.dropDownPosition,
            onExecute: function(){
                    self.closeDropDown(true);
            },
            onCancel: function(){
                    self.closeDropDown(true);
            },
            onClose: function(){
                    domAttr.set(self._popupStateNode, "popupActive", false);
                    domClass.remove(self._popupStateNode, "dijitHasDropDownOpen");
                    self._opened = false;
            }
    });
    domAttr.set(this._popupStateNode, "popupActive", "true");
    domClass.add(self._popupStateNode, "dijitHasDropDownOpen");
    this._opened=true;

    // TODO: set this.checked and call setStateClass(), to affect button look while drop down is shown
    return retVal;
  }
  });
  
  return Select;
});

},
'dijit/MenuItem':function(){
require({cache:{
'url:dijit/templates/MenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n"}});
define("dijit/MenuItem", [
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.setSelectable
	"dojo/dom-attr", // domAttr.set
	"dojo/dom-class", // domClass.toggle
	"dojo/_base/event", // event.stop
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/sniff", // has("ie")
	"./_Widget",
	"./_TemplatedMixin",
	"./_Contained",
	"./_CssStateMixin",
	"dojo/text!./templates/MenuItem.html"
], function(declare, dom, domAttr, domClass, event, kernel, has,
			_Widget, _TemplatedMixin, _Contained, _CssStateMixin, template){

/*=====
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _Contained = dijit._Contained;
	var _CssStateMixin = dijit._CssStateMixin;
=====*/

	// module:
	//		dijit/MenuItem
	// summary:
	//		A line item in a Menu Widget


	return declare("dijit.MenuItem",
		[_Widget, _TemplatedMixin, _Contained, _CssStateMixin],
		{
		// summary:
		//		A line item in a Menu Widget

		// Make 3 columns
		// icon, label, and expand arrow (BiDi-dependent) indicating sub-menu
		templateString: template,

		baseClass: "dijitMenuItem",

		// label: String
		//		Menu text
		label: '',
		_setLabelAttr: { node: "containerNode", type: "innerHTML" },

		// iconClass: String
		//		Class to apply to DOMNode to make it display an icon.
		iconClass: "dijitNoIcon",
		_setIconClassAttr: { node: "iconNode", type: "class" },

		// accelKey: String
		//		Text for the accelerator (shortcut) key combination.
		//		Note that although Menu can display accelerator keys there
		//		is no infrastructure to actually catch and execute these
		//		accelerators.
		accelKey: "",

		// disabled: Boolean
		//		If true, the menu item is disabled.
		//		If false, the menu item is enabled.
		disabled: false,

		_fillContent: function(/*DomNode*/ source){
			// If button label is specified as srcNodeRef.innerHTML rather than
			// this.params.label, handle it here.
			if(source && !("label" in this.params)){
				this.set('label', source.innerHTML);
			}
		},

		buildRendering: function(){
			this.inherited(arguments);
			var label = this.id+"_text";
			domAttr.set(this.containerNode, "id", label);
			if(this.accelKeyNode){
				domAttr.set(this.accelKeyNode, "id", this.id + "_accel");
				label += " " + this.id + "_accel";
			}
			this.domNode.setAttribute("aria-labelledby", label);
			dom.setSelectable(this.domNode, false);
		},

		_onHover: function(){
			// summary:
			//		Handler when mouse is moved onto menu item
			// tags:
			//		protected
			this.getParent().onItemHover(this);
		},

		_onUnhover: function(){
			// summary:
			//		Handler when mouse is moved off of menu item,
			//		possibly to a child menu, or maybe to a sibling
			//		menuitem or somewhere else entirely.
			// tags:
			//		protected

			// if we are unhovering the currently selected item
			// then unselect it
			this.getParent().onItemUnhover(this);

			// When menu is hidden (collapsed) due to clicking a MenuItem and having it execute,
			// FF and IE don't generate an onmouseout event for the MenuItem.
			// So, help out _CssStateMixin in this case.
			this._set("hovering", false);
		},

		_onClick: function(evt){
			// summary:
			//		Internal handler for click events on MenuItem.
			// tags:
			//		private
			this.getParent().onItemClick(this, evt);
			event.stop(evt);
		},

		onClick: function(/*Event*/){
			// summary:
			//		User defined function to handle clicks
			// tags:
			//		callback
		},

		focus: function(){
			// summary:
			//		Focus on this MenuItem
			try{
				if(has("ie") == 8){
					// needed for IE8 which won't scroll TR tags into view on focus yet calling scrollIntoView creates flicker (#10275)
					this.containerNode.focus();
				}
				this.focusNode.focus();
			}catch(e){
				// this throws on IE (at least) in some scenarios
			}
		},

		_onFocus: function(){
			// summary:
			//		This is called by the focus manager when focus
			//		goes to this MenuItem or a child menu.
			// tags:
			//		protected
			this._setSelected(true);
			this.getParent()._onItemFocus(this);

			this.inherited(arguments);
		},

		_setSelected: function(selected){
			// summary:
			//		Indicate that this node is the currently selected one
			// tags:
			//		private

			/***
			 * TODO: remove this method and calls to it, when _onBlur() is working for MenuItem.
			 * Currently _onBlur() gets called when focus is moved from the MenuItem to a child menu.
			 * That's not supposed to happen, but the problem is:
			 * In order to allow dijit.popup's getTopPopup() to work,a sub menu's popupParent
			 * points to the parent Menu, bypassing the parent MenuItem... thus the
			 * MenuItem is not in the chain of active widgets and gets a premature call to
			 * _onBlur()
			 */

			domClass.toggle(this.domNode, "dijitMenuItemSelected", selected);
		},

		setLabel: function(/*String*/ content){
			// summary:
			//		Deprecated.   Use set('label', ...) instead.
			// tags:
			//		deprecated
			kernel.deprecated("dijit.MenuItem.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
			this.set("label", content);
		},

		setDisabled: function(/*Boolean*/ disabled){
			// summary:
			//		Deprecated.   Use set('disabled', bool) instead.
			// tags:
			//		deprecated
			kernel.deprecated("dijit.Menu.setDisabled() is deprecated.  Use set('disabled', bool) instead.", "", "2.0");
			this.set('disabled', disabled);
		},
		_setDisabledAttr: function(/*Boolean*/ value){
			// summary:
			//		Hook for attr('disabled', ...) to work.
			//		Enable or disable this menu item.

			this.focusNode.setAttribute('aria-disabled', value ? 'true' : 'false');
			this._set("disabled", value);
		},
		_setAccelKeyAttr: function(/*String*/ value){
			// summary:
			//		Hook for attr('accelKey', ...) to work.
			//		Set accelKey on this menu item.

			this.accelKeyNode.style.display=value?"":"none";
			this.accelKeyNode.innerHTML=value;
			//have to use colSpan to make it work in IE
			domAttr.set(this.containerNode,'colSpan',value?"1":"2");

			this._set("accelKey", value);
		}
	});
});

},
'curam/ui/ClientDataAccessor':function(){
/*
 * Copyright 2010-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/*
 * Modification History
 * --------------------
 * 11-Apr-2014  MV  [CR00424825] Move to common AJAX request API.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 09-Aug-2012  MV  [CR00337714] Convert to AMD.
 * 31-Jul-2012  MV  [CR00336202] Fix calls to log() function.
 * 08-Feb-2011  DG  [TEC-6115] Explicitly set content encoding to UTF-8.
 * 29-Jul-2010  PK  [CR00211736] Moved to "curam.ui" package.
 * 02-Jun-2010  PK  [CR00203531] Moved UIMPageRequest class to
 *                    curam\ui\PageRequest.js.
 * 13-Oct-2009  SC  [CR00172239] Moved ClientDataAccessor to this file.
 */

define("curam/ui/ClientDataAccessor", ["curam/util/Request",
        "curam/debug",
        "curam/util/ResourceBundle"
        ], function(curamRequest) {

  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");

  /**
   * Support for accessing the PathResolver servlet to retrieve and
   * set data on the web-tier. The PathResolver only supports a limited
   * set of paths.
   */
  return dojo.declare("curam.ui.ClientDataAccessor", null, {

    /**
     * Return a single string result by calling the specified path.
     *
     * path: The path to invoke on the web-tier.
     * successCallback: The function to invoke for handling the returned data.
     * failCallback: The function to invoke on failure of resolving the path.
     * handleCallback: The function that will be invoked in all circumstances.
     */
    get: function(path, successCallback, failCallback, handleCallback) {
      var tabServletURL =
        "servlet/PathResolver" + "?p=" + path;

      // Set defaults if not defined
      if (failCallback == undefined ) {
        failCallback = dojo.hitch(this, this.handleClientDataAccessorError);
      }

      if (handleCallback == undefined ) {
        handleCallback = dojo.hitch(this, this.handleClientDataAccessorCallback);
      }

      curamRequest.post({
        url: tabServletURL,
        headers: { "Content-Encoding": "UTF-8" },
        handleAs: "text",
        preventCache: true,
        load: successCallback,
        error:  failCallback,
        handle: handleCallback
      });
    },

    /**
     * Return a list of results by calling the specified path.
     *
     * path: The path to invoke on the web-tier.
     * successCallback: The function to invoke for handling the returned data.
     * failCallback: The function to invoke on failure of resolving the path.
     * handleCallback: The function that will be invoked in all circumstances.
     */
    getList: function(path, successCallback, failCallback, handleCallback) {
      var tabServletURL =
        "servlet/PathResolver" + "?r=l&p=" + path;

      // Set defaults if not defined
      if (failCallback == undefined ) {
        failCallback = dojo.hitch(this, this.handleClientDataAccessorError);
      }

      if (handleCallback == undefined ) {
        handleCallback = dojo.hitch(this, this.handleClientDataAccessorCallback);
      }

      curamRequest.post({
        url: tabServletURL,
        headers: { "Content-Encoding": "UTF-8" },
        handleAs: "json",
        preventCache: true,
        load: successCallback,
        error:  failCallback,
        handle: handleCallback
      });
    },

    /**
     * Return a raw JSON object.
     *
     * path: The path to invoke on the web-tier.
     * successCallback: The function to invoke for handling the returned data.
     * failCallback: The function to invoke on failure of resolving the path.
     * handleCallback: The function that will be invoked in all circumstances.
     */
    getRaw: function(path, successCallback, failCallback, handleCallback) {
      var tabServletURL =
        "servlet/PathResolver" + "?r=j&p=" + path;

      // Set defaults if not defined
      if (failCallback == undefined ) {
        failCallback = dojo.hitch(this, this.handleClientDataAccessorError);
      }

      if (handleCallback == undefined ) {
        handleCallback = dojo.hitch(this, this.handleClientDataAccessorCallback);
      }

      curamRequest.post({
        url: tabServletURL,
        headers: { "Content-Encoding": "UTF-8" },
        handleAs: "json",
        preventCache: true,
        load: successCallback,
        error:  failCallback,
        handle: handleCallback
      });
    },

    /**
     * Set a value in the web-tier by calling the specified path. The
     * successCallback is optional in this case because the set may return
     * nothing of significance.
     *
     * path: The path to invoke on the web-tier.
     * value: The value to set.
     * successCallback: The function to invoke for handling the returned data.
     * failCallback: The function to invoke on failure of resolving the path.
     * handleCallback: The function that will be invoked in all circumstances.
     */
    set: function(path, value, successCallback, failCallback, handleCallback) {
      // TODO: Would it be safer to submit the value as the "content" of the
      // xhrPost below? That would avoid problems with URI length limits. See
      // "codetable-hierarchy.js" and "ApplicationController.java" for an example.
      var tabServletURL =
        "servlet/PathResolver" + "?r=x&p=" + path + "&v="
          + encodeURIComponent(value);

      // Set defaults if not defined
      if (failCallback == undefined || failCallback == null) {
        failCallback = dojo.hitch(this, this.handleClientDataAccessorError);
      }

      if (handleCallback == undefined || handleCallback == null) {
        handleCallback = dojo.hitch(this, this.handleClientDataAccessorCallback);
      }

      if (successCallback == undefined || successCallback == null) {
        successCallback = dojo.hitch(this, this.handleClientDataAccessorSuccess);
      }

      curamRequest.post({
        url: tabServletURL,
        headers: { "Content-Encoding": "UTF-8" },
        handleAs: "text",
        preventCache: true,
        load: successCallback,
        error:  failCallback,
        handle: handleCallback
      });
    },

    /**
     * Generic handler for errors when invoking the ClientDataAccessor path
     * resolver.
     */
    handleClientDataAccessorError: function(error, ioargs) {
      var errorPart1
        = bundle.getProperty("curam.ui.ClientDataAccessor.err.1")
          + "PathResolverServlet : ";
      var errorPart2 = bundle.getProperty("curam.ui.ClientDataAccessor.err.2");
      curam.debug.log(errorPart1 + error + errorPart2 + ioargs);
    },

    /**
     * Generic handler for successful invocation when invoking the ClientDataAccessor
     * path resolver.
     */
    handleClientDataAccessorSuccess: function(response, ioargs) {
      curam.debug
        .log("curam.ui.ClientDataAccessor.handleClientDataAccessorSuccess : "
          + response);
    },

    /**
     * Generic handler for errors when invoking the ClientDataAccessor path
     * resolver.
     */
    handleClientDataAccessorCallback: function(response, ioargs) {
      curam.debug
        .log("curam.ui.ClientDataAccessor.handleClientDataAccessorCallback :"
          + " " + bundle.getProperty("curam.ui.ClientDataAccessor.callback"));
    }
  });
});

},
'curam/util/onLoad':function(){
/* Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2013. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * --------------------
   * 06-May-2014 AB   [Cr00430639]Adding title to Iframe-RPT project
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
   * 14-Dec-2010  MV  [CR00238518] Ensure the hidden iframe is not picked up by
   *    WordIntegration control.
   * 06-Dec-2010  MV  [CR00233442] Avoid never ending progress bar in IE.
   * 19-Nov-2010  MV  [CR00231655] Subscribe/connect to events with
   *    a function that will automatically unsubscribe/disconnect on page unload.
   * 30-Jun-2010 MV [CR00161271] Update documentation.
   * 11-Jun-2010 MV [CR00202971] Fixed function for removing subscribers.
   * 02-Jun-2010 MV [CR00202412] Initial version.
   */

define("curam/util/onLoad", ["curam/util",
        "curam/define",
        "curam/util/ResourceBundle"
        ], function() {

  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  curam.define.singleton("curam.util.onLoad", {
    EVENT: "/curam/frame/load",

    // Used in the context of the iframe.
    publishers: [],

    /* Used in the context of the parent window and contains subscribers
     * for all the iframes that exist in this window context.
     */
    subscribers: [],

    defaultGetIdFunction: function(iframeNode) {
      // summary:
      // This is the default function for getting a unique ID of an iframe.
      // If the iframe has a CSS class that starts with "iframe-" then this class
      // is returned as the unique ID of the iframe.
      var classes = dojo.attr(iframeNode, "class").split(" ");
      return dojo.filter(classes, function(className) {
        return className.indexOf("iframe-") == 0;
      })[0];
    },

    addPublisher: function(callback) {
      // summary:
      //   Public function, is called in the context of the iframe window.
      curam.util.onLoad.publishers.push(callback);
    },

    addSubscriber: function(iframeId, callback, /*optional*/getId) {
      // summary:
      //   This is called in the context of the parent window.
      //   Multiple subscribers per iframe can be registered, provided each
      //   has a different handler function.
      // parameter: getId
      //   optional, if not specified the default getId function will be used

      curam.util.onLoad.subscribers.push({
        "getId": getId ? getId : curam.util.onLoad.defaultGetIdFunction,
        "callback": callback,
        "iframeId": iframeId
      });
    },

    removeSubscriber: function(iframeId, callback, /*optional*/getId) {
      // summary:
      //  Must be called in the context of the parent window.

      curam.util.onLoad.subscribers =
        dojo.filter(curam.util.onLoad.subscribers, function(subscriberData) {
          return !(subscriberData.iframeId == iframeId
              && subscriberData.callback == callback);
        });
    },

    execute: function() {
      // summary:
      //   Public function, is called in the context of the iframe window.

      if(window.parent == window) {
        curam.debug.log("curam.util.onLoad.execute(): " 
          + bundle.getProperty("curam.util.onLoad.exit"));
        return;
      }

      var context = {};

      dojo.forEach(curam.util.onLoad.publishers, function(callback) {
        // Allow each of the publishers to add to the context object
        callback(context);
      });

      // Free up references to functions
      curam.util.onLoad.publishers = [];

      // A hack to avoid never ending progress bar in IE when multiple iframes
      // exist in the application.
      //Adding title - RPT project 
      require(["dojo/io/iframe"]);
      var iframe = dojo.io.iframe.create(null, null, "about:blank");
      dojo.attr(iframe, "id", "ie-progress-indicator-helper");
      dojo.attr(iframe, "title", "ie-progress-indicator-helper");

      // publish the event into the parent context
      window.parent.dojo.publish(curam.util.onLoad.EVENT, [window.frameElement, context]);
    }
  });

  /* Subscribe to events in the context this file is being loaded in.
   * This is meant for parent window contexts.
   */
  curam.util.subscribe(curam.util.onLoad.EVENT, function(iframeNode, context) {
    dojo.forEach(curam.util.onLoad.subscribers, function(subscriberData) {
      var currentId = subscriberData.getId(iframeNode);
      if (subscriberData.iframeId == currentId) {
        subscriberData.callback(currentId, context);
      }
    });
  });
  
  return curam.util.onLoad;
});

},
'curam/widget/MenuItem':function(){
require({cache:{
'url:curam/widget/resources/MenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:${onClickValue}\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n"}});
/*
 * Copyright 2012 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.widget.MenuItem
 * @namespace Customized dijit.widget.MenuItem class in order to add extra
 * functionality to close all tabs.
 */
define("curam/widget/MenuItem", ["dijit/MenuItem",
        "dojo/text!curam/widget/resources/MenuItem.html"
        ], function(MenuItem, template) {

/*
 * Modification History
 * --------------------
 * 27-Oct-2012  BOS  [CR00211743] Initial Version.
 */

var CuramMenuItem = dojo.declare("curam.widget.MenuItem", MenuItem,
  /**
   * @lends curam.widget.MenuItem
   */
{
  templateString: template,

  /**
   * The value of the onClick event that will be used when the user executes an
   * on click event.
   * @private
   */
  onClickValue: "",

  /**
   * New function that may be called by the onClick event, in order to close all
   * tabs.
   */
  _onClickAll:function(evt){
    this.getParent().onItemClick(this,evt);
    var tabContainer = curam.tab.getTabContainer();
    var children = tabContainer.getChildren();
    for (var i = 0; i < children.length; i++){
      // Check if a child is closable or not, 
      // only the closable child can be closed down.
      if (children[i].closable) {
        tabContainer.closeChild(children[i]);
      }
    }
  }
});

return CuramMenuItem;
});


},
'dijit/DropDownMenu':function(){
require({cache:{
'url:dijit/templates/Menu.html':"<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\" data-dojo-attach-event=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\n\t<tbody class=\"dijitReset\" data-dojo-attach-point=\"containerNode\"></tbody>\n</table>\n"}});
define("dijit/DropDownMenu", [
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/keys", // keys
	"dojo/text!./templates/Menu.html",
	"./_OnDijitClickMixin",
	"./_MenuBase"
], function(declare, event, keys, template, _OnDijitClickMixin, _MenuBase){

/*=====
	var _MenuBase = dijit._MenuBase;
	var _OnDijitClickMixin = dijit._OnDijitClickMixin;
=====*/

	// module:
	//		dijit/DropDownMenu
	// summary:
	//		dijit.DropDownMenu widget

	return declare("dijit.DropDownMenu", [_MenuBase, _OnDijitClickMixin], {
		// summary:
		//		A menu, without features for context menu (Meaning, drop down menu)

		templateString: template,

		baseClass: "dijitMenu",

		postCreate: function(){
			var l = this.isLeftToRight();
			this._openSubMenuKey = l ? keys.RIGHT_ARROW : keys.LEFT_ARROW;
			this._closeSubMenuKey = l ? keys.LEFT_ARROW : keys.RIGHT_ARROW;
			this.connectKeyNavHandlers([keys.UP_ARROW], [keys.DOWN_ARROW]);
		},

		_onKeyPress: function(/*Event*/ evt){
			// summary:
			//		Handle keyboard based menu navigation.
			// tags:
			//		protected

			if(evt.ctrlKey || evt.altKey){ return; }

			switch(evt.charOrCode){
				case this._openSubMenuKey:
					this._moveToPopup(evt);
					event.stop(evt);
					break;
				case this._closeSubMenuKey:
					if(this.parentMenu){
						if(this.parentMenu._isMenuBar){
							this.parentMenu.focusPrev();
						}else{
							this.onCancel(false);
						}
					}else{
						event.stop(evt);
					}
					break;
			}
		}
	});
});

},
'curam/util/portlet/PortletAdaptor':function(){
/*
 * Copyright 2012 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

  /*
   * Modification History
   * --------------------
   * 15-Feb-2012 BOS   [TEC-9544] Including a initPortlet() function to
   *                     set timeout for portlets with a BIRT chart.
   * 02-Dec-2011  BOS  [TEC-8631] Initial version.
   */

/*
 * Modification History
 * --------------------
 * 14-Aug-2012 MV [CR00338135] Migrate to AMD module format.
 */

define("curam/util/portlet/PortletAdaptor", ["curam/define",
        "curam/util"], function() {

  /**
   * @name      curam.util.portlet.PortletAdaptor
   * @namespace Functions operating within the context of a portlet on a portal 
   *            page (hosted on a portal server).
   *
   */
   curam.define.singleton("curam.util.portlet.PortletAdaptor",
   /**
    * @lends curam.util.portlet.PortletAdaptor.prototype
    */
   {
      /**
       * Initializes a portlet.
       */
      initPortlet: function(timeout) {
        curam.util.portlet.PortletAdaptor.modifyPortletLinks();
        curam.util.portlet.PortletAdaptor.setTimeoutForBIRTChartPortlets(timeout);
        return "initialized";
      },
           
      /**
       * Modifies links within a Curam portlet. Modal links will be modified so 
       * that they will either be hidden or become plain text. Non Modal links 
       * will be modified so that they open in a new browser instance.
       */
      modifyPortletLinks: function() {
      var testNode;
      /* two conditions to satisfy query here are:
      (1) div node with the id of 'podContainer' must be present within HTML of 
          portlet iframe.
      (2) this div node must have child anchor elements (at least one).*/
      var links = dojo.query("div#podContainer a");
      links.forEach(function(link) {
      // create new target link (in a new browser window ) for 
      // each link.
      dojo.attr(link, "target", "_newWindow");
      // Converting links (anchor elements) that open in a modal to a div 
      // element with text. The text is extracted from the text of the link 
      // (the text node on the anchor element). The caveat here is that the link 
      // cannot have an ellipses appended to it as that is indicative of a 
      // 'quick links' link - this is a very presumptions though and not very 
      // robust!!.
      
      // TODO: The whole logic within this function is temporary and needs to be
      // reviewed very soon. When ever links are allowed to open a modal page 
      // from a portlet this function will no longer be required so hopefully 
      // that will be soon. -- BOS
      if (link.onclick !=null && link.onclick.toString()
        .indexOf("curam.util.UimDialog") != -1) {
        
        // 'link.innerText' for IE, and 'link.textContent' for non IE 
        // browsers.
        var nodeText = link.innerText || link.textContent;
        // TODO: presumption here that only quick link has ellipses appended
        // i.e. "...". If links don't have ellipses then transform links to div
        // node with text -- BOS
        if (nodeText != undefined &&  nodeText.length > 0 
              && nodeText.lastIndexOf("...") == -1) {
          var divNodeWithLinkText = document.createElement("div");
          divNodeWithLinkText.appendChild(document.createTextNode(nodeText));
          link.parentNode.appendChild(divNodeWithLinkText);
        }
        
        testNode = link.parentNode;
        dojo.destroy(link);      
      }
      if (typeof(testNode) == "undefined") {
        testNode = link.parentNode;
      }
    });
    return testNode;
   },
   
   /**
    * Sets the timeout to that specified before loading the "pods.fullyloaded" event in 
    * order to ensure that the loading listeners can be properly set up first of all.
    */
    setTimeoutForBIRTChartPortlets: function(timeout) {
          // sets a timeout for event needed before we can display portlets with BIRT charts      
          setTimeout(function(){
                  curam.util.getTopmostWindow().dojo.publish("pods.fullyloaded");      
      }, timeout);// end timeout
    }
  });
   
  return curam.util.portlet.PortletAdaptor;
});

},
'cm/_base/_dom':function(){
define("cm/_base/_dom", [], function() {
  
/*
  This file includes generic functions for use with the DOM.
*/

/*
 * Modification History
 * --------------------
 * 24-Mar-2010 BD  [CR00191575] Added exit function to getParentByType() when 
 *                              the document root is reached. Handles the 
 *                              iframe scenario.
 */

  var cm = dojo.global.cm || {};
  dojo.global.cm = cm;

  dojo.mixin(cm, {
    nextSibling: function(node, tagName) {
      //  summary:
            //            Returns the next sibling element matching tagName
      return cm._findSibling(node, tagName, true);
    },
    
    prevSibling: function(node, tagName) {
      //  summary:
            //            Returns the previous sibling element matching tagName
      return cm._findSibling(node, tagName, false);
    },
    
    getInput: function(name, multiple) {
      if(!dojo.isString(name)){
        return name;
      }
      var inputs = dojo.query("input[name='" + name + "'],select[name='" + name + "']");
      return multiple ? (inputs.length > 0 ? inputs : null) 
                                                                                  : (inputs.length > 0 ? inputs[0]:null);
    },
    
    getParentByClass: function(node, classStr) {
      // summary:
      //   Returns the first parent of the node that has the require class
      node = node.parentNode;
      while (node) {
        if(dojo.hasClass(node, classStr)){
          return node;
        }
        node = node.parentNode;
      }
      return null;
    },
    
    getParentByType: function(node, type) {
      // summary:
      //   Returns the first parent of the node that has the require class
      node = node.parentNode;
      type = type.toLowerCase();
      var docRoot = "html";
      while (node) {
        // Give up when you reach the root of the doc,
        // applies to iframes
        if(node.tagName.toLowerCase() == docRoot){
          break;
        }
        if(node.tagName.toLowerCase() == type){
          return node;
        }
        node = node.parentNode;
      }
      return null;
    },
  
    replaceClass: function(node, newCls, oldCls) {
      // summary:
      //   Replaces a single css class with another.
      //   node:   The node to operate on.
      //   newCls: The class to be added
      //   oldCls: The class to be removed
      dojo.removeClass(node, oldCls);
      dojo.addClass(node, newCls);
    },
    
    setClass: function(/* HTMLElement */node, /* string */classStr){
                  //      summary
                  //      Clobbers the existing list of classes for the node, replacing it with
                  //      the list given in the 2nd argument. Returns true or false
                  //      indicating success or failure.
                  node = dojo.byId(node);
                  var cs = new String(classStr);
                  try{
                          if(typeof node.className == "string"){
                                  node.className = cs;
                          }else if(node.setAttribute){
                                  node.setAttribute("class", classStr);
                                  node.className = cs;
                          }else{
                                  return false;
                          }
                  }catch(e){
                          dojo.debug("dojo.html.setClass() failed", e);
                  }
                  return true;
          },
  
    _findSibling: function(node, tagName, forward) {
      
      if(!node) { return null; }
      if(tagName) { tagName = tagName.toLowerCase(); }
      var param = forward ? "nextSibling":"previousSibling";
            do {
                    node = node[param];
            } while(node && node.nodeType != 1);
  
            if(node && tagName && tagName != node.tagName.toLowerCase()) {
                    return cm[forward ? "nextSibling":"prevSibling"](node, tagName);
            }
            return node;  //      Element
    },
    
    getViewport: function(){
                  // summary: returns a viewport size (visible part of the window)
          
                  // FIXME: need more docs!!
                  var d = dojo.doc, dd = d.documentElement, w = window, b = dojo.body();
                  if(dojo.isMozilla){
                          return {w: dd.clientWidth, h: w.innerHeight};   // Object
                  }else if(!dojo.isOpera && w.innerWidth){
                          return {w: w.innerWidth, h: w.innerHeight};             // Object
                  }else if (!dojo.isOpera && dd && dd.clientWidth){
                          return {w: dd.clientWidth, h: dd.clientHeight}; // Object
                  }else if (b.clientWidth){
                          return {w: b.clientWidth, h: b.clientHeight};   // Object
                  }
                  return null;    // Object
          },
          
          toggleDisplay: function(node) {
            dojo.style(node, "display", dojo.style(node, "display") == "none" ? "": "none");
          },
          
          
          
          endsWith: function(/*string*/str, /*string*/end, /*boolean*/ignoreCase){
                  // summary:
                  //      Returns true if 'str' ends with 'end'
          
                  if(ignoreCase){
                          str = str.toLowerCase();
                          end = end.toLowerCase();
                  }
                  if((str.length - end.length) < 0){
                          return false; // boolean
                  }
                  return str.lastIndexOf(end) == str.length - end.length; // boolean
          },
          
          hide: function(n){
                  dojo.style(n, "display", "none");
          },
          
          show: function(n){
                  dojo.style(n, "display", "");
          }
  });
  
  return cm;
});

},
'dojo/store/Memory':function(){
define("dojo/store/Memory", ["../_base/declare", "./util/QueryResults", "./util/SimpleQueryEngine"], function(declare, QueryResults, SimpleQueryEngine) {
  //  module:
  //    dojo/store/Memory
  //  summary:
  //    The module defines an in-memory object store.


return declare("dojo.store.Memory", null, {
	// summary:
	//		This is a basic in-memory object store. It implements dojo.store.api.Store.
	constructor: function(/*dojo.store.Memory*/ options){
		// summary:
		//		Creates a memory object store.
		// options:
		//		This provides any configuration information that will be mixed into the store.
		// 		This should generally include the data property to provide the starting set of data.
		for(var i in options){
			this[i] = options[i];
		}
		this.setData(this.data || []);
	},
	// data: Array
	//		The array of all the objects in the memory store
	data:null,

	// idProperty: String
	//		Indicates the property to use as the identity property. The values of this
	//		property should be unique.
	idProperty: "id",

	// index: Object
	//		An index of data indices into the data array by id
	index:null,

	// queryEngine: Function
	//		Defines the query engine to use for querying the data store
	queryEngine: SimpleQueryEngine,
	get: function(id){
		//	summary:
		//		Retrieves an object by its identity
		//	id: Number
		//		The identity to use to lookup the object
		//	returns: Object
		//		The object in the store that matches the given id.
		return this.data[this.index[id]];
	},
	getIdentity: function(object){
		// 	summary:
		//		Returns an object's identity
		// 	object: Object
		//		The object to get the identity from
		//	returns: Number
		return object[this.idProperty];
	},
	put: function(object, options){
		// 	summary:
		//		Stores an object
		// 	object: Object
		//		The object to store.
		// 	options: dojo.store.api.Store.PutDirectives??
		//		Additional metadata for storing the data.  Includes an "id"
		//		property if a specific id is to be used.
		//	returns: Number
		var data = this.data,
			index = this.index,
			idProperty = this.idProperty;
		var id = (options && "id" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();
		if(id in index){
			// object exists
			if(options && options.overwrite === false){
				throw new Error("Object already exists");
			}
			// replace the entry in data
			data[index[id]] = object;
		}else{
			// add the new object
			index[id] = data.push(object) - 1;
		}
		return id;
	},
	add: function(object, options){
		// 	summary:
		//		Creates an object, throws an error if the object already exists
		// 	object: Object
		//		The object to store.
		// 	options: dojo.store.api.Store.PutDirectives??
		//		Additional metadata for storing the data.  Includes an "id"
		//		property if a specific id is to be used.
		//	returns: Number
		(options = options || {}).overwrite = false;
		// call put with overwrite being false
		return this.put(object, options);
	},
	remove: function(id){
		// 	summary:
		//		Deletes an object by its identity
		// 	id: Number
		//		The identity to use to delete the object
		// returns: Boolean
		// 		Returns true if an object was removed, falsy (undefined) if no object matched the id
		var index = this.index;
		var data = this.data;
		if(id in index){
			data.splice(index[id], 1);
			// now we have to reindex
			this.setData(data);
			return true;
		}
	},
	query: function(query, options){
		// 	summary:
		//		Queries the store for objects.
		// 	query: Object
		//		The query to use for retrieving objects from the store.
		//	options: dojo.store.api.Store.QueryOptions?
		//		The optional arguments to apply to the resultset.
		//	returns: dojo.store.api.Store.QueryResults
		//		The results of the query, extended with iterative methods.
		//
		// 	example:
		// 		Given the following store:
		//
		// 	|	var store = new dojo.store.Memory({
		// 	|		data: [
		// 	|			{id: 1, name: "one", prime: false },
		//	|			{id: 2, name: "two", even: true, prime: true},
		//	|			{id: 3, name: "three", prime: true},
		//	|			{id: 4, name: "four", even: true, prime: false},
		//	|			{id: 5, name: "five", prime: true}
		//	|		]
		//	|	});
		//
		//	...find all items where "prime" is true:
		//
		//	|	var results = store.query({ prime: true });
		//
		//	...or find all items where "even" is true:
		//
		//	|	var results = store.query({ even: true });
		return QueryResults(this.queryEngine(query, options)(this.data));
	},
	setData: function(data){
		// 	summary:
		//		Sets the given data as the source for this store, and indexes it
		//	data: Object[]
		//		An array of objects to use as the source of data.
		if(data.items){
			// just for convenience with the data format IFRS expects
			this.idProperty = data.identifier;
			data = this.data = data.items;
		}else{
			this.data = data;
		}
		this.index = {};
		for(var i = 0, l = data.length; i < l; i++){
			this.index[data[i][this.idProperty]] = i;
		}
	}
});

});

},
'dijit/form/_ListBase':function(){
define("dijit/form/_ListBase", [
	"dojo/_base/declare",	// declare
	"dojo/window" // winUtils.scrollIntoView
], function(declare, winUtils){

// module:
//		dijit/form/_ListBase
// summary:
//		Focus-less menu to handle UI events consistently

return declare( "dijit.form._ListBase", null, {
	// summary:
	//		Focus-less menu to handle UI events consistently
	//		Abstract methods that must be defined externally:
	//			onSelect: item is active (mousedown but not yet mouseup, or keyboard arrow selected but no Enter)
	//			onDeselect:  cancels onSelect
	// tags:
	//		private

	// selected: DOMnode
	//		currently selected node
	selected: null,

	_getTarget: function(/*Event*/ evt){
		var tgt = evt.target;
		var container = this.containerNode;
		if(tgt == container || tgt == this.domNode){ return null; }
		while(tgt && tgt.parentNode != container){
			// recurse to the top
			tgt = tgt.parentNode;
		}
		return tgt;
	},

	selectFirstNode: function(){
		// summary:
		// 		Select the first displayed item in the list.
		var first = this.containerNode.firstChild;
		while(first && first.style.display == "none"){
			first = first.nextSibling;
		}
		this._setSelectedAttr(first);
	},

	selectLastNode: function(){
		// summary:
		// 		Select the last displayed item in the list
		var last = this.containerNode.lastChild;
		while(last && last.style.display == "none"){
			last = last.previousSibling;
		}
		this._setSelectedAttr(last);
	},

	selectNextNode: function(){
		// summary:
		// 		Select the item just below the current selection.
		// 		If nothing selected, select first node.
		var selectedNode = this._getSelectedAttr();
		if(!selectedNode){
			this.selectFirstNode();
		}else{
			var next = selectedNode.nextSibling;
			while(next && next.style.display == "none"){
				next = next.nextSibling;
			}
			if(!next){
				this.selectFirstNode();
			}else{
				this._setSelectedAttr(next);
			}
		}
	},

	selectPreviousNode: function(){
		// summary:
		// 		Select the item just above the current selection.
		// 		If nothing selected, select last node (if
		// 		you select Previous and try to keep scrolling up the list).
		var selectedNode = this._getSelectedAttr();
		if(!selectedNode){
			this.selectLastNode();
		}else{
			var prev = selectedNode.previousSibling;
			while(prev && prev.style.display == "none"){
				prev = prev.previousSibling;
			}
			if(!prev){
				this.selectLastNode();
			}else{
				this._setSelectedAttr(prev);
			}
		}
	},

	_setSelectedAttr: function(/*DomNode*/ node){
		// summary:
		//		Does the actual select.
		if(this.selected != node){
			var selectedNode = this._getSelectedAttr();
			if(selectedNode){
				this.onDeselect(selectedNode);
				this.selected = null;
			}
			if(node && node.parentNode == this.containerNode){
				this.selected = node;
				winUtils.scrollIntoView(node);
				this.onSelect(node);
			}
		}else if(node){
			this.onSelect(node);
		}
	},

	_getSelectedAttr: function(){
		// summary:
		//		Returns the selected node.
		var v = this.selected;
		return (v && v.parentNode == this.containerNode) ? v : (this.selected = null);
	}
});

});

},
'curam/util/DialogObject':function(){
/*
 * Copyright 2010 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.util.DialogObject
 * @namespace Provides access to a dialog instance.
 * 
 */
define("curam/util/DialogObject", ["curam/dialog",
        "curam/util"
        ], function() { 
/*
 * Modification History
 * --------------------
 * 05-Feb-2013  MV  [CR00366128] Fix documentation comment.
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 13-Jan-2011  MV  [CR00241667] Added close() function. Updated documentation.
 * 19-Nov-2010  MV  [CR00231655] Added the registerOnDisplayHandler() function.
 * 04-Nov-2010  MV  [CR00229849] Unsubscribe handlers in the right context.
 * 01-Nov-2010  SD  [CR00225331] Initial version.
 */


var DialogObject = dojo.declare("curam.util.DialogObject", null, 
/** @lends curam.util.DialogObject.prototype */{  

    /**
     * Holds ID of the dialog in the current context.
     * @private
     */
    _id: null,
    
    /**
     * Constructor takes the input token and uses it to listen for a 
     * specific publish event which will return the dialogId for the
     * opened dialog.
     *
     * @constructor
     * @private
     */
    constructor: function(tokenValue, id) {
      if (!id) {
        var unSubConstructor = 
          window.top.dojo.subscribe(
            "/curam/dialog/uim/opened/" + tokenValue, this, function(dialogID) {
          this._id = dialogID;
          window.top.dojo.unsubscribe(unSubConstructor);
        });
      
      } else {
        this._id = id;
      }
    },
    
    /**
     * Registers a custom function that will be called before the dialog
     * is closed.
     * 
     * @param {Function} handler The handler function for the BeforeClose event.
     */
    registerBeforeCloseHandler: function(handler) {
      var unSubClose = 
        window.top.dojo.subscribe(
          "/curam/dialog/BeforeClose", this, function(dialogID) {
            if (dialogID == this._id) {
              handler();
            }
            window.top.dojo.unsubscribe(unSubClose);
      });
    },
    
    /**
     * Registers a custom handler for the onDispaly event of the dialog. 
     * If the handler is registered after the dialog has been displayed, then
     * it is executed immediately.
     * 
     * @param handler
     *    The handler function for the dialog OnDisplay event. The handler
     *    will be passed the size object in the following form:
     *    {width: 125, height: 236}
     */
    registerOnDisplayHandler: function(handler) {
      if (curam.dialog._displayed == true) {
        handler(curam.dialog._size);
        
      } else {
        var ut = window.top.dojo.subscribe(
            "/curam/dialog/displayed", this, function(dialogID, size) {
              if (dialogID == this._id) {
                handler(size);
              }
              window.top.dojo.unsubscribe(ut);
            });
      }
    },
    
    /**
     * Closes the dialog, optionally refreshing or redirecting the parent window.
     * 
     * @param {Boolean} [refreshParent=false] Should the parent be refreshed
     *              when this dialog closes?
     * @param {String} [newPageIdOrFullUrl] ID of the page the parent window
     *      should be redirected to when this dialog closes. Alternatively
     *      a full URL including the page parameters can be passed.
     * @param {Object} [pageParameters] Page parameters to be used when
     *        redirecting the parent to the new page. The following format
     *        is expected: <code>{ param1Name:"value", param2Name:248 }</code>
     *        The infrastructure handles URL-encoding the values so do NOT encode
     *        them yourself.
     *        If full URL is specified then the pageParameters are ignored.
     */
    close: function(/*optional*/ refreshParent, /*optional*/ newPageIdOrFullUrl,
        /*optional*/ pageParameters) {
      
      var win = curam.util.UimDialog._getDialogFrameWindow(this._id);
      var parentWindow = win.curam.dialog.getParentWindow(win);
      if (refreshParent && !newPageIdOrFullUrl) {
        win.curam.dialog.forceParentRefresh();
        curam.dialog.doRedirect(parentWindow, null);
        
      } else if (newPageIdOrFullUrl) {
        var newParentUrl = newPageIdOrFullUrl;
        // distinguish between pageId and full URL
        if (newPageIdOrFullUrl.indexOf("Page.do") == -1) {
          newParentUrl = newPageIdOrFullUrl + "Page.do"
              + curam.util.makeQueryString(pageParameters);
        }
  
        curam.dialog.doRedirect(parentWindow, newParentUrl);
      }
  
      curam.dialog.closeModalDialog();
    }
  });
  
  return DialogObject;  
});

},
'curam/define':function(){
/*
 * Copyright 2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/define", [], function() {
  
  /*
   * Modification History
   * --------------------
   * 29-Jul-2011  MV [CR00269970] Initial version.
   */

  /**
   * This package contains function for working with classes in our code.
   */

  if(typeof(dojo.global.curam) == "undefined") {
    dojo.global.curam = {};
  }

  if (typeof(dojo.global.curam.define) == "undefined") {
    dojo.mixin(dojo.global.curam, {define: {}});
  }

  dojo.mixin(dojo.global.curam.define, {
    /**
     * Defines a singleton class ensuring any packages are created and no
     * existing packages are overwritten in the process.
     * 
     * @param {String} singletonName Name of the singleton class to be defined.cdej
     * @param {Object} [content] Optional content of the singleton class.
     */
    singleton: function(singletonName, content) {
      var parts = singletonName.split(".");
      
      // we assume we are runnning within a browser environment so the window
      // object is available.
      var currentContext = window;
      
      // now check for existence and create any missing packages
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (typeof currentContext[part] == "undefined") {
          currentContext[part] = {};
        }
        currentContext = currentContext[part];
      }
      
      // now set the content
      if (content) {
        dojo.mixin(currentContext, content);
      }
    }
  });
  
  return dojo.global.curam.define;
});

},
'curam/util/ui/ApplicationTabbedUiController':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

define("curam/util/ui/ApplicationTabbedUiController", ["curam/debug",
        "dojox/layout/ContentPane",
        "curam/tab",
        "curam/util/ResourceBundle"
        ], function() {
  
  /*
   * Modification History
   * --------------------
   * 28-Sep-2013  BOS [CR00396277] Modified findOpenTab() function to ensure an
   *                    undefined tab container handled correctly.
   * 22-Feb-2013  MV  [CR00368145] Remove standard Dojo tab load mask.
   * 23-Oct-2012  MV  [CR00347543] Refer to top level UIController.
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 11-Sep-2012  MV  [CR00339639] Performance related updates: Handle tab load
   *    mask differently.
   * 05-Sep-2012  MK  [CR00339638] Fix issue responding to title of content
   *   pane being set.
   * 31-Jul-2012  MV  [CR00336202] Migrate to take on Dojo 1.7.3
   * 21-Sep-2011  MV  [CR00288065] Initial version.
   * 23-May-2012  SB  [CR00321886] Added tab focus code.
   */

  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  /**
   * Defines an interface into the application tabbed UI elements.
   *
   */
  var ApplicationTabbedUiController = dojo.declare(
      "curam.util.ui.ApplicationTabbedUiController", null, {
    _tabContainer: null,
    
    /**
     * Performs initial setup.
     * 
     * @param tabContainer The application tab container to manage.
     */
    constructor: function(tabContainer) {
      this._tabContainer = tabContainer;
    },
    
    /**
     * Finds an open tab that can be used to display the page identified in the
     * open tab event. If no suitable tab is found, a new one will need to be
     * created. If a matching tab is found, it need only be selected, as it
     * already contains the requested page.
     *
     * @param {curam.ui.OpenTabEvent} openTabEvent The event describing the tab
     *   to be opened.
     * @return An existing tab panel to select to show the page, or null if a new
     *   tab must be opened.
     */
    findOpenTab: function(openTabEvent) {
      var eventTD = openTabEvent.tabDescriptor;
      var tabContainer = curam.tab.getTabContainer(eventTD.sectionID);
      var foundTab = null;
      var tabs = undefined;
      var selectedTab = undefined;
      
      if (tabContainer != undefined) {
        tabs = tabContainer.getChildren();
        selectedTab = tabContainer.selectedChildWidget;
      }     
      

      // If there is a selected tab, then use it to open the page if the request
      // explicitly request opening the page in the current tab. Otherwise, we
      // will search for a matching tab and return it and it will then be
      // selected. If the selected tab matches, it will be used in preference to
      // any other.
      if (selectedTab) {
        var selTD = selectedTab.tabDescriptor;
        this._log(bundle
          .getProperty("curam.util.ui.ApplicationTabbedUiController.testing"));
        // TODO: As well as locating the tab, we also open the page within it
        // here. However, below we just locate the tab and do not load anything
        // in it. That is left to the calling method. We need to resolve this so
        // it is consistent. So this method takes care of finding the tab AND
        // loading the page, or, it just takes care of finding the tab. There
        // should not be a mix.
        if (openTabEvent.uimPageRequest.openInCurrentTab
            || (selTD.tabID == eventTD.tabID
                && selTD.matchesPageRequest(openTabEvent.uimPageRequest))) {
          this._openInCurrentTab(openTabEvent.uimPageRequest);
          foundTab = selectedTab;
        }
      }

      // If the page was not opened in the selected tab, then find one of the
      // other tabs that matches.
      if (!foundTab && tabs) {
        var firstTabWithNoParams = true;
        this._log(bundle
          .getProperty("curam.util.ui.ApplicationTabbedUiController.searching") 
          + " " + tabs.length + " " + bundle
          .getProperty("curam.util.ui.ApplicationTabbedUiController.tabs"));
        for (var i = 0; i < tabs.length; i++) {
          var currentTab = tabs[i];
          var curTD = currentTab.tabDescriptor;
          if (curTD && curTD.tabID == eventTD.tabID) {
            if ((firstTabWithNoParams && curTD.tabSignature == curTD.tabID)
                || curTD.matchesPageRequest(openTabEvent.uimPageRequest)) {
              // The signature of a tab combines the tab ID with its parameters.
              // If the signature is set to just the tab ID, then the tab has no
              // parameters and is treated as a "singleton" tab. If the first
              // matching tab is a "singleton" tab, use it, otherwise use the
              // first tab that matches fully.
              foundTab = currentTab;
              break;
            }
            firstTabWithNoParams = false;
          }
        }
      }
      this._log(bundle
        .getProperty("curam.util.ui.ApplicationTabbedUiController.searched") 
          + " '" + eventTD.tabID + "'. " + bundle
           .getProperty("curam.util.ui.ApplicationTabbedUiController.found")
           + " " + (foundTab ? 
           bundle.getProperty("curam.util.ui.ApplicationTabbedUiController.a") : 
           bundle.getProperty("curam.util.ui.ApplicationTabbedUiController.no")) 
           + " " 
           + bundle
             .getProperty("curam.util.ui.ApplicationTabbedUiController.match"));

      return foundTab;
    },
    
    /**
     * Opens the specified page in the current tab.
     *
     * TODO: Consolidate with openInCurrentTab below.
     *
     * @param {curam.ui.PageRequest} pageRequest
     *    Page request for the page to be loaded.
     */
    openPageInCurrentTab: function(pageRequest) {
      // Get the currently selected Tab
      var selectedTab = curam.tab.getSelectedTab();
      var mainContentPane = undefined;
      if (selectedTab) {
         mainContentPane = dojo.query(".nav-panel", selectedTab.domNode)[0];
      }
     
      if (mainContentPane) {
        var urlAppend;
        if (pageRequest.getURL().indexOf("?") == -1) {
          urlAppend = "?";
        } else {
          urlAppend = "&";
        }
        var loc = curam.config ? curam.config.locale : jsL;
        var fullURL = jsBaseURL + "/" + loc + "/"
                      + pageRequest.getURL()
                      + urlAppend
                      + curam.tab.getTabController().getCacheBusterParameter();

        if (pageRequest.pageHolder) {
          // pageHolder will be set by the expanding list feature in
          // tab-app-adaptor.js. This means we should not open up in the
          // main content panel, instead in the window object referenced by
          // pageHolder.
          pageRequest.pageHolder.location.href = fullURL;

        } else {
          // Otherwise we just open up in the main content panel
          // TODO: check ContentPane API, must be a way to get the content
          // directly instead of getting the domNode (which contains a generated
          // DOJO div) and it's first child.
          var iframe = dojo.query(".contentPanelFrame", mainContentPane)[0];
          iframe.src = fullURL;
        }
      }
    },
    
    
    /**
     * This is called when opening links (for current tab) when link in navigation
     * and for cancel links. But not for submit links or from menu bar.
     * TODO: explain why it's used in one place or the other.
     * TODO: Consolidate with openPageInCurrentTab above.
     * @private
     * 
     * @param {curam.ui.PageRequest} uimPageRequest
     *    Page request for the page to be loaded.
     */
    _openInCurrentTab: function(uimPageRequest) {
      var selectedTab = curam.tab.getSelectedTab();
      var mainContentPane = undefined;
      if (selectedTab) {
        mainContentPane = dojo.query(".nav-panel", selectedTab.domNode)[0];  
      }

      if (mainContentPane) {
        // TODO: check ContentPane API, must be a way to get the content
        // directly instead of getting the domNode (which contains a generated
        // DOJO div) and it's first child.
        var iframe = dojo.query(".contentPanelFrame", mainContentPane)[0];
        // reset context parameter to TAB.
        uimPageRequest.cdejParameters["o3ctx"]="4096";
        var loc = curam.config ? curam.config.locale : jsL;
        var url = loc + "/" + uimPageRequest.getURL();
        if (url.indexOf('?') == -1) {
          url += "?";
        } else {
          url += "&";
        }
        iframe.src = url + curam.tab.getTabController().getCacheBusterParameter();
      }
    },

    /**
     * Forces reload of the content panel in the specified tab.
     * 
     * @param tab The tab to reload.
     */
    refreshExistingPageInTab: function(tab) {
      var iframe = curam.tab.getContentPanelIframe(tab);
      iframe.contentWindow.location.reload(true);
    },
    
    /**
     * Makes the specified tab active.
     * 
     * @param tab The tab to select.
     */
    selectTab: function(tab) {
      this._tabContainer.selectChild(tab);
    },
    
    /**
     * Create a new Dojo content panel for a tab and set its content "href". The
     * content will only be loaded if the content panel is added to a tab
     * container and brought to the foreground. This method does not add or select
     * the tab.
     *
     * @param {curam.ui.OpenTabEvent} The event detailing the tab to be opened.
     * @return {dojox.layout.ContentPane} The content pane representing the tab.
     */
    createTab: function(openTabEvent) {
      this._log("createTab(): " + bundle
        .getProperty("curam.util.ui.ApplicationTabbedUiController.start"));

      // Get the "TabDescriptor" that contains all of the information needed
      // to track the tab session. This is incomplete until the TabRenderer
      // calls the "instantiateTab" function to set the tab signature in the
      // tab descriptor.
      var eventTD = openTabEvent.tabDescriptor;

      // If we are restoring a tab from the tab session, then the title may be
      // available already. Otherwise it is set after loading.
      // TODO: Figure out under what conditions the tabID should be used as the
      // title. -- DG
      var restoredTitle = "";
      if (eventTD.tabContent && eventTD.tabContent.tabName) {
        restoredTitle = eventTD.tabContent.tabName;
      }

      var cp = new dojox.layout.ContentPane({
        // THESE PROPERTIES ARE CURAM-SPECIFIC:
        // Most of the magic is in the TabDescriptor. See that class for details.
        tabDescriptor: eventTD,
        uimPageRequest: openTabEvent.uimPageRequest,

        // THESE PROPERTIES ARE SUPPORTED BY THE DOJO ContentPane CLASS:

        // The title will be set after the page has loaded if it is not restored
        // from the tab session. See the "attr" event hook below.
        title: restoredTitle,
        // Home page tabs cannot be closed.
        closable: !eventTD.isHomePage,
        // Automatically append a time stamp to the "href" to prevent caching.
        // Not sure why this is used. TODO: Confirm if this is OK. -- DG
        preventCache: true,
        "class": "tab-content-holder dijitContentPane dijitHidden "
               + "dijitTabContainerTop-child "
               + "dijitTabContainerTop-dijitContentPane dijitTabPane",
         
         /* Override this function to remove standard Dojo load mask. */
         onDownloadStart: function(){
           // just return empty space - we don't want any load mask text
           return "&nbsp;";
         }
      });

      // Array of event listeners that should be removed when the content pane is
      // destroyed. Every dojo.connect call in this function for the cp object
      // should add the result to the eventListeners array.
      var eventListeners = [];
      // We know that we are opening a new tab. The context must always be just
      // the "TAB" context (see ScreenContext.js).
      // TODO: Change ScreenContext.js so the "constants" can be accessed rather
      // than having to repeat the number here.
      // TODO: Change PageRequest.js to have a "setScreenContext" method instead
      // of accessing the cdejParameters array directly.
      openTabEvent.uimPageRequest.cdejParameters["o3ctx"] = "4096";
      var listener = dojo.connect(cp, "onDownloadEnd", null, 
        function() {curam.util.fireTabOpenedEvent(cp.id);});
      eventListeners.push(listener);

      // Unsubscribe the registered listeners in curam.tab.
      listener = dojo.connect(cp, "destroy", null, function() {
        curam.tab.doExecuteOnTabClose(cp.id);
      });
      eventListeners.push(listener);
      
      /* Disconnect all listeners added to eventListeners array when the tab
       * is closed.
       * NOTE: this must be connected after the other "destroy" handler above
       * as the above one must be executed before being disconnected.
       */
      eventListeners.push(dojo.connect(cp, "destroy", function() {
        dojo.forEach(eventListeners, dojo.disconnect);
      }));

      listener = dojo.connect(cp, "set", function(name, value) {
        if (name == "title" && arguments.length == 2) {
          // Something has just changed the title.
          curam.debug.log(bundle
            .getProperty("curam.util.ui.ApplicationTabbedUiController.title"));
          // Complete the information in the tab descriptor now that the title
          // has been set. This will be saved automatically if needed.
          cp.tabDescriptor.setTabContent(openTabEvent.uimPageRequest, value);
          var selectedTab = curam.tab.getSelectedTab();
          if (selectedTab) { 
            var tabToFocus = selectedTab.domNode.parentNode;
            if(tabToFocus){
              tabToFocus.focus();
            }
          }
        }
      });
      eventListeners.push(listener);

      // Handler for when the tab closes
      listener = dojo.connect(cp, "onClose", function() {
        new curam.tab.TabSessionManager().tabClosed(cp.tabDescriptor);
      });
      eventListeners.push(listener);

      // Set the "href" on the content pane. The content pane will only load this
      // if the content pane is shown (i.e., selected). However, if it is the
      // only visible tab, it will load immediately. Therefore, we only set the
      // "href" after registering all of the event listeners above first.
      var qs = openTabEvent.uimPageRequest.getQueryString();
      var href = "TabContent.do" + "?"
              + curam.tab.getTabController().COMMAND_PARAM_NAME + "=PAGE&"
              + curam.tab.getTabController().PAGE_ID_PARAM_NAME + "="
              + openTabEvent.uimPageRequest.pageID
              + (qs.length > 0 ? "&" + qs : "")
              + "&o3tabid=" + eventTD.tabID
              + "&o3tabWidgetId=" + cp.id;
      this._log(bundle
        .getProperty("curam.util.ui.ApplicationTabbedUiController.href") 
          + " " + href);
      cp.set("href", href);

      this._log(bundle
        .getProperty("curam.util.ui.ApplicationTabbedUiController.finished") 
          + " ", cp.tabDescriptor);
      return cp;
    },
    
    /**
     * Inserts the tab into the UI.
     * 
     * @param newTab The tab to be added.
     * @param isHomeTab Indicates if the tab should be the home tab.
     * 
     * @return The previously selected tab or null if no tab was selected.
     */
    insertTabIntoApp: function(newTab, isHomeTab) {
      var previouslySelectedTab = null;
      if (isHomeTab) {
        if (this._tabContainer.hasChildren()) {
          // Note the currently selected tab. This will be reverted to
          // after adding the default home tab
          previouslySelectedTab = this._tabContainer.selectedChildWidget;
        }
        // Make sure the home page is always inserted at tab 0
        // This is to fix a timing issue with the default page in a section
        this._tabContainer.addChild(newTab, 0);        
      
      } else {
        this._tabContainer.addChild(newTab);        
      }
      
      return previouslySelectedTab;
    },
    
    /**
     * Simplifies production of consistent log messages from this class.
     *
     * @param {String} msg The message to be logged.
     * @param object An optional object that will be converted to JSON form and
     *   appended to the message string.
     */
    _log: function(msg, object) {
      // If debug logging is turned off, then we do not want to keep the overhead
      // of converting objects to JSON form to create the log message, so we
      // check the DEBUG switch even before calling "curam.debug.log".
      if (curam.debug.enabled()) {
        curam.debug.log(
            "curam.util.ui.ApplicationTabbedUiController: " + msg
                + (object ? " " + dojo.toJson(object) : ""));
      }
    }
  });
  
  return ApplicationTabbedUiController;
});

},
'dojox/storage':function(){
// wrapped by build app
define("dojox/storage", ["dijit","dojo","dojox","dojo/require!dojox/storage/_common"], function(dijit,dojo,dojox){
dojo.provide("dojox.storage");
dojo.require("dojox.storage._common");

});

},
'dojo/dnd/move':function(){
define("dojo/dnd/move", ["../main", "./Mover", "./Moveable"], function(dojo) {
	// module:
	//		dojo/dnd/move
	// summary:
	//		TODOC


/*=====
dojo.declare("dojo.dnd.move.__constrainedMoveableArgs", [dojo.dnd.__MoveableArgs], {
	// constraints: Function
	//		Calculates a constraint box.
	//		It is called in a context of the moveable object.
	constraints: function(){},

	// within: Boolean
	//		restrict move within boundaries.
	within: false
});
=====*/

dojo.declare("dojo.dnd.move.constrainedMoveable", dojo.dnd.Moveable, {
	// object attributes (for markup)
	constraints: function(){},
	within: false,

	constructor: function(node, params){
		// summary:
		//		an object that makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.move.__constrainedMoveableArgs?
		//		an optional object with additional parameters;
		//		the rest is passed to the base class
		if(!params){ params = {}; }
		this.constraints = params.constraints;
		this.within = params.within;
	},
	onFirstMove: function(/* dojo.dnd.Mover */ mover){
		// summary:
		//		called during the very first move notification;
		//		can be used to initialize coordinates, can be overwritten.
		var c = this.constraintBox = this.constraints.call(this, mover);
		c.r = c.l + c.w;
		c.b = c.t + c.h;
		if(this.within){
			var mb = dojo._getMarginSize(mover.node);
			c.r -= mb.w;
			c.b -= mb.h;
		}
	},
	onMove: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
		// summary:
		//		called during every move notification;
		//		should actually move the node; can be overwritten.
		var c = this.constraintBox, s = mover.node.style;
		this.onMoving(mover, leftTop);
		leftTop.l = leftTop.l < c.l ? c.l : c.r < leftTop.l ? c.r : leftTop.l;
		leftTop.t = leftTop.t < c.t ? c.t : c.b < leftTop.t ? c.b : leftTop.t;
		s.left = leftTop.l + "px";
		s.top  = leftTop.t + "px";
		this.onMoved(mover, leftTop);
	}
});

/*=====
dojo.declare("dojo.dnd.move.__boxConstrainedMoveableArgs", [dojo.dnd.move.__constrainedMoveableArgs], {
	// box: Object
	//		a constraint box
	box: {}
});
=====*/

dojo.declare("dojo.dnd.move.boxConstrainedMoveable", dojo.dnd.move.constrainedMoveable, {
	// box:
	//		object attributes (for markup)
	box: {},

	constructor: function(node, params){
		// summary:
		//		an object, which makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.move.__boxConstrainedMoveableArgs?
		//		an optional object with parameters
		var box = params && params.box;
		this.constraints = function(){ return box; };
	}
});

/*=====
dojo.declare("dojo.dnd.move.__parentConstrainedMoveableArgs", [dojo.dnd.move.__constrainedMoveableArgs], {
	// area: String
	//		A parent's area to restrict the move.
	//		Can be "margin", "border", "padding", or "content".
	area: ""
});
=====*/

dojo.declare("dojo.dnd.move.parentConstrainedMoveable", dojo.dnd.move.constrainedMoveable, {
	// area:
	//		object attributes (for markup)
	area: "content",

	constructor: function(node, params){
		// summary:
		//		an object, which makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.move.__parentConstrainedMoveableArgs?
		//		an optional object with parameters
		var area = params && params.area;
		this.constraints = function(){
			var n = this.node.parentNode,
				s = dojo.getComputedStyle(n),
				mb = dojo._getMarginBox(n, s);
			if(area == "margin"){
				return mb;	// Object
			}
			var t = dojo._getMarginExtents(n, s);
			mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
			if(area == "border"){
				return mb;	// Object
			}
			t = dojo._getBorderExtents(n, s);
			mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
			if(area == "padding"){
				return mb;	// Object
			}
			t = dojo._getPadExtents(n, s);
			mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
			return mb;	// Object
		};
	}
});

// patching functions one level up for compatibility

dojo.dnd.constrainedMover = dojo.dnd.move.constrainedMover;
dojo.dnd.boxConstrainedMover = dojo.dnd.move.boxConstrainedMover;
dojo.dnd.parentConstrainedMover = dojo.dnd.move.parentConstrainedMover;

return dojo.dnd.move;
});

},
'curam/ui/UIController':function(){
/*
 * Copyright 2009-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */
define("curam/ui/UIController", ["dojo/_base/lang",
        "dojo/json",
        "curam/util/Request",
        "curam/define",
        "curam/util/RuntimeContext",
        "curam/tab/TabDescriptor",
        "curam/util/ui/ApplicationTabbedUiController",
        "curam/util/ResourceBundle"
        ], function(lang, dojoJSON, curamRequest) {

/*
 * Modification History
 * --------------------
 * 10-Apr-2014  SK  [CR00424462] Added event to notify about the dynamic tab 
 *                    title being set. 
 * 11-Apr-2014  MV  [CR00424825] Move to common AJAX request API.
 * 10-Dec-2013  SK  [CR00410477] Added events for loading mask monitoring.
 * 28-Sep-2013  BOS [CR00396277] Modified _doHandleTabEvent function to
 *                    ensure an undefined tab container handled correctly.
 * 16-Aug-2013  MK  [CR00393829] Handle scenario where link opens home page
 *      in another section, and the section is being open for the first time.
 * 04-Aug-2013  NLH  [CR00388987] Toggle button on context panel disappears.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 13-Mar-2013  MV [CR00373990] Only set src attribute on content panel iframe
 *      after tab content is put in DOM.
 * 10-Jan-2013  SB [CR00357346]  Removed tab focusing code as it is handled
 * 							     in a different function.
 * 03-Oct-2012  SB  [CR00344085] Updated _checkMaxNumOpenTabsReached() and 
 *      _checkMaxNumOpenTabsExceeded() function to include true/false 
 *      value for error modals.
 * 11-Sep-2012  MV  [CR00339639] Performance related updates: Move a function
 *      to different module. Handle tab load mask differently.
 * 23-Aug-2012  BOS [CR00338361] Enabling support to set a maximum number of 
 *                    tabs that can be open in an application.
 * 31-Jul-2012  MV  [CR00336202] Migrate to take on Dojo 1.7.3
 * 17-Jul-2012  MV  [CR00329547] Send event on tab activation.
 * 22-Mar-2012  MV  [CR00311066] Fix infinite recursion when page associations
 *                      XHR fails.
 * 14-Dec-2011  KW  [TEC-8648]  Refactored the handling of 'o3gtu'. Now handled
 *                              in TabSessionManager.js
 * 18-Oct-2011  MV  [CR00295164] Avoid infinite loop when calling path resolver.
 * 28-Sep-2011  MV  [CR00288956] Finish refactoring of tabTopicHandler.
 * 23-Sep-2011  MV  [CR00288065] Switch to target tab before loading page.
 *    Refactor tabTopicHandler for testability.
 * 29-Aug-2011  MV  [CR00285689] Handle page loading when switching between
 *    tabs consistently.
 * 27-Jul-2011  MV  [CR00278546] Fixed handleLinkClick() broken by previous
 *      refactoring.
 * 05-Jul-2011  KW  [CR00275353] Refactored handleLinkClick().
 * 29-Apr-2011  SC  [CR00265494] Resolved timing issue opening default page.
 * 29-Apr-2011  SC  [CR00264826] Modified event fired when page loaded.
 * 27-Apr-2011  MV  [CR00265188] Refactored to support custom handler for
 *    unmapped pages.
 * 31-Mar-2011  MK  [CR00263400] Updated tabTopicHandler function to use the
 *                    jsBaseURL global variable when assigning URL.
 * 24-Jan-2011  MK  [CR00262346] Added retrieveBaseURL function. Updated 
 *                    the calculation of the fullURL in the 
 *                    openPageInCurrentTab function to get it working with 
 *                    the Chrome browser.
 * 26-Jan-2011  MV  [CR00244801] Added another type of refresh behaviour. Strip
 *    o3rpu from RPU value.
 * 21-Jan-2011  MV  [CR00243263] Implement "force refresh" behaviour.
 * 15-Jan-2011  PK  [CR00242698] Added error handling when a page is shared by
 *                    multiple tabs; when the AJAX query to check for a resolve
 *                    page fails.
 * 14-Jan-2011  DG  [CR00242400] Added support for restoring the content page
 *                    when the tab session is restored. Changed the way load
 *                    masking works to make it work with concurrent tab loading.
 *                    Removed "requires" made unnecessary by "cdej.js".
 * 12-Jan-2011  DG  [CR00238642] Fixed tab loading race condition by setting
 *                    "href" only after connecting listeners to content pane.
 * 01-Dec-2010  DG  [CR00217921] Major changes to support use of "TabDescriptor"
 *                    objects for easier tab session management.
 * 23-Nov-2010  MV  [CR00232063] Code cleanup.
 * 19-Nov-2010  MV  [CR00231655] Subscribe to topics with a function that will
 *    automatically unsubscribe on page unload.
 * 26-Oct-2010  SK  [CR00224193] change in link handling to allow for opening
                    modals from the shortcut/menu without the content panel.
 * 26-Oct-2010  SJ  [CR00226152] Added File down load support for menu bar.
 * 22-Sep-2010  PK  [CR00221139] Fix for parameter encoding in resolve pages.
 * 17-Sep-2010  MV  [CR00220607] Fix o3rpu value for dialogs opened from action
 *                    return page.
 * 14-Sep-2010 MV  [CR00220152] Fixed handling of menu item clicks when page
 *                    parameters with forward slashes are present.
 * 29-Jul-2010 PK  [CR00211736] Moved tab-app-controller.js to create this
 *                   "class", curam.ui.UIController.
 * 27-Jul-2010 MV  [CR00211474] Clear loading mask in error scenarios.
 * 21-Jul-2010 PK  [CR00211095] Support for default page in a section.
 * 20-Jul-2010 MV  [CR00211031] Fix naming of a link handling function.
 * 10-Jul-2010 OK  [CR00209714] Added default CSS classes to ContentPane.
 * 23-Jun-2010 PK  [CR00203531] Updated link processing triggered by
 *                   handlePageRequest method to handle sections. Removed some
 *                   unused code. Removed use of "currentUIMPageRequest" which
 *                   was stored "globally" on the TabController object. This is
 *                   now passed around as a parameter which is "safer".
 * 10-Jun-2010 OK  [CR00202886] Checking done to handle when  to remove
 *                              loading mask from tab
 * 04-Jun-2010 MV  [CR00202412] Refactored to reflect changes to code
 *                   that executes functions on tab close.
 * 23-Mar-2010 SD  [CR00190733] Updated query to populate title text from
 *                              tab name.
 * 22-Mar-2010 BD  [CR00191495] Code fix, update handle on mainContentPane for
 *                              iframe to match new layout.
 * 02-Feb-2010 BD  [CR00183006] Removed listener for onClick event. This is
 *                              now handled by the navigationTab.js file for
 *                              the content area.
 * 21-Jan-2010 MV  [CR00183104] Code cleanup in the handlePreferencesAction
 *                               function.
 * 17-Dec-2009 AF  [CR00167063] Added support for pages that do not pass back
 *                their page id in JSON data.
 * 08-Dec-2009 MV  [CR00181267] Take on dojo v 1.4 - fix issues
 * 24-Nov-2009 MV  [CR00175837] Provide a new tabOpened event.
 * 13-Oct-2009 SC  [CR00172239] Added support for session persistence.
 * 03-Sep-2009 MLB [CR00164883] Added  preferences action handler.
 * 07-Aug-2009 MV  [CR00164029] refactored to use the new method for getting
 *                  the selected tab.
 * 06-Aug-2009 MLB [CR00163869] Added Tree persistence.
 * 23-Jul-2009 MV  [CR00162771] Menu click handler updated to handle modal
 *                        windows.
 * 24-Jun-2009 MV  [CR00160877] Updated so that the tab widget id is passed
 *                        as request parameter when loading a tab.
 */
/**
 * Creating Resource Bundle Object to access localized resources.
 */ 
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");

curam.define.singleton("curam.ui.UIController", {

  TAB_TOPIC: "/app/tab",
  ROOT_OBJ: "curam.ui.UIController",
  PAGE_ASSOCIATIONS: {},
  RESOLVE_PAGES: {},
  PAGE_ID_PARAM_NAME: "o3pid",
  COMMAND_PARAM_NAME: "o3c",
  CACHE_BUSTER: 0,
  CACHE_BUSTER_PARAM_NAME: "o3nocache",
  DUPLICATE_TAB_MAPPING_ERROR: "dupTabError",
  UNASSOCIATED_SHORTCUT_ERROR: "looseShortcutError",
  LOAD_MASK_TIMEOUT: 15000, // Max. wait (milliseconds) before revealing a tab.
  TABS_INFO_MODAL_TITLE_PROP_NAME: "title.info",
  TABS_ERROR_MODAL_TITLE_PROP_NAME: "title.error",
  TABS_INFO_MODAL_MSG_PROP_NAME: "message.max.tabs.info",
  TABS_ERROR_MODAL_MSG_PROP_NAME: "message.max.tabs.error",
  TABS_MSG_PLACEHOLDER_MAX_TABS: -1,
  MAX_NUM_TABS: -1,
  MAX_TABS_MODAL_SIZE: "width=470,height=80",

  /**
   * Initializes various aspects of the user interface (e.g. listeners, tab
   * session manager etc.). AppController.jspx generates the JavaScript code
   * that invokes this method.
   */
  initialize: function(directBrowseURL) {
    curam.ui.UIController._log("curam.ui.UIController.initialize()");
    curam.ui.UIController._log("dojo.isQuirks: " + dojo.isQuirks);

    // This "rootObject" indicates we are on the root window of the user
    // interface (i.e. the window output by AppController.jspx. If is used in
    // curam/util.js in the "getFrameRoot" method. This object
    // (curam.ui.UIController) is only included from AppController.jspx so it
    // will be used as the "rootObject" to search for.
    window.rootObject = curam.ui.UIController.ROOT_OBJ;

    // Sets the main handler that opens new tabs on request.
    curam.util.subscribe(curam.ui.UIController.TAB_TOPIC,
        curam.ui.UIController.tabTopicHandler);

    // Subscribe to the event for setting the tab title and name
    curam.util.subscribe("tab.title.name.set",
        curam.ui.UIController.setTabTitleAndName);

    // TODO: Update TabSessionManager so it doesn't use "dojo.declare" and make
    // it a simple "namespace".
    if (directBrowseURL) {
      new curam.tab.TabSessionManager().init(directBrowseURL);
    } else {
      new curam.tab.TabSessionManager().init();
    }

    curam.ui.UIController._log(
      bundle.getProperty("curam.ui.UIController.event"));
  },

  ajaxPostFailure: function(err) {
    curam.ui.UIController._log("========= "
      +bundle.getProperty("curam.ui.UIController.test")
      + " JSON "
      + bundle.getProperty("curam.ui.UIController.servlet.failure")
      + " =========");
    curam.ui.UIController._log(bundle
      .getProperty("curam.ui.UIController.error") + " " + err);
    curam.ui.UIController._log(bundle
        .getProperty("curam.ui.UIController.args") + " " + ioargs);
    curam.ui.UIController._log("============================================");
  },

  /**
   * Instantiates a tab by setting the tab's signature. The identified tab
   * content panel is the one that must be instantiated fully. If the tab
   * parameter names are empty, then the tab will be a "singleton" tab: only
   * one instance of a tab with that ID will be allowed. This function is
   * called only by a script generated by the <code>TabRenderer</code>. It
   * also sets up listeners that will reveal the tab when the content pane and
   * details panels have loaded and another to track changes to the content
   * page within the tab.
   *
   * @param tabParamNames   An array of the names of the parameters defined in
   *                          in the tab configuration. The values of these
   *                          parameters (and only these parameters) will be
   *                          extracted from the page request and will be used
   *                          to uniquely identify this tab instance.
   * @param tabWidgetID     The ID of the tab content panel.
   * @param hasDetailsPanel True if the tab has a details panel.
   */
  instantiateTab: function(tabParamNames, tabWidgetID, hasDetailsPanel) {
    var tabToInstantiate = dijit.byId(tabWidgetID);

    if (tabToInstantiate) {
	  curam.util.getTopmostWindow().dojo.publish(
	    "/curam/application/tab/requested", [tabWidgetID]);
      var td = tabToInstantiate.tabDescriptor;
      var loggedID = "'" + td.tabID + "/" + tabWidgetID + "'";

      curam.ui.UIController._log(
          bundle.getProperty("curam.ui.UIController.instantiating") 
          + " " + loggedID + " " 
          + bundle.getProperty("curam.ui.UIController.with.signature"));

      // Setting the signature will cause the tab to be saved to the session
      // if the tab content details and title have been set. Otherwise, it will
      // be saved when those details arrive later. See the TabDescriptor class.
      td.setTabSignature(tabParamNames, tabToInstantiate.uimPageRequest);

      // The function used to reveal the tab. Created here as it is easier to
      // use with time-outs if it has no parameters.
      var revealTabNow = function () {
        var loadMaskDiv = dojo.query("#"+tabWidgetID+" .tab-wrapper .tab-load-mask")[0];
        if (loadMaskDiv && dojo.style(loadMaskDiv, "display") != "none") {
        curam.ui.UIController._log(bundle
          .getProperty("curam.ui.UIController.revealing") + " " + loggedID 
          + " " + bundle.getProperty("curam.ui.UIController.now"));
          dojo.style(loadMaskDiv, "display", "none");
		  curam.util.getTopmostWindow().dojo.publish(
		    "/curam/application/tab/revealed", [tabWidgetID]);
        }
      };

      // If a details panel is not present, reveal the tab immediately,
      // otherwise wait until both the content pane and the details panel have
      // loaded before revealing.
      if (!hasDetailsPanel) {
        curam.ui.UIController._log(bundle
          .getProperty("curam.ui.UIController.no.details"));
        // TODO: Should this wait until the panel has loaded? -- DG
        revealTabNow();
      } else {
        curam.ui.UIController._log(bundle
            .getProperty("curam.ui.UIController.has.details")
            + loggedID + bundle.getProperty("curam.ui.UIController.listeners"));

        // No matter what happens, reveal the tab after a set period of time in
        // case case the loading events do not fire for any reason, or fire
        // before we get a chance to set up the loading listeners, or both set
        // the "firstPanelHasLoaded" flag at precisely the wrong time.
        dojo.global.tabLoadMaskTimeout = setTimeout(revealTabNow,
            curam.ui.UIController.LOAD_MASK_TIMEOUT);

        // A function to reveal the tab only when both panes are loaded.
        var firstPanelHasLoaded = false;
        var revealTabMaybe = function () {
          if (firstPanelHasLoaded) {
            curam.ui.UIController._log(bundle
              .getProperty("curam.ui.UIController.panels.loaded"));
            // This is the second panel to load. Both are now loaded. Show the
            // tab and cancel any pending time-out, as it is no longer needed.
            revealTabNow();
            clearTimeout(dojo.global.tabLoadMaskTimeout);
          } else {
            curam.ui.UIController._log(bundle
              .getProperty("curam.ui.UIController.panels.not.loaded")
                + " " + loggedID + " " 
                + bundle.getProperty("curam.ui.UIController.later"));
            // This is the first panel to load. Wait for the second panel.
            firstPanelHasLoaded = true;
          }
        };

        // Wait until the main content pane loads then reveal the tab (maybe).
        var mainListener = dojo.connect(tabToInstantiate, "onDownloadEnd",
            function () {
              curam.ui.UIController._log(bundle
                .getProperty("curam.ui.UIController.content.pane.loaded")
                  + " " + bundle.getProperty("curam.ui.UIController.reveal") 
                  + " " + loggedID + " " 
                  + bundle.getProperty("curam.ui.UIController.now"));
              revealTabMaybe();
              dojo.disconnect(mainListener);
            });

        // Wait until the details pane loads then reveal the tab (maybe).
        var detailsHandler = curam.util.getTopmostWindow().dojo.subscribe(
            "/curam/frame/detailsPanelLoaded",
            function (detailsPanel, publishedTabWidgetID) {
              // Make sure we are listening to the event from our own tab!
              if (tabWidgetID == publishedTabWidgetID) {
                curam.ui.UIController._log(bundle
                  .getProperty("curam.ui.UIController.details.panel.loaded")
                     + " " + loggedID + " " +  
                     + bundle.getProperty("curam.ui.UIController.now"));
                revealTabMaybe();
                dojo.unsubscribe(detailsHandler);
              }
            });
      }

      // Set up a listener for changes to the content page in the new tab. This
      // listener will be unsubscribed automatically if the tab is closed.
      var handler = curam.tab.getHandlerForTab(
          function(pageID, publishedTabWidgetID) {
            curam.ui.UIController._log(bundle
              .getProperty("curam.ui.UIController.content.pane.changed") + " "
                + loggedID + " "
                + bundle.getProperty("curam.ui.UIController.now"));
            curam.ui.UIController._contentPanelUpdated(tabToInstantiate);
          }, tabWidgetID);
      var unsubToken = curam.util.getTopmostWindow().dojo.subscribe(
          "/curam/main-content/page/loaded", null, handler);
      curam.tab.unsubscribeOnTabClose(unsubToken, tabWidgetID);
    } else {
      curam.ui.UIController._log(
        bundle.getProperty("curam.ui.UIController.tab.not.found") 
          + " '" + tabWidgetID + "'.");
    }
  },

  /**
   * Updates the tab session data to record that a new content page has been
   * opened in the content area within a tab. When the session is restored, the
   * new content page should be restored, not the original page loaded in that
   * tab.
   *
   * @param {ContentPane} tab The tab whose content pane has been updated.
   * @private
   */
  _contentPanelUpdated: function(tab) {
    var iframe = curam.tab.getContentPanelIframe(tab);
    tab.tabDescriptor.setTabContent(new curam.ui.PageRequest(iframe.src), null);
  },

  getCacheBusterParameter: function() {
    return curam.ui.UIController.CACHE_BUSTER_PARAM_NAME + "="
           + new Date().getTime() + "_"
           + curam.ui.UIController.CACHE_BUSTER++;
  },

  /**
   * Gets the tabbed UI api instance for the specified tab open event.
   * @private
   * 
   * @param {curam.ui.OpenTabEvent} [openTabEvent] The tab open event or null.
   * @returns {curam.util.ui.ApplicationTabbedUiController} The tabbed UI API.
   */
  _getTabbedUiApi: function(openTabEvent) {
    var tabContainer = curam.ui.UIController._selectSection(openTabEvent);
    return new curam.util.ui.ApplicationTabbedUiController(tabContainer);
  },
  
  /**
   * Selects the section corresponding to the specified tab event.
   * @private
   *
   * @param [openTabEvent] The tab event to select section for or null,
   *    in which case the current section is maintained.
   * 
   * @returns The tab container of the selected section.
   */
  _selectSection: function(openTabEvent) {
    var inForeground = openTabEvent ? !openTabEvent.openInBackground : true;
    var sectionsTabContainer = dijit.byId(curam.tab.SECTION_TAB_CONTAINER_ID);
    var sectionId = openTabEvent ? openTabEvent.tabDescriptor.sectionID
        : curam.tab.getCurrentSectionId();
    var borderContainer = dijit.byId(sectionId + "-sbc");
    var tabContainer = curam.tab.getTabContainer(sectionId);

    // The child of the application sections border container can be a border
    // container (if there is a shortcuts panel) or another tab container (that
    // holds the applications main tabs, person, case etc.). We have to use the
    // correct child to make it the selected one.
    // TODO: use "hasShortcutPanel" API on section objects.
    // TODO: Ideally selecting the section tab should come *after* selecting
    // the child tab to make it appear smoother. However, some of the functions
    // below like findOpenTab actually rely on the currently selected section
    // tab, so we have to make sure to select this first. This needs to be
    // re-worked.

    // Only select the container if the new tab is to be selected.
    if (inForeground) {
      if (borderContainer) {
        sectionsTabContainer.selectChild(borderContainer);

      } else {
        sectionsTabContainer.selectChild(tabContainer);
      }
    }
    
    return tabContainer;
  },

  /**
   * Handles a "TAB_TOPIC" request to open a new tab. The event may indicate
   * that the tab should be opened in the foreground (i.e., selected after
   * creation) or in the background.
   *
   * @param {curam.ui.OpenTabEvent} openTabEvent The event describing the tab
   *   to be opened and the content to be loaded in that tab.
   */
  tabTopicHandler: function(openTabEvent) {
    var api = curam.ui.UIController._getTabbedUiApi(openTabEvent);
    
    curam.ui.UIController._doHandleTabEvent(openTabEvent, api);
  },
  
  _doHandleTabEvent: function(openTabEvent, tabbedUiApi) {
    var eventTD = openTabEvent.tabDescriptor;
    var sectionID = eventTD.sectionID;
    var tabContainer = curam.tab.getTabContainer(sectionID);

    var topDojo = curam.util.getTopmostWindow().dojo;
    var isNew = false;
      
    curam.ui.UIController._log(
	  bundle.getProperty("curam.ui.UIController.fired") 
                         + " " + sectionID + " : " + eventTD.tabID + " : " 
                         + openTabEvent.uimPageRequest.pageID);

    // Select a tab that already has the requested page, or else open a new tab.					
    var tab = tabbedUiApi.findOpenTab(openTabEvent);
    if (tab === null && 
         lang.exists("selectedChildWidget.tabDescriptor.isHomePage", tabContainer) &&
         tabContainer.selectedChildWidget.tabDescriptor.isHomePage === true && 
         tabContainer.selectedChildWidget.tabDescriptor.tabID === openTabEvent.tabDescriptor.tabID) {

      // When the tab requested is a home page of a section and the section
      // is not visible at the time, the previous function call to 
      // tabTopicHandler will display the section and the associated home page 
      // tab. So the tab will exist at this point.
     // However, at this stage of the execution the tabSignature property 
     // of the TabDescriptor will not be set on the tab as the page has not 
     // fully loaded. The findOpenTab function relies on the tabSignature 
     // property being set to find a tab. So it will return null in this
     // particular scenario.
     // In this scenario we instead carry out the comparison not on the 
     // tabSignature property of the TabDescriptor but using the tabID
     // property instead.
     tab = tabContainer.selectedChildWidget;
    }
    if (!tab) { //create new tab
      if (tabContainer == undefined) {
        return false;
      }
      //the openTabs starts at zero so we going to increment this by one
      var numOpenTabs = tabContainer.getChildren().length + 1;
      // if we are creating a new tab then check that the number of open tabs 
      // is not greater than the number of maximum allowable open tabs.
      var numMaxOpenTabs = this.MAX_NUM_TABS;
      var maxOpenTabsExceeded = this._checkMaxNumOpenTabsExceeded(numMaxOpenTabs, numOpenTabs);
      if (maxOpenTabsExceeded) {
        return true;
      }
      // if the max open tabs has not been exceeded then open a new one and 
      // finally check the limt has not been reached after creation..
      curam.ui.UIController._log(bundle
                                 .getProperty("curam.ui.UIController.creating"));
      tab = tabbedUiApi.createTab(openTabEvent);

      // notify listeners that the tab is setup and ready for use
      // listener will be deregistered automatically when the tab destroys 
      tab.connect(tab, "onLoad", function() {

        // start loading the iframe only when the tab content hs been put
        // into DOM - this is to avoid IE9+ throwing JS error
        var iframe = curam.tab.getContentPanelIframe(tab);
        dojo.attr(iframe, "src", dojo.attr(iframe, "data-content-url"));
        topDojo.publish("/curam/application/tab/ready", [tab]);
      });
      isNew = true;
    }
    if (isNew) {
      var currentlySelectedTab = tabbedUiApi
	                   .insertTabIntoApp(tab, openTabEvent.uimPageRequest.isHomePage);
        
      // TODO: auto select newly opened tab or not....can we give the user 
      // the choice? e.g. they may be on a search page and want to open up 
      // multiple items. But if we bring the focus to the new tab, they have 
      // to switch back to the search tab before opening another item....
      // should the user have some way of controlling this behavior (e.g. 
      // key press + mouse?)
      if (!openTabEvent.openInBackground) {
          curam.ui.UIController._log(bundle
            .getProperty("curam.ui.UIController.new.fore.tab"), 
              tab.tabDescriptor);
         tabbedUiApi.selectTab(tab);
         if (currentlySelectedTab != null) {
          // Revert selection of the tab
          tabbedUiApi.selectTab(currentlySelectedTab);
        }
      } else {
        curam.ui.UIController._log(bundle
                   .getProperty("curam.ui.UIController.new.back.tab"),
                      tab.tabDescriptor);
      }
      // if we are creating a new tab then check that the number of open
      // tabs has not exceeded the number of open tabs in the application.
      this._checkMaxNumOpenTabsReached(numMaxOpenTabs, numOpenTabs);
    } else {
        curam.ui.UIController._log(
          bundle.getProperty("curam.ui.UIController.show.page"), 
            tab.tabDescriptor);
        // Select the tab within the section. We ignore the "openInBackground"
        // flag for now, as this is not the path used when restoring a session.
        // Opening an already open tab in the background would be the same as
        // doing nothing at all, so we do something instead.
        tabbedUiApi.selectTab(tab);

        /*
         * justRefresh   forceLoad
         * true          true      -> just reload, keep existing URL �gnoring passed URL
         * false         false     -> load the page, only if not same
         * true          false     -> just reload, keep existing URL
         * false         true      -> load the page even if URL is same
         */
        if (openTabEvent.uimPageRequest.justRefresh) {
          // disregard the passed URL and just refresh the current page
          tabbedUiApi.refreshExistingPageInTab(tab);
        } else if (openTabEvent.uimPageRequest.forceLoad) {
          // force load of the tab
          tabbedUiApi.openPageInCurrentTab(openTabEvent.uimPageRequest);
        } else {
          // Handle the "false false -> load the page, only if not same" scenario
          // described above. The URLs have to be compared to see if the current
          // tab should be loaded or not. When we get to this point the
          // findOpenTab method has already selected the associated tab and taken
          // care of loading the page if the pageRequest matches.
          // findOpenTab doesn't handle the scenario where they don't match.
          // TODO: Consolidate this code with findOpenTab. NB: there is a similar
          // "todo" statement in findOpenTab. This needs to be resolved together.
          var tabDescriptor = tab.tabDescriptor;
          var isSameTab = tabDescriptor.tabID == openTabEvent.tabDescriptor.tabID
                           && tabDescriptor.matchesPageRequest(openTabEvent.uimPageRequest);
          var isSamePage = tabDescriptor.tabContent.pageID == openTabEvent.uimPageRequest.pageID;
          if (isSameTab && !isSamePage) {
            // load the page
            tabbedUiApi.openPageInCurrentTab(openTabEvent.uimPageRequest);
          }
        }
      }
      return true;
    },
  
  /**
   * Check that the number of open tabs has not reached the maximum
   * number of tabs that are allowed to be open in an application.
   */
  _checkMaxNumOpenTabsReached: function(numMaxOpenTabs, numOpenTabs){
    if (numOpenTabs == numMaxOpenTabs) {
      this.TABS_MSG_PLACEHOLDER_MAX_TABS = numMaxOpenTabs;
      curam.util.openGenericErrorModalDialog(this.MAX_TABS_MODAL_SIZE, 
          this.TABS_INFO_MODAL_TITLE_PROP_NAME, 
          this.TABS_INFO_MODAL_MSG_PROP_NAME, 
          this.TABS_MSG_PLACEHOLDER_MAX_TABS,false);
      return true;
    }
  },
  
  /**
   * Check that the number of open tabs has not exceeded the maximum
   * number of tabs that are allowed to be open in an application.
   */
  _checkMaxNumOpenTabsExceeded: function(numMaxOpenTabs, numOpenTabs){
    if (numOpenTabs > numMaxOpenTabs) {
      this.TABS_MSG_PLACEHOLDER_MAX_TABS = numMaxOpenTabs;
      curam.util.openGenericErrorModalDialog(this.MAX_TABS_MODAL_SIZE, 
          this.TABS_ERROR_MODAL_TITLE_PROP_NAME, 
          this.TABS_ERROR_MODAL_MSG_PROP_NAME, 
          this.TABS_MSG_PLACEHOLDER_MAX_TABS,true);
      return true;
    }
  },

  /**
   * @param pageRequest The page request to check.
   * @param unmappedPageLoader Null by default. If null the unmapped pages will
   *    be loaded in current tab's content area.
   *    If function is passed, the unmapped pages will be loaded using that
   *    function. It is expected that the function takes the page request
   *    as a parameter.
   * @return True if the page has been loaded, otherwise false;
   */
  checkPage: function(pageRequest, unmappedPageLoader) {
    curam.ui.UIController._log(bundle
        .getProperty("curam.ui.UIController.checking.page")
        + " '" + pageRequest.pageID + "'.");

    // This is to avoid infinite loop when calling path resolver
    // for tab descriptors. The infinite loop happens when an invalid page
    // request with empty page ID is passed.
    if (pageRequest.pageID == "") {
      curam.ui.UIController._log(bundle
        .getProperty("curam.ui.UIController.ignoring") + " " 
        + pageRequest.getURL());
      return;
    }

    var continueSynchronously =
        curam.ui.UIController._ensurePageAssociationInitialized(
            pageRequest, function() {
              /* At this point (after calling _ensurePageAssociationInitialized)
               * the associations should be there.
               * If not, something has gone wrong and we won't try again
               * otherwiise we risk infinite recursion loop.
               */ 
              if (curam.ui.UIController.isPageAssociationInitialized(
                  pageRequest.pageID, curam.ui.UIController.PAGE_ASSOCIATIONS)) {

                curam.ui.UIController.checkPage(pageRequest, unmappedPageLoader);

              } else {
                var msg = bundle.getProperty("curam.ui.UIController.failed");
                curam.ui.UIController._log(msg);
                throw new Error(msg);
              }
            });

    if (continueSynchronously) {
      try {
        var tabDescriptor = curam.ui.UIController.getTabDescriptorForPage(
            pageRequest.pageID, curam.ui.UIController.PAGE_ASSOCIATIONS);
        
        if (tabDescriptor != null) {
          curam.ui.UIController._log(bundle
              .getProperty("curam.ui.UIController.page.opened")
              + " '" + pageRequest.pageID
              + "'. " + bundle.getProperty("curam.ui.UIController.sec.id") 
              + " '" + tabDescriptor.sectionID
              + "'. " + bundle.getProperty("curam.ui.UIController.tab.id") 
              + " '" + tabDescriptor.tabID + "'.");

          // This page is mapped to a tab.
          if (pageRequest.isHomePage) {
            // Required for default section pages. TODO: Clean this up. -- DG
            tabDescriptor.isHomePage = true;
          }
          tabDescriptor.setTabContent(pageRequest);
          dojo.publish(curam.ui.UIController.TAB_TOPIC,
              [new curam.ui.OpenTabEvent(tabDescriptor, pageRequest)]);
        
        } else {
          // This page is not mapped to any tabs
          curam.ui.UIController._log(bundle
            .getProperty("curam.ui.UIController.page.id") + " '" 
              + pageRequest.pageID + "'.");
          if (!unmappedPageLoader) {
            if (typeof curam.tab.getSelectedTab() == "undefined") {
              // the page to open hasn't been associated with any tab and no tab
              // open so either opens from the shortcut panel or menu.
              // This is a misconfiguration and hence exception is throw
              throw {
                name: curam.ui.UIController.UNASSOCIATED_SHORTCUT_ERROR,
                message: "ERROR:The requested page " + pageRequest.pageID
                          + " is not associated with any tab and there is no "
                          + "tab to open it!" }; 

            }
            curam.ui.UIController._log(bundle
              .getProperty("curam.ui.UIController.load"));
            curam.ui.UIController._getTabbedUiApi().openPageInCurrentTab(
                pageRequest);

          } else {
            curam.ui.UIController._log(bundle
              .getProperty("curam.ui.UIController.unmapped"));
            unmappedPageLoader(pageRequest);
          }
        }
      
      } catch (e) {
        if (e.name == curam.ui.UIController.DUPLICATE_TAB_MAPPING_ERROR) {
          // The page is referenced by multiple tabs, show this error.
          alert(e.message);

          // Now open the page in the current tab
          curam.ui.UIController._getTabbedUiApi().openPageInCurrentTab(
              pageRequest);
          return null;

        } else 
          if (e.name == curam.ui.UIController.UNASSOCIATED_SHORTCUT_ERROR) {
          alert(e.message);
          console.error(e.message);
          return null;

        } else {
          throw e;
        }
      }
    }
  },
  
  isPageAssociationInitialized: function(pageID, pageAssociations) {
    var pageAssociation = pageAssociations[pageID];
    return !(typeof pageAssociation == "undefined");
  },
  
  /**
   * Checks if the page association has been initialized.
   * If they have than the function does nothing else and returns true.
   * If they haven't than asynchronous call is made to initialize them
   * and the callback function is invoked after init is done.
   * 
   * @param pageRequest The page request to check.
   * @param callback the function to call after the page associations have been
   *    asynchronously initialized.
   * @return True if the associations are already initialized and the caller
   *    can continue synchronously. False if the associations are not initialized
   *    yet and will be initialized asynchronously.
   */
  _ensurePageAssociationInitialized: function(pageRequest, callback) {
    if (!curam.ui.UIController.isPageAssociationInitialized(
        pageRequest.pageID, curam.ui.UIController.PAGE_ASSOCIATIONS)) {
      /* Page associations for this page have not been initialized. An AJAX
       * query is used to retrieve the associations from the the server.
       * 
       * The "initializePageAssociations" function is invoked on a successful
       * response from the AJAX query. This method populates
       * the PAGE_ASSOCIATIONS map and does nothing else.
       * The callback reference is subsequently invoked to process the map
       * now that it has been populated.
       */
      var path = "/config/tablayout/associated[" + pageRequest.pageID + "]["
      + USER_APPLICATION_ID + "]";

  new curam.ui.ClientDataAccessor().getRaw(
      path,

      function(data) {
        curam.ui.UIController.initializePageAssociations(
            pageRequest, data);
        callback();
      },

      function(error, args) {
        // use localizable error message and append the actual error text
        var msg = curam_ui_UIController_data_error + " " + error;
        curam.ui.UIController._log(msg);
        if (!curam.ui.UIController._isLoginPage(args.xhr)) {
          // If not a session timeout scenario, display error message before
          // reloading the application.
          alert(msg);
        }
        /* If the server call fails we force the application to reload.
         * This takes care of situations where the session timeout occurs
         * and we need to force the login screen.
         * In cases of a failure other than due to timeout the same
         * behaviour is used 
         */
        curam.util.getTopmostWindow().location.reload(true);
      }, null);

      return false;
    }
    
    return true;
  },

  /**
   * Check for a login page based on the presence of this HTML tag:
   * <form action="j_security_check" ...>
   * 
   * @param request The XHR request object.
   * @return True if the response is a login page, otherwise False.
   */
  _isLoginPage: function(request) {
    return request.responseText.indexOf("action=\"j_security_check\"") > 0;
  },

  /**
   * This method initializes the PAGE_ASSOCIATIONS map for the specified page
   * with data provided by the
   * "/config/tablayout/associated[pageID][applicationID]" path. The path is
   * executed asynchronously using the ClientDataAccessor API and this method is
   * set up as a call-back when the AJAX query successfully completes.
   *
   * This method expects the first parameter to be the page ID used in the
   * "/associated" path. When the call-back is being created, dojo.hitch() is
   * used to bind the parameter value to the call back (search for references
   * to this function for details). The "result" and "ioargs" parameters are
   * supplied by dojo itself as a result of using "dojo.xhrGet\xhrPost".
   *
   * @param pageRequest An instance of curam.ui.PageRequest which indicates the
   *                    page to initialize associations for.
   * @param result A valid object, it will never be null. If associations exist
   *               this object will have two properties: "sectionID" and
   *               "tabIDs", the latter being an array of associated tab IDs.
   */
  initializePageAssociations: function(pageRequest, result) {
    curam.ui.UIController._log(bundle
      .getProperty("curam.ui.UIController.got.assoc") + " '"
        + pageRequest.pageID + "'.");
    curam.ui.UIController._log(bundle
      .getProperty("curam.ui.UIController.assoc"), result);
    if (result) {
      if (result.tabIDs && result.tabIDs.length > 0) {
        curam.ui.UIController.PAGE_ASSOCIATIONS[pageRequest.pageID] = result;
      } else {
        curam.ui.UIController._log(bundle
          .getProperty("curam.ui.UIController.no.mappings") + " '"
            + pageRequest.pageID + "'.");
        curam.ui.UIController.PAGE_ASSOCIATIONS[pageRequest.pageID] = null;
      }
    } else {
      throw "initializePageAssociations did not recieve a valid response.";
    }
  },

  /**
   * Retrieves information about the target tab for the specified page ID.
   * @param {String} pageId Id of the page.
   * @param {Object} pageAssociations Page associons to get the tab information
   *    from.
   * @return {curam.tab.TabDescriptor} A corresponding tab descriptor or null
   *    if the page is not mapped to any tabs.
   */
  getTabDescriptorForPage: function (pageId, pageAssociations) {
    var pageAssociation = pageAssociations[pageId];
    if (!curam.ui.UIController.isPageAssociationInitialized(
        pageId, pageAssociations)) {
      throw "Page associations have not been initialized for: " + pageId;
    }

    if (pageAssociation != null) {
      var tabID = curam.ui.UIController.getTabFromMappings(
          pageAssociation.tabIDs, curam.tab.getSelectedTab());
      
      return new curam.tab.TabDescriptor(pageAssociation.sectionID, tabID);

    } else {
      // page is not mapped to any tabs
      return null;
    }
  },

  getTabFromMappings: function(tabMappings, selectedTab) {
    if (!selectedTab) {
      // if there is no tab open, then it's the very first page request,
      // the home page. we check the number of mappings. The home page should
      // always be assigned to a single tab.
      if (tabMappings.length == 1) {
        return tabMappings[0];
      } else if (tabMappings.length > 1 ) {
        // TODO: localize
        throw "Home page mapped to multiple tabs";
      }
    }
    var currentTabID = selectedTab.tabDescriptor.tabID;

    for (var i = 0; i < tabMappings.length; i++) {
      if (currentTabID == tabMappings[i]) {
        return currentTabID;
      }
    }

    if (tabMappings.length == 1) {
      return tabMappings[0];
    } else if (tabMappings.length > 1 ) {
      throw {
        name: curam.ui.UIController.DUPLICATE_TAB_MAPPING_ERROR,
        message:
          "ERROR: The page that you are trying to link to is associated with "
          + "multiple tabs: [" + tabMappings.toString() + "]. Therefore the "
          + "tab to open cannot be determined and the page will open in the "
          + "current tab. Please report this error.",
        tabID: currentTabID
      };
    } else {
      //TODO: scenario where there are no tab mappings.....
    }
  },

  /**
   * Convenience function that takes a UIM Page ID and performs the usual
   * link handling on it (opening new sections, tabs etc.)
   *
   * @param {String} pageID The ID of the page to be opened in a tab.
   * @param {Boolean} isDefaultSectionPage True if this is a default section
   *   page and therefore should not be closeable.
   */
  handleUIMPageID: function(pageID, isDefaultSectionPage) {
    // Normalize the Boolean value. Default section pages are treated the same
    // as home pages. This only means that they are not closeable.
    var isHomePage = isDefaultSectionPage ? true : false;

    curam.ui.UIController._log(bundle
      .getProperty("curam.ui.UIController.handling.uim")
        + " '" + pageID + "'. Page is "
        + (isHomePage ? "" : "not ") 
        + bundle.getProperty("curam.ui.UIController.default.sec"));

    curam.ui.UIController.handlePageRequest(
        new curam.ui.PageRequest(pageID + "Page.do", isHomePage));
  },

  /**
   * Processes the supplied URL to figure out if it should open in a new tab
   * or in the current tab.
   * @param url A url in the form "SamplePage.do?param=value". This is usually
   *            the value of a href taken from a link. If must not have the http
   *            protocol, server addresses etc.
   */
  processURL: function(url) {
    var uimPageRequest = new curam.ui.PageRequest(url);
    curam.ui.UIController.handlePageRequest(uimPageRequest);
  },

  handlePageRequest: function(uimPageRequest) {
    curam.ui.UIController._log(bundle
      .getProperty("curam.ui.UIController.handling.page")
        + " '" + uimPageRequest.pageID
        + "'. " + bundle.getProperty("curam.ui.UIController.panel.will") 
        + (uimPageRequest.forceRefresh ? "" : 
          bundle.getProperty("curam.ui.UIController.not"))
        + bundle.getProperty("curam.ui.UIController.reload"));
    var canCheckPage = curam.ui.UIController.checkResolvePage(uimPageRequest,
        uimPageRequest.forceRefresh);
    if (canCheckPage == true) {
      curam.ui.UIController.checkPage(uimPageRequest);
    }
  },

  checkResolvePage: function(uimPageRequest, forceRefresh) {
    if (forceRefresh) {
      return true;
    }
    var isResolvePage =
      curam.ui.UIController.RESOLVE_PAGES[uimPageRequest.pageID];
    /* Below: checking specifically for Boolean "false" value as the value
     * of "undefined" means we haven't yet checked if this page is a resolve
     * page.
     */
    if (isResolvePage == false) {
      return true;

    } else {
      var urlAppend;
      if (uimPageRequest.getURL().indexOf("?") == -1) {
        urlAppend = "?";
      } else {
        urlAppend = "&";
      }
      var loc = curam.config ? curam.config.locale + "/": "";
      curamRequest.post({
        url: loc + uimPageRequest.getURL() + urlAppend + "o3resolve=true",
        handleAs: "text",
        preventCache: true,
        load: dojo.hitch(curam.ui.UIController, "resolvePageCheckSuccess",
                         uimPageRequest),
        error: dojo.hitch(curam.ui.UIController, "resolvePageCheckFailure",
                          uimPageRequest)
      });
      return false;
    }
  },

  resolvePageCheckSuccess: function(pageRequest, result, ioargs) {
    // check if Json data exists. If so continue on as normal. If json data is
    // not present (in the agenda player or maybe an external site) skip the
    // resolve page check.
    var jsonDataExists = false;
    var resultPageID;
    var resultPageURL;
    var pageRequestToProcess;

    if(result.substring(2,0) == '{"' && result.charAt(result.length-1) == "}"){
      jsonDataExists = true;
      // convert text data to a json object to be process below in the resolve
      // page check.
      result = dojoJSON.parse(result, true);
      resultPageID = result.pageID;
      resultPageURL = result.pageURL;
    } else {
      jsonDataExists = false;
    }

    if (jsonDataExists && pageRequest.pageID != resultPageID) {
      // this means it must be a resolve page so record this.
      curam.ui.UIController.RESOLVE_PAGES[pageRequest.pageID] = true;

      // handle variations of o3resolve parameter appended to a URL.
      // The third variation is to fall back on the code that existed before
      // verison CR00221139.
      resultPageURL = resultPageURL.replace("&amp;o3resolve=true", "");
      resultPageURL = resultPageURL.replace("&o3resolve=true", "");
      resultPageURL = resultPageURL.replace("o3resolve=true", "");

      // TEMPORARY JAVA SCRIPT FIX FOR ISSUE WITH __o3 PARAMS BEING STRIPPED.
      // The correct fix is to use a different getEncodedURL() method in the
      // generated jspx file for the resolve page check, or parse the
      // result.pageURL into another PageRequest and write a "merge" method
      // obeying the rules below i.e. that we take CDEJ parameters from the
      // original PageRequest that linked to the resolve page.
      for (paramName in pageRequest.cdejParameters) {
        if (paramName.length > 0 && paramName.indexOf("__o3") != -1) {
          // Include the parameter, as it will be stripped
          if (resultPageURL.indexOf("?") == -1) {
            // NB: This code accesses "private" attributes of
            // the PageRequest class (i.e. "cdejParameters). It therefore needs
            // to handle encoding each parameter.
            resultPageURL += "?" + paramName + "="
                          + encodeURIComponent(
                              pageRequest.cdejParameters[paramName]);
          } else {
            resultPageURL += "&" + paramName + "="
                          + encodeURIComponent(
                              pageRequest.cdejParameters[paramName]);
          }
        }
      }
      // This is a resolve page, so we create a new request.
      pageRequestToProcess = new curam.ui.PageRequest(resultPageURL);
    } else {
      // Indicate it is not a resolve page so we don't have to do a call again
      // to check this.
      curam.ui.UIController.RESOLVE_PAGES[pageRequest.pageID] = false;
      // As it was not a resolve page, we process the same request that was
      // passed to this function.
      pageRequestToProcess = pageRequest;
    }
    curam.ui.UIController.checkPage(pageRequestToProcess);
  },

  /**
   * Handles the failure of the "resolve page check" AJAX query invoked from
   * the "checkResolvePage" method.
   * @param pageRequest An instance of a "curam.ui.PageRequest".
   * @param error The JavaScript erro object indicating what the error was.
   * @param ioargs The object containing details information about the XHR call.
   */
  resolvePageCheckFailure: function(pageRequest, error, ioargs) {
    // If an error occurs during the resolve check, then we let the page request
    // continue. This ensures the response is displayed to the user in the
    // content panel of the current tab. We also record that this isn't a
    // resolve page. We don't actually care whether the page in question is a
    // resolver or not. This just has the effect of the "handlePageRequest"
    // method calling "curam.ui.UIController.checkPage" directly if the user
    // clicks the same link again. It avoids invoking the AJAX quey in
    // "checkResolvePage" again.
    curam.ui.UIController.RESOLVE_PAGES[pageRequest.pageID] = false;
    curam.ui.UIController.checkPage(pageRequest);
  },

  /**
   * Set the title and name of a tab. This is invoked when the Dojo event
   * "tab.title.name.set" is raised by the details panel "iframe". The tab name
   * is set by a JavaScript call output by the tab renderer where there is no
   * details panel. When reloading tabs on a refresh, the tab name is set from
   * the value saved in the session.
   *
   * @param {Node} iFrameNode The "iframe" node that raised the event.
   * @param {String} tabTitle The title of the tab.
   * @param {String} tabName  The name to set on the tab.
   */
  setTabTitleAndName: function(iFrameNode, tabTitle, tabName) {
    var tab = curam.tab.getContainerTab(iFrameNode);

    if (tab) {
      curam.ui.UIController._log(bundle
          .getProperty("curam.ui.UIController.changing.tab") + " '" + tabTitle
          + "', '" + tabName + "'. " + bundle
          .getProperty("curam.ui.UIController.descriptor.before"),
          tab.tabDescriptor);
      // Set the tab title (above the details panel).
      dojo.query("span.detailsTitleText", tab.domNode)[0].innerHTML = tabTitle;
      var tabTitleText = dojo.query("span.detailsTitleText", tab.domNode)[0];
      tabTitleText.setAttribute("title", tabTitle);
      // Set the tab name (on the tab handle). A listener is set on the tab to
      // connect to this call and record the new tab name in the session.
      tab.set("title", tabName);
      dojo.publish("tab.title.name.finished");
    } else {
      curam.ui.UIController._log(bundle
          .getProperty("curam.ui.UIController.cannot.change") + " '"
          + tabTitle + "', '" + tabName + "'. " + bundle
          .getProperty("curam.ui.UIController.iframe") + " '"
          + iFrameNode.id + "'.");
    }
  },

  /**
   * Handles click on the tab actions menu and section shortcuts panel links.
   * Also called from the pages loaded in C�ram dialogs.
   *
   * @param {String} targetUrl URL of the target page.
   * @param {Object} modalWrapper the presence of this parameter indicates that
   * the link should open in modal dialog. The object comes in the form of
   * {openDialogFunction:openFunction, args:array of arguments} where both
   * arguments are optional, the first specifying the custom modal opening
   * function, should one be required, and the second - arguments to that
   * function.
   */
  handleLinkClick: function(targetUrl, modalWrapper) {
    curam.ui.UIController._doHandleLinkClick(
        targetUrl,
        modalWrapper,
        curam.tab.getContentPanelIframe(),
        curam.ui.UIController.handlePageRequest,
        curam.util.openModalDialog);
  },
  
  /**
   * Implement the link click handling logic.
   * 
   * @private
   * 
   * @param {String} targetUrl The URL to follow.
   * @param {Object} [modalWrapper] The modal wrapper object.
   * @param {Object} [iframe] The iframe to use as the source for the RPU value.
   * @param {Function} requestHandler Function to call when page request
   *    is to be handled by the linking infrastructure.
   * @param {Function} defaultOpenDialog Function to call when page request
   *    is to be opened in a dialog and there is no dialog open function
   *    specified in the modalWrapper object.
   */
  _doHandleLinkClick: function(targetUrl, modalWrapper, iframe, requestHandler,
      defaultOpenDialog) {

    var newUrl = targetUrl;
    if (iframe) {
    var rtc = new curam.util.RuntimeContext(iframe.contentWindow);
      var extraParaArray = null;
    if(modalWrapper){
        extraParaArray = [ {key:"o3frame", value:"modal"} ];
      }
      newUrl = curam.util.setRpu(targetUrl, rtc, extraParaArray);
    }

    // if modals are enabled, open in a modal
    if (modalWrapper && curam.config && curam.config.modalsEnabled != "false") {
      var dialogFunction = modalWrapper.openDialogFunction || defaultOpenDialog;
      var fArgs =
          modalWrapper.args || [{href:newUrl}, modalWrapper.dialogOptions];
      dialogFunction.apply(this, fArgs);
    
    } else {
      var uimPageRequest = new curam.ui.PageRequest(newUrl);
      requestHandler(uimPageRequest);
    }
  },

  /**
   * Handles the click event when a menu item in the Tab Actions Menu is used
   * to download a file. NOTE: This is the legacy version of the method using
   * a temporary iframe.  
   *
   * @param {String} targetUrl URL to invoke the file download servlet.
   */
  handleDownLoadClickLegacy: function(targetUrl) {
    require(["dojo/io/iframe"]);
    var iframe = dojo.io.iframe.create("o3lrm_frame", "");
    iframe.src = location.href.substring(0,location.href.lastIndexOf("/"))
                 + decodeURIComponent(targetUrl.replace(/\+/g, " "));
    return;
  },
  
  /**
   * Handles the click event when a menu item in the Tab Actions Menu is used
   * to download a file.
   *
   * @param {String} targetUrl URL to invoke the file download servlet.
   */
  handleDownLoadClick: function(targetUrl) {
    // Direct the file download request at the main content frame.
    // If the request is successfull the browser will begin downloading the
    // file and the content frame will be left as-is. If the request fails
    // the response will be the application error page and will be displayed
    // in the main content frame.
    var iframe = curam.tab.getContentPanelIframe();
    iframe.src = location.href.substring(0,location.href.lastIndexOf("/"))
                 + decodeURIComponent(targetUrl.replace(/\+/g, " "))
                 + "&" + jsScreenContext.toRequestString();
    return;
  },

  /**
   * Simplifies the production of consistent log messages from the UIController.
   *
   * @param {String} msg The message to be logged.
   * @param object An optional object that will be converted to JSON form and
   *   appended to the message string.
   */
  _log: function(msg, object) {
    // If debug logging is turned off, then we do not want to keep the overhead
    // of converting objects to JSON form to create the log message, so we
    // check the DEBUG switch even before calling "curam.debug.log".
    if (curam.debug.enabled()) {
      curam.debug.log(
          "UI CONTROLLER: " + msg + (object ? " " + dojo.toJson(object) : ""));
    }
  }
  });
  
  return curam.ui.UIController;
});

},
'curam/FastUIMController':function(){
/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2012-2013. All Rights Reserved.
 *
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

  /*
   * Modification History
   * -------------------- 
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 23-Oct-2012  SK  [CR00346419] Now properly unsubscribes from the onload
   *    registry to avoid memory leak.
   * 11-Sep-2012  MV  [CR00339639] Initial version, this is a clone
   *    of curam/UIMController to achieve faster loading of main content panel.
   */

define("curam/FastUIMController", ["dojo/parser",
        "curam/UIMController",
        "curam/debug",
        "curam/util/onLoad",
        "curam/util/ResourceBundle"
        ], function(parser) {
  
  /**
   * @name curam.FastUIMController
   * @namespace Create and manage a widget that controls an IFRAME that is known
   * to load UIM pages. The controller will handle official communications
   * from the IFRAME to the parent window using the event system.
   * This will bridge the gap created by security restrictions that stop parent
   * windows manipulating the content of IFRAMES they control.
   * 
   * The controller also provides "In Page Navigation" functionality by creating
   * a tab controller to handle the page linking described by In Page Navigation
   * in the UIM file.
   *
   */
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  var FastUIMController = dojo.declare("curam.FastUIMController",
        [curam.UIMController],
  /**
   * @lends curam.FastUIMController.prototype
   */
  {
    buildRendering: function() {
      // we already have the srcNodeRef, so lets just
      // keep it and use it as the domNode
      this.domNode = this.srcNodeRef;
      
      // call this._attachTemplateNodes to parse the template,
      // which is actually just the srcnode
      // this method is provided by the _TemplatedMixin
      this._attachTemplateNodes(this.domNode, function(node, prop){
        return node.getAttribute(prop);
      });
    },
    
    postCreate: function() {
      // override to stop using superclass method
    },
    
    /**
     * after the widget has been created add a listener for events
     * coming from the iframe, then load the iframe. It is important that the
     * order is maintained here as adding the listener after loading the iframe
     * will mean the events are missed.
     */
    startup: function() {
      this.tabController = dijit.byId(this.tabControllerId);
    
      dojo.attr(this.frame, "iscpiframe", this.iscpiframe);
      dojo.attr(this.frame, "title", this.title);
      dojo.addClass(this.frame, this.iframeClassList);
      dojo.addClass(this.domNode, this.classList);

      /* width and height specified on dom node in application.css
      dojo.attr(this.domNode, 
          "style", {"height": this.height,"width": this.width});
      curam.debug.log(
          "FastUIMController Height: " + dojo.style(this.domNode,"height"));
      curam.debug.log(
          "FastUIMController Width: " + dojo.style(this.domNode,"width"));
      */

      this.frameLoadEvent = this.EVENT.TOPIC_PREFIX + this.frame.id;
      
      this.setURL(this.url);

      // subscribe for onLoad events on the iframe
      if (this._iframeLoaded()) {
        // process the page already loaded in the frame
        // TODO: FUIMC already loaded - process page
        curam.debug.log("curam.FastUIMController " 
          + bundle.getProperty("curam.FastUIMControlle.msg"));
        
      } else {
        var fLoadFunct = dojo.hitch(this, "processFrameLoadEvent");
        curam.util.onLoad.addSubscriber(this.frame.id, fLoadFunct);
        dojo.connect(this, "destroy", function() {
          curam.util.onLoad.removeSubscriber(this.iframeId, fLoadFunct);
          fLoadFunct = null;
        });
      }

      if (this.inDialog) {
        // Set the initial dimensions of the iframe.
        // The width is particularly important for correct automatic height
        // calculation in dialogs
        dojo.style(this.frame, {
          width: this.width,
          height: this.height
        });
      }
    },
    
    _iframeLoaded: function() {
      return dojo.attr(this.frame, "data-done-loading") == "true";
    }
  });

  return FastUIMController;
});

},
'dojo/io/iframe':function(){
define("dojo/io/iframe", ["../main", "require"], function(dojo, require) {
	// module:
	//		dojo/io/iframe
	// summary:
	//		TODOC

dojo.getObject("io", true, dojo);

/*=====
dojo.declare("dojo.io.iframe.__ioArgs", dojo.__IoArgs, {
	constructor: function(){
		//	summary:
		//		All the properties described in the dojo.__ioArgs type, apply
		//		to this type. The following additional properties are allowed
		//		for dojo.io.iframe.send():
		//	method: String?
		//		The HTTP method to use. "GET" or "POST" are the only supported
		//		values.  It will try to read the value from the form node's
		//		method, then try this argument. If neither one exists, then it
		//		defaults to POST.
		//	handleAs: String?
		//		Specifies what format the result data should be given to the
		//		load/handle callback. Valid values are: text, html, xml, json,
		//		javascript. IMPORTANT: For all values EXCEPT html and xml, The
		//		server response should be an HTML file with a textarea element.
		//		The response data should be inside the textarea element. Using an
		//		HTML document the only reliable, cross-browser way this
		//		transport can know when the response has loaded. For the html
		//		handleAs value, just return a normal HTML document.  NOTE: xml
		//		is now supported with this transport (as of 1.1+); a known issue
		//		is if the XML document in question is malformed, Internet Explorer
		//		will throw an uncatchable error.
		//	content: Object?
		//		If "form" is one of the other args properties, then the content
		//		object properties become hidden form form elements. For
		//		instance, a content object of {name1 : "value1"} is converted
		//		to a hidden form element with a name of "name1" and a value of
		//		"value1". If there is not a "form" property, then the content
		//		object is converted into a name=value&name=value string, by
		//		using dojo.objectToQuery().
		this.method = method;
		this.handleAs = handleAs;
		this.content = content;
	}
});
=====*/

dojo.io.iframe = {
	// summary:
	//		Sends an Ajax I/O call using and Iframe (for instance, to upload files)

	create: function(/*String*/fname, /*String*/onloadstr, /*String?*/uri){
		//	summary:
		//		Creates a hidden iframe in the page. Used mostly for IO
		//		transports.  You do not need to call this to start a
		//		dojo.io.iframe request. Just call send().
		//	fname: String
		//		The name of the iframe. Used for the name attribute on the
		//		iframe.
		//	onloadstr: String
		//		A string of JavaScript that will be executed when the content
		//		in the iframe loads.
		//	uri: String
		//		The value of the src attribute on the iframe element. If a
		//		value is not given, then dojo/resources/blank.html will be
		//		used.
		if(window[fname]){ return window[fname]; }
		if(window.frames[fname]){ return window.frames[fname]; }
		var turi = uri;
		if(!turi){
			if(dojo.config["useXDomain"] && !dojo.config["dojoBlankHtmlUrl"]){
				console.warn("dojo.io.iframe.create: When using cross-domain Dojo builds,"
					+ " please save dojo/resources/blank.html to your domain and set djConfig.dojoBlankHtmlUrl"
					+ " to the path on your domain to blank.html");
			}
			turi = (dojo.config["dojoBlankHtmlUrl"]||require.toUrl("../resources/blank.html"));
		}
		var cframe = dojo.place(
			'<iframe id="'+fname+'" name="'+fname+'" src="'+turi+'" onload="'+onloadstr+
			'" style="position: absolute; left: 1px; top: 1px; height: 1px; width: 1px; visibility: hidden">',
		dojo.body());

		window[fname] = cframe;

		return cframe;
	},

	setSrc: function(/*DOMNode*/iframe, /*String*/src, /*Boolean*/replace){
		//summary:
		//		Sets the URL that is loaded in an IFrame. The replace parameter
		//		indicates whether location.replace() should be used when
		//		changing the location of the iframe.
		try{
			if(!replace){
				if(dojo.isWebKit){
					iframe.location = src;
				}else{
					frames[iframe.name].location = src;
				}
			}else{
				// Fun with DOM 0 incompatibilities!
				var idoc;
				if(dojo.isIE || dojo.isWebKit){
					idoc = iframe.contentWindow.document;
				}else{ //  if(d.isMozilla){
					idoc = iframe.contentWindow;
				}

				//For Safari (at least 2.0.3) and Opera, if the iframe
				//has just been created but it doesn't have content
				//yet, then iframe.document may be null. In that case,
				//use iframe.location and return.
				if(!idoc){
					iframe.location = src;
				}else{
					idoc.location.replace(src);
				}
			}
		}catch(e){
			console.log("dojo.io.iframe.setSrc: ", e);
		}
	},

	doc: function(/*DOMNode*/iframeNode){
		//summary: Returns the document object associated with the iframe DOM Node argument.
		return iframeNode.contentDocument || // W3
			(
				(
					(iframeNode.name) && (iframeNode.document) &&
					(dojo.doc.getElementsByTagName("iframe")[iframeNode.name].contentWindow) &&
					(dojo.doc.getElementsByTagName("iframe")[iframeNode.name].contentWindow.document)
				)
			) ||  // IE
			(
				(iframeNode.name)&&(dojo.doc.frames[iframeNode.name])&&
				(dojo.doc.frames[iframeNode.name].document)
			) || null;
	},

	send: function(/*dojo.io.iframe.__ioArgs*/args){
		//summary:
		//		Function that sends the request to the server.
		//		This transport can only process one send() request at a time, so if send() is called
		//multiple times, it will queue up the calls and only process one at a time.
		if(!this["_frame"]){
			this._frame = this.create(this._iframeName, dojo._scopeName + ".io.iframe._iframeOnload();");
		}

		//Set up the deferred.
		var dfd = dojo._ioSetArgs(
			args,
			function(/*Deferred*/dfd){
				//summary: canceller function for dojo._ioSetArgs call.
				dfd.canceled = true;
				dfd.ioArgs._callNext();
			},
			function(/*Deferred*/dfd){
				//summary: okHandler function for dojo._ioSetArgs call.
				var value = null;
				try{
					var ioArgs = dfd.ioArgs;
					var dii = dojo.io.iframe;
					var ifd = dii.doc(dii._frame);
					var handleAs = ioArgs.handleAs;

					//Assign correct value based on handleAs value.
					value = ifd; //html
					if(handleAs != "html"){
						if(handleAs == "xml"){
							//	FF, Saf 3+ and Opera all seem to be fine with ifd being xml.  We have to
							//	do it manually for IE6-8.  Refs #6334.
							if(dojo.isIE < 9 || (dojo.isIE && dojo.isQuirks)){
								dojo.query("a", dii._frame.contentWindow.document.documentElement).orphan();
								var xmlText=(dii._frame.contentWindow.document).documentElement.innerText;
								xmlText=xmlText.replace(/>\s+</g, "><");
								xmlText=dojo.trim(xmlText);
								//Reusing some code in base dojo for handling XML content.  Simpler and keeps
								//Core from duplicating the effort needed to locate the XML Parser on IE.
								var fauxXhr = { responseText: xmlText };
								value = dojo._contentHandlers["xml"](fauxXhr); // DOMDocument
							}
						}else{
							value = ifd.getElementsByTagName("textarea")[0].value; //text
							if(handleAs == "json"){
								value = dojo.fromJson(value); //json
							}else if(handleAs == "javascript"){
								value = dojo.eval(value); //javascript
							}
						}
					}
				}catch(e){
					value = e;
				}finally{
					ioArgs._callNext();
				}
				return value;
			},
			function(/*Error*/error, /*Deferred*/dfd){
				//summary: errHandler function for dojo._ioSetArgs call.
				dfd.ioArgs._hasError = true;
				dfd.ioArgs._callNext();
				return error;
			}
		);

		//Set up a function that will fire the next iframe request. Make sure it only
		//happens once per deferred.
		dfd.ioArgs._callNext = function(){
			if(!this["_calledNext"]){
				this._calledNext = true;
				dojo.io.iframe._currentDfd = null;
				dojo.io.iframe._fireNextRequest();
			}
		};

		this._dfdQueue.push(dfd);
		this._fireNextRequest();

		//Add it the IO watch queue, to get things like timeout support.
		dojo._ioWatch(
			dfd,
			function(/*Deferred*/dfd){
				//validCheck
				return !dfd.ioArgs["_hasError"];
			},
			function(dfd){
				//ioCheck
				return (!!dfd.ioArgs["_finished"]);
			},
			function(dfd){
				//resHandle
				if(dfd.ioArgs._finished){
					dfd.callback(dfd);
				}else{
					dfd.errback(new Error("Invalid dojo.io.iframe request state"));
				}
			}
		);

		return dfd;
	},

	_currentDfd: null,
	_dfdQueue: [],
	_iframeName: dojo._scopeName + "IoIframe",

	_fireNextRequest: function(){
		//summary: Internal method used to fire the next request in the bind queue.
		try{
			if((this._currentDfd)||(this._dfdQueue.length == 0)){ return; }
			//Find next deferred, skip the canceled ones.
			do{
				var dfd = this._currentDfd = this._dfdQueue.shift();
			} while(dfd && dfd.canceled && this._dfdQueue.length);

			//If no more dfds, cancel.
			if(!dfd || dfd.canceled){
				this._currentDfd =  null;
				return;
			}

			var ioArgs = dfd.ioArgs;
			var args = ioArgs.args;

			ioArgs._contentToClean = [];
			var fn = dojo.byId(args["form"]);
			var content = args["content"] || {};
			if(fn){
				if(content){
					// if we have things in content, we need to add them to the form
					// before submission
					var pHandler = function(name, value) {
						dojo.create("input", {type: "hidden", name: name, value: value}, fn);
						ioArgs._contentToClean.push(name);
					};
					for(var x in content){
						var val = content[x];
						if(dojo.isArray(val) && val.length > 1){
							var i;
							for (i = 0; i < val.length; i++) {
								pHandler(x,val[i]);
							}
						}else{
							if(!fn[x]){
								pHandler(x,val);
							}else{
								fn[x].value = val;
							}
						}
					}
				}
				//IE requires going through getAttributeNode instead of just getAttribute in some form cases,
				//so use it for all.  See #2844
				var actnNode = fn.getAttributeNode("action");
				var mthdNode = fn.getAttributeNode("method");
				var trgtNode = fn.getAttributeNode("target");
				if(args["url"]){
					ioArgs._originalAction = actnNode ? actnNode.value : null;
					if(actnNode){
						actnNode.value = args.url;
					}else{
						fn.setAttribute("action",args.url);
					}
				}
				if(!mthdNode || !mthdNode.value){
					if(mthdNode){
						mthdNode.value= (args["method"]) ? args["method"] : "post";
					}else{
						fn.setAttribute("method", (args["method"]) ? args["method"] : "post");
					}
				}
				ioArgs._originalTarget = trgtNode ? trgtNode.value: null;
				if(trgtNode){
					trgtNode.value = this._iframeName;
				}else{
					fn.setAttribute("target", this._iframeName);
				}
				fn.target = this._iframeName;
				dojo._ioNotifyStart(dfd);
				fn.submit();
			}else{
				// otherwise we post a GET string by changing URL location for the
				// iframe
				var tmpUrl = args.url + (args.url.indexOf("?") > -1 ? "&" : "?") + ioArgs.query;
				dojo._ioNotifyStart(dfd);
				this.setSrc(this._frame, tmpUrl, true);
			}
		}catch(e){
			dfd.errback(e);
		}
	},

	_iframeOnload: function(){
		var dfd = this._currentDfd;
		if(!dfd){
			this._fireNextRequest();
			return;
		}

		var ioArgs = dfd.ioArgs;
		var args = ioArgs.args;
		var fNode = dojo.byId(args.form);

		if(fNode){
			// remove all the hidden content inputs
			var toClean = ioArgs._contentToClean;
			for(var i = 0; i < toClean.length; i++) {
				var key = toClean[i];
				//Need to cycle over all nodes since we may have added
				//an array value which means that more than one node could
				//have the same .name value.
				for(var j = 0; j < fNode.childNodes.length; j++){
					var chNode = fNode.childNodes[j];
					if(chNode.name == key){
						dojo.destroy(chNode);
						break;
					}
				}
			}

			// restore original action + target
			if(ioArgs["_originalAction"]){
				fNode.setAttribute("action", ioArgs._originalAction);
			}
			if(ioArgs["_originalTarget"]){
				fNode.setAttribute("target", ioArgs._originalTarget);
				fNode.target = ioArgs._originalTarget;
			}
		}

		ioArgs._finished = true;
	}
};

return dojo.io.iframe;
});

},
'curam/layout/CuramTabContainer':function(){
/*
 * Copyright 2010 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.layout.CuramTabContainer
 * @namespace Customized dijit.layout.TabContainer class that uses
 *    our customized curam.layout.ScrollingTabController.
 * 
 */
define("curam/layout/CuramTabContainer", ["dijit/layout/TabContainer",
        "curam/layout/ScrollingTabController"
        ], function(TabContainer) {
/*
 * Modification History
 * --------------------
 * 02-May-2012  MK [CR00323691] Use new Dojo AMD format.
 * 22-Nov-2010  MV [CR00231655] Replaced the compressed version with the proper
 *    source.
 */

var CuramTabContainer = dojo.declare("curam.layout.CuramTabContainer", TabContainer,
/**
 * @lends curam.layout.CuramTabContainer.prototype
 */
{
  postMixInProperties: function() {
    // Scrolling controller only works for horizontal non-nested tabs
    if(!this.controllerWidget){
      this.controllerWidget = (this.tabPosition == "top" || this.tabPosition == "bottom") && !this.nested ?
            "curam.layout.ScrollingTabController" : "dijit.layout.TabController";
    }

    this.inherited(arguments);
  }
});

return CuramTabContainer;

});

},
'curam/layout/AccordionContainer':function(){
/*
 * Copyright 2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/layout/AccordionContainer", ["dijit/layout/AccordionContainer",
       "dojo/dom-geometry", 
       "dojo/_base/array",
       "dojo/_base/sniff", // has("ie")
       "dojo/_base/fx" // fx.Animation
       ], function(ac, domGeometry, array, has, fx) {        
  
  /*
   * Modification History
   * --------------------
   * 30-Nov-2012  MK [CR00355664] Fix issue with vertical scrollbars appearing.
   * 11-Sep-2012  MK [CR00344397] Reapply customisation after Dojo 1.7 upgrade.  
   * 05-Aug-2011  KW [CR00283477] Initial version
   */

  /**
   * @name curam.layout.AccordionContainer
   * @namespace Extended dijit.layout.AccordionContainer class in order to change the
   * behavior when there are more Shortcut Panel tiles than can fit in the
   * available visible area.
   */
  var AccordionContainer = dojo.declare("curam.layout.AccordionContainer",
      dijit.layout.AccordionContainer,
    /**
     * @lends curam.layout.AccordionContainer
     */
  {
  
    layout: function(){      
      // Implement _LayoutWidget.layout() virtual method.
      // Set the height of the open pane based on what room remains.
      var openPane = this.selectedChildWidget;

      if(!openPane){ return;}

      // space taken up by title, plus wrapper div (with border/margin) for open pane
      var wrapperDomNode = openPane._wrapperWidget.domNode,
        wrapperDomNodeMargin = domGeometry.getMarginExtents(wrapperDomNode),
        wrapperDomNodePadBorder = domGeometry.getPadBorderExtents(wrapperDomNode),
        wrapperContainerNode = openPane._wrapperWidget.containerNode,
        wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode),
        wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode),
        mySize = this._contentBox;

      // get cumulative height of all the unselected title bars          
      var totalCollapsedHeight = 0;           
      //>>> modification start
      // Replace the block of the below with previous Dojo 1.4 method of calculation.
      
      //array.forEach(this.getChildren(), function(child){
      //  if(child != openPane){
          // Using domGeometry.getMarginSize() rather than domGeometry.position() since claro has 1px bottom margin
          // to separate accordion panes.  Not sure that works perfectly, it's probably putting a 1px
          // margin below the bottom pane (even though we don't want one).
      //    totalCollapsedHeight += domGeometry.getMarginSize(child._wrapperWidget.domNode).h;
      //  }
      //});
                  
      array.forEach(this.getChildren(), function(child){
        totalCollapsedHeight += child._buttonWidget.getTitleHeight();
      });      
      //>>> modification end
        
      //>>> modification start
      // The openPaneRequiredSpace is used instead of _verticalSpace.
      //this._verticalSpace = mySize.h - totalCollapsedHeight - wrapperDomNodeMargin.h
      //        - wrapperDomNodePadBorder.h - wrapperContainerNodeMargin.h - wrapperContainerNodePadBorder.h
      //        - openPane._buttonWidget.getTitleHeight();
      //>>> modification end

      
      //>>> addition start
      // Determine the amount of vertical space that the pane should occupy.
      // We want to take up the max amount of space such that a vertical
      // scrollbar will not appear.
      var openPaneRequiredSpace = openPane.containerNode.childNodes[0].offsetHeight + 20;
      
      if (totalCollapsedHeight + openPaneRequiredSpace < this._contentBox.h) {
        openPaneRequiredSpace = this._contentBox.h - totalCollapsedHeight;
      }
      //>>> addition end
      
      // Memo size to make displayed child
      this._containerContentBox = {
        //>>> modification start
        // Use openPaneRequiredSpace instead of this._verticalSpace
        h: openPaneRequiredSpace,              
        //>>> modification end
        w: this._contentBox.w - wrapperDomNodeMargin.w - wrapperDomNodePadBorder.w
          - wrapperContainerNodeMargin.w - wrapperContainerNodePadBorder.w
      };

      if(openPane){
        openPane.resize(this._containerContentBox);
      }           
  },

  _transition: function(/*dijit._Widget?*/ newWidget, /*dijit._Widget?*/ oldWidget, /*Boolean*/ animate){    
    // Overrides StackContainer._transition() to provide sliding of title bars etc.
  
    if(has("ie") < 8){
      // workaround animation bugs by not animating; not worth supporting animation for IE6 & 7
      animate = false;
    }
  
    if(this._animation){
      // there's an in-progress animation.  speedily end it so we can do the newly requested one
      this._animation.stop(true);
      delete this._animation;
    }
  
    var self = this;
    
    if(newWidget){
      newWidget._wrapperWidget.set("selected", true);
          
      newWidget.resize({h:0 , w: this._containerContentBox.w});
      var d = this._showChild(newWidget);     // prepare widget to be slid in
  
      // Size the new widget, in case this is the first time it's being shown,
      // or I have been resized since the last time it was shown.
      // Note that page must be visible for resizing to work.
      if(this.doLayout && newWidget.resize){        
        //>>> addition start
        var openPaneRequiredSpace = newWidget.containerNode.childNodes[0].offsetHeight + 20;
        
        var totalCollapsedHeight = 0;                   
        dojo.forEach(this.getChildren(), function(child){
          totalCollapsedHeight += child._buttonWidget.getTitleHeight();
        });
              
        this._containerContentBox.h = this._contentBox.h - totalCollapsedHeight;                     
        if (this._containerContentBox.h < openPaneRequiredSpace){
          this._containerContentBox.h = openPaneRequiredSpace;
        }
        this._verticalSpace = this._containerContentBox.h;
        //>>> addition end.
              
        newWidget.resize(this._containerContentBox);
      }      
    }
      
    if(oldWidget){
      oldWidget._wrapperWidget.set("selected", false);
      if(!animate){
        this._hideChild(oldWidget);
      }
    }
  
    if(animate){
      var newContents = newWidget._wrapperWidget.containerNode,
              oldContents = oldWidget._wrapperWidget.containerNode;

      // During the animation we will be showing two dijitAccordionChildWrapper nodes at once,
      // which on claro takes up 4px extra space (compared to stable AccordionContainer).
      // Have to compensate for that by immediately shrinking the pane being closed.
      var wrapperContainerNode = newWidget._wrapperWidget.containerNode,
              wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode),
              wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode),
              animationHeightOverhead = wrapperContainerNodeMargin.h + wrapperContainerNodePadBorder.h;              

      oldContents.style.height = (self._verticalSpace - animationHeightOverhead) + "px";
           
      this._animation = new fx.Animation({
              node: newContents,
              duration: this.duration,
              curve: [1, this._verticalSpace - animationHeightOverhead - 1],
              onAnimate: function(value){
                      value = Math.floor(value);      // avoid fractional values
                      newContents.style.height = value + "px";
                      oldContents.style.height = (self._verticalSpace - animationHeightOverhead - value - 1) + "px";
              },
              onEnd: function(){
                      delete self._animation;
                      newContents.style.height = "auto";
                      
                      //>>> modification start
                      // Need to remove these lines. Executing them causes the 
                      // 2px margin-top to disappear in IE8.
                      //oldWidget._wrapperWidget.containerNode.style.display = "none";
                      //oldContents.style.height = "auto";
                      //self._hideChild(oldWidget);
                      //>>> modification end
                      
                      //>>> addition start
                      oldContents.style.height = "0px";
                      //>>> addition start
              }
      });
      this._animation.onStop = this._animation.onEnd;
      this._animation.play();
    }
  
    return d;       // If child has an href, promise that fires when the widget has finished loading
  }});
  
  return AccordionContainer;
});

},
'url:curam/widget/templates/DropDownButton.html':"<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\" role=\"presentation\"\n/></span>\n",
'dijit/form/_FormSelectWidget':function(){
define("dijit/form/_FormSelectWidget", [
	"dojo/_base/array", // array.filter array.forEach array.map array.some
	"dojo/aspect", // aspect.after
	"dojo/data/util/sorter", // util.sorter.createSortFunction
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.setSelectable
	"dojo/dom-class", // domClass.toggle
	"dojo/_base/kernel",	// _scopeName
	"dojo/_base/lang", // lang.delegate lang.isArray lang.isObject lang.hitch
	"dojo/query", // query
	"./_FormValueWidget"
], function(array, aspect, sorter, declare, dom, domClass, kernel, lang, query, _FormValueWidget){

/*=====
	var _FormValueWidget = dijit.form._FormValueWidget;
=====*/

// module:
//		dijit/form/_FormSelectWidget
// summary:
//		Extends _FormValueWidget in order to provide "select-specific"
//		values - i.e., those values that are unique to <select> elements.


/*=====
dijit.form.__SelectOption = function(){
	// value: String
	//		The value of the option.  Setting to empty (or missing) will
	//		place a separator at that location
	// label: String
	//		The label for our option.  It can contain html tags.
	// selected: Boolean
	//		Whether or not we are a selected option
	// disabled: Boolean
	//		Whether or not this specific option is disabled
	this.value = value;
	this.label = label;
	this.selected = selected;
	this.disabled = disabled;
}
=====*/

return declare("dijit.form._FormSelectWidget", _FormValueWidget, {
	// summary:
	//		Extends _FormValueWidget in order to provide "select-specific"
	//		values - i.e., those values that are unique to <select> elements.
	//		This also provides the mechanism for reading the elements from
	//		a store, if desired.

	// multiple: [const] Boolean
	//		Whether or not we are multi-valued
	multiple: false,

	// options: dijit.form.__SelectOption[]
	//		The set of options for our select item.  Roughly corresponds to
	//		the html <option> tag.
	options: null,

	// store: dojo.data.api.Identity
	//		A store which, at the very least implements dojo.data.api.Identity
	//		to use for getting our list of options - rather than reading them
	//		from the <option> html tags.
	store: null,

	// query: object
	//		A query to use when fetching items from our store
	query: null,

	// queryOptions: object
	//		Query options to use when fetching from the store
	queryOptions: null,

	// onFetch: Function
	//		A callback to do with an onFetch - but before any items are actually
	//		iterated over (i.e. to filter even further what you want to add)
	onFetch: null,

	// sortByLabel: Boolean
	//		Flag to sort the options returned from a store by the label of
	//		the store.
	sortByLabel: true,


	// loadChildrenOnOpen: Boolean
	//		By default loadChildren is called when the items are fetched from the
	//		store.  This property allows delaying loadChildren (and the creation
	//		of the options/menuitems) until the user clicks the button to open the
	//		dropdown.
	loadChildrenOnOpen: false,

	getOptions: function(/*anything*/ valueOrIdx){
		// summary:
		//		Returns a given option (or options).
		// valueOrIdx:
		//		If passed in as a string, that string is used to look up the option
		//		in the array of options - based on the value property.
		//		(See dijit.form.__SelectOption).
		//
		//		If passed in a number, then the option with the given index (0-based)
		//		within this select will be returned.
		//
		//		If passed in a dijit.form.__SelectOption, the same option will be
		//		returned if and only if it exists within this select.
		//
		//		If passed an array, then an array will be returned with each element
		//		in the array being looked up.
		//
		//		If not passed a value, then all options will be returned
		//
		// returns:
		//		The option corresponding with the given value or index.  null
		//		is returned if any of the following are true:
		//			- A string value is passed in which doesn't exist
		//			- An index is passed in which is outside the bounds of the array of options
		//			- A dijit.form.__SelectOption is passed in which is not a part of the select

		// NOTE: the compare for passing in a dijit.form.__SelectOption checks
		//		if the value property matches - NOT if the exact option exists
		// NOTE: if passing in an array, null elements will be placed in the returned
		//		array when a value is not found.
		var lookupValue = valueOrIdx, opts = this.options || [], l = opts.length;

		if(lookupValue === undefined){
			return opts; // dijit.form.__SelectOption[]
		}
		if(lang.isArray(lookupValue)){
			return array.map(lookupValue, "return this.getOptions(item);", this); // dijit.form.__SelectOption[]
		}
		if(lang.isObject(valueOrIdx)){
			// We were passed an option - so see if it's in our array (directly),
			// and if it's not, try and find it by value.
			if(!array.some(this.options, function(o, idx){
				if(o === lookupValue ||
					(o.value && o.value === lookupValue.value)){
					lookupValue = idx;
					return true;
				}
				return false;
			})){
				lookupValue = -1;
			}
		}
		if(typeof lookupValue == "string"){
			for(var i=0; i<l; i++){
				if(opts[i].value === lookupValue){
					lookupValue = i;
					break;
				}
			}
		}
		if(typeof lookupValue == "number" && lookupValue >= 0 && lookupValue < l){
			return this.options[lookupValue]; // dijit.form.__SelectOption
		}
		return null; // null
	},

	addOption: function(/*dijit.form.__SelectOption|dijit.form.__SelectOption[]*/ option){
		// summary:
		//		Adds an option or options to the end of the select.  If value
		//		of the option is empty or missing, a separator is created instead.
		//		Passing in an array of options will yield slightly better performance
		//		since the children are only loaded once.
		if(!lang.isArray(option)){ option = [option]; }
		array.forEach(option, function(i){
			if(i && lang.isObject(i)){
				this.options.push(i);
			}
		}, this);
		this._loadChildren();
	},

	removeOption: function(/*String|dijit.form.__SelectOption|Number|Array*/ valueOrIdx){
		// summary:
		//		Removes the given option or options.  You can remove by string
		//		(in which case the value is removed), number (in which case the
		//		index in the options array is removed), or select option (in
		//		which case, the select option with a matching value is removed).
		//		You can also pass in an array of those values for a slightly
		//		better performance since the children are only loaded once.
		if(!lang.isArray(valueOrIdx)){ valueOrIdx = [valueOrIdx]; }
		var oldOpts = this.getOptions(valueOrIdx);
		array.forEach(oldOpts, function(i){
			// We can get null back in our array - if our option was not found.  In
			// that case, we don't want to blow up...
			if(i){
				this.options = array.filter(this.options, function(node){
					return (node.value !== i.value || node.label !== i.label);
				});
				this._removeOptionItem(i);
			}
		}, this);
		this._loadChildren();
	},

	updateOption: function(/*dijit.form.__SelectOption|dijit.form.__SelectOption[]*/ newOption){
		// summary:
		//		Updates the values of the given option.  The option to update
		//		is matched based on the value of the entered option.  Passing
		//		in an array of new options will yield better performance since
		//		the children will only be loaded once.
		if(!lang.isArray(newOption)){ newOption = [newOption]; }
		array.forEach(newOption, function(i){
			var oldOpt = this.getOptions(i), k;
			if(oldOpt){
				for(k in i){ oldOpt[k] = i[k]; }
			}
		}, this);
		this._loadChildren();
	},

	setStore: function(/*dojo.data.api.Identity*/ store,
						/*anything?*/ selectedValue,
						/*Object?*/ fetchArgs){
		// summary:
		//		Sets the store you would like to use with this select widget.
		//		The selected value is the value of the new store to set.  This
		//		function returns the original store, in case you want to reuse
		//		it or something.
		// store: dojo.data.api.Identity
		//		The store you would like to use - it MUST implement dojo.data.api.Identity,
		//		and MAY implement dojo.data.api.Notification.
		// selectedValue: anything?
		//		The value that this widget should set itself to *after* the store
		//		has been loaded
		// fetchArgs: Object?
		//		The arguments that will be passed to the store's fetch() function
		var oStore = this.store;
		fetchArgs = fetchArgs || {};
		if(oStore !== store){
			// Our store has changed, so update our notifications
			var h;
			while(h = this._notifyConnections.pop()){ h.remove(); }

			if(store && store.getFeatures()["dojo.data.api.Notification"]){
				this._notifyConnections = [
					aspect.after(store, "onNew", lang.hitch(this, "_onNewItem"), true),
					aspect.after(store, "onDelete", lang.hitch(this, "_onDeleteItem"), true),
					aspect.after(store, "onSet", lang.hitch(this, "_onSetItem"), true)
				];
			}
			this._set("store", store);
		}

		// Turn off change notifications while we make all these changes
		this._onChangeActive = false;

		// Remove existing options (if there are any)
		if(this.options && this.options.length){
			this.removeOption(this.options);
		}

		// Add our new options
		if(store){
			this._loadingStore = true;
			store.fetch(lang.delegate(fetchArgs, {
				onComplete: function(items, opts){
					if(this.sortByLabel && !fetchArgs.sort && items.length){
						items.sort(sorter.createSortFunction([{
							attribute: store.getLabelAttributes(items[0])[0]
						}], store));
					}

					if(fetchArgs.onFetch){
							items = fetchArgs.onFetch.call(this, items, opts);
					}
					// TODO: Add these guys as a batch, instead of separately
					array.forEach(items, function(i){
						this._addOptionForItem(i);
					}, this);

					// Set our value (which might be undefined), and then tweak
					// it to send a change event with the real value
					this._loadingStore = false;
						this.set("value", "_pendingValue" in this ? this._pendingValue : selectedValue);
					delete this._pendingValue;

					if(!this.loadChildrenOnOpen){
						this._loadChildren();
					}else{
						this._pseudoLoadChildren(items);
					}
					this._fetchedWith = opts;
					this._lastValueReported = this.multiple ? [] : null;
					this._onChangeActive = true;
					this.onSetStore();
					this._handleOnChange(this.value);
				},
				scope: this
			}));
		}else{
			delete this._fetchedWith;
		}
		return oStore;	// dojo.data.api.Identity
	},

	// TODO: implement set() and watch() for store and query, although not sure how to handle
	// setting them individually rather than together (as in setStore() above)

	_setValueAttr: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
		// summary:
		//		set the value of the widget.
		//		If a string is passed, then we set our value from looking it up.
		if(this._loadingStore){
			// Our store is loading - so save our value, and we'll set it when
			// we're done
			this._pendingValue = newValue;
			return;
		}
		var opts = this.getOptions() || [];
		if(!lang.isArray(newValue)){
			newValue = [newValue];
		}
		array.forEach(newValue, function(i, idx){
			if(!lang.isObject(i)){
				i = i + "";
			}
			if(typeof i === "string"){
				newValue[idx] = array.filter(opts, function(node){
					return node.value === i;
				})[0] || {value: "", label: ""};
			}
		}, this);

		// Make sure some sane default is set
		newValue = array.filter(newValue, function(i){ return i && i.value; });
		if(!this.multiple && (!newValue[0] || !newValue[0].value) && opts.length){
			newValue[0] = opts[0];
		}
		array.forEach(opts, function(i){
			i.selected = array.some(newValue, function(v){ return v.value === i.value; });
		});
		var val = array.map(newValue, function(i){ return i.value; }),
			disp = array.map(newValue, function(i){ return i.label; });

		this._set("value", this.multiple ? val : val[0]);
		this._setDisplay(this.multiple ? disp : disp[0]);
		this._updateSelection();
		this._handleOnChange(this.value, priorityChange);
	},

	_getDisplayedValueAttr: function(){
		// summary:
		//		returns the displayed value of the widget
		var val = this.get("value");
		if(!lang.isArray(val)){
			val = [val];
		}
		var ret = array.map(this.getOptions(val), function(v){
			if(v && "label" in v){
				return v.label;
			}else if(v){
				return v.value;
			}
			return null;
		}, this);
		return this.multiple ? ret : ret[0];
	},

	_loadChildren: function(){
		// summary:
		//		Loads the children represented by this widget's options.
		//		reset the menu to make it populatable on the next click
		if(this._loadingStore){ return; }
		array.forEach(this._getChildren(), function(child){
			child.destroyRecursive();
		});
		// Add each menu item
		array.forEach(this.options, this._addOptionItem, this);

		// Update states
		this._updateSelection();
	},

	_updateSelection: function(){
		// summary:
		//		Sets the "selected" class on the item for styling purposes
		this._set("value", this._getValueFromOpts());
		var val = this.value;
		if(!lang.isArray(val)){
			val = [val];
		}
		if(val && val[0]){
			array.forEach(this._getChildren(), function(child){
				var isSelected = array.some(val, function(v){
					return child.option && (v === child.option.value);
				});
				domClass.toggle(child.domNode, this.baseClass + "SelectedOption", isSelected);
				child.domNode.setAttribute("aria-selected", isSelected);
			}, this);
		}
	},

	_getValueFromOpts: function(){
		// summary:
		//		Returns the value of the widget by reading the options for
		//		the selected flag
		var opts = this.getOptions() || [];
		if(!this.multiple && opts.length){
			// Mirror what a select does - choose the first one
			var opt = array.filter(opts, function(i){
				return i.selected;
			})[0];
			if(opt && opt.value){
				return opt.value
			}else{
				opts[0].selected = true;
				return opts[0].value;
			}
		}else if(this.multiple){
			// Set value to be the sum of all selected
			return array.map(array.filter(opts, function(i){
				return i.selected;
			}), function(i){
				return i.value;
			}) || [];
		}
		return "";
	},

	// Internal functions to call when we have store notifications come in
	_onNewItem: function(/*item*/ item, /*Object?*/ parentInfo){
		if(!parentInfo || !parentInfo.parent){
			// Only add it if we are top-level
			this._addOptionForItem(item);
		}
	},
	_onDeleteItem: function(/*item*/ item){
		var store = this.store;
		this.removeOption(store.getIdentity(item));
	},
	_onSetItem: function(/*item*/ item){
		this.updateOption(this._getOptionObjForItem(item));
	},

	_getOptionObjForItem: function(item){
		// summary:
		//		Returns an option object based off the given item.  The "value"
		//		of the option item will be the identity of the item, the "label"
		//		of the option will be the label of the item.  If the item contains
		//		children, the children value of the item will be set
		var store = this.store, label = store.getLabel(item),
			value = (label ? store.getIdentity(item) : null);
		return {value: value, label: label, item:item}; // dijit.form.__SelectOption
	},

	_addOptionForItem: function(/*item*/ item){
		// summary:
		//		Creates (and adds) the option for the given item
		var store = this.store;
		if(!store.isItemLoaded(item)){
			// We are not loaded - so let's load it and add later
			store.loadItem({item: item, onItem: function(i){
				this._addOptionForItem(i);
			},
			scope: this});
			return;
		}
		var newOpt = this._getOptionObjForItem(item);
		this.addOption(newOpt);
	},

	constructor: function(/*Object*/ keywordArgs){
		// summary:
		//		Saves off our value, if we have an initial one set so we
		//		can use it if we have a store as well (see startup())
		this._oValue = (keywordArgs || {}).value || null;
		this._notifyConnections = [];
	},

	buildRendering: function(){
		this.inherited(arguments);
		dom.setSelectable(this.focusNode, false);
	},

	_fillContent: function(){
		// summary:
		//		Loads our options and sets up our dropdown correctly.  We
		//		don't want any content, so we don't call any inherit chain
		//		function.
		var opts = this.options;
		if(!opts){
			opts = this.options = this.srcNodeRef ? query("> *",
						this.srcNodeRef).map(function(node){
							if(node.getAttribute("type") === "separator"){
								return { value: "", label: "", selected: false, disabled: false };
							}
							return {
								value: (node.getAttribute("data-" + kernel._scopeName + "-value") || node.getAttribute("value")),
										label: String(node.innerHTML),
								// FIXME: disabled and selected are not valid on complex markup children (which is why we're
								// looking for data-dojo-value above.  perhaps we should data-dojo-props="" this whole thing?)
								// decide before 1.6
										selected: node.getAttribute("selected") || false,
								disabled: node.getAttribute("disabled") || false
							};
						}, this) : [];
		}
		if(!this.value){
			this._set("value", this._getValueFromOpts());
		}else if(this.multiple && typeof this.value == "string"){
			this._set("value", this.value.split(","));
		}
	},

	postCreate: function(){
		// summary:
		//		sets up our event handling that we need for functioning
		//		as a select
		this.inherited(arguments);

		// Make our event connections for updating state
		this.connect(this, "onChange", "_updateSelection");
		this.connect(this, "startup", "_loadChildren");

		this._setValueAttr(this.value, null);
	},

	startup: function(){
		// summary:
		//		Connects in our store, if we have one defined
		this.inherited(arguments);
		var store = this.store, fetchArgs = {};
		array.forEach(["query", "queryOptions", "onFetch"], function(i){
			if(this[i]){
				fetchArgs[i] = this[i];
			}
			delete this[i];
		}, this);
		if(store && store.getFeatures()["dojo.data.api.Identity"]){
			// Temporarily set our store to null so that it will get set
			// and connected appropriately
			this.store = null;
			this.setStore(store, this._oValue, fetchArgs);
		}
	},

	destroy: function(){
		// summary:
		//		Clean up our connections
		var h;
		while(h = this._notifyConnections.pop()){ h.remove(); }
		this.inherited(arguments);
	},

	_addOptionItem: function(/*dijit.form.__SelectOption*/ /*===== option =====*/){
		// summary:
		//		User-overridable function which, for the given option, adds an
		//		item to the select.  If the option doesn't have a value, then a
		//		separator is added in that place.  Make sure to store the option
		//		in the created option widget.
	},

	_removeOptionItem: function(/*dijit.form.__SelectOption*/ /*===== option =====*/){
		// summary:
		//		User-overridable function which, for the given option, removes
		//		its item from the select.
	},

	_setDisplay: function(/*String or String[]*/ /*===== newDisplay =====*/){
		// summary:
		//		Overridable function which will set the display for the
		//		widget.  newDisplay is either a string (in the case of
		//		single selects) or array of strings (in the case of multi-selects)
	},

	_getChildren: function(){
		// summary:
		//		Overridable function to return the children that this widget contains.
		return [];
	},

	_getSelectedOptionsAttr: function(){
		// summary:
		//		hooks into this.attr to provide a mechanism for getting the
		//		option items for the current value of the widget.
		return this.getOptions(this.get("value"));
	},

	_pseudoLoadChildren: function(/*item[]*/ /*===== items =====*/){
		// summary:
		//		a function that will "fake" loading children, if needed, and
		//		if we have set to not load children until the widget opens.
		// items:
		//		An array of items that will be loaded, when needed
	},

	onSetStore: function(){
		// summary:
		//		a function that can be connected to in order to receive a
		//		notification that the store has finished loading and all options
		//		from that store are available
	}
});

});

},
'dijit/form/_ComboBoxMenu':function(){
define("dijit/form/_ComboBoxMenu", [
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.add domClass.remove
	"dojo/dom-construct", // domConstruct.create
	"dojo/dom-style", // domStyle.get
	"dojo/keys", // keys.DOWN_ARROW keys.PAGE_DOWN keys.PAGE_UP keys.UP_ARROW
	"../_WidgetBase",
	"../_TemplatedMixin",
	"./_ComboBoxMenuMixin",
	"./_ListMouseMixin"
], function(declare, domClass, domConstruct, domStyle, keys,
			_WidgetBase, _TemplatedMixin, _ComboBoxMenuMixin, _ListMouseMixin){

/*=====
	var _WidgetBase = dijit._WidgetBase;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _ComboBoxMenuMixin = dijit.form._ComboBoxMenuMixin;
	var _ListMouseMixin = dijit.form._ListMouseMixin;
=====*/

	// module:
	//		dijit/form/_ComboBoxMenu
	// summary:
	//		Focus-less menu for internal use in `dijit.form.ComboBox`

	return declare("dijit.form._ComboBoxMenu",[_WidgetBase, _TemplatedMixin, _ListMouseMixin, _ComboBoxMenuMixin], {
		// summary:
		//		Focus-less menu for internal use in `dijit.form.ComboBox`
		//              Abstract methods that must be defined externally:
		//                      onChange: item was explicitly chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)
		//                      onPage: next(1) or previous(-1) button pressed
		// tags:
		//		private

		templateString: "<div class='dijitReset dijitMenu' data-dojo-attach-point='containerNode' style='overflow: auto; overflow-x: hidden;'>"
				+"<div class='dijitMenuItem dijitMenuPreviousButton' data-dojo-attach-point='previousButton' role='option'></div>"
				+"<div class='dijitMenuItem dijitMenuNextButton' data-dojo-attach-point='nextButton' role='option'></div>"
				+"</div>",

		baseClass: "dijitComboBoxMenu",

		postCreate: function(){
			this.inherited(arguments);
			if(!this.isLeftToRight()){
				domClass.add(this.previousButton, "dijitMenuItemRtl");
				domClass.add(this.nextButton, "dijitMenuItemRtl");
			}
		},

		_createMenuItem: function(){
			return domConstruct.create("div", {
				"class": "dijitReset dijitMenuItem" +(this.isLeftToRight() ? "" : " dijitMenuItemRtl"),
				role: "option"
			});
		},

		onHover: function(/*DomNode*/ node){
			// summary:
			//		Add hover CSS
			domClass.add(node, "dijitMenuItemHover");
		},

		onUnhover: function(/*DomNode*/ node){
			// summary:
			//		Remove hover CSS
			domClass.remove(node, "dijitMenuItemHover");
		},

		onSelect: function(/*DomNode*/ node){
			// summary:
			//		Add selected CSS
			domClass.add(node, "dijitMenuItemSelected");
		},

		onDeselect: function(/*DomNode*/ node){
			// summary:
			//		Remove selected CSS
			domClass.remove(node, "dijitMenuItemSelected");
		},

		_page: function(/*Boolean*/ up){
			// summary:
			//		Handles page-up and page-down keypresses

			var scrollamount = 0;
			var oldscroll = this.domNode.scrollTop;
			var height = domStyle.get(this.domNode, "height");
			// if no item is highlighted, highlight the first option
			if(!this.getHighlightedOption()){
				this.selectNextNode();
			}
			while(scrollamount<height){
				var highlighted_option = this.getHighlightedOption();
				if(up){
					// stop at option 1
					if(!highlighted_option.previousSibling ||
						highlighted_option.previousSibling.style.display == "none"){
						break;
					}
					this.selectPreviousNode();
				}else{
					// stop at last option
					if(!highlighted_option.nextSibling ||
						highlighted_option.nextSibling.style.display == "none"){
						break;
					}
					this.selectNextNode();
				}
				// going backwards
				var newscroll = this.domNode.scrollTop;
				scrollamount += (newscroll-oldscroll)*(up ? -1:1);
				oldscroll = newscroll;
			}
		},

		handleKey: function(evt){
			// summary:
			//		Handle keystroke event forwarded from ComboBox, returning false if it's
			//		a keystroke I recognize and process, true otherwise.
			switch(evt.charOrCode){
				case keys.DOWN_ARROW:
					this.selectNextNode();
					return false;
				case keys.PAGE_DOWN:
					this._page(false);
					return false;
				case keys.UP_ARROW:
					this.selectPreviousNode();
					return false;
				case keys.PAGE_UP:
					this._page(true);
					return false;
				default:
					return true;
			}
		}
	});
});

},
'dijit/layout/_TabContainerBase':function(){
require({cache:{
'url:dijit/layout/templates/TabContainer.html':"<div class=\"dijitTabContainer\">\n\t<div class=\"dijitTabListWrapper\" data-dojo-attach-point=\"tablistNode\"></div>\n\t<div data-dojo-attach-point=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer\"></div>\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container\" data-dojo-attach-point=\"containerNode\"></div>\n</div>\n"}});
define("dijit/layout/_TabContainerBase", [
	"dojo/text!./templates/TabContainer.html",
	"./StackContainer",
	"./utils",	// marginBox2contextBox, layoutChildren
	"../_TemplatedMixin",
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.add
	"dojo/dom-geometry", // domGeometry.contentBox
	"dojo/dom-style" // domStyle.style
], function(template, StackContainer, layoutUtils, _TemplatedMixin, declare, domClass, domGeometry, domStyle){


/*=====
	var StackContainer = dijit.layout.StackContainer;
	var _TemplatedMixin = dijit._TemplatedMixin;
=====*/

// module:
//		dijit/layout/_TabContainerBase
// summary:
//		Abstract base class for TabContainer.   Must define _makeController() to instantiate
//		and return the widget that displays the tab labels


return declare("dijit.layout._TabContainerBase", [StackContainer, _TemplatedMixin], {
	// summary:
	//		Abstract base class for TabContainer.   Must define _makeController() to instantiate
	//		and return the widget that displays the tab labels
	// description:
	//		A TabContainer is a container that has multiple panes, but shows only
	//		one pane at a time.  There are a set of tabs corresponding to each pane,
	//		where each tab has the name (aka title) of the pane, and optionally a close button.

	// tabPosition: String
	//		Defines where tabs go relative to tab content.
	//		"top", "bottom", "left-h", "right-h"
	tabPosition: "top",

	baseClass: "dijitTabContainer",

	// tabStrip: [const] Boolean
	//		Defines whether the tablist gets an extra class for layouting, putting a border/shading
	//		around the set of tabs.   Not supported by claro theme.
	tabStrip: false,

	// nested: [const] Boolean
	//		If true, use styling for a TabContainer nested inside another TabContainer.
	//		For tundra etc., makes tabs look like links, and hides the outer
	//		border since the outer TabContainer already has a border.
	nested: false,

	templateString: template,

	postMixInProperties: function(){
		// set class name according to tab position, ex: dijitTabContainerTop
		this.baseClass += this.tabPosition.charAt(0).toUpperCase() + this.tabPosition.substr(1).replace(/-.*/, "");

		this.srcNodeRef && domStyle.set(this.srcNodeRef, "visibility", "hidden");

		this.inherited(arguments);
	},

	buildRendering: function(){
		this.inherited(arguments);

		// Create the tab list that will have a tab (a.k.a. tab button) for each tab panel
		this.tablist = this._makeController(this.tablistNode);

		if(!this.doLayout){ domClass.add(this.domNode, "dijitTabContainerNoLayout"); }

		if(this.nested){
			/* workaround IE's lack of support for "a > b" selectors by
			 * tagging each node in the template.
			 */
			domClass.add(this.domNode, "dijitTabContainerNested");
			domClass.add(this.tablist.containerNode, "dijitTabContainerTabListNested");
			domClass.add(this.tablistSpacer, "dijitTabContainerSpacerNested");
			domClass.add(this.containerNode, "dijitTabPaneWrapperNested");
		}else{
			domClass.add(this.domNode, "tabStrip-" + (this.tabStrip ? "enabled" : "disabled"));
		}
	},

	_setupChild: function(/*dijit._Widget*/ tab){
		// Overrides StackContainer._setupChild().
		domClass.add(tab.domNode, "dijitTabPane");
		this.inherited(arguments);
	},

	startup: function(){
		if(this._started){ return; }

		// wire up the tablist and its tabs
		this.tablist.startup();

		this.inherited(arguments);
	},

	layout: function(){
		// Overrides StackContainer.layout().
		// Configure the content pane to take up all the space except for where the tabs are

		if(!this._contentBox || typeof(this._contentBox.l) == "undefined"){return;}

		var sc = this.selectedChildWidget;

		if(this.doLayout){
			// position and size the titles and the container node
			var titleAlign = this.tabPosition.replace(/-h/, "");
			this.tablist.layoutAlign = titleAlign;
			var children = [this.tablist, {
				domNode: this.tablistSpacer,
				layoutAlign: titleAlign
			}, {
				domNode: this.containerNode,
				layoutAlign: "client"
			}];
			layoutUtils.layoutChildren(this.domNode, this._contentBox, children);

			// Compute size to make each of my children.
			// children[2] is the margin-box size of this.containerNode, set by layoutChildren() call above
			this._containerContentBox = layoutUtils.marginBox2contentBox(this.containerNode, children[2]);

			if(sc && sc.resize){
				sc.resize(this._containerContentBox);
			}
		}else{
			// just layout the tab controller, so it can position left/right buttons etc.
			if(this.tablist.resize){
				//make the tabs zero width so that they don't interfere with width calc, then reset
				var s = this.tablist.domNode.style;
				s.width="0";
				var width = domGeometry.getContentBox(this.domNode).w;
				s.width="";
				this.tablist.resize({w: width});
			}

			// and call resize() on the selected pane just to tell it that it's been made visible
			if(sc && sc.resize){
				sc.resize();
			}
		}
	},

	destroy: function(){
		if(this.tablist){
			this.tablist.destroy();
		}
		this.inherited(arguments);
	}
});

});

},
'dijit/_KeyNavContainer':function(){
define("dijit/_KeyNavContainer", [
	"dojo/_base/kernel", // kernel.deprecated
	"./_Container",
	"./_FocusMixin",
	"dojo/_base/array", // array.forEach
	"dojo/keys", // keys.END keys.HOME
	"dojo/_base/declare", // declare
	"dojo/_base/event", // event.stop
	"dojo/dom-attr", // domAttr.set
	"dojo/_base/lang" // lang.hitch
], function(kernel, _Container, _FocusMixin, array, keys, declare, event, domAttr, lang){

/*=====
	var _FocusMixin = dijit._FocusMixin;
	var _Container = dijit._Container;
=====*/

	// module:
	//		dijit/_KeyNavContainer
	// summary:
	//		A _Container with keyboard navigation of its children.

	return declare("dijit._KeyNavContainer", [_FocusMixin, _Container], {

		// summary:
		//		A _Container with keyboard navigation of its children.
		// description:
		//		To use this mixin, call connectKeyNavHandlers() in
		//		postCreate().
		//		It provides normalized keyboard and focusing code for Container
		//		widgets.

/*=====
		// focusedChild: [protected] Widget
		//		The currently focused child widget, or null if there isn't one
		focusedChild: null,
=====*/

		// tabIndex: Integer
		//		Tab index of the container; same as HTML tabIndex attribute.
		//		Note then when user tabs into the container, focus is immediately
		//		moved to the first item in the container.
		tabIndex: "0",

		connectKeyNavHandlers: function(/*keys[]*/ prevKeyCodes, /*keys[]*/ nextKeyCodes){
			// summary:
			//		Call in postCreate() to attach the keyboard handlers
			//		to the container.
			// preKeyCodes: keys[]
			//		Key codes for navigating to the previous child.
			// nextKeyCodes: keys[]
			//		Key codes for navigating to the next child.
			// tags:
			//		protected

			// TODO: call this automatically from my own postCreate()

			var keyCodes = (this._keyNavCodes = {});
			var prev = lang.hitch(this, "focusPrev");
			var next = lang.hitch(this, "focusNext");
			array.forEach(prevKeyCodes, function(code){ keyCodes[code] = prev; });
			array.forEach(nextKeyCodes, function(code){ keyCodes[code] = next; });
			keyCodes[keys.HOME] = lang.hitch(this, "focusFirstChild");
			keyCodes[keys.END] = lang.hitch(this, "focusLastChild");
			this.connect(this.domNode, "onkeypress", "_onContainerKeypress");
			this.connect(this.domNode, "onfocus", "_onContainerFocus");
		},

		startupKeyNavChildren: function(){
			kernel.deprecated("startupKeyNavChildren() call no longer needed", "", "2.0");
		},

		startup: function(){
			this.inherited(arguments);
			array.forEach(this.getChildren(), lang.hitch(this, "_startupChild"));
		},

		addChild: function(/*dijit._Widget*/ widget, /*int?*/ insertIndex){
			this.inherited(arguments);
			this._startupChild(widget);
		},

		focus: function(){
			// summary:
			//		Default focus() implementation: focus the first child.
			this.focusFirstChild();
		},

		focusFirstChild: function(){
			// summary:
			//		Focus the first focusable child in the container.
			// tags:
			//		protected
			this.focusChild(this._getFirstFocusableChild());
		},

		focusLastChild: function(){
			// summary:
			//		Focus the last focusable child in the container.
			// tags:
			//		protected
			this.focusChild(this._getLastFocusableChild());
		},

		focusNext: function(){
			// summary:
			//		Focus the next widget
			// tags:
			//		protected
			this.focusChild(this._getNextFocusableChild(this.focusedChild, 1));
		},

		focusPrev: function(){
			// summary:
			//		Focus the last focusable node in the previous widget
			//		(ex: go to the ComboButton icon section rather than button section)
			// tags:
			//		protected
			this.focusChild(this._getNextFocusableChild(this.focusedChild, -1), true);
		},

		focusChild: function(/*dijit._Widget*/ widget, /*Boolean*/ last){
			// summary:
			//		Focus specified child widget.
			// widget:
			//		Reference to container's child widget
			// last:
			//		If true and if widget has multiple focusable nodes, focus the
			//		last one instead of the first one
			// tags:
			//		protected

			if(!widget){ return; }

			if(this.focusedChild && widget !== this.focusedChild){
				this._onChildBlur(this.focusedChild);	// used by _MenuBase
			}
			widget.set("tabIndex", this.tabIndex);	// for IE focus outline to appear, must set tabIndex before focs
			widget.focus(last ? "end" : "start");
			this._set("focusedChild", widget);
		},

		_startupChild: function(/*dijit._Widget*/ widget){
			// summary:
			//		Setup for each child widget
			// description:
			//		Sets tabIndex=-1 on each child, so that the tab key will
			//		leave the container rather than visiting each child.
			// tags:
			//		private

			widget.set("tabIndex", "-1");

			this.connect(widget, "_onFocus", function(){
				// Set valid tabIndex so tabbing away from widget goes to right place, see #10272
				widget.set("tabIndex", this.tabIndex);
			});
			this.connect(widget, "_onBlur", function(){
				widget.set("tabIndex", "-1");
			});
		},

		_onContainerFocus: function(evt){
			// summary:
			//		Handler for when the container gets focus
			// description:
			//		Initially the container itself has a tabIndex, but when it gets
			//		focus, switch focus to first child...
			// tags:
			//		private

			// Note that we can't use _onFocus() because switching focus from the
			// _onFocus() handler confuses the focus.js code
			// (because it causes _onFocusNode() to be called recursively)
			// Also, _onFocus() would fire when focus went directly to a child widget due to mouse click.

			// Ignore spurious focus events:
			//	1. focus on a child widget bubbles on FF
			//	2. on IE, clicking the scrollbar of a select dropdown moves focus from the focused child item to me
			if(evt.target !== this.domNode || this.focusedChild){ return; }

			this.focusFirstChild();

			// and then set the container's tabIndex to -1,
			// (don't remove as that breaks Safari 4)
			// so that tab or shift-tab will go to the fields after/before
			// the container, rather than the container itself
			domAttr.set(this.domNode, "tabIndex", "-1");
		},

		_onBlur: function(evt){
			// When focus is moved away the container, and its descendant (popup) widgets,
			// then restore the container's tabIndex so that user can tab to it again.
			// Note that using _onBlur() so that this doesn't happen when focus is shifted
			// to one of my child widgets (typically a popup)
			if(this.tabIndex){
				domAttr.set(this.domNode, "tabIndex", this.tabIndex);
			}
			this.focusedChild = null;
			this.inherited(arguments);
		},

		_onContainerKeypress: function(evt){
			// summary:
			//		When a key is pressed, if it's an arrow key etc. then
			//		it's handled here.
			// tags:
			//		private
			if(evt.ctrlKey || evt.altKey){ return; }
			var func = this._keyNavCodes[evt.charOrCode];
			if(func){
				func();
				event.stop(evt);
			}
		},

		_onChildBlur: function(/*dijit._Widget*/ /*===== widget =====*/){
			// summary:
			//		Called when focus leaves a child widget to go
			//		to a sibling widget.
			//		Used by MenuBase.js (TODO: move code there)
			// tags:
			//		protected
		},

		_getFirstFocusableChild: function(){
			// summary:
			//		Returns first child that can be focused
			return this._getNextFocusableChild(null, 1);	// dijit._Widget
		},

		_getLastFocusableChild: function(){
			// summary:
			//		Returns last child that can be focused
			return this._getNextFocusableChild(null, -1);	// dijit._Widget
		},

		_getNextFocusableChild: function(child, dir){
			// summary:
			//		Returns the next or previous focusable child, compared
			//		to "child"
			// child: Widget
			//		The current widget
			// dir: Integer
			//		* 1 = after
			//		* -1 = before
			if(child){
				child = this._getSiblingOfChild(child, dir);
			}
			var children = this.getChildren();
			for(var i=0; i < children.length; i++){
				if(!child){
					child = children[(dir>0) ? 0 : (children.length-1)];
				}
				if(child.isFocusable()){
					return child;	// dijit._Widget
				}
				child = this._getSiblingOfChild(child, dir);
			}
			// no focusable child found
			return null;	// dijit._Widget
		}
	});
});

},
'dijit/form/DataList':function(){
define("dijit/form/DataList", [
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.byId
	"dojo/_base/lang", // lang.trim
	"dojo/query", // query
	"dojo/store/Memory", // dojo.store.Memory
	"../registry"	// registry.add registry.remove
], function(declare, dom, lang, query, MemoryStore, registry){

	// module:
	//		dijit/form/DataList
	// summary:
	//		Inefficient but small data store specialized for inlined data via OPTION tags

	function toItem(/*DOMNode*/ option){
		// summary:
		//		Convert <option> node to hash
		return {
			id: option.value,
			value: option.value,
			name: lang.trim(option.innerText || option.textContent || '')
		};
	}

	return declare("dijit.form.DataList", MemoryStore, {
		// summary:
		//		Inefficient but small data store specialized for inlined data via OPTION tags
		//
		// description:
		//		Provides a store for inlined data like:
		//
		//	|	<datalist>
		//	|		<option value="AL">Alabama</option>
		//	|		...

		constructor: function(/*Object?*/ params, /*DomNode|String*/ srcNodeRef){
			// store pointer to original DOM tree
			this.domNode = dom.byId(srcNodeRef);

			lang.mixin(this, params);
			if(this.id){
				registry.add(this); // add to registry so it can be easily found by id
			}
			this.domNode.style.display = "none";

			this.inherited(arguments, [{
				data: query("option", this.domNode).map(toItem)
			}]);
		},

		destroy: function(){
			registry.remove(this.id);
		},

		fetchSelectedItem: function(){
			// summary:
			//		Get the option marked as selected, like `<option selected>`.
			//		Not part of dojo.data API.
			var option = query("> option[selected]", this.domNode)[0] || query("> option", this.domNode)[0];
			return option && toItem(option);
		}
	});
});

},
'dijit/Tooltip':function(){
require({cache:{
'url:dijit/templates/Tooltip.html':"<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" data-dojo-attach-point=\"containerNode\" role='alert'></div\n\t><div class=\"dijitTooltipConnector\" data-dojo-attach-point=\"connectorNode\"></div\n></div>\n"}});
define("dijit/Tooltip", [
	"dojo/_base/array", // array.forEach array.indexOf array.map
	"dojo/_base/declare", // declare
	"dojo/_base/fx", // fx.fadeIn fx.fadeOut
	"dojo/dom", // dom.byId
	"dojo/dom-class", // domClass.add
	"dojo/dom-geometry", // domGeometry.getMarginBox domGeometry.position
	"dojo/dom-style", // domStyle.set, domStyle.get
	"dojo/_base/lang", // lang.hitch lang.isArrayLike
	"dojo/_base/sniff", // has("ie")
	"dojo/_base/window", // win.body
	"./_base/manager",	// manager.defaultDuration
	"./place",
	"./_Widget",
	"./_TemplatedMixin",
	"./BackgroundIframe",
	"dojo/text!./templates/Tooltip.html",
	"."		// sets dijit.showTooltip etc. for back-compat
], function(array, declare, fx, dom, domClass, domGeometry, domStyle, lang, has, win,
			manager, place, _Widget, _TemplatedMixin, BackgroundIframe, template, dijit){

/*=====
	var _Widget = dijit._Widget;
	var BackgroundIframe = dijit.BackgroundIframe;
	var _TemplatedMixin = dijit._TemplatedMixin;
=====*/

	// module:
	//		dijit/Tooltip
	// summary:
	//		Defines dijit.Tooltip widget (to display a tooltip), showTooltip()/hideTooltip(), and _MasterTooltip


	var MasterTooltip = declare("dijit._MasterTooltip", [_Widget, _TemplatedMixin], {
		// summary:
		//		Internal widget that holds the actual tooltip markup,
		//		which occurs once per page.
		//		Called by Tooltip widgets which are just containers to hold
		//		the markup
		// tags:
		//		protected

		// duration: Integer
		//		Milliseconds to fade in/fade out
		duration: manager.defaultDuration,

		templateString: template,

		postCreate: function(){
			win.body().appendChild(this.domNode);

			this.bgIframe = new BackgroundIframe(this.domNode);

			// Setup fade-in and fade-out functions.
			this.fadeIn = fx.fadeIn({ node: this.domNode, duration: this.duration, onEnd: lang.hitch(this, "_onShow") });
			this.fadeOut = fx.fadeOut({ node: this.domNode, duration: this.duration, onEnd: lang.hitch(this, "_onHide") });
		},

		show: function(innerHTML, aroundNode, position, rtl, textDir){
			// summary:
			//		Display tooltip w/specified contents to right of specified node
			//		(To left if there's no space on the right, or if rtl == true)
			// innerHTML: String
			//		Contents of the tooltip
			// aroundNode: DomNode || dijit.__Rectangle
			//		Specifies that tooltip should be next to this node / area
			// position: String[]?
			//		List of positions to try to position tooltip (ex: ["right", "above"])
			// rtl: Boolean?
			//		Corresponds to `WidgetBase.dir` attribute, where false means "ltr" and true
			//		means "rtl"; specifies GUI direction, not text direction.
			// textDir: String?
			//		Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.


			if(this.aroundNode && this.aroundNode === aroundNode && this.containerNode.innerHTML == innerHTML){
				return;
			}

			// reset width; it may have been set by orient() on a previous tooltip show()
			this.domNode.width = "auto";

			if(this.fadeOut.status() == "playing"){
				// previous tooltip is being hidden; wait until the hide completes then show new one
				this._onDeck=arguments;
				return;
			}
			this.containerNode.innerHTML=innerHTML;

			if(textDir){
				this.set("textDir", textDir);
			}
			this.containerNode.align = rtl? "right" : "left"; //fix the text alignment

			var pos = place.around(this.domNode, aroundNode,
				position && position.length ? position : Tooltip.defaultPosition, !rtl, lang.hitch(this, "orient"));

			// Position the tooltip connector for middle alignment.
			// This could not have been done in orient() since the tooltip wasn't positioned at that time.
			var aroundNodeCoords = pos.aroundNodePos;
			if(pos.corner.charAt(0) == 'M' && pos.aroundCorner.charAt(0) == 'M'){
				this.connectorNode.style.top = aroundNodeCoords.y + ((aroundNodeCoords.h - this.connectorNode.offsetHeight) >> 1) - pos.y + "px";
				this.connectorNode.style.left = "";
			}else if(pos.corner.charAt(1) == 'M' && pos.aroundCorner.charAt(1) == 'M'){
				this.connectorNode.style.left = aroundNodeCoords.x + ((aroundNodeCoords.w - this.connectorNode.offsetWidth) >> 1) - pos.x + "px";
			}

			// show it
			domStyle.set(this.domNode, "opacity", 0);
			this.fadeIn.play();
			this.isShowingNow = true;
			this.aroundNode = aroundNode;
		},

		orient: function(/*DomNode*/ node, /*String*/ aroundCorner, /*String*/ tooltipCorner, /*Object*/ spaceAvailable, /*Object*/ aroundNodeCoords){
			// summary:
			//		Private function to set CSS for tooltip node based on which position it's in.
			//		This is called by the dijit popup code.   It will also reduce the tooltip's
			//		width to whatever width is available
			// tags:
			//		protected
			this.connectorNode.style.top = ""; //reset to default

			//Adjust the spaceAvailable width, without changing the spaceAvailable object
			var tooltipSpaceAvaliableWidth = spaceAvailable.w - this.connectorNode.offsetWidth;

			node.className = "dijitTooltip " +
				{
					"MR-ML": "dijitTooltipRight",
					"ML-MR": "dijitTooltipLeft",
					"TM-BM": "dijitTooltipAbove",
					"BM-TM": "dijitTooltipBelow",
					"BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
					"TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
					"BR-TR": "dijitTooltipBelow dijitTooltipABRight",
					"TR-BR": "dijitTooltipAbove dijitTooltipABRight",
					"BR-BL": "dijitTooltipRight",
					"BL-BR": "dijitTooltipLeft"
				}[aroundCorner + "-" + tooltipCorner];

			// reduce tooltip's width to the amount of width available, so that it doesn't overflow screen
			this.domNode.style.width = "auto";
			var size = domGeometry.getContentBox(this.domNode);

			var width = Math.min((Math.max(tooltipSpaceAvaliableWidth,1)), size.w);
			var widthWasReduced = width < size.w;

			this.domNode.style.width = width+"px";

			//Adjust width for tooltips that have a really long word or a nowrap setting
			if(widthWasReduced){
				this.containerNode.style.overflow = "auto"; //temp change to overflow to detect if our tooltip needs to be wider to support the content
				var scrollWidth = this.containerNode.scrollWidth;
				this.containerNode.style.overflow = "visible"; //change it back
				if(scrollWidth > width){
					scrollWidth = scrollWidth + domStyle.get(this.domNode,"paddingLeft") + domStyle.get(this.domNode,"paddingRight");
					this.domNode.style.width = scrollWidth + "px";
				}
			}

			// Reposition the tooltip connector.
			if(tooltipCorner.charAt(0) == 'B' && aroundCorner.charAt(0) == 'B'){
				var mb = domGeometry.getMarginBox(node);
				var tooltipConnectorHeight = this.connectorNode.offsetHeight;
				if(mb.h > spaceAvailable.h){
					// The tooltip starts at the top of the page and will extend past the aroundNode
					var aroundNodePlacement = spaceAvailable.h - ((aroundNodeCoords.h + tooltipConnectorHeight) >> 1);
					this.connectorNode.style.top = aroundNodePlacement + "px";
					this.connectorNode.style.bottom = "";
				}else{
					// Align center of connector with center of aroundNode, except don't let bottom
					// of connector extend below bottom of tooltip content, or top of connector
					// extend past top of tooltip content
					this.connectorNode.style.bottom = Math.min(
						Math.max(aroundNodeCoords.h/2 - tooltipConnectorHeight/2, 0),
						mb.h - tooltipConnectorHeight) + "px";
					this.connectorNode.style.top = "";
				}
			}else{
				// reset the tooltip back to the defaults
				this.connectorNode.style.top = "";
				this.connectorNode.style.bottom = "";
			}

			return Math.max(0, size.w - tooltipSpaceAvaliableWidth);
		},

		_onShow: function(){
			// summary:
			//		Called at end of fade-in operation
			// tags:
			//		protected
			if(has("ie")){
				// the arrow won't show up on a node w/an opacity filter
				this.domNode.style.filter="";
			}
		},

		hide: function(aroundNode){
			// summary:
			//		Hide the tooltip

			if(this._onDeck && this._onDeck[1] == aroundNode){
				// this hide request is for a show() that hasn't even started yet;
				// just cancel the pending show()
				this._onDeck=null;
			}else if(this.aroundNode === aroundNode){
				// this hide request is for the currently displayed tooltip
				this.fadeIn.stop();
				this.isShowingNow = false;
				this.aroundNode = null;
				this.fadeOut.play();
			}else{
				// just ignore the call, it's for a tooltip that has already been erased
			}
		},

		_onHide: function(){
			// summary:
			//		Called at end of fade-out operation
			// tags:
			//		protected

			this.domNode.style.cssText="";	// to position offscreen again
			this.containerNode.innerHTML="";
			if(this._onDeck){
				// a show request has been queued up; do it now
				this.show.apply(this, this._onDeck);
				this._onDeck=null;
			}
		},

		_setAutoTextDir: function(/*Object*/node){
			// summary:
			//	    Resolve "auto" text direction for children nodes
			// tags:
			//		private

			this.applyTextDir(node, has("ie") ? node.outerText : node.textContent);
			array.forEach(node.children, function(child){this._setAutoTextDir(child); }, this);
		},

		_setTextDirAttr: function(/*String*/ textDir){
			// summary:
			//		Setter for textDir.
			// description:
			//		Users shouldn't call this function; they should be calling
			//		set('textDir', value)
			// tags:
			//		private

			this._set("textDir", textDir);

			if (textDir == "auto"){
				this._setAutoTextDir(this.containerNode);
			}else{
				this.containerNode.dir = this.textDir;
			}
		}
	});

	dijit.showTooltip = function(innerHTML, aroundNode, position, rtl, textDir){
		// summary:
		//		Static method to display tooltip w/specified contents in specified position.
		//		See description of dijit.Tooltip.defaultPosition for details on position parameter.
		//		If position is not specified then dijit.Tooltip.defaultPosition is used.
		// innerHTML: String
		//		Contents of the tooltip
		// aroundNode: dijit.__Rectangle
		//		Specifies that tooltip should be next to this node / area
		// position: String[]?
		//		List of positions to try to position tooltip (ex: ["right", "above"])
		// rtl: Boolean?
		//		Corresponds to `WidgetBase.dir` attribute, where false means "ltr" and true
		//		means "rtl"; specifies GUI direction, not text direction.
		// textDir: String?
		//		Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.

		// after/before don't work, but they used to, so for back-compat convert them to after-centered, before-centered
		if(position){
			position = array.map(position, function(val){
				return {after: "after-centered", before: "before-centered"}[val] || val;
			});
		}

		if(!Tooltip._masterTT){ dijit._masterTT = Tooltip._masterTT = new MasterTooltip(); }
		return Tooltip._masterTT.show(innerHTML, aroundNode, position, rtl, textDir);
	};

	dijit.hideTooltip = function(aroundNode){
		// summary:
		//		Static method to hide the tooltip displayed via showTooltip()
		return Tooltip._masterTT && Tooltip._masterTT.hide(aroundNode);
	};

	var Tooltip = declare("dijit.Tooltip", _Widget, {
		// summary:
		//		Pops up a tooltip (a help message) when you hover over a node.

		// label: String
		//		Text to display in the tooltip.
		//		Specified as innerHTML when creating the widget from markup.
		label: "",

		// showDelay: Integer
		//		Number of milliseconds to wait after hovering over/focusing on the object, before
		//		the tooltip is displayed.
		showDelay: 400,

		// connectId: String|String[]
		//		Id of domNode(s) to attach the tooltip to.
		//		When user hovers over specified dom node, the tooltip will appear.
		connectId: [],

		// position: String[]
		//		See description of `dijit.Tooltip.defaultPosition` for details on position parameter.
		position: [],

		_setConnectIdAttr: function(/*String|String[]*/ newId){
			// summary:
			//		Connect to specified node(s)

			// Remove connections to old nodes (if there are any)
			array.forEach(this._connections || [], function(nested){
				array.forEach(nested, lang.hitch(this, "disconnect"));
			}, this);

			// Make array of id's to connect to, excluding entries for nodes that don't exist yet, see startup()
			this._connectIds = array.filter(lang.isArrayLike(newId) ? newId : (newId ? [newId] : []),
					function(id){ return dom.byId(id); });

			// Make connections
			this._connections = array.map(this._connectIds, function(id){
				var node = dom.byId(id);
				return [
					this.connect(node, "onmouseenter", "_onHover"),
					this.connect(node, "onmouseleave", "_onUnHover"),
					this.connect(node, "onfocus", "_onHover"),
					this.connect(node, "onblur", "_onUnHover")
				];
			}, this);

			this._set("connectId", newId);
		},

		addTarget: function(/*DOMNODE || String*/ node){
			// summary:
			//		Attach tooltip to specified node if it's not already connected

			// TODO: remove in 2.0 and just use set("connectId", ...) interface

			var id = node.id || node;
			if(array.indexOf(this._connectIds, id) == -1){
				this.set("connectId", this._connectIds.concat(id));
			}
		},

		removeTarget: function(/*DomNode || String*/ node){
			// summary:
			//		Detach tooltip from specified node

			// TODO: remove in 2.0 and just use set("connectId", ...) interface

			var id = node.id || node,	// map from DOMNode back to plain id string
				idx = array.indexOf(this._connectIds, id);
			if(idx >= 0){
				// remove id (modifies original this._connectIds but that's OK in this case)
				this._connectIds.splice(idx, 1);
				this.set("connectId", this._connectIds);
			}
		},

		buildRendering: function(){
			this.inherited(arguments);
			domClass.add(this.domNode,"dijitTooltipData");
		},

		startup: function(){
			this.inherited(arguments);

			// If this tooltip was created in a template, or for some other reason the specified connectId[s]
			// didn't exist during the widget's initialization, then connect now.
			var ids = this.connectId;
			array.forEach(lang.isArrayLike(ids) ? ids : [ids], this.addTarget, this);
		},

		_onHover: function(/*Event*/ e){
			// summary:
			//		Despite the name of this method, it actually handles both hover and focus
			//		events on the target node, setting a timer to show the tooltip.
			// tags:
			//		private
			if(!this._showTimer){
				var target = e.target;
				this._showTimer = setTimeout(lang.hitch(this, function(){this.open(target)}), this.showDelay);
			}
		},

		_onUnHover: function(/*Event*/ /*===== e =====*/){
			// summary:
			//		Despite the name of this method, it actually handles both mouseleave and blur
			//		events on the target node, hiding the tooltip.
			// tags:
			//		private

			// keep a tooltip open if the associated element still has focus (even though the
			// mouse moved away)
			if(this._focus){ return; }

			if(this._showTimer){
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
			this.close();
		},

		open: function(/*DomNode*/ target){
 			// summary:
			//		Display the tooltip; usually not called directly.
			// tags:
			//		private

			if(this._showTimer){
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
			Tooltip.show(this.label || this.domNode.innerHTML, target, this.position, !this.isLeftToRight(), this.textDir);

			this._connectNode = target;
			this.onShow(target, this.position);
		},

		close: function(){
			// summary:
			//		Hide the tooltip or cancel timer for show of tooltip
			// tags:
			//		private

			if(this._connectNode){
				// if tooltip is currently shown
				Tooltip.hide(this._connectNode);
				delete this._connectNode;
				this.onHide();
			}
			if(this._showTimer){
				// if tooltip is scheduled to be shown (after a brief delay)
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
		},

		onShow: function(/*===== target, position =====*/){
			// summary:
			//		Called when the tooltip is shown
			// tags:
			//		callback
		},

		onHide: function(){
			// summary:
			//		Called when the tooltip is hidden
			// tags:
			//		callback
		},

		uninitialize: function(){
			this.close();
			this.inherited(arguments);
		}
	});

	Tooltip._MasterTooltip = MasterTooltip;		// for monkey patching
	Tooltip.show = dijit.showTooltip;		// export function through module return value
	Tooltip.hide = dijit.hideTooltip;		// export function through module return value

	// dijit.Tooltip.defaultPosition: String[]
	//		This variable controls the position of tooltips, if the position is not specified to
	//		the Tooltip widget or *TextBox widget itself.  It's an array of strings with the values
	//		possible for `dijit/place::around()`.   The recommended values are:
	//
	//			* before-centered: centers tooltip to the left of the anchor node/widget, or to the right
	//				 in the case of RTL scripts like Hebrew and Arabic
	//			* after-centered: centers tooltip to the right of the anchor node/widget, or to the left
	//				 in the case of RTL scripts like Hebrew and Arabic
	//			* above-centered: tooltip is centered above anchor node
	//			* below-centered: tooltip is centered above anchor node
	//
	//		The list is positions is tried, in order, until a position is found where the tooltip fits
	//		within the viewport.
	//
	//		Be careful setting this parameter.  A value of "above-centered" may work fine until the user scrolls
	//		the screen so that there's no room above the target node.   Nodes with drop downs, like
	//		DropDownButton or FilteringSelect, are especially problematic, in that you need to be sure
	//		that the drop down and tooltip don't overlap, even when the viewport is scrolled so that there
	//		is only room below (or above) the target node, but not both.
	Tooltip.defaultPosition = ["after-centered", "before-centered"];


	return Tooltip;
});

},
'dijit/PopupMenuItem':function(){
define("dijit/PopupMenuItem", [
	"dojo/_base/declare", // declare
	"dojo/dom-style", // domStyle.set
	"dojo/query", // query
	"dojo/_base/window", // win.body
	"./registry",	// registry.byNode
	"./MenuItem",
	"./hccss"
], function(declare, domStyle, query, win, registry, MenuItem){

/*=====
	var MenuItem = dijit.MenuItem;
=====*/

	// module:
	//		dijit/PopupMenuItem
	// summary:
	//		An item in a Menu that spawn a drop down (usually a drop down menu)

	return declare("dijit.PopupMenuItem", MenuItem, {
		// summary:
		//		An item in a Menu that spawn a drop down (usually a drop down menu)

		_fillContent: function(){
			// summary:
			//		When Menu is declared in markup, this code gets the menu label and
			//		the popup widget from the srcNodeRef.
			// description:
			//		srcNodeRefinnerHTML contains both the menu item text and a popup widget
			//		The first part holds the menu item text and the second part is the popup
			// example:
			// |	<div data-dojo-type="dijit.PopupMenuItem">
			// |		<span>pick me</span>
			// |		<popup> ... </popup>
			// |	</div>
			// tags:
			//		protected

			if(this.srcNodeRef){
				var nodes = query("*", this.srcNodeRef);
				this.inherited(arguments, [nodes[0]]);

				// save pointer to srcNode so we can grab the drop down widget after it's instantiated
				this.dropDownContainer = this.srcNodeRef;
			}
		},

		startup: function(){
			if(this._started){ return; }
			this.inherited(arguments);

			// we didn't copy the dropdown widget from the this.srcNodeRef, so it's in no-man's
			// land now.  move it to win.doc.body.
			if(!this.popup){
				var node = query("[widgetId]", this.dropDownContainer)[0];
				this.popup = registry.byNode(node);
			}
			win.body().appendChild(this.popup.domNode);
			this.popup.startup();

			this.popup.domNode.style.display="none";
			if(this.arrowWrapper){
				domStyle.set(this.arrowWrapper, "visibility", "");
			}
			this.focusNode.setAttribute("aria-haspopup", "true");
		},

		destroyDescendants: function(/*Boolean*/ preserveDom){
			if(this.popup){
				// Destroy the popup, unless it's already been destroyed.  This can happen because
				// the popup is a direct child of <body> even though it's logically my child.
				if(!this.popup._destroyed){
					this.popup.destroyRecursive(preserveDom);
				}
				delete this.popup;
			}
			this.inherited(arguments);
		}
	});
});

},
'dijit/main':function(){
define("dijit/main", [
	"dojo/_base/kernel"
], function(dojo){
	// module:
	//		dijit
	// summary:
	//		The dijit package main module

	return dojo.dijit;
});

},
'dijit/layout/ContentPane':function(){
define("dijit/layout/ContentPane", [
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/lang", // lang.mixin lang.delegate lang.hitch lang.isFunction lang.isObject
	"../_Widget",
	"./_ContentPaneResizeMixin",
	"dojo/string", // string.substitute
	"dojo/html", // html._ContentSetter html._emptyNode
	"dojo/i18n!../nls/loading",
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/_base/Deferred", // Deferred
	"dojo/dom", // dom.byId
	"dojo/dom-attr", // domAttr.attr
	"dojo/_base/window", // win.body win.doc.createDocumentFragment
	"dojo/_base/xhr", // xhr.get
	"dojo/i18n" // i18n.getLocalization
], function(kernel, lang, _Widget, _ContentPaneResizeMixin, string, html, nlsLoading,
	array, declare, Deferred, dom, domAttr, win, xhr, i18n){

/*=====
	var _Widget = dijit._Widget;
	var _ContentPaneResizeMixin = dijit.layout._ContentPaneResizeMixin;
=====*/

/* CURAM-FIX: Extend ContentPane to allow P&S instrumentation. */
var curamPerfTrackingEnabled = typeof(dojo.global.perf) != "undefined";

// module:
//		dijit/layout/ContentPane
// summary:
//		A widget containing an HTML fragment, specified inline
//		or by uri.  Fragment may include widgets.

return declare("dijit.layout.ContentPane", [_Widget, _ContentPaneResizeMixin], {
  // summary:
  //              A widget containing an HTML fragment, specified inline
  //              or by uri.  Fragment may include widgets.
  //
  // description:
  //              This widget embeds a document fragment in the page, specified
  //              either by uri, javascript generated markup or DOM reference.
  //              Any widgets within this content are instantiated and managed,
  //              but laid out according to the HTML structure.  Unlike IFRAME,
  //              ContentPane embeds a document fragment as would be found
  //              inside the BODY tag of a full HTML document.  It should not
  //              contain the HTML, HEAD, or BODY tags.
  //              For more advanced functionality with scripts and
  //              stylesheets, see dojox.layout.ContentPane.  This widget may be
  //              used stand alone or as a base class for other widgets.
  //              ContentPane is useful as a child of other layout containers
  //              such as BorderContainer or TabContainer, but note that those
  //              widgets can contain any widget as a child.
  //
  // example:
  //              Some quick samples:
  //              To change the innerHTML: cp.set('content', '<b>new content</b>')
  //
  //              Or you can send it a NodeList: cp.set('content', dojo.query('div [class=selected]', userSelection))
  //
  //              To do an ajax update: cp.set('href', url)

  // href: String
  //              The href of the content that displays now.
  //              Set this at construction if you want to load data externally when the
  //              pane is shown.  (Set preload=true to load it immediately.)
  //              Changing href after creation doesn't have any effect; Use set('href', ...);
  href: "",

  // content: String || DomNode || NodeList || dijit._Widget
  //              The innerHTML of the ContentPane.
  //              Note that the initialization parameter / argument to set("content", ...)
  //              can be a String, DomNode, Nodelist, or _Widget.
  content: "",

  // extractContent: Boolean
  //              Extract visible content from inside of <body> .... </body>.
  //              I.e., strip <html> and <head> (and it's contents) from the href
  extractContent: false,

  // parseOnLoad: Boolean
  //              Parse content and create the widgets, if any.
  parseOnLoad: true,

  // parserScope: String
  //              Flag passed to parser.  Root for attribute names to search for.   If scopeName is dojo,
  //              will search for data-dojo-type (or dojoType).  For backwards compatibility
  //              reasons defaults to dojo._scopeName (which is "dojo" except when
  //              multi-version support is used, when it will be something like dojo16, dojo20, etc.)
  parserScope: kernel._scopeName,

  // preventCache: Boolean
  //              Prevent caching of data from href's by appending a timestamp to the href.
  preventCache: false,

  // preload: Boolean
  //              Force load of data on initialization even if pane is hidden.
  preload: false,

  // refreshOnShow: Boolean
  //              Refresh (re-download) content when pane goes from hidden to shown
  refreshOnShow: false,

  // loadingMessage: String
  //              Message that shows while downloading
  loadingMessage: "<span class='dijitContentPaneLoading'><span class='dijitInline dijitIconLoading'></span>${loadingState}</span>",

  // errorMessage: String
  //              Message that shows if an error occurs
  errorMessage: "<span class='dijitContentPaneError'><span class='dijitInline dijitIconError'></span>${errorState}</span>",

  // isLoaded: [readonly] Boolean
  //              True if the ContentPane has data in it, either specified
  //              during initialization (via href or inline content), or set
  //              via set('content', ...) / set('href', ...)
  //
  //              False if it doesn't have any content, or if ContentPane is
  //              still in the process of downloading href.
  isLoaded: false,

  baseClass: "dijitContentPane",

  /*======
  // ioMethod: dojo.xhrGet|dojo.xhrPost
  //              Function that should grab the content specified via href.
  ioMethod: dojo.xhrGet,
  ======*/

  // ioArgs: Object
  //              Parameters to pass to xhrGet() request, for example:
  // |    <div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="href: './bar', ioArgs: {timeout: 500}">
  ioArgs: {},

  // onLoadDeferred: [readonly] dojo.Deferred
  //              This is the `dojo.Deferred` returned by set('href', ...) and refresh().
  //              Calling onLoadDeferred.addCallback() or addErrback() registers your
  //              callback to be called only once, when the prior set('href', ...) call or
  //              the initial href parameter to the constructor finishes loading.
  //
  //              This is different than an onLoad() handler which gets called any time any href
  //              or content is loaded.
  onLoadDeferred: null,

  // Cancel _WidgetBase's _setTitleAttr because we don't want the title attribute (used to specify
  // tab labels) to be copied to ContentPane.domNode... otherwise a tooltip shows up over the
  // entire pane.
  _setTitleAttr: null,

  // Flag to parser that I'll parse my contents, so it shouldn't.
  stopParser: true,

  // template: [private] Boolean
  //              Flag from the parser that this ContentPane is inside a template
  //              so the contents are pre-parsed.
  // (TODO: this declaration can be commented out in 2.0)
  template: false,

  create: function(params, srcNodeRef){
          // Convert a srcNodeRef argument into a content parameter, so that the original contents are
          // processed in the same way as contents set via set("content", ...), calling the parser etc.
          // Avoid modifying original params object since that breaks NodeList instantiation, see #11906.
          if((!params || !params.template) && srcNodeRef && !("href" in params) && !("content" in params)){
                  var df = win.doc.createDocumentFragment();
                  srcNodeRef = dom.byId(srcNodeRef);
                  while(srcNodeRef.firstChild){
                          df.appendChild(srcNodeRef.firstChild);
                  }
                  params = lang.delegate(params, {content: df});
          }
          this.inherited(arguments, [params, srcNodeRef]);
  },

  postMixInProperties: function(){
          this.inherited(arguments);
          var messages = i18n.getLocalization("dijit", "loading", this.lang);
          this.loadingMessage = string.substitute(this.loadingMessage, messages);
          this.errorMessage = string.substitute(this.errorMessage, messages);
  },

  buildRendering: function(){
          this.inherited(arguments);

          // Since we have no template we need to set this.containerNode ourselves, to make getChildren() work.
          // For subclasses of ContentPane that do have a template, does nothing.
          if(!this.containerNode){
                  this.containerNode = this.domNode;
          }

          // remove the title attribute so it doesn't show up when hovering
          // over a node  (TODO: remove in 2.0, no longer needed after #11490)
          this.domNode.title = "";

          if(!domAttr.get(this.domNode,"role")){
                  this.domNode.setAttribute("role", "group");
          }

          /* CURAM-FIX: Extend ContentPane to remove title attribute causing JAWS to announce
           * the input field on modal incorrectly. This needs to be removed once we update
           * to DOJO 1.8. (http://bugs.dojotoolkit.org/ticket/16635)
           */
          this.domNode.removeAttribute("title");
          /* END CURAM-FIX */
  },

  startup: function(){
          // summary:
          //              Call startup() on all children including non _Widget ones like dojo.dnd.Source objects

          // This starts all the widgets
          this.inherited(arguments);

          // And this catches stuff like dojo.dnd.Source
          if(this._contentSetter){
                  array.forEach(this._contentSetter.parseResults, function(obj){
                          if(!obj._started && !obj._destroyed && lang.isFunction(obj.startup)){
                                  obj.startup();
                                  obj._started = true;
                          }
                  }, this);
          }
  },

  setHref: function(/*String|Uri*/ href){
          // summary:
          //              Deprecated.   Use set('href', ...) instead.
          kernel.deprecated("dijit.layout.ContentPane.setHref() is deprecated. Use set('href', ...) instead.", "", "2.0");
          return this.set("href", href);
  },
  _setHrefAttr: function(/*String|Uri*/ href){
          // summary:
          //              Hook so set("href", ...) works.
          // description:
          //              Reset the (external defined) content of this pane and replace with new url
          //              Note: It delays the download until widget is shown if preload is false.
          //      href:
          //              url to the page you want to get, must be within the same domain as your mainpage

          // Cancel any in-flight requests (a set('href', ...) will cancel any in-flight set('href', ...))
          this.cancel();

          this.onLoadDeferred = new Deferred(lang.hitch(this, "cancel"));
          this.onLoadDeferred.addCallback(lang.hitch(this, "onLoad"));

          this._set("href", href);

          // _setHrefAttr() is called during creation and by the user, after creation.
          // Assuming preload == false, only in the second case do we actually load the URL;
          // otherwise it's done in startup(), and only if this widget is shown.
          if(this.preload || (this._created && this._isShown())){
                  this._load();
          }else{
                  // Set flag to indicate that href needs to be loaded the next time the
                  // ContentPane is made visible
                  this._hrefChanged = true;
          }

          return this.onLoadDeferred;             // Deferred
  },

  setContent: function(/*String|DomNode|Nodelist*/data){
          // summary:
          //              Deprecated.   Use set('content', ...) instead.
          kernel.deprecated("dijit.layout.ContentPane.setContent() is deprecated.  Use set('content', ...) instead.", "", "2.0");
          this.set("content", data);
  },
  _setContentAttr: function(/*String|DomNode|Nodelist*/data){
          // summary:
          //              Hook to make set("content", ...) work.
          //              Replaces old content with data content, include style classes from old content
          //      data:
          //              the new Content may be String, DomNode or NodeList
          //
          //              if data is a NodeList (or an array of nodes) nodes are copied
          //              so you can import nodes from another document implicitly

          // clear href so we can't run refresh and clear content
          // refresh should only work if we downloaded the content
          this._set("href", "");

          // Cancel any in-flight requests (a set('content', ...) will cancel any in-flight set('href', ...))
          this.cancel();

          // Even though user is just setting content directly, still need to define an onLoadDeferred
          // because the _onLoadHandler() handler is still getting called from setContent()
          this.onLoadDeferred = new Deferred(lang.hitch(this, "cancel"));
          if(this._created){
                  // For back-compat reasons, call onLoad() for set('content', ...)
                  // calls but not for content specified in srcNodeRef (ie: <div data-dojo-type=ContentPane>...</div>)
                  // or as initialization parameter (ie: new ContentPane({content: ...})
                  this.onLoadDeferred.addCallback(lang.hitch(this, "onLoad"));
          }

          this._setContent(data || "");

          this._isDownloaded = false; // mark that content is from a set('content') not a set('href')

          return this.onLoadDeferred;     // Deferred
  },
  _getContentAttr: function(){
          // summary:
          //              Hook to make get("content") work
          return this.containerNode.innerHTML;
  },

  cancel: function(){
          // summary:
          //              Cancels an in-flight download of content
          if(this._xhrDfd && (this._xhrDfd.fired == -1)){
                  this._xhrDfd.cancel();
          }
          delete this._xhrDfd; // garbage collect

          this.onLoadDeferred = null;
  },

  uninitialize: function(){
          if(this._beingDestroyed){
                  this.cancel();
          }
          this.inherited(arguments);
  },

  destroyRecursive: function(/*Boolean*/ preserveDom){
          // summary:
          //              Destroy the ContentPane and its contents

          // if we have multiple controllers destroying us, bail after the first
          if(this._beingDestroyed){
                  return;
          }
          this.inherited(arguments);
  },

  _onShow: function(){
          // summary:
          //              Called when the ContentPane is made visible
          // description:
          //              For a plain ContentPane, this is called on initialization, from startup().
          //              If the ContentPane is a hidden pane of a TabContainer etc., then it's
          //              called whenever the pane is made visible.
          //
          //              Does necessary processing, including href download and layout/resize of
          //              child widget(s)

          this.inherited(arguments);

          if(this.href){
                  if(!this._xhrDfd && // if there's an href that isn't already being loaded
                          (!this.isLoaded || this._hrefChanged || this.refreshOnShow)
                  ){
                          return this.refresh();  // If child has an href, promise that fires when the load is complete
                  }
          }
  },

  refresh: function(){
          // summary:
          //              [Re]download contents of href and display
          // description:
          //              1. cancels any currently in-flight requests
          //              2. posts "loading..." message
          //              3. sends XHR to download new data

          // Cancel possible prior in-flight request
          this.cancel();

          this.onLoadDeferred = new Deferred(lang.hitch(this, "cancel"));
          this.onLoadDeferred.addCallback(lang.hitch(this, "onLoad"));
          this._load();
          return this.onLoadDeferred;             // If child has an href, promise that fires when refresh is complete
  },

  _load: function(){
          // summary:
          //              Load/reload the href specified in this.href

    /* CURAM-FIX: P&S */
    if(curamPerfTrackingEnabled) { /*1*/
            perf.widgetStartedLoadingCallback();
    }
    /* END CURAM-FIX */

          // display loading message
          this._setContent(this.onDownloadStart(), true);

          var self = this;
          var getArgs = {
                  preventCache: (this.preventCache || this.refreshOnShow),
                  url: this.href,
                  handleAs: "text"
          };
          if(lang.isObject(this.ioArgs)){
                  lang.mixin(getArgs, this.ioArgs);
          }

          var hand = (this._xhrDfd = (this.ioMethod || xhr.get)(getArgs));

          hand.addCallback(function(html){
                  try{
                          self._isDownloaded = true;
                          self._setContent(html, false);
                          self.onDownloadEnd();
                  }catch(err){
                          self._onError('Content', err); // onContentError
                  }
                  
                  /* CURAM-FIX: P&S */
                  if(curamPerfTrackingEnabled) {
                          perf.widgetLoadedCallback(self);
                  }
                  /* END CURAM-FIX */

                  delete self._xhrDfd;
                  return html;
          });

          hand.addErrback(function(err){
                  if(!hand.canceled){
                          // show error message in the pane
                          self._onError('Download', err); // onDownloadError
                  }
                  delete self._xhrDfd;
                  return err;
          });

          // Remove flag saying that a load is needed
          delete this._hrefChanged;
  },

  _onLoadHandler: function(data){
          // summary:
          //              This is called whenever new content is being loaded
          this._set("isLoaded", true);
          try{
                  this.onLoadDeferred.callback(data);
          }catch(e){
                  console.error('Error '+this.widgetId+' running custom onLoad code: ' + e.message);
          }
  },

  _onUnloadHandler: function(){
          // summary:
          //              This is called whenever the content is being unloaded
          this._set("isLoaded", false);
          try{
                  this.onUnload();
          }catch(e){
                  console.error('Error '+this.widgetId+' running custom onUnload code: ' + e.message);
          }
  },

  destroyDescendants: function(/*Boolean*/ preserveDom){
          // summary:
          //              Destroy all the widgets inside the ContentPane and empty containerNode

          // Make sure we call onUnload (but only when the ContentPane has real content)
          if(this.isLoaded){
                  this._onUnloadHandler();
          }

          // Even if this.isLoaded == false there might still be a "Loading..." message
          // to erase, so continue...

          // For historical reasons we need to delete all widgets under this.containerNode,
          // even ones that the user has created manually.
          var setter = this._contentSetter;
          array.forEach(this.getChildren(), function(widget){
                  if(widget.destroyRecursive){
                          widget.destroyRecursive(preserveDom);
                  }
          });
          if(setter){
                  // Most of the widgets in setter.parseResults have already been destroyed, but
                  // things like Menu that have been moved to <body> haven't yet
                  array.forEach(setter.parseResults, function(widget){
                          if(widget.destroyRecursive && widget.domNode && widget.domNode.parentNode == win.body()){
                                  widget.destroyRecursive(preserveDom);
                          }
                  });
                  delete setter.parseResults;
          }

          // And then clear away all the DOM nodes
          if(!preserveDom){
                  html._emptyNode(this.containerNode);
          }

          // Delete any state information we have about current contents
          delete this._singleChild;
  },

  _setContent: function(/*String|DocumentFragment*/ cont, /*Boolean*/ isFakeContent){
          // summary:
          //              Insert the content into the container node

          // first get rid of child widgets
          this.destroyDescendants();

          // html.set will take care of the rest of the details
          // we provide an override for the error handling to ensure the widget gets the errors
          // configure the setter instance with only the relevant widget instance properties
          // NOTE: unless we hook into attr, or provide property setters for each property,
          // we need to re-configure the ContentSetter with each use
          var setter = this._contentSetter;
          if(! (setter && setter instanceof html._ContentSetter)){
                  setter = this._contentSetter = new html._ContentSetter({
                          node: this.containerNode,
                          _onError: lang.hitch(this, this._onError),
                          onContentError: lang.hitch(this, function(e){
                                  // fires if a domfault occurs when we are appending this.errorMessage
                                  // like for instance if domNode is a UL and we try append a DIV
                                  var errMess = this.onContentError(e);
                                  try{
                                          this.containerNode.innerHTML = errMess;
                                  }catch(e){
                                          console.error('Fatal '+this.id+' could not change content due to '+e.message, e);
                                  }
                          })/*,
                          _onError */
                  });
          }

          var setterParams = lang.mixin({
                  cleanContent: this.cleanContent,
                  extractContent: this.extractContent,
                  parseContent: !cont.domNode && this.parseOnLoad,
                  parserScope: this.parserScope,
                  startup: false,
                  dir: this.dir,
                  lang: this.lang,
                  textDir: this.textDir
          }, this._contentSetterParams || {});

          setter.set( (lang.isObject(cont) && cont.domNode) ? cont.domNode : cont, setterParams );

          // setter params must be pulled afresh from the ContentPane each time
          delete this._contentSetterParams;

          if(this.doLayout){
                  this._checkIfSingleChild();
          }

          if(!isFakeContent){
                  if(this._started){
                          // Startup each top level child widget (and they will start their children, recursively)
                          delete this._started;
                          this.startup();

                          // Call resize() on each of my child layout widgets,
                          // or resize() on my single child layout widget...
                          // either now (if I'm currently visible) or when I become visible
                          this._scheduleLayout();
                  }

                  this._onLoadHandler(cont);
          }
  },

  _onError: function(type, err, consoleText){
          this.onLoadDeferred.errback(err);

          // shows user the string that is returned by on[type]Error
          // override on[type]Error and return your own string to customize
          var errText = this['on' + type + 'Error'].call(this, err);
          if(consoleText){
                  console.error(consoleText, err);
          }else if(errText){// a empty string won't change current content
                  this._setContent(errText, true);
          }
  },

  // EVENT's, should be overide-able
  onLoad: function(/*===== data =====*/){
          // summary:
          //              Event hook, is called after everything is loaded and widgetified
          // tags:
          //              callback
  },

  onUnload: function(){
          // summary:
          //              Event hook, is called before old content is cleared
          // tags:
          //              callback
  },

  onDownloadStart: function(){
          // summary:
          //              Called before download starts.
          // description:
          //              The string returned by this function will be the html
          //              that tells the user we are loading something.
          //              Override with your own function if you want to change text.
          // tags:
          //              extension
          return this.loadingMessage;
  },

  onContentError: function(/*Error*/ /*===== error =====*/){
          // summary:
          //              Called on DOM faults, require faults etc. in content.
          //
          //              In order to display an error message in the pane, return
          //              the error message from this method, as an HTML string.
          //
          //              By default (if this method is not overriden), it returns
          //              nothing, so the error message is just printed to the console.
          // tags:
          //              extension
  },

  onDownloadError: function(/*Error*/ /*===== error =====*/){
          // summary:
          //              Called when download error occurs.
          //
          //              In order to display an error message in the pane, return
          //              the error message from this method, as an HTML string.
          //
          //              Default behavior (if this method is not overriden) is to display
          //              the error message inside the pane.
          // tags:
          //              extension
          return this.errorMessage;
  },

  onDownloadEnd: function(){
          // summary:
          //              Called when download is finished.
          // tags:
          //              callback
  }
});
 
});

},
'dijit/_WidgetsInTemplateMixin':function(){
define("dijit/_WidgetsInTemplateMixin", [
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/parser", // parser.parse
	"dijit/registry"	// registry.findWidgets
], function(array, declare, parser, registry){

	// module:
	//		dijit/_WidgetsInTemplateMixin
	// summary:
	//		Mixin to supplement _TemplatedMixin when template contains widgets

	return declare("dijit._WidgetsInTemplateMixin", null, {
		// summary:
		//		Mixin to supplement _TemplatedMixin when template contains widgets

		// _earlyTemplatedStartup: Boolean
		//		A fallback to preserve the 1.0 - 1.3 behavior of children in
		//		templates having their startup called before the parent widget
		//		fires postCreate. Defaults to 'false', causing child widgets to
		//		have their .startup() called immediately before a parent widget
		//		.startup(), but always after the parent .postCreate(). Set to
		//		'true' to re-enable to previous, arguably broken, behavior.
		_earlyTemplatedStartup: false,

		// widgetsInTemplate: [protected] Boolean
		//		Should we parse the template to find widgets that might be
		//		declared in markup inside it?  (Remove for 2.0 and assume true)
		widgetsInTemplate: true,

		_beforeFillContent: function(){
			if(this.widgetsInTemplate){
				// Before copying over content, instantiate widgets in template
				var node = this.domNode;

				var cw = (this._startupWidgets = parser.parse(node, {
					noStart: !this._earlyTemplatedStartup,
					template: true,
					inherited: {dir: this.dir, lang: this.lang, textDir: this.textDir},
					propsThis: this,	// so data-dojo-props of widgets in the template can reference "this" to refer to me
					scope: "dojo"	// even in multi-version mode templates use dojoType/data-dojo-type
				}));

				this._supportingWidgets = registry.findWidgets(node);

				this._attachTemplateNodes(cw, function(n,p){
					return n[p];
				});
			}
		},

		startup: function(){
			array.forEach(this._startupWidgets, function(w){
				if(w && !w._started && w.startup){
					w.startup();
				}
			});
			this.inherited(arguments);
		}
	});
});

},
'url:curam/layout/resources/UIMController.html':"<div id=\"uimcontroller_${uid}\" class=\"uimcontroller_${uid} uimController ${classList}\" data-dojo-attach-point=\"uimController\">\r\n  <div style=\"display:none;\" \r\n       id=\"uimcontroller_tc_${uid}\" \r\n       class=\"ipnTabController in-page-nav-tabContainer\"\r\n       data-dojo-attach-point=\"tabController\" \r\n       data-dojo-type=\"curam.layout.TabContainer\">\r\n  </div>\r\n  <div class=\"contentPanelFrameWrapper\"  \r\n        data-dojo-attach-point=\"frameWrapper\">\r\n    <iframe frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\"\r\n             allowTransparency=\"true\" \r\n             id=\"${iframeId}\" \r\n             data-dojo-attach-point=\"frame\"                 \r\n             class=\"${iframeId} ${iframeClassList}\"\r\n             iscpiframe=\"${iscpiframe}\"\r\n             title=\"${title}\" >\r\n    </iframe>\r\n  </div> \r\n</div>",
'dijit/_HasDropDown':function(){
define("dijit/_HasDropDown", [
	"dojo/_base/declare", // declare
	"dojo/_base/Deferred",
	"dojo/_base/event", // event.stop
	"dojo/dom", // dom.isDescendant
	"dojo/dom-attr", // domAttr.set
	"dojo/dom-class", // domClass.add domClass.contains domClass.remove
	"dojo/dom-geometry", // domGeometry.marginBox domGeometry.position
	"dojo/dom-style", // domStyle.set
	"dojo/has",
	"dojo/keys", // keys.DOWN_ARROW keys.ENTER keys.ESCAPE
	"dojo/_base/lang", // lang.hitch lang.isFunction
	"dojo/touch",
	"dojo/_base/window", // win.doc
	"dojo/window", // winUtils.getBox
	"./registry",	// registry.byNode()
	"./focus",
	"./popup",
	"./_FocusMixin"
], function(declare, Deferred, event,dom, domAttr, domClass, domGeometry, domStyle, has, keys, lang, touch,
			win, winUtils, registry, focus, popup, _FocusMixin){

/*=====
	var _FocusMixin = dijit._FocusMixin;
=====*/

	// module:
	//		dijit/_HasDropDown
	// summary:
	//		Mixin for widgets that need drop down ability.

	return declare("dijit._HasDropDown", _FocusMixin, {
		// summary:
		//		Mixin for widgets that need drop down ability.

		// _buttonNode: [protected] DomNode
		//		The button/icon/node to click to display the drop down.
		//		Can be set via a data-dojo-attach-point assignment.
		//		If missing, then either focusNode or domNode (if focusNode is also missing) will be used.
		_buttonNode: null,

		// _arrowWrapperNode: [protected] DomNode
		//		Will set CSS class dijitUpArrow, dijitDownArrow, dijitRightArrow etc. on this node depending
		//		on where the drop down is set to be positioned.
		//		Can be set via a data-dojo-attach-point assignment.
		//		If missing, then _buttonNode will be used.
		_arrowWrapperNode: null,

		// _popupStateNode: [protected] DomNode
		//		The node to set the popupActive class on.
		//		Can be set via a data-dojo-attach-point assignment.
		//		If missing, then focusNode or _buttonNode (if focusNode is missing) will be used.
		_popupStateNode: null,

		// _aroundNode: [protected] DomNode
		//		The node to display the popup around.
		//		Can be set via a data-dojo-attach-point assignment.
		//		If missing, then domNode will be used.
		_aroundNode: null,

		// dropDown: [protected] Widget
		//		The widget to display as a popup.  This widget *must* be
		//		defined before the startup function is called.
		dropDown: null,

		// autoWidth: [protected] Boolean
		//		Set to true to make the drop down at least as wide as this
		//		widget.  Set to false if the drop down should just be its
		//		default width
		autoWidth: true,

		// forceWidth: [protected] Boolean
		//		Set to true to make the drop down exactly as wide as this
		//		widget.  Overrides autoWidth.
		forceWidth: false,

		// maxHeight: [protected] Integer
		//		The max height for our dropdown.
		//		Any dropdown taller than this will have scrollbars.
		//		Set to 0 for no max height, or -1 to limit height to available space in viewport
		maxHeight: 0,

		// dropDownPosition: [const] String[]
		//		This variable controls the position of the drop down.
		//		It's an array of strings with the following values:
		//
		//			* before: places drop down to the left of the target node/widget, or to the right in
		//			  the case of RTL scripts like Hebrew and Arabic
		//			* after: places drop down to the right of the target node/widget, or to the left in
		//			  the case of RTL scripts like Hebrew and Arabic
		//			* above: drop down goes above target node
		//			* below: drop down goes below target node
		//
		//		The list is positions is tried, in order, until a position is found where the drop down fits
		//		within the viewport.
		//
		dropDownPosition: ["below","above"],

		// _stopClickEvents: Boolean
		//		When set to false, the click events will not be stopped, in
		//		case you want to use them in your subwidget
		_stopClickEvents: true,

		_onDropDownMouseDown: function(/*Event*/ e){
			// summary:
			//		Callback when the user mousedown's on the arrow icon
			if(this.disabled || this.readOnly){ return; }

			// Prevent default to stop things like text selection, but don't stop propogation, so that:
			//		1. TimeTextBox etc. can focusthe <input> on mousedown
			//		2. dropDownButtonActive class applied by _CssStateMixin (on button depress)
			//		3. user defined onMouseDown handler fires
			e.preventDefault();

			this._docHandler = this.connect(win.doc, touch.release, "_onDropDownMouseUp");

			this.toggleDropDown();
		},

		_onDropDownMouseUp: function(/*Event?*/ e){
			// summary:
			//		Callback when the user lifts their mouse after mouse down on the arrow icon.
			//		If the drop down is a simple menu and the mouse is over the menu, we execute it, otherwise, we focus our
			//		drop down widget.  If the event is missing, then we are not
			//		a mouseup event.
			//
			//		This is useful for the common mouse movement pattern
			//		with native browser <select> nodes:
			//			1. mouse down on the select node (probably on the arrow)
			//			2. move mouse to a menu item while holding down the mouse button
			//			3. mouse up.  this selects the menu item as though the user had clicked it.
			if(e && this._docHandler){
				this.disconnect(this._docHandler);
			}
			var dropDown = this.dropDown, overMenu = false;

			if(e && this._opened){
				// This code deals with the corner-case when the drop down covers the original widget,
				// because it's so large.  In that case mouse-up shouldn't select a value from the menu.
				// Find out if our target is somewhere in our dropdown widget,
				// but not over our _buttonNode (the clickable node)
				var c = domGeometry.position(this._buttonNode, true);
				if(!(e.pageX >= c.x && e.pageX <= c.x + c.w) ||
					!(e.pageY >= c.y && e.pageY <= c.y + c.h)){
					var t = e.target;
					while(t && !overMenu){
						if(domClass.contains(t, "dijitPopup")){
							overMenu = true;
						}else{
							t = t.parentNode;
						}
					}
					if(overMenu){
						t = e.target;
						if(dropDown.onItemClick){
							var menuItem;
							while(t && !(menuItem = registry.byNode(t))){
								t = t.parentNode;
							}
							if(menuItem && menuItem.onClick && menuItem.getParent){
								menuItem.getParent().onItemClick(menuItem, e);
							}
						}
						return;
					}
				}
			}
			if(this._opened){
				if(dropDown.focus && dropDown.autoFocus !== false){
					// Focus the dropdown widget - do it on a delay so that we
					// don't steal our own focus.
					window.setTimeout(lang.hitch(dropDown, "focus"), 1);
				}
			}else{
				// The drop down arrow icon probably can't receive focus, but widget itself should get focus.
				// setTimeout() needed to make it work on IE (test DateTextBox)
				setTimeout(lang.hitch(this, "focus"), 0);
			}

			if(has("ios")){
				this._justGotMouseUp = true;
				setTimeout(lang.hitch(this, function(){
					this._justGotMouseUp = false;
				}), 0);
			}
		},

		_onDropDownClick: function(/*Event*/ e){
			if(has("ios") && !this._justGotMouseUp){
				// This branch fires on iPhone for ComboBox, because the button node is an <input> and doesn't
				// generate touchstart/touchend events.   Pretend we just got a mouse down / mouse up.
				// The if(has("ios") is necessary since IE and desktop safari get spurious onclick events
				// when there are nested tables (specifically, clicking on a table that holds a dijit.form.Select,
				// but not on the Select itself, causes an onclick event on the Select)
				this._onDropDownMouseDown(e);
				this._onDropDownMouseUp(e);
			}

			// The drop down was already opened on mousedown/keydown; just need to call stopEvent().
			if(this._stopClickEvents){
				event.stop(e);
			}
		},

		buildRendering: function(){
			this.inherited(arguments);

			this._buttonNode = this._buttonNode || this.focusNode || this.domNode;
			this._popupStateNode = this._popupStateNode || this.focusNode || this._buttonNode;

			// Add a class to the "dijitDownArrowButton" type class to _buttonNode so theme can set direction of arrow
			// based on where drop down will normally appear
			var defaultPos = {
					"after" : this.isLeftToRight() ? "Right" : "Left",
					"before" : this.isLeftToRight() ? "Left" : "Right",
					"above" : "Up",
					"below" : "Down",
					"left" : "Left",
					"right" : "Right"
			}[this.dropDownPosition[0]] || this.dropDownPosition[0] || "Down";
			domClass.add(this._arrowWrapperNode || this._buttonNode, "dijit" + defaultPos + "ArrowButton");
		},

		postCreate: function(){
			// summary:
			//		set up nodes and connect our mouse and keypress events

			this.inherited(arguments);

			this.connect(this._buttonNode, touch.press, "_onDropDownMouseDown");
			this.connect(this._buttonNode, "onclick", "_onDropDownClick");
			this.connect(this.focusNode, "onkeypress", "_onKey");
			this.connect(this.focusNode, "onkeyup", "_onKeyUp");
		},

		destroy: function(){
			if(this.dropDown){
				// Destroy the drop down, unless it's already been destroyed.  This can happen because
				// the drop down is a direct child of <body> even though it's logically my child.
				if(!this.dropDown._destroyed){
					this.dropDown.destroyRecursive();
				}
				delete this.dropDown;
			}
			this.inherited(arguments);
		},

		_onKey: function(/*Event*/ e){
			// summary:
			//		Callback when the user presses a key while focused on the button node

			if(this.disabled || this.readOnly){ return; }

			var d = this.dropDown, target = e.target;
			if(d && this._opened && d.handleKey){
				if(d.handleKey(e) === false){
					/* false return code means that the drop down handled the key */
					event.stop(e);
					return;
				}
			}
			if(d && this._opened && e.charOrCode == keys.ESCAPE){
				this.closeDropDown();
				event.stop(e);
			}else if(!this._opened &&
					(e.charOrCode == keys.DOWN_ARROW ||
						( (e.charOrCode == keys.ENTER || e.charOrCode == " ") &&
						  //ignore enter and space if the event is for a text input
						  ((target.tagName || "").toLowerCase() !== 'input' ||
						     (target.type && target.type.toLowerCase() !== 'text'))))){
				// Toggle the drop down, but wait until keyup so that the drop down doesn't
				// get a stray keyup event, or in the case of key-repeat (because user held
				// down key for too long), stray keydown events
				this._toggleOnKeyUp = true;
				event.stop(e);
			}
		},

		_onKeyUp: function(){
			if(this._toggleOnKeyUp){
				delete this._toggleOnKeyUp;
				this.toggleDropDown();
				var d = this.dropDown;	// drop down may not exist until toggleDropDown() call
				if(d && d.focus){
					setTimeout(lang.hitch(d, "focus"), 1);
				}
			}
		},

		_onBlur: function(){
			// summary:
			//		Called magically when focus has shifted away from this widget and it's dropdown

			// Don't focus on button if the user has explicitly focused on something else (happens
			// when user clicks another control causing the current popup to close)..
			// But if focus is inside of the drop down then reset focus to me, because IE doesn't like
			// it when you display:none a node with focus.
			var focusMe = focus.curNode && this.dropDown && dom.isDescendant(focus.curNode, this.dropDown.domNode);

			this.closeDropDown(focusMe);

			this.inherited(arguments);
		},

		isLoaded: function(){
			// summary:
			//		Returns true if the dropdown exists and it's data is loaded.  This can
			//		be overridden in order to force a call to loadDropDown().
			// tags:
			//		protected

			return true;
		},

		loadDropDown: function(/*Function*/ loadCallback){
			// summary:
			//		Creates the drop down if it doesn't exist, loads the data
			//		if there's an href and it hasn't been loaded yet, and then calls
			//		the given callback.
			// tags:
			//		protected

			// TODO: for 2.0, change API to return a Deferred, instead of calling loadCallback?
			loadCallback();
		},

		loadAndOpenDropDown: function(){
			// summary:
			//		Creates the drop down if it doesn't exist, loads the data
			//		if there's an href and it hasn't been loaded yet, and
			//		then opens the drop down.  This is basically a callback when the
			//		user presses the down arrow button to open the drop down.
			// returns: Deferred
			//		Deferred for the drop down widget that
			//		fires when drop down is created and loaded
			// tags:
			//		protected
			var d = new Deferred(),
				afterLoad = lang.hitch(this, function(){
					this.openDropDown();
					d.resolve(this.dropDown);
				});
			if(!this.isLoaded()){
				this.loadDropDown(afterLoad);
			}else{
				afterLoad();
			}
			return d;
		},

		toggleDropDown: function(){
			// summary:
			//		Callback when the user presses the down arrow button or presses
			//		the down arrow key to open/close the drop down.
			//		Toggle the drop-down widget; if it is up, close it, if not, open it
			// tags:
			//		protected

			if(this.disabled || this.readOnly){ return; }
			if(!this._opened){
				this.loadAndOpenDropDown();
			}else{
				this.closeDropDown();
			}
		},

		openDropDown: function(){
			// summary:
			//		Opens the dropdown for this widget.   To be called only when this.dropDown
			//		has been created and is ready to display (ie, it's data is loaded).
			// returns:
			//		return value of dijit.popup.open()
			// tags:
			//		protected

			var dropDown = this.dropDown,
				ddNode = dropDown.domNode,
				aroundNode = this._aroundNode || this.domNode,
				self = this;

			// Prepare our popup's height and honor maxHeight if it exists.

			// TODO: isn't maxHeight dependent on the return value from dijit.popup.open(),
			// ie, dependent on how much space is available (BK)

			if(!this._preparedNode){
				this._preparedNode = true;
				// Check if we have explicitly set width and height on the dropdown widget dom node
				if(ddNode.style.width){
					this._explicitDDWidth = true;
				}
				if(ddNode.style.height){
					this._explicitDDHeight = true;
				}
			}

			// Code for resizing dropdown (height limitation, or increasing width to match my width)
			if(this.maxHeight || this.forceWidth || this.autoWidth){
				var myStyle = {
					display: "",
					visibility: "hidden"
				};
				if(!this._explicitDDWidth){
					myStyle.width = "";
				}
				if(!this._explicitDDHeight){
					myStyle.height = "";
				}
				domStyle.set(ddNode, myStyle);

				// Figure out maximum height allowed (if there is a height restriction)
				var maxHeight = this.maxHeight;
				if(maxHeight == -1){
					// limit height to space available in viewport either above or below my domNode
					// (whichever side has more room)
					var viewport = winUtils.getBox(),
						position = domGeometry.position(aroundNode, false);
					maxHeight = Math.floor(Math.max(position.y, viewport.h - (position.y + position.h)));
				}

				// Attach dropDown to DOM and make make visibility:hidden rather than display:none
				// so we call startup() and also get the size
				popup.moveOffScreen(dropDown);

				if(dropDown.startup && !dropDown._started){
					dropDown.startup(); // this has to be done after being added to the DOM
				}
				// Get size of drop down, and determine if vertical scroll bar needed
				var mb = domGeometry.getMarginSize(ddNode);
				var overHeight = (maxHeight && mb.h > maxHeight);
				domStyle.set(ddNode, {
					overflowX: "hidden",
					overflowY: overHeight ? "auto" : "hidden"
				});
				if(overHeight){
					mb.h = maxHeight;
					if("w" in mb){
						mb.w += 16;	// room for vertical scrollbar
					}
				}else{
					delete mb.h;
				}

				// Adjust dropdown width to match or be larger than my width
				if(this.forceWidth){
					mb.w = aroundNode.offsetWidth;
				}else if(this.autoWidth){
					mb.w = Math.max(mb.w, aroundNode.offsetWidth);
				}else{
					delete mb.w;
				}

				// And finally, resize the dropdown to calculated height and width
				if(lang.isFunction(dropDown.resize)){
					dropDown.resize(mb);
				}else{
					domGeometry.setMarginBox(ddNode, mb);
				}
			}

			var retVal = popup.open({
				parent: this,
				popup: dropDown,
				around: aroundNode,
				orient: this.dropDownPosition,
				onExecute: function(){
					self.closeDropDown(true);
				},
				onCancel: function(){
					self.closeDropDown(true);
				},
				onClose: function(){
					domAttr.set(self._popupStateNode, "popupActive", false);
					domClass.remove(self._popupStateNode, "dijitHasDropDownOpen");
					self._opened = false;
				}
			});
			domAttr.set(this._popupStateNode, "popupActive", "true");
			domClass.add(self._popupStateNode, "dijitHasDropDownOpen");
			this._opened=true;

			// TODO: set this.checked and call setStateClass(), to affect button look while drop down is shown
			return retVal;
		},

		closeDropDown: function(/*Boolean*/ focus){
			// summary:
			//		Closes the drop down on this widget
			// focus:
			//		If true, refocuses the button widget
			// tags:
			//		protected

			if(this._opened){
				if(focus){ this.focus(); }
				popup.close(this.dropDown);
				this._opened = false;
			}
		}

	});
});

},
'url:dijit/form/templates/DropDownBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n",
'curam/GlobalVars':function(){
define("curam/GlobalVars", ["curam/util"
        ], function() {
  
  var GlobalVars = {
    // popupMappingRepository: Array
    //    stores mapping infor between popup results and widgets
    popupMappingRepository: [],

    // popupMappingLoaded: Array
    //    Mark what mappings have been fully loaded
    popupMappingLoaded: [],
    
    // popupInputs: Array
    //    Can be used to store values as inputs for a popup
    //    used only by the date selector popup currently
    //    also as no jsp tag support
    popupInputs: [],
    
    // currentPopupProps: Object
    currentPopupProps: null,
    
    // currentPopupInstanceName: String
    //    Used to index into the above repositories. The popup page
    //    Javascript codes accesses this variables as
    //    "opener.currentPopupInstance". i.e. before a popup is opened this
    //    variables MUST be set.
    currentPopupInstanceName: "",
    
    // popupWindow: Object
    //    The currently opened popup window instance
    popupWindow: null,
    
    // popupCTCodeMappings: Array
    //    Used to map code table values to page ids  
    popupCTCodeMappings: [],
    
    // popupPropertiesRepository: Array
    popupPropertiesRepository: [],
    
    // POPUP_EMPTY_SPAN_MIN_SIZE: Number
    //    This corresponds to the string set in the StaticPopupTextTag custom tag.
    POPUP_EMPTY_SPAN_MIN_SIZE: 25,
    
    // POPUP_EMPTY_SPAN_CHAR: String
    POPUP_EMPTY_SPAN_CHAR: "\u00A0",
    
    // POPUP_EMPTY_SPAN_VALUE: String
    //    This corresponds to the string set in the StaticPopupTextTag custom tag.
    POPUP_EMPTY_SPAN_VALUE: null,
    
    // replacedButtons: Array
    //    An action control can be displayed at the top and bottom of the 
    //    page and each instance has the same name. gen-jsp.xsl adds a 
    //    call to curam.util.replaceSubmitButton() for each instance of the button. 
    //    The following array tracks which buttons have
    //    already been replaced to ensure it is not done twice.
    replacedButtons: []
  };
  
  var gc = dojo.global.curam;
  dojo.mixin(gc, GlobalVars); 

  gc.POPUP_EMPTY_SPAN_VALUE = curam.util.fillString(
        gc.POPUP_EMPTY_SPAN_CHAR, gc.POPUP_EMPTY_SPAN_MIN_SIZE);
  
  return GlobalVars;
});

},
'curam/html':function(){
/*
 This file provides general html manipulation functions.
*/
define("curam/html", ["curam/define"
        ], function() {
  
  curam.define.singleton("curam.html", {
    splitWithTag: function(value, delim, tagName, fnModifier) {
      // summary: Splits a string value into tokenized elements, then wraps
      //          the specified tag name, or "div" if no tagName is specified.
      //          E.g. calling 
      //            curam.html.splitWithTag("hello\nworld", "\n", "div")
      //          returns
      //            "<div>hello</div><div>world</div>
      //          If fnModifier is speficied, it should be a function to which
      //          each split element is passed, and should return a new value for
      //          that element.
      var splitVal = value.split(delim || "\n");
      
      // If there are no delimiters found, do not wrap any tags around the value.
      if(splitVal.length < 2) {
        return fnModifier ? fnModifier(value) : value;
      }
      var t = (tagName || "div") + ">";
      var tagStart = "<" + t, tagEnd = "</" + t;
      
      if(fnModifier) {
        for(var i = 0; i < splitVal.length; i++) {
          splitVal[i] = fnModifier(splitVal[i]);
        }
      }
      
      // Join the array of tokenized values together with an end and start tag.
      return tagStart + splitVal.join(tagEnd + tagStart) + tagEnd;
    }
  });
  
  return curam.html;
});

},
'dojo/html':function(){
define("dojo/html", ["./_base/kernel", "./_base/lang", "./_base/array", "./_base/declare", "./dom", "./dom-construct", "./parser"], function(dojo, lang, darray, declare, dom, domConstruct, parser) {
	// module:
	//		dojo/html
	// summary:
	//		TODOC

	lang.getObject("html", true, dojo);

	// the parser might be needed..

	// idCounter is incremented with each instantiation to allow asignment of a unique id for tracking, logging purposes
	var idCounter = 0;

	dojo.html._secureForInnerHtml = function(/*String*/ cont){
		// summary:
		//		removes !DOCTYPE and title elements from the html string.
		//
		//		khtml is picky about dom faults, you can't attach a style or <title> node as child of body
		//		must go into head, so we need to cut out those tags
		//	cont:
		//		An html string for insertion into the dom
		//
		return cont.replace(/(?:\s*<!DOCTYPE\s[^>]+>|<title[^>]*>[\s\S]*?<\/title>)/ig, ""); // String
	};

/*====
	dojo.html._emptyNode = function(node){
		// summary:
		//		removes all child nodes from the given node
		//	node: DOMNode
		//		the parent element
	};
=====*/
	dojo.html._emptyNode = domConstruct.empty;

	dojo.html._setNodeContent = function(/* DomNode */ node, /* String|DomNode|NodeList */ cont){
		// summary:
		//		inserts the given content into the given node
		//	node:
		//		the parent element
		//	content:
		//		the content to be set on the parent element.
		//		This can be an html string, a node reference or a NodeList, dojo.NodeList, Array or other enumerable list of nodes

		// always empty
		domConstruct.empty(node);

		if(cont) {
			if(typeof cont == "string") {
				cont = domConstruct.toDom(cont, node.ownerDocument);
			}
			if(!cont.nodeType && lang.isArrayLike(cont)) {
				// handle as enumerable, but it may shrink as we enumerate it
				for(var startlen=cont.length, i=0; i<cont.length; i=startlen==cont.length ? i+1 : 0) {
					domConstruct.place( cont[i], node, "last");
				}
			} else {
				// pass nodes, documentFragments and unknowns through to dojo.place
				domConstruct.place(cont, node, "last");
			}
		}

		// return DomNode
		return node;
	};

	// we wrap up the content-setting operation in a object
	declare("dojo.html._ContentSetter", null,
		{
			// node: DomNode|String
			//		An node which will be the parent element that we set content into
			node: "",

			// content: String|DomNode|DomNode[]
			//		The content to be placed in the node. Can be an HTML string, a node reference, or a enumerable list of nodes
			content: "",

			// id: String?
			//		Usually only used internally, and auto-generated with each instance
			id: "",

			// cleanContent: Boolean
			//		Should the content be treated as a full html document,
			//		and the real content stripped of <html>, <body> wrapper before injection
			cleanContent: false,

			// extractContent: Boolean
			//		Should the content be treated as a full html document, and the real content stripped of <html>, <body> wrapper before injection
			extractContent: false,

			// parseContent: Boolean
			//		Should the node by passed to the parser after the new content is set
			parseContent: false,

			// parserScope: String
			//		Flag passed to parser.	Root for attribute names to search for.	  If scopeName is dojo,
			//		will search for data-dojo-type (or dojoType).  For backwards compatibility
			//		reasons defaults to dojo._scopeName (which is "dojo" except when
			//		multi-version support is used, when it will be something like dojo16, dojo20, etc.)
			parserScope: dojo._scopeName,

			// startup: Boolean
			//		Start the child widgets after parsing them.	  Only obeyed if parseContent is true.
			startup: true,

			// lifecyle methods
			constructor: function(/* Object */params, /* String|DomNode */node){
				//	summary:
				//		Provides a configurable, extensible object to wrap the setting on content on a node
				//		call the set() method to actually set the content..

				// the original params are mixed directly into the instance "this"
				lang.mixin(this, params || {});

				// give precedence to params.node vs. the node argument
				// and ensure its a node, not an id string
				node = this.node = dom.byId( this.node || node );

				if(!this.id){
					this.id = [
						"Setter",
						(node) ? node.id || node.tagName : "",
						idCounter++
					].join("_");
				}
			},
			set: function(/* String|DomNode|NodeList? */ cont, /* Object? */ params){
				// summary:
				//		front-end to the set-content sequence
				//	cont:
				//		An html string, node or enumerable list of nodes for insertion into the dom
				//		If not provided, the object's content property will be used
				if(undefined !== cont){
					this.content = cont;
				}
				// in the re-use scenario, set needs to be able to mixin new configuration
				if(params){
					this._mixin(params);
				}

				this.onBegin();
				this.setContent();
				this.onEnd();

				return this.node;
			},
			setContent: function(){
				// summary:
				//		sets the content on the node

				var node = this.node;
				if(!node) {
					// can't proceed
					throw new Error(this.declaredClass + ": setContent given no node");
				}
				try{
					node = dojo.html._setNodeContent(node, this.content);
				}catch(e){
					// check if a domfault occurs when we are appending this.errorMessage
					// like for instance if domNode is a UL and we try append a DIV

					// FIXME: need to allow the user to provide a content error message string
					var errMess = this.onContentError(e);
					try{
						node.innerHTML = errMess;
					}catch(e){
						console.error('Fatal ' + this.declaredClass + '.setContent could not change content due to '+e.message, e);
					}
				}
				// always put back the node for the next method
				this.node = node; // DomNode
			},

			empty: function() {
				// summary
				//	cleanly empty out existing content

				// destroy any widgets from a previous run
				// NOTE: if you dont want this you'll need to empty
				// the parseResults array property yourself to avoid bad things happenning
				if(this.parseResults && this.parseResults.length) {
					darray.forEach(this.parseResults, function(w) {
						if(w.destroy){
							w.destroy();
						}
					});
					delete this.parseResults;
				}
				// this is fast, but if you know its already empty or safe, you could
				// override empty to skip this step
				dojo.html._emptyNode(this.node);
			},

			onBegin: function(){
				// summary
				//		Called after instantiation, but before set();
				//		It allows modification of any of the object properties
				//		- including the node and content provided - before the set operation actually takes place
				//		This default implementation checks for cleanContent and extractContent flags to
				//		optionally pre-process html string content
				var cont = this.content;

				if(lang.isString(cont)){
					if(this.cleanContent){
						cont = dojo.html._secureForInnerHtml(cont);
					}

					if(this.extractContent){
						var match = cont.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
						if(match){ cont = match[1]; }
					}
				}

				// clean out the node and any cruft associated with it - like widgets
				this.empty();

				this.content = cont;
				return this.node; /* DomNode */
			},

			onEnd: function(){
				// summary
				//		Called after set(), when the new content has been pushed into the node
				//		It provides an opportunity for post-processing before handing back the node to the caller
				//		This default implementation checks a parseContent flag to optionally run the dojo parser over the new content
				if(this.parseContent){
					// populates this.parseResults if you need those..
					this._parse();
				}
				return this.node; /* DomNode */
			},

			tearDown: function(){
				// summary
				//		manually reset the Setter instance if its being re-used for example for another set()
				// description
				//		tearDown() is not called automatically.
				//		In normal use, the Setter instance properties are simply allowed to fall out of scope
				//		but the tearDown method can be called to explicitly reset this instance.
				delete this.parseResults;
				delete this.node;
				delete this.content;
			},

			onContentError: function(err){
				return "Error occured setting content: " + err;
			},

			_mixin: function(params){
				// mix properties/methods into the instance
				// TODO: the intention with tearDown is to put the Setter's state
				// back to that of the original constructor (vs. deleting/resetting everything regardless of ctor params)
				// so we could do something here to move the original properties aside for later restoration
				var empty = {}, key;
				for(key in params){
					if(key in empty){ continue; }
					// TODO: here's our opportunity to mask the properties we dont consider configurable/overridable
					// .. but history shows we'll almost always guess wrong
					this[key] = params[key];
				}
			},
			_parse: function(){
				// summary:
				//		runs the dojo parser over the node contents, storing any results in this.parseResults
				//		Any errors resulting from parsing are passed to _onError for handling

				var rootNode = this.node;
				try{
					// store the results (widgets, whatever) for potential retrieval
					var inherited = {};
					darray.forEach(["dir", "lang", "textDir"], function(name){
						if(this[name]){
							inherited[name] = this[name];
						}
					}, this);
					this.parseResults = parser.parse({
						rootNode: rootNode,
						noStart: !this.startup,
						inherited: inherited,
						scope: this.parserScope
					});
				}catch(e){
					this._onError('Content', e, "Error parsing in _ContentSetter#"+this.id);
				}
			},

			_onError: function(type, err, consoleText){
				// summary:
				//		shows user the string that is returned by on[type]Error
				//		overide/implement on[type]Error and return your own string to customize
				var errText = this['on' + type + 'Error'].call(this, err);
				if(consoleText){
					console.error(consoleText, err);
				}else if(errText){ // a empty string won't change current content
					dojo.html._setNodeContent(this.node, errText, true);
				}
			}
	}); // end dojo.declare()

	dojo.html.set = function(/* DomNode */ node, /* String|DomNode|NodeList */ cont, /* Object? */ params){
			// summary:
			//		inserts (replaces) the given content into the given node. dojo.place(cont, node, "only")
			//		may be a better choice for simple HTML insertion.
			// description:
			//		Unless you need to use the params capabilities of this method, you should use
			//		dojo.place(cont, node, "only"). dojo.place() has more robust support for injecting
			//		an HTML string into the DOM, but it only handles inserting an HTML string as DOM
			//		elements, or inserting a DOM node. dojo.place does not handle NodeList insertions
			//		or the other capabilities as defined by the params object for this method.
			//	node:
			//		the parent element that will receive the content
			//	cont:
			//		the content to be set on the parent element.
			//		This can be an html string, a node reference or a NodeList, dojo.NodeList, Array or other enumerable list of nodes
			//	params:
			//		Optional flags/properties to configure the content-setting. See dojo.html._ContentSetter
			//	example:
			//		A safe string/node/nodelist content replacement/injection with hooks for extension
			//		Example Usage:
			//		dojo.html.set(node, "some string");
			//		dojo.html.set(node, contentNode, {options});
			//		dojo.html.set(node, myNode.childNodes, {options});
		if(undefined == cont){
			console.warn("dojo.html.set: no cont argument provided, using empty string");
			cont = "";
		}
		if(!params){
			// simple and fast
			return dojo.html._setNodeContent(node, cont, true);
		}else{
			// more options but slower
			// note the arguments are reversed in order, to match the convention for instantiation via the parser
			var op = new dojo.html._ContentSetter(lang.mixin(
					params,
					{ content: cont, node: node }
			));
			return op.set();
		}
	};

	return dojo.html;
});

},
'url:dijit/templates/MenuBar.html':"<div class=\"dijitMenuBar dijitMenuPassive\" data-dojo-attach-point=\"containerNode\"  role=\"menubar\" tabIndex=\"${tabIndex}\" data-dojo-attach-event=\"onkeypress: _onKeyPress\"></div>\n",
'dojo/Stateful':function(){
define("dojo/Stateful", ["./_base/declare", "./_base/lang", "./_base/array"], function(declare, lang, array) {
	// module:
	//		dojo/Stateful
	// summary:
	//		TODOC

return declare("dojo.Stateful", null, {
	// summary:
	//		Base class for objects that provide named properties with optional getter/setter
	//		control and the ability to watch for property changes
	// example:
	//	|	var obj = new dojo.Stateful();
	//	|	obj.watch("foo", function(){
	//	|		console.log("foo changed to " + this.get("foo"));
	//	|	});
	//	|	obj.set("foo","bar");
	postscript: function(mixin){
		if(mixin){
			lang.mixin(this, mixin);
		}
	},

	get: function(/*String*/name){
		// summary:
		//		Get a property on a Stateful instance.
		//	name:
		//		The property to get.
		//	returns:
		//		The property value on this Stateful instance.
		// description:
		//		Get a named property on a Stateful object. The property may
		//		potentially be retrieved via a getter method in subclasses. In the base class
		// 		this just retrieves the object's property.
		// 		For example:
		//	|	stateful = new dojo.Stateful({foo: 3});
		//	|	stateful.get("foo") // returns 3
		//	|	stateful.foo // returns 3

		return this[name]; //Any
	},
	set: function(/*String*/name, /*Object*/value){
		// summary:
		//		Set a property on a Stateful instance
		//	name:
		//		The property to set.
		//	value:
		//		The value to set in the property.
		//	returns:
		//		The function returns this dojo.Stateful instance.
		// description:
		//		Sets named properties on a stateful object and notifies any watchers of
		// 		the property. A programmatic setter may be defined in subclasses.
		// 		For example:
		//	|	stateful = new dojo.Stateful();
		//	|	stateful.watch(function(name, oldValue, value){
		//	|		// this will be called on the set below
		//	|	}
		//	|	stateful.set(foo, 5);
		//
		//	set() may also be called with a hash of name/value pairs, ex:
		//	|	myObj.set({
		//	|		foo: "Howdy",
		//	|		bar: 3
		//	|	})
		//	This is equivalent to calling set(foo, "Howdy") and set(bar, 3)
		if(typeof name === "object"){
			for(var x in name){
				if(name.hasOwnProperty(x) && x !="_watchCallbacks"){
					this.set(x, name[x]);
				}
			}
			return this;
		}
		var oldValue = this[name];
		this[name] = value;
		if(this._watchCallbacks){
			this._watchCallbacks(name, oldValue, value);
		}
		return this; //dojo.Stateful
	},
	watch: function(/*String?*/name, /*Function*/callback){
		// summary:
		//		Watches a property for changes
		//	name:
		//		Indicates the property to watch. This is optional (the callback may be the
		// 		only parameter), and if omitted, all the properties will be watched
		// returns:
		//		An object handle for the watch. The unwatch method of this object
		// 		can be used to discontinue watching this property:
		//		|	var watchHandle = obj.watch("foo", callback);
		//		|	watchHandle.unwatch(); // callback won't be called now
		//	callback:
		//		The function to execute when the property changes. This will be called after
		//		the property has been changed. The callback will be called with the |this|
		//		set to the instance, the first argument as the name of the property, the
		// 		second argument as the old value and the third argument as the new value.

		var callbacks = this._watchCallbacks;
		if(!callbacks){
			var self = this;
			callbacks = this._watchCallbacks = function(name, oldValue, value, ignoreCatchall){
				var notify = function(propertyCallbacks){
					if(propertyCallbacks){
						propertyCallbacks = propertyCallbacks.slice();
						for(var i = 0, l = propertyCallbacks.length; i < l; i++){
							propertyCallbacks[i].call(self, name, oldValue, value);
						}
					}
				};
				notify(callbacks['_' + name]);
				if(!ignoreCatchall){
					notify(callbacks["*"]); // the catch-all
				}
			}; // we use a function instead of an object so it will be ignored by JSON conversion
		}
		if(!callback && typeof name === "function"){
			callback = name;
			name = "*";
		}else{
			// prepend with dash to prevent name conflicts with function (like "name" property)
			name = '_' + name;
		}
		var propertyCallbacks = callbacks[name];
		if(typeof propertyCallbacks !== "object"){
			propertyCallbacks = callbacks[name] = [];
		}
		propertyCallbacks.push(callback);
		return {
			unwatch: function(){
				propertyCallbacks.splice(array.indexOf(propertyCallbacks, callback), 1);
			}
		}; //Object
	}

});

});

},
'curam/widget/ComboBox':function(){
require({cache:{
'url:curam/widget/templates/ComboBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\"\r\n  id=\"widget_${id}\"\r\n  role=\"listbox\"\r\n  ><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\r\n    data-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\r\n    ><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n      ${_buttonInputDisabled}\r\n  /></div\r\n  ><div class='dijitReset dijitValidationContainer'\r\n    ><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n  /></div\r\n  ><div class=\"dijitReset dijitInputField dijitInputContainer\" role=\"listbox\"\r\n    ><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\r\n      data-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\r\n  /></div\r\n></div>\r\n"}});
/*
 * Copyright 2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/widget/ComboBox", ["dijit/registry", "dojo/on", "dojo/text!curam/widget/templates/ComboBox.html",
        "dijit/form/ComboBox"
        ], function(registry, on, template) {
  
/*
 * Modification History
 * --------------------
   * 10-Mar-2014  AS  [CR00415345] Handled the enter key on open dropdown.
   * 09-Aug-2012 MV  [CR00337714] Load HTML template using the new mechanism. 
   * 01-Nov-2011 MV [CR00289694] Upgrade to Dojo 1.6. Fix code style, comments.
   * 08-Sep-2011 SB [TEC-7931]   Initial version.
   */

  /**
   * @name curam.widget.DropDownBox
   * @namespace Override of the Dojo ComboBox in order to make the Combobox
   *              accessible using screen reader.
   * 
   * 
   */
  var ComboBox = dojo.declare("curam.widget.ComboBox", dijit.form.ComboBox,
  /**
   * @lends curam.widget.ComboBox.prototype
   */
  {
    templateString: template,
    // Flag which indicates if the enter key is used on open dropdown
    enterKeyOnOpenDropDown: false,
    
    postCreate : function() {
      // Attached a keyboard event listener so that we can set a flag
      // indicating enter is pressed in open state of dropdown
      on(this.focusNode, "keydown",function(e){
        var widget = registry.byNode(dojo.byId("widget_" + e.target.id)); 
        if(e.keyCode == dojo.keys.ENTER && widget._opened) {
          widget.enterKeyOnOpenDropDown = true;
         }
       });
      
      this.inherited(arguments);
    }
  });
  
  return ComboBox;
});

},
'dojo/dnd/autoscroll':function(){
define("dojo/dnd/autoscroll", ["../main", "../window"], function(dojo) {
	// module:
	//		dojo/dnd/autoscroll
	// summary:
	//		TODOC

dojo.getObject("dnd", true, dojo);

dojo.dnd.getViewport = dojo.window.getBox;

dojo.dnd.V_TRIGGER_AUTOSCROLL = 32;
dojo.dnd.H_TRIGGER_AUTOSCROLL = 32;

dojo.dnd.V_AUTOSCROLL_VALUE = 16;
dojo.dnd.H_AUTOSCROLL_VALUE = 16;

dojo.dnd.autoScroll = function(e){
	// summary:
	//		a handler for onmousemove event, which scrolls the window, if
	//		necesary
	// e: Event
	//		onmousemove event

	// FIXME: needs more docs!
	var v = dojo.window.getBox(), dx = 0, dy = 0;
	if(e.clientX < dojo.dnd.H_TRIGGER_AUTOSCROLL){
		dx = -dojo.dnd.H_AUTOSCROLL_VALUE;
	}else if(e.clientX > v.w - dojo.dnd.H_TRIGGER_AUTOSCROLL){
		dx = dojo.dnd.H_AUTOSCROLL_VALUE;
	}
	if(e.clientY < dojo.dnd.V_TRIGGER_AUTOSCROLL){
		dy = -dojo.dnd.V_AUTOSCROLL_VALUE;
	}else if(e.clientY > v.h - dojo.dnd.V_TRIGGER_AUTOSCROLL){
		dy = dojo.dnd.V_AUTOSCROLL_VALUE;
	}
	window.scrollBy(dx, dy);
};

dojo.dnd._validNodes = {"div": 1, "p": 1, "td": 1};
dojo.dnd._validOverflow = {"auto": 1, "scroll": 1};

dojo.dnd.autoScrollNodes = function(e){
	// summary:
	//		a handler for onmousemove event, which scrolls the first avaialble
	//		Dom element, it falls back to dojo.dnd.autoScroll()
	// e: Event
	//		onmousemove event

	// FIXME: needs more docs!

	var b, t, w, h, rx, ry, dx = 0, dy = 0, oldLeft, oldTop;

	for(var n = e.target; n;){
		if(n.nodeType == 1 && (n.tagName.toLowerCase() in dojo.dnd._validNodes)){
			var s = dojo.getComputedStyle(n),
				overflow = (s.overflow.toLowerCase() in dojo.dnd._validOverflow),
				overflowX = (s.overflowX.toLowerCase() in dojo.dnd._validOverflow),
				overflowY = (s.overflowY.toLowerCase() in dojo.dnd._validOverflow);
			if(overflow || overflowX || overflowY){
				b = dojo._getContentBox(n, s);
				t = dojo.position(n, true);
			}
			// overflow-x
			if(overflow || overflowX){
				w = Math.min(dojo.dnd.H_TRIGGER_AUTOSCROLL, b.w / 2);
				rx = e.pageX - t.x;
				if(dojo.isWebKit || dojo.isOpera){
					// FIXME: this code should not be here, it should be taken into account
					// either by the event fixing code, or the dojo.position()
					// FIXME: this code doesn't work on Opera 9.5 Beta
					rx += dojo.body().scrollLeft;
				}
				dx = 0;
				if(rx > 0 && rx < b.w){
					if(rx < w){
						dx = -w;
					}else if(rx > b.w - w){
						dx = w;
					}
					oldLeft = n.scrollLeft;
					n.scrollLeft = n.scrollLeft + dx;
				}
			}
			// overflow-y
			if(overflow || overflowY){
				//console.log(b.l, b.t, t.x, t.y, n.scrollLeft, n.scrollTop);
				h = Math.min(dojo.dnd.V_TRIGGER_AUTOSCROLL, b.h / 2);
				ry = e.pageY - t.y;
				if(dojo.isWebKit || dojo.isOpera){
					// FIXME: this code should not be here, it should be taken into account
					// either by the event fixing code, or the dojo.position()
					// FIXME: this code doesn't work on Opera 9.5 Beta
					ry += dojo.body().scrollTop;
				}
				dy = 0;
				if(ry > 0 && ry < b.h){
					if(ry < h){
						dy = -h;
					}else if(ry > b.h - h){
						dy = h;
					}
					oldTop = n.scrollTop;
					n.scrollTop  = n.scrollTop  + dy;
				}
			}
			if(dx || dy){ return; }
		}
		try{
			n = n.parentNode;
		}catch(x){
			n = null;
		}
	}
	dojo.dnd.autoScroll(e);
};

	return dojo.dnd;
});

},
'url:dijit/templates/CheckedMenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode,labelNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&#160;</td>\n</tr>\n",
'curam/util/ScreenContext':function(){
define("curam/util/ScreenContext", [], function() {
  
  var CONTEXT_KEYS = {
      DEFAULT_CONTEXT: 112,
      SAMPLE22: 2,
      SAMPLE21: 1,
      SAMPLE13: 4,
      SAMPLE12: 2,
      SAMPLE11: 1,
      EXTAPP: 1048576,
      CONTEXT_PORTLET: 524288,
      SMART_PANEL: 262144,
      NESTED_UIM: 131072,
      ORG_TREE: 65536,
      CONTEXT_PANEL: 32768,
      LIST_ROW_INLINE_PAGE: 8192,
      LIST_EVEN_ROW: 16384,
      TAB: 4096,
      TREE: 2048,
      AGENDA: 1024,
      POPUP: 512,
      MODAL: 256,
      HOME: 128,
      HEADER: 64,
      NAVIGATOR: 32,
      FOOTER: 16,
      OVAL: 8,
      RESOLVE: 4,
      ACTION: 2,
      ERROR: 1,
      EMPTY: 0
  };
  
  var CTX_NAMES = [['ERROR', 'ACTION', 'RESOLVE', 'OPT_VALIDATION',
                       'FOOTER', 'NAVIGATOR', 'HEADER',
                       'HOME_PAGE', 'MODAL', 'POPUP', 'AGENDA','TREE', 'TAB', 
                       'LIST_EVEN_ROW', 'LIST_ROW_INLINE_PAGE', 'CONTEXT_PANEL', 
                       'ORG_TREE','NESTED_UIM','SMART_PANEL',
                       'CONTEXT_PORTLET','EXTAPP'],
                   ['SAMPLE11', 'SAMPLE12','SAMPLE13'],
                   ['SAMPLE21','SAMPLE22']];
  
  var ScreenContext = dojo.declare("curam.util.ScreenContext", null, {
    constructor: function(initialContext){
      // summary:
      //    Sets up the ScreenContext with either the initialContext parameter
      //    or a default context
      
      if (initialContext) {
        
        this.setContext(initialContext);
      } else {
        // What's the point of the OR here? Aren't they the same?
        this.currentContext = [
              CONTEXT_KEYS["DEFAULT_CONTEXT"] | CONTEXT_KEYS["DEFAULT_CONTEXT"]];
      }
    },
    
    setContext: function(newContext) {
      // summary:
      //    Sets the context. If null, a default context is used.
      var tmp = this.setup(newContext);
      
      this.currentContext =  
        ((tmp == null) ? 
         ([CONTEXT_KEYS["DEFAULT_CONTEXT"] | CONTEXT_KEYS["DEFAULT_CONTEXT"]]) : (tmp));
    },
  
    addContextBits: function(contextBits, idx) {
      // summary:
      //    Adds context bits to the existing context
      if (!contextBits) {
        return;
      }
      var navig = (idx) ? idx : 0;
      var pContext = this.parseContext(contextBits);
      if (pContext != null) {
        this.currentContext[navig] |= pContext;
      }
      return this.currentContext[navig];
    },
  
    addAll: function(idx) {
      // summary:
      //    all in all ranges! if idx == null, all ranges, otherwise - selected
      var navig = (idx)? idx : 0;
      this.currentContext[navig] = 4294967295;
      return this.currentContext[navig];
    },
  
    clear: function(contextBits, idx) {
      // summary:
      //    Clears the given named context bits
      if (!contextBits) {
        this.clearAll();
        return;
      }
      var navig = (idx)? idx : 0;
      if (contextBits == 0) {
        return this.currentContext[navig];
      }
      var pContext = this.parseContext(contextBits);
      if (pContext != null) {
        var clearedBits = this.currentContext[navig] & pContext;
        this.currentContext[navig] ^= clearedBits;
      }
      return this.currentContext[navig];
    },
  
    clearAll: function(idx) {
      // summary:
      //    all in all ranges! if idx == null, all ranges, otherwise - selected
      if (idx) {
        this.currentContext[idx] = 0;
      } else {
        for (var i = 0; i <this.currentContext.length; i++) {
          this.currentContext[i] = 0;
        }
      }
    },
  
    updateStates: function(newContext) {
      this.clear('ERROR|ACTION|RESOLVE');
      this.currentContext[0] = this.currentContext[0] | (newContext & 7);
    },
  
    hasContextBits: function(contextBits, idx) {
      if (!contextBits) {
        return false;
      }
      var navig = (idx) ? idx : 0;
      var pContext = this.parseContext(contextBits);
      if (pContext != null) {
        var merge = this.currentContext[navig] & pContext;
        
        return (merge == pContext);
      }
      return false;
    },
  
    getValue: function() {
      // summary:
      //    Gets the value of the context.
      var outputVal = "";
      for (var i = 0; i < this.currentContext.length; i++) {
        outputVal += this.currentContext[i] + "|";
      }
      return outputVal.substring(0,outputVal.length-1);
    },
  
    toRequestString: function() {
      return "o3ctx=" + this.getValue();
    },
  
    toBinary: function() {
      var binaryStr = "";
      for (var i = 0; i < this.currentContext.length; i++) {
        binaryStr += this.currentContext[i].toString(2) + "|";
      }
      return binaryStr.substring(0,binaryStr.length-1);
    },
  
    toString: function() {
      var accumulatedContext = "";
      for (var i = 0; i < this.currentContext.length; i++) {
        var ctxList = "";
        var j = 0;
        while (j < CTX_NAMES[i].length) {
          if (((this.currentContext[i] >> j) & 1) != 0) {
            ctxList +="," + CTX_NAMES[i][j];
          }
          j++;
        }
        if (ctxList == '') {
          return "{}";
        }
        accumulatedContext += 
          "|" + ctxList.replace(",", "{") + ((ctxList.length == 0)?"" : "}");
      }
      return accumulatedContext.substring(1);
    },
  
    parseContext: function(contextString) {
      var tmpString = contextString.replace(/,/g, "|");
      
      var parts = tmpString.split("|");
      var tmp = isNaN(parts[0]) ? parseInt(CONTEXT_KEYS[parts[0]]) : parts[0];
      
      for(var i = 1; i < parts.length; i++){
        tmp = tmp | (isNaN(parts[i]) ? parseInt(CONTEXT_KEYS[parts[i]]) : parts[i]);
      }

      return (isNaN(tmp) ? null : tmp);
    },
  
    setup: function(stringWithBars) {
      // summary:
      //    Sets up the context using a string delimited by '|'
      if (!stringWithBars) {
        return null;
      }
      var initialArray = ("" + stringWithBars).split("|");
      var resultArray = new Array(initialArray.length);
      
      for (var i = 0; i < initialArray.length; i++) {
        resultArray[i] = 
            this.parseContext(initialArray[initialArray.length - i - 1]);
        resultArray[i] = resultArray[i] | resultArray[i];
        if (!resultArray[i] 
              || isNaN(resultArray[i]) 
              || resultArray[i] > 4294967295) {
          return null;
        }
      }
      return resultArray;
    }
  });
  
  return ScreenContext;
});

},
'dijit/layout/utils':function(){
define("dijit/layout/utils", [
	"dojo/_base/array", // array.filter array.forEach
	"dojo/dom-class", // domClass.add domClass.remove
	"dojo/dom-geometry", // domGeometry.marginBox
	"dojo/dom-style", // domStyle.getComputedStyle
	"dojo/_base/lang", // lang.mixin
	".."	// for exporting symbols to dijit, remove in 2.0
], function(array, domClass, domGeometry, domStyle, lang, dijit){

	// module:
	//		dijit/layout/utils
	// summary:
	//		marginBox2contentBox() and layoutChildren()

	var layout = lang.getObject("layout", true, dijit);
	/*===== layout = dijit.layout =====*/

	layout.marginBox2contentBox = function(/*DomNode*/ node, /*Object*/ mb){
		// summary:
		//		Given the margin-box size of a node, return its content box size.
		//		Functions like domGeometry.contentBox() but is more reliable since it doesn't have
		//		to wait for the browser to compute sizes.
		var cs = domStyle.getComputedStyle(node);
		var me = domGeometry.getMarginExtents(node, cs);
		var pb = domGeometry.getPadBorderExtents(node, cs);
		return {
			l: domStyle.toPixelValue(node, cs.paddingLeft),
			t: domStyle.toPixelValue(node, cs.paddingTop),
			w: mb.w - (me.w + pb.w),
			h: mb.h - (me.h + pb.h)
		};
	};

	function capitalize(word){
		return word.substring(0,1).toUpperCase() + word.substring(1);
	}

	function size(widget, dim){
		// size the child
		var newSize = widget.resize ? widget.resize(dim) : domGeometry.setMarginBox(widget.domNode, dim);

    /* CURAM-FIX: addition */
    if (widget.fakeWidget) {
      return;
    }
    /* END CURAM-FIX */

    // record child's size
		if(newSize){
			// if the child returned it's new size then use that
			lang.mixin(widget, newSize);
		}else{
			// otherwise, call getMarginBox(), but favor our own numbers when we have them.
			// the browser lies sometimes
      /* CURAM-FIX: replace following line */
//			lang.mixin(widget, domGeometry.getMarginBox(widget.domNode));
			lang.mixin(widget, domGeometry.getMarginBoxSimple(widget.domNode));
      /* END CURAM-FIX */
			lang.mixin(widget, dim);
		}
	}

	layout.layoutChildren = function(/*DomNode*/ container, /*Object*/ dim, /*Widget[]*/ children,
			/*String?*/ changedRegionId, /*Number?*/ changedRegionSize){
		// summary:
		//		Layout a bunch of child dom nodes within a parent dom node
		// container:
		//		parent node
		// dim:
		//		{l, t, w, h} object specifying dimensions of container into which to place children
		// children:
		//		an array of Widgets or at least objects containing:
		//			* domNode: pointer to DOM node to position
		//			* region or layoutAlign: position to place DOM node
		//			* resize(): (optional) method to set size of node
		//			* id: (optional) Id of widgets, referenced from resize object, below.
		// changedRegionId:
		//		If specified, the slider for the region with the specified id has been dragged, and thus
		//		the region's height or width should be adjusted according to changedRegionSize
		// changedRegionSize:
		//		See changedRegionId.

		// copy dim because we are going to modify it
		dim = lang.mixin({}, dim);

		domClass.add(container, "dijitLayoutContainer");

		// Move "client" elements to the end of the array for layout.  a11y dictates that the author
		// needs to be able to put them in the document in tab-order, but this algorithm requires that
		// client be last.    TODO: move these lines to LayoutContainer?   Unneeded other places I think.
		children = array.filter(children, function(item){ return item.region != "center" && item.layoutAlign != "client"; })
			.concat(array.filter(children, function(item){ return item.region == "center" || item.layoutAlign == "client"; }));

    /* CURAM-FIX: added next line */
    var retDim = {};

    // set positions/sizes
		array.forEach(children, function(child){
			var elm = child.domNode,
				pos = (child.region || child.layoutAlign);
			if(!pos){
				throw new Error("No region setting for " + child.id)
			}

			// set elem to upper left corner of unused space; may move it later
			var elmStyle = elm.style;
			elmStyle.left = dim.l+"px";
			elmStyle.top = dim.t+"px";
			elmStyle.position = "absolute";

			domClass.add(elm, "dijitAlign" + capitalize(pos));

			// Size adjustments to make to this child widget
			var sizeSetting = {};

			// Check for optional size adjustment due to splitter drag (height adjustment for top/bottom align
			// panes and width adjustment for left/right align panes.
			if(changedRegionId && changedRegionId == child.id){
				sizeSetting[child.region == "top" || child.region == "bottom" ? "h" : "w"] = changedRegionSize;
			}

			// set size && adjust record of remaining space.
			// note that setting the width of a <div> may affect its height.
			if(pos == "top" || pos == "bottom"){
				sizeSetting.w = dim.w;
				size(child, sizeSetting);
				dim.h -= child.h;
				if(pos == "top"){
					dim.t += child.h;
				}else{
					elmStyle.top = dim.t + dim.h + "px";
				}
			}else if(pos == "left" || pos == "right"){
				sizeSetting.h = dim.h;
				size(child, sizeSetting);
				dim.w -= child.w;
				if(pos == "left"){
					dim.l += child.w;
				}else{
					elmStyle.left = dim.l + dim.w + "px";
				}
			}else if(pos == "client" || pos == "center"){
				size(child, dim);
			}

      /* CURAM-FIX: addition */
      retDim[pos] = {
          w: dim.w,
          h: dim.h
      };
      /* END CURAM-FIX */
		});
	
    /* CURAM-FIX: addition next line */
    return retDim;
  };


	return {
		marginBox2contentBox: layout.marginBox2contentBox,
		layoutChildren: layout.layoutChildren
	};
});

},
'curam/util/FrequencyEditor':function(){
/*
 * Copyright 2001-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/FrequencyEditor", ["curam/util",
        "curam/define",
        "curam/util/ResourceBundle"
        ], function() {

/*
 * Modification History
 * --------------------
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 10-Jul-2013  JY  [CR00391624] Added the missing frequency option from a
 *                  start date.
 * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
 * 12-Nov-2012  JY  [CR00353394] Correct the selection of the radio buttons
 *                  when editing a frequency pattern.
 * 31-Jul-2012  MV  [CR00336202] Migrate to take on Dojo 1.7.3
 * 09-Mar-2011  JY  [CR00309128] Added functions to support the text string
 *                  concatenation.
 * 28-Sep-2011  JY  [CR00288721] Fixed the exception error for the function
 *              setSelectedFreqType() and also refactored this function to
 *              make it easier to be unit tested.
 * 13-Sep-2011  JY  [CR00287363] Fix the validation, radio button
 *                  selection and dropdown related issue.
 * 17-Feb-2011  MV  [CR00253193] Fix dropdown related code.
 * 21-Jan-2011  DG  [CR00243540] Changed "console.log" to "curam.debug.log".
 * 29-Nov-2010 MV [CR00232623] Return initialization status
 *    from the initPage() function.
 * 18-Nov-2010 MV [CR00231655] Connect to DOM events with a function that will
 *    automatically disconnect on page unload.
 * 05-Oct-2010  MV [CR00221605] Allow pressing ENTER key to submit the results.
 * 09-Sep-2010  MV [CR00219675] Fix issue with editing numbers in the dialog.
 *        Rename and move code to the correct namespace.
 */
/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");

/**
 * @namespace Utility functions used by the popup editor for a frequency
 *    pattern.
 */
  curam.define.singleton("curam.util.FrequencyEditor", {
  /**
   * Variable used to reorder visual representation of yearly and bi-monthly
   * view.
   */
  CORRECTOR: 1,

  /** Frequency pattern type. */
  DAILY_FREQUENCY: 0,
  /** Frequency pattern type. */
  WEEKLY_FREQUENCY: 1,
  /** Frequency pattern type. */
  MONTHLY_FREQUENCY: 2,
  /** Frequency pattern type. */
  YEARLY_FREQUENCY: 3,
  /** Frequency pattern type. */
  BIMONTHLY_FREQUENCY: 4,
  
  
  /** Frequency pattern dayOfWeekMask bit mask. */
  EVERY_DAY_MASK: 201,
  /** Frequency pattern dayOfWeekMask bit mask. */
  EVERY_WEEKDAY_MASK: 202,
  /** Frequency pattern dayOfWeekMask bit mask. */
  EVERY_WEEKENDDAY_MASK: 203,
  /** Frequency pattern dayOfWeekMask bit mask. */
  MON_MASK: 1,
  /** Frequency pattern dayOfWeekMask bit mask. */
  TUE_MASK: 2,
  /** Frequency pattern dayOfWeekMask bit mask. */
  WED_MASK: 4, 
  /** Frequency pattern dayOfWeekMask bit mask. */
  THU_MASK: 8,
  /** Frequency pattern dayOfWeekMask bit mask. */
  FRI_MASK: 16,
  /** Frequency pattern dayOfWeekMask bit mask. */
  SAT_MASK: 32,
  /** Frequency pattern dayOfWeekMask bit mask. */
  SUN_MASK: 64,

  /** Used in validations. */
  daysInMonth: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],

  /*
   * For radio buttons in each layer.
   * NOTE: the numbers represent the order they appear on the layer.
   */
  /** Daily layer. */
  EVERY_DAY: 0,
  /** Daily layer. */
  EVERY_WEEKDAY: 1,
  /** Weekly layer (select only single day). */
  MON: 0,
  /** Weekly layer (select only single day). */
  TUE: 1,
  /** Weekly layer (select only single day). */
  WED: 2,
  /** Weekly layer (select only single day). */
  THU: 3,
  /** Weekly layer (select only single day). */
  FRI: 4,
  /** Weekly layer (select only single day). */
  SAT: 5,
  /** Weekly layer (select only single day). */
  SUN: 6,

  // monthly layer - 3 options
  /** start date */
  START_DATE: 0,
  /** a day number */
  MONTH_DAY_NUM: 1,
  /** a day from a list */
  MONTH_SEL_DAY: 2,
  
  // bi-monthly layer - 2 options
  /** a day number */
  DAY_NUM: 0,
  /** a day from a list */
  SEL_DAY: 1,
  
  //yearly layer, 2 options,
  /** Select month specify day number. */
  SEL_MONTH_DAY_NUM: 0,
  /** Select a day and month from a list. */
  SEL_MONTH_SEL_DAY: 1,

  allowableCharsForNumeric: [
    "1", "2", "3", "4", "5", "6",
    "7", "8", "9", "0",
    dojo.keys.LEFT_ARROW,
    dojo.keys.RIGHT_ARROW,
    dojo.keys.DELETE,
    dojo.keys.ENTER,
    dojo.keys.BACKSPACE,
    dojo.keys.END,
    dojo.keys.HOME,
    dojo.keys.TAB,
    dojo.keys.F5
  ],
  
  
  allowableDayString: [
    "32", "33", "34",
    "35", "36"
  ],
                     
  allowableDayOfWeekMask: [
    "201", "202", "203",
    "1", "2", "4",
    "8", "16", "32",
    "64"
  ],
  
  allowableFirstDayStringForBimonthly: [
    "32", "33", "34",
    "35"
  ],
                                      
  allowableSecondDayStringForBimonthly: [
    "33", "34", "35",
    "36"
  ],
                                      
  allowableWeekdayStringForBimonthly: [
    "1", "2", "4",
    "8", "16", "32",
    "64"                          
  ],
  
  allowableMonthString: [
    "1", "2", "3",
    "4", "5", "6", "7",
    "8", "9", "10",
    "11", "12"
  ],
 
  /**
   * "onLoad" handler execute when the page is loaded.
   *
   * @returns True if the dialog is closing, false otherwise.
   */
  initPage: function() {
    var parent = curam.dialog.getParentWindow(window);

    // the form has been activated, do the mappings and close
    if(formActivated == true) {             
      executeOpenerMapping("freq_text", translatedPatternString);
      executeOpenerMapping("freq_data", patternString);
      curam.dialog.closeModalDialog();
      return false;
    }

    var freq = parent.getPopupInput('initFreq');
    curam.debug.log(bundle.getProperty("curam.util.FrequencyEditor.input"), 
                    freq);
    if(!freq || freq == null || freq.length == 0) {
      // if there is no input, default to a daily frequency
      document.theForm.freqType[0].checked = true;
      document.theForm.daily_select_type[
          curam.util.FrequencyEditor.EVERY_DAY].checked = true;
      return true;
    }  

    var freqType = parseInt(freq.charAt(0),10);
    if(freqType == curam.util.FrequencyEditor.DAILY_FREQUENCY) {
      curam.util.FrequencyEditor.setupDailyFrequency(freq);

    } else if(freqType == curam.util.FrequencyEditor.WEEKLY_FREQUENCY) {
      curam.util.FrequencyEditor.setupWeeklyFrequency(freq);  

    } else if(freqType == curam.util.FrequencyEditor.MONTHLY_FREQUENCY) {
      curam.util.FrequencyEditor.setupMonthlyFrequency(freq);

    } else if(freqType == curam.util.FrequencyEditor.YEARLY_FREQUENCY) {
      curam.util.FrequencyEditor.setupYearlyFrequency(freq);

    } else if(freqType == curam.util.FrequencyEditor.BIMONTHLY_FREQUENCY) {
      curam.util.FrequencyEditor.setupBimonthlyFrequency(freq);

    } else {
      alert(errorMsgs.freqPattern);
    }  

    return true;
  },

  /**
   * Exceute when the page is initially loaded, sets the state of the widgets
   * for a daily pattern.
   */
  setupDailyFrequency: function(frequency) {
    var dayOfWeekMask = frequency.substr(4,3);
    
    document.theForm.freqType[
      curam.util.FrequencyEditor.DAILY_FREQUENCY].checked = true;

    
    if(parseInt(dayOfWeekMask,10)
        == curam.util.FrequencyEditor.EVERY_WEEKDAY_MASK) {
      
      document.theForm.daily_select_type[
          curam.util.FrequencyEditor.EVERY_WEEKDAY].checked = true;
    
    } else {
      document.theForm.daily_select_type[
          curam.util.FrequencyEditor.EVERY_DAY].checked = true;
      var numDays = parseInt(frequency.substr(1,3), 10);
      document.theForm.daily_num.value = "" + numDays;
    }
    
  },

  /**
   * Exceute when the page is initially loaded, sets the state of the widgets
   * for a weekly pattern.
   */
  setupWeeklyFrequency: function(frequency) {
    var dayOfWeekMask = parseInt(frequency.substr(4,3),10);
    
    document.theForm.freqType[
      curam.util.FrequencyEditor.WEEKLY_FREQUENCY].checked = true;

    // days of week are represented by powers of 2 in the dayOfWeekMask
    // bit pattern
    if(dayOfWeekMask & curam.util.FrequencyEditor.MON_MASK)
      document.theForm.weekly_select_mon.checked = true;
    if(dayOfWeekMask & curam.util.FrequencyEditor.TUE_MASK)
      document.theForm.weekly_select_tue.checked = true;
    if(dayOfWeekMask & curam.util.FrequencyEditor.WED_MASK)
      document.theForm.weekly_select_wed.checked = true;
    if(dayOfWeekMask & curam.util.FrequencyEditor.THU_MASK)
      document.theForm.weekly_select_thur.checked = true;
    if(dayOfWeekMask & curam.util.FrequencyEditor.FRI_MASK)
      document.theForm.weekly_select_fri.checked = true;
    if(dayOfWeekMask & curam.util.FrequencyEditor.SAT_MASK)
      document.theForm.weekly_select_sat.checked = true;
    if(dayOfWeekMask & curam.util.FrequencyEditor.SUN_MASK)
      document.theForm.weekly_select_sun.checked = true;
    
    var numWeeks = parseInt(frequency.substr(1,3), 10);
    document.theForm.weekly_num.value = "" + numWeeks;

  },

  /**
   * Execute when the page is initially loaded, sets the state of the widgets
   * for a monthly pattern.
   */
  setupMonthlyFrequency: function(frequency) {
    var interval = parseInt(frequency.substr(1,3),10);
    var dayOfWeekMask = parseInt(frequency.substr(4,3),10);
    var dayOfMonth = parseInt(frequency.substr(7,2),10);
    
    document.theForm.freqType[
      curam.util.FrequencyEditor.MONTHLY_FREQUENCY].checked = true;
    
    if(dayOfMonth == 0) {
      document.theForm.monthlyFreqType[
          curam.util.FrequencyEditor.START_DATE].checked = true;
      document.theForm.monthly0_month_interval.value = interval;
      
    } else if(dayOfMonth <= 31) {
      document.theForm.monthlyFreqType[
          curam.util.FrequencyEditor.MONTH_DAY_NUM].checked = true;
      document.theForm.monthly1_day_num.value = dayOfMonth;
      document.theForm.monthly1_month_interval.value = interval;
    } else {
      document.theForm.monthlyFreqType[
          curam.util.FrequencyEditor.MONTH_SEL_DAY].checked = true;
      
      // set selected item on the "first, second....last" combox box
       var theCombo = dijit.byId("monthly2_select_day_num");
       theCombo.set("value", dayOfMonth);

      // Set the selected item on the "day, weekday, monday, tuesday..."
      // combo box.
      theCombo = dijit.byId("monthly2_select_day");
      theCombo.set("value", dayOfWeekMask);
      
      document.theForm.monthly2_month_interval.value = interval;
    }
    
  },
  
  /**
   * Execute when the page is initially loaded, sets the state of the widgets
   * for a bimonthly pattern.
   */
  setupBimonthlyFrequency: function(frequency) {
    var secondDay = parseInt(frequency.substr(1,2),10);
    var dayOfWeekMask = parseInt(frequency.substr(4,3),10);
    var firstDay = parseInt(frequency.substr(7,2),10);
    
    document.theForm.freqType[
      curam.util.FrequencyEditor.BIMONTHLY_FREQUENCY 
        - curam.util.FrequencyEditor.CORRECTOR].checked = true;
    
    if(firstDay <= 31) { //checking only one as we cannot have mixed pattern
      document.theForm.bimonthlyFreqType[
          curam.util.FrequencyEditor.DAY_NUM].checked = true;
      document.theForm.bimonthly1_day1_num.value = firstDay;
      document.theForm.bimonthly1_day2_num.value = secondDay;

    } else {
      document.theForm.bimonthlyFreqType[
          curam.util.FrequencyEditor.SEL_DAY].checked = true;
      
      // set selected item on the "first, second....last" 1st combox box
      var theCombo = dijit.byId("bimonthly2_select_day1_num");
      theCombo.set("value", firstDay);

      // set selected item on the "first, second....last" 2nd combox box
      theCombo = dijit.byId("bimonthly2_select_day2_num");
      theCombo.set("value", secondDay);

      // set the selected item on the "day, weekday, monday, tuesday..."
      // combo box.
      theCombo = dijit.byId("bimonthly2_select_weekday");
      theCombo.set("value", dayOfWeekMask);
    }

  },
  
  /**
   * Execute when the page is initially loaded, sets the state of the widgets
   * for a yearly pattern.
   */
  setupYearlyFrequency: function(frequency) {
    var interval = parseInt(frequency.substr(1,3),10);
    var dayOfWeekMask = parseInt(frequency.substr(4,3),10);
    var dayOfMonth = parseInt(frequency.substr(7,2),10);
    
    document.theForm.freqType[
      curam.util.FrequencyEditor.YEARLY_FREQUENCY 
        + curam.util.FrequencyEditor.CORRECTOR].checked = true;
    
    if(dayOfMonth <= 31) {
      document.theForm.yearlyFreqType[
          curam.util.FrequencyEditor.SEL_MONTH_DAY_NUM].checked = true;
      // set the combo box
      var theCombo = dijit.byId("yearly1_select_month");
      theCombo.set("value", interval);
      document.theForm.yearly1_day_num.value = dayOfMonth;

    } else {
      document.theForm.yearlyFreqType[
          curam.util.FrequencyEditor.SEL_MONTH_SEL_DAY].checked = true;
      
      // set selected item on the "first, second....last" combox box
      var theCombo = dijit.byId("yearly2_select_day_num");
      theCombo.set("value", dayOfMonth);

      // set the selected item on the "day, weekday, monday, tuesday..."
      // combo box.
      theCombo = dijit.byId("yearly2_select_day");
      theCombo.set("value", dayOfWeekMask);

      // set the combo box
      theCombo = dijit.byId("yearly2_select_month");
      theCombo.set("value", interval);
    }

  },

  /**
   * Executed when OK is clicked. Creates the 9 character pattern string
   * from the current state of the widgets.
   * Returning false will stop the form submission.
   */
  createPatternString: function() {
    
    var pattern = null;
    var created = false;
    if(document.theForm.freqType[0].checked == true) {
      created = curam.util.FrequencyEditor.createDailyPatternString();
    } else if(document.theForm.freqType[1].checked == true) {
      created = curam.util.FrequencyEditor.createWeeklyPatternString();
    } else if(document.theForm.freqType[2].checked == true) {
      created = curam.util.FrequencyEditor.createMonthlyPatternString();
    } else if(document.theForm.freqType[3].checked == true) {
      created = curam.util.FrequencyEditor.createBimonthlyPatternString();
    } else {
      created = curam.util.FrequencyEditor.createYearlyPatternString();
    }
    
    //create: true; if the data selected in freq pattern 
    //is ready to submit. And Disable the border in the table row.
    //Otherwise, return false.
    if(created) {
      //Disable the row borders to prevent the blinking lines,
      //when submitting the data in frequency pattern.
      curam.util.FrequencyEditor.disableRowBorder();
      return true;
    } else {
      return false;
    }
    
  },

  /**
   * Creates a daily frequency pattern string from the widgets and sets
   * the "patternString" hidden form parameter.
   */
  createDailyPatternString: function() {
    // create the interval and dayOfWeekMask
    var dailyPattern = "0"; 
    if(document.theForm.daily_select_type[
        curam.util.FrequencyEditor.EVERY_DAY].checked == true) {

      var numDays = parseInt(document.theForm.daily_num.value,10);
      if (curam.util.FrequencyEditor.validateDailyPattern(numDays)) {
        dailyPattern += curam.util.FrequencyEditor.doZeroPadding(
            numDays,3); // every n days
        dailyPattern += "000"; //  dayOfWeekMask, not used for this pattern

      } else {
        return false;
      }
    
    } else {
      dailyPattern += "001";  // interval, not used in this pattern,
                              // but must have a valid value according to spec.
      
      // dayOfWeekMask
      dailyPattern += curam.util.FrequencyEditor.EVERY_WEEKDAY_MASK;  
    }
        
    // add the dayOfMonth, always zero for this pattern
    dailyPattern += "00";
    document.theForm.patternString.value = dailyPattern;
    return true;
  },

  /**
   * Validates the daily interval value.
   */
   validateDailyPattern: function(numDays) {
    if(isNaN(numDays) || numDays < 1) {
      alert(errorMsgs.everyDay);
      return false;
    }
    
    return true;    
  },

  /**
   * Creates a weekly frequency pattern string from the widgets and sets
   * the "patternString" hidden form parameter.
   */
   createWeeklyPatternString: function() {
    var weeklyPattern = "1";
    var dayMask = 0;
    
    var numWeeks = parseInt(document.theForm.weekly_num.value,10);
    
    if (curam.util.FrequencyEditor.validateWeeklyPattern(numWeeks)) {
      
      weeklyPattern += curam.util.FrequencyEditor.doZeroPadding(
          numWeeks,3); // every n weeks

      var oneDaySelected = false;

      var checkbox = document.theForm.weekly_select_mon;
      if (checkbox.checked == true) {
        oneDaySelected = true;
        dayMask += checkbox.value - 0;
      }
      checkbox = document.theForm.weekly_select_tue;
      if (checkbox.checked == true) {
        oneDaySelected = true;
        dayMask += checkbox.value - 0;
      }
      checkbox = document.theForm.weekly_select_wed;
      if (checkbox.checked == true) {
        oneDaySelected = true;
        dayMask += checkbox.value - 0;
      }
      checkbox = document.theForm.weekly_select_thur;
      if (checkbox.checked == true) {
        oneDaySelected = true;
        dayMask += checkbox.value - 0;
      }
      checkbox = document.theForm.weekly_select_fri;
      if (checkbox.checked == true) {
        oneDaySelected = true;
        dayMask += checkbox.value - 0;
      }
      checkbox = document.theForm.weekly_select_sat;
      if (checkbox.checked == true) {
        oneDaySelected = true;
        dayMask += checkbox.value - 0;
      }
      checkbox = document.theForm.weekly_select_sun;
      if (checkbox.checked == true) {
        oneDaySelected = true;
        dayMask += checkbox.value - 0;
      }
      
      if (!oneDaySelected) {
        alert(errorMsgs.noDaySelected);
        return false;
      }
      if (dayMask > 0) {
        weeklyPattern += curam.util.FrequencyEditor.doZeroPadding(dayMask, 3);  
      }  else {
        weeklyPattern += "000";
      }
      // add the dayOfMonth, always zero for this pattern
      weeklyPattern += "00";

      document.theForm.patternString.value = weeklyPattern;
      
      return true;
    } 
    
    return false;
  },

  /**
   * Validates the Weekly Pattern.
   */
  validateWeeklyPattern: function(numWeeks) {
    if(isNaN(numWeeks) || numWeeks < 1) {
      alert(errorMsgs.everyWeek);
      return false;
    }
    
    return true;    
  },

  /**
   * Creates a weekly frequency pattern string from the widgets and sets
   * the "patternString" hidden form parameter.
   */
  createMonthlyPatternString: function() {
    var monthlyPattern = "2";
    
    if (document.theForm.monthlyFreqType[
        curam.util.FrequencyEditor.START_DATE].checked == true) {
      
      var interval = 
        parseInt(document.theForm.monthly0_month_interval.value, 10);
  
      if(!curam.util.FrequencyEditor.validateMonthlyData(interval)) {
        return false;
      }

      var dayOfMonth = 0; 
      monthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          interval,3); // interval
      monthlyPattern += "000"; // dayOfWeekMask: not used
      monthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          dayOfMonth, 2); // dayOfMonth
      
    } else if (document.theForm.monthlyFreqType[
        curam.util.FrequencyEditor.MONTH_DAY_NUM].checked == true) {

      var interval =
          parseInt(document.theForm.monthly1_month_interval.value, 10);
      var dayOfMonth = parseInt(document.theForm.monthly1_day_num.value, 10);
      if(!curam.util.FrequencyEditor.validateMonthlyData(
          interval, 
          dayOfMonth)) {
        
        return false;
      }
      monthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          interval,3); // interval
      monthlyPattern += "000"; // dayOfWeekMask: not used
      monthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          dayOfMonth, 2); // dayOfMonth

    } else {
      var interval =
          parseInt(document.theForm.monthly2_month_interval.value, 10);
      if(!curam.util.FrequencyEditor.validateMonthlyData(interval)) {
        return false;
      }
      
      /*
       * Validate the string of day and dayOfWeekMask for Monthly Pattern
       */
      var day = dijit.byId("monthly2_select_day_num").get("value");
      var dayOfWeekMask = dijit.byId("monthly2_select_day").get("value");
      
      if( !curam.util.FrequencyEditor.validateDayWeekString(
          day, dayOfWeekMask, monthlyPattern) ) {
        return false;
      }
      
      
      monthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          interval,3); //interval
      
      monthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          dayOfWeekMask, 3); // dayOfWeekMask
      
      monthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          day, 2); // dayOfMonth    

    }
    
    document.theForm.patternString.value = monthlyPattern;
    return true;
  },

  /**
   * Basic validation on the interval and dayOfMonth fields of a monthly
   * frequency pattern.
   */
  validateMonthlyData: function(interval,dayOfMonth) {
    if(isNaN(interval) || interval < 1 || interval > 100) {
      alert(errorMsgs.monthNum);
      return false;
    }
    if(dayOfMonth == null)
      return true; // dayOfMonth is not passed to the validate in all cases
    if(isNaN(dayOfMonth) || dayOfMonth < 1 || dayOfMonth > 28) {
      alert(errorMsgs.dayNum);
      return false;
    }
    return true;    
  },
  
  /**
   * Basic validation of the string of day and dayOfWeekMask for
   * frequency pattern.
   */
  validateDayWeekString: function(day, dayOfWeekMask, pattern) {
    
    var days = curam.util.FrequencyEditor.allowableDayString;
    var dayOfWeekMasks = curam.util.FrequencyEditor.allowableDayOfWeekMask;
    var isValidDay = false;
    var isValidDayOfWeekMask = false;
    
    for (var i = 0; i < days.length; i++) {
      
      if ( day == days[i]) {
        isValidDay = true;
        break;
      }
    }
    
    for (var i = 0; i < dayOfWeekMasks.length; i++) {
      
      if ( dayOfWeekMask == dayOfWeekMasks[i]) {
        isValidDayOfWeekMask = true;
        break;
      }
    }
    
    if( isValidDay && isValidDayOfWeekMask ) {
      
      return true;
    } else if ( !isValidDay ) {
      
      if( pattern == "2" ) {
        alert(errorMsgs.dayStringForMonthly);
        
      } else if ( pattern == "3" ) {
        alert(errorMsgs.dayStringForYearly);
        
      } else {
        alert(errorMsgs.dayString);
        
      }
      
      return false;
      
    } else if ( !isValidDayOfWeekMask ) {
      
      if ( pattern == "2" ) {
        alert(errorMsgs.dayOfWeekMaskForMonthly);
        
      } else if ( pattern == "3" ) {
        alert(errorMsgs.dayOfWeekMaskForYearly);
      
      } else {
        alert(errorMsgs.dayOfWeekMask);
        
      }
      
      return false;
      
    }
    
  },
  
  createBimonthlyPatternString: function() {
    var bimonthlyPattern = "4";
    var swapped;
    
    if(document.theForm.bimonthlyFreqType[
        curam.util.FrequencyEditor.DAY_NUM].checked == true) {

      var firstAbs = parseInt(document.theForm.bimonthly1_day1_num.value,10);
      var secondAbs = parseInt(document.theForm.bimonthly1_day2_num.value,10);
      if(!curam.util.FrequencyEditor.validateBimonthlyData(
          firstAbs,secondAbs,null)) {
        return false;
      }
      if (firstAbs > secondAbs) {
        swapped = firstAbs;
        firstAbs = secondAbs;
        secondAbs = swapped;
      }
      bimonthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          secondAbs,2); //interval
      bimonthlyPattern += "0000"; //dayOfWeekMask: not used
      bimonthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          firstAbs,2); //dayOfMonth

    } else {    
      var theCombo = dijit.byId("bimonthly2_select_day1_num");
      var firstRel = theCombo.get("value");
      
      theCombo = dijit.byId("bimonthly2_select_day2_num");    
      var secondRel = theCombo.get("value");
      
      theCombo = dijit.byId("bimonthly2_select_weekday");
      var weekday = theCombo.get("value");
      
      /*
       * validate the day and weekday string for the second bi-monthly
       * frequency pattern
       */
      if(!curam.util.FrequencyEditor.validateBimonthlyDataString(
          firstRel, secondRel, weekday)) {
        return false;
      }
      
      
      if (firstRel > secondRel) {
        swapped = firstRel;
        firstRel = secondRel;
        secondRel = swapped;
      }
      if(!curam.util.FrequencyEditor.validateBimonthlyData(
          firstRel, secondRel, weekday)) {
        return false;
      }
      
      bimonthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          secondRel,2); //interval
      bimonthlyPattern += '0';
      bimonthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          weekday,3); //dayOfWeekMask
      bimonthlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          firstRel,2); //dayOfMonth
    }
    document.theForm.patternString.value = bimonthlyPattern;
    return true; 
  },

  /**
   * Basic validation on the fields of a bi-monthly frequency pattern.
   */
  validateBimonthlyData: function(first,second,weekday) {
    if (weekday != null) { //if second radio button selected
      if (isNaN(weekday) || weekday < 1 || weekday > 64) {
      alert(errorMsgs.weekend);
      return false;
      }
    } else {
      if (isNaN(first) || first < 1 || first > 28
         || isNaN(second) || second < 1 || second > 28) {
          alert(errorMsgs.dayNum);
          return false;
      }
    }
    if (first == second) {
      alert(errorMsgs.dayDiff);
      return false;
    }  
    return true;    
  },
  
  /**
   * Basic validation on the fields of the second bi-monthly frequency pattern.
   */
  validateBimonthlyDataString: function(firstDayString,
      secondDayString, weekdayString) {
    
    var firstDayStrings = 
      curam.util.FrequencyEditor.allowableFirstDayStringForBimonthly;
    var secondDayStrings = 
      curam.util.FrequencyEditor.allowableSecondDayStringForBimonthly;
    var weekdayStrings = 
      curam.util.FrequencyEditor.allowableWeekdayStringForBimonthly;
    var isValidFirstDay = false;
    var isValidSecondDay = false;
    var isValidWeekday = false;
    
    for (var i = 0; i < firstDayStrings.length; i++) {
      
      if ( firstDayString == firstDayStrings[i]) {
        isValidFirstDay = true;
        break;
      }
    }
    
    for (var i = 0; i < secondDayStrings.length; i++) {
      
      if ( secondDayString == secondDayStrings[i]) {
        isValidSecondDay = true;
        break;
      }
    }
    
    for (var i = 0; i < weekdayStrings.length; i++) {
      
      if ( weekdayString == weekdayStrings[i]) {
        isValidWeekday = true;
        break;
      }
    }
    
    if( isValidFirstDay && isValidSecondDay && isValidWeekday ) {
      
      return true;
    } else if ( !isValidFirstDay ) {
      
      alert(errorMsgs.firstDayString);
      return false;
    } else if ( !isValidSecondDay ) {
      
      alert(errorMsgs.secondDayString);
      return false;
    } else if ( !isValidWeekday ) {
      
      alert(errorMsgs.weekend);
      return false;
    }
    
  },

  /**
   * Creates a yearly frequency pattern string from the widgets and sets
   * the "patternString" hidden form parameter.
   */
  createYearlyPatternString: function() {
    var yearlyPattern = "3";
    var theCombo = null;
    
    if(document.theForm.yearlyFreqType[
        curam.util.FrequencyEditor.SEL_MONTH_DAY_NUM].checked == true) {

      theCombo = dijit.byId("yearly1_select_month");

      var monthNumber = theCombo.get("value");
      yearlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          monthNumber, 3); // interval
        yearlyPattern += "000"; // dayOfWeekMask
      
      /*
       * Validate the string of month for the Yearly Pattern
       */
      if(!curam.util.FrequencyEditor.validateMonthString(monthNumber)) {
        return false;
      }
        
      var dayOfMonth = parseInt(document.theForm.yearly1_day_num.value, 10);
      if(!curam.util.FrequencyEditor.validateYearlyData(
          dayOfMonth, monthNumber)) {
        return false;
      }
      
      yearlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          dayOfMonth, 2); // dayOfMonth

    } else {
      
      /**
       * validate the String of dayOfMonth, dayOfWeekMask and month
       */
      var day = dijit.byId("yearly2_select_day_num").get("value");
      var dayOfWeekMask = dijit.byId("yearly2_select_day").get("value");
      var month = dijit.byId("yearly2_select_month").get("value");
      
      if(!curam.util.FrequencyEditor.validateDayWeekString(
          day, dayOfWeekMask, yearlyPattern) ) {
        return false;
      }
      if(!curam.util.FrequencyEditor.validateMonthString(month)) {
        return false;
      }
      
      yearlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          month, 3); // interval
      
      yearlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          dayOfWeekMask, 3); // dayOfWeekMask
      
      yearlyPattern += curam.util.FrequencyEditor.doZeroPadding(
          day, 2);// dayOfMonth
    }
    document.theForm.patternString.value = yearlyPattern;
    return true;
  },

  /**
   * Basic validation on the dayOfMonth field of a yearly frequency pattern.
   */
  validateYearlyData: function(dayOfMonth,monthNumber) {
    if(isNaN(dayOfMonth) || dayOfMonth < 1
        || dayOfMonth > curam.util.FrequencyEditor.daysInMonth[monthNumber-1]) {
      
      alert(errorMsgs.dayNumAnd + "  "
          + curam.util.FrequencyEditor.daysInMonth[monthNumber-1]);
      return false;
    }
    return true;  
  },
  
  /**
   * Validation of the string of month for the Yearly Pattern
   */
  validateMonthString: function(month) {
    
    var months = curam.util.FrequencyEditor.allowableMonthString;
    
    for (var i = 0; i < months.length; i++) {
      
      if ( month == months[i]) {
        return true;
      }
    }
    
    alert(errorMsgs.monthString);
    return false;
  },

  /**
   * Left pads a string with the specified number of zeros if required.
   */
  doZeroPadding: function(stringValue,numZeros) {
    // allows a stringValue to be passed as a number or string
    var paddedString = "" + stringValue;
    var zerosToAdd = numZeros - paddedString.length;
    for(var i = 0; i < zerosToAdd; i++) {
      paddedString = "0" + paddedString;
    }
    return paddedString;
  },

  /**
   * Set the first level radio button in frequency editor
   * 
   * @param freqType frequecy type
   */
  _setFirstLevelRadioButton: function(freqType) {
    
    var typeRadio = dojo.query("input[name='freqType']", 
                                dojo.byId("mainForm"))[freqType];
    
    if (typeRadio == null) {
      throw new Error("The radio button for the selected" 
          + " frequency type could not be found!");
    }
    
    if (!typeRadio.checked) {
      //Deselect all radio button in each frequency types
      dojo.query("input[type='radio']:checked", 
                 dojo.byId("mainForm")).forEach(function(radioNode) {
        radioNode.checked=false;
      });
      
      if(freqType != curam.util.FrequencyEditor.WEEKLY_FREQUENCY) {
        dojo.query("input[type='checkbox']:checked", 
                   dojo.byId("mainForm")).forEach(function(checkboxNode){
          checkboxNode.checked = false;
        });
      }
      typeRadio.checked = true;
    }
    
  },
  
  /**
   * Set second level radio button in frequency editor
   * 
   * @param widgetOrdomNode widget node or dom node or null
   */
  _setSecondLevelRadioButton: function(widgetOrdomNode) {
    
    //If the widget or dom node is not passed in, it means that there is no
    //checkbox related with the node where this javascript function is invoked.
    //Therefore, stop here.
    if (widgetOrdomNode == undefined) {
      return "undefined";
    }
    
    var thisNode;
    //Check if the parameter value is a widget or a dom node.
    //We ultimately need a node so if it is a widget, get its
    //corresponding dom node.
    if (widgetOrdomNode.domNode) {
      thisNode = widgetOrdomNode.domNode;
    } else {
      thisNode = widgetOrdomNode;
    }
    
    //Check if the current node is a radio button.
    //If it is, this is the required radio button we need to check
    if(thisNode.tagName.toLowerCase() == "input" 
         && dojo.attr(thisNode, "type") == "radio") {
      thisNode.checked = true;
      return "radio node clicked";
    }
    
    //Find the cell that contains the node.
    var tdNode = cm.getParentByType(thisNode, 'TD');
    if (tdNode == null) {
      throw new Error("Exception: The row contains the node should be found"); 
    }
    
    //Find the radio button in the cell
    var radioNode = dojo.query("input[type = 'radio']", tdNode)[0];
    
    //Check if the radio button exist in the cell. If not, throw an error. 
    //Otherwse, make the radio button checked regardless of its previous status.
    if (radioNode == null) {
      throw new Error("Exception: The radio node should exist");
    } else {
      radioNode.checked = true;
      return "text input or codetable clicked";
    }
    
  },

  /**
   * Sets the appropriate radio button to be checked.
   */
  setSelectedFreqType: function(freqType, widgetOrdomNode) {
    curam.debug.log("curam.util.FrequencyEditor: " +
      bundle.getProperty("curam.util.FrequencyEditor.radio"));
    
    curam.util.FrequencyEditor._setFirstLevelRadioButton(freqType);
    curam.util.FrequencyEditor._setSecondLevelRadioButton(widgetOrdomNode);

  },
  
  /**
   * Set the default selected option for the second level radio
   * button or check box of each frequency pattern.
   */
  setDefaultOption: function(freqType) {
    
    //Deselect all options
    document.theForm.daily_select_type[
        curam.util.FrequencyEditor.EVERY_DAY].checked = false;
    document.theForm.daily_select_type[
        curam.util.FrequencyEditor.EVERY_WEEKDAY].checked = false;
    document.theForm.monthlyFreqType[
        curam.util.FrequencyEditor.DAY_NUM].checked = false;
    document.theForm.monthlyFreqType[
        curam.util.FrequencyEditor.SEL_DAY].checked = false;
    document.theForm.bimonthlyFreqType[
        curam.util.FrequencyEditor.DAY_NUM].checked = false;
    document.theForm.bimonthlyFreqType[
        curam.util.FrequencyEditor.SEL_DAY].checked = false;
    document.theForm.yearlyFreqType[
        curam.util.FrequencyEditor.SEL_MONTH_DAY_NUM].checked = false;
    document.theForm.yearlyFreqType[
        curam.util.FrequencyEditor.SEL_MONTH_SEL_DAY].checked = false;
    
    //Keep the selection status of the checkbox in the Weekly Pattern 
    //if Weekly Pattern is selected,
    //Otherwise deselect these checkbox in the Weekly Pattern
    if( freqType != curam.util.FrequencyEditor.WEEKLY_FREQUENCY ) {
      
      document.theForm.weekly_select_mon.checked = false;
      document.theForm.weekly_select_tue.checked = false;
      document.theForm.weekly_select_wed.checked = false;
      document.theForm.weekly_select_thur.checked = false;
      document.theForm.weekly_select_fri.checked = false;
      document.theForm.weekly_select_sat.checked = false;
      document.theForm.weekly_select_sun.checked = false;
    }
    
    //Set the default option for the selected frequency pattern
    if( freqType == curam.util.FrequencyEditor.DAILY_FREQUENCY ) {
      document.theForm.daily_select_type[
          curam.util.FrequencyEditor.EVERY_DAY].checked = true;
      
    } else if ( freqType == curam.util.FrequencyEditor.WEEKLY_FREQUENCY ) {
      document.theForm.weekly_select_mon.checked = true;
      
    } else if ( freqType == curam.util.FrequencyEditor.MONTHLY_FREQUENCY ) {
      document.theForm.monthlyFreqType[
          curam.util.FrequencyEditor.DAY_NUM].checked = true;
      
    } else if ( freqType == curam.util.FrequencyEditor.BIMONTHLY_FREQUENCY ) {
      document.theForm.bimonthlyFreqType[
          curam.util.FrequencyEditor.DAY_NUM].checked = true;
      
    } else if ( freqType == curam.util.FrequencyEditor.YEARLY_FREQUENCY ) {
      document.theForm.yearlyFreqType[
          curam.util.FrequencyEditor.SEL_MONTH_DAY_NUM].checked = true;
      
    }
  },
  
  /**
   * Logic for checking the keystroke input.
   * 
   * @param keyChar
   * @returns {Boolean}
   */
  _doPosNumbericInputChecker: function(keyChar) {

    if (keyChar == "") {
      return false;
    }
    
    //Load the allowable numeric charactors
    var chars = curam.util.FrequencyEditor.allowableCharsForNumeric;
    
    for (var i = 0; i < chars.length; i++) {
      if (keyChar == chars[i]) {
        return true;
      }
      }
    
    return false;
  },
  
  /**
   * Checks the value of the input is a positive numeric value.
   */
  posNumericInputChecker: function(event) {
    
    event = dojo.fixEvent(event);
    var keyChar = event.keyChar;
    
    var isAllowed = 
      curam.util.FrequencyEditor._doPosNumbericInputChecker(keyChar);
    
    if (!isAllowed) {
      dojo.stopEvent(event);
    }
    
  },

  /**
   * Prepopulates all fields with the digit 1.
   */
  prePopulateTextFields: function(inputs) {
    return function(e) {
      for(var i = 0; i < inputs.length; i++){
        if(!inputs[i].value || inputs[i].value == "") {
          inputs[i].value = 1;
        }
      }
    };
  },

  /**
   * Function to disable the row border by adding an extra
   * specific CSS class "row-no-border"
   */
  disableRowBorder: function() {
    //Find the target rows
    dojo.query("form[name='theForm'] table tr").forEach(function(node){
      //Add the "row-no-border" class to the row node
      dojo.addClass(node, "row-no-border");
    });
  },
  
  /**
   * Add listener enforce numeric entry into the text files.
   */
  addInputListener: function() {
    dojo.ready(function() {
      var textInputs = [];
      dojo.query("input[type='text']:not(input.dijitReset)").forEach(
          function(input){
            
        textInputs.push(input);
        curam.util.connect(input, "onkeypress",
            curam.util.FrequencyEditor.posNumericInputChecker);
      });
      
      curam.util.connect(dojo.byId("mainForm"), "onsubmit", function(event) {
        curam.util.FrequencyEditor.prePopulateTextFields(textInputs);
      });
    });
  },
  
  /**
   * Function to replace all the '%s' placeholders in the text string
   * gotten from the 'FrequencyPatternSeletor.properties' with the 
   * corresponding dom nodes, e.g. input fields, drop-downs.
   * 
   */
  replacePlaceholderWithDomNode: function() {
    
    dojo.query("body#Curam_frequency-editor table tr td.frequency").forEach(
        function(domNode){
          curam.util.FrequencyEditor._parse(domNode);
        });
  },
  
  
  /**
   * Private function to replace all the '%s' placeholders with input fields
   * or dropdowns in a particular frequency type.
   * 
   * @param node  The dom node contains a certain frequency type.
   * @returns {String} The message indicates where the function stops.
   */
  _parse: function(node) {
    
    // Get all nodes that need the replacement inside the 'td' element.
    var elementList = dojo.query("> .node-needs-replacement", node);
    var textNode = dojo.query("> span", node)[0];
    
    if (textNode == null || textNode == undefined) {
      throw new Error("Exception: Some text string is missing for some certain "
          + "frequency type, please check the 'frequency-editor.jsp' file.");
    }
    
    // Get the text string that needs to be parsed.
    var textString = textNode.innerHTML;
    
    // The regular expression for the placeholder '%1s', '%2s', ...
    // Note: We make an assumption here that the number of placeholders will
    // not be possible to exceed 9.
    var placeholderExp = /%[^%]*%/g;
    
    // Gets all placeholders in the text string. 
    var placeholders = textString.match(placeholderExp);
    
    if (elementList.length == 0 && placeholders == null) {
      
        // Stop here as there is no nodes that need the 
        // replacement in this 'td' node.
        return "No need to parse";    
        
    } else if (elementList.length == 0 && placeholders != null) {
      
      throw new Error("The text string '" 
          + textString
          + "' from the 'FrequencyPatternSelector.properties'" 
          + " should not have any placeholder.");
      
    } else if (elementList.length != 0 && placeholders == null) {
      
      throw new Error("The text string '" 
          + textString
          + "' from the 'FrequencyPatternSelector.properties'" 
          + " should have some placeholders.");
    } 
    
    
    /* The weekly frequency pattern is a special case here,
     * so we handle it separately.
     * 
     */
    if (dojo.hasClass(node, "weekly-frequency")) {

      // The weekly frequency pattern should have two placeholders.
      if (placeholders.length != 2) {
        throw new Error("The text string '" 
            + textString
            + "' from the 'FrequencyPatternSelector.properties' " 
            + "has the incorrect number of placeholders.");
      }
      
      // There is only one node that needs the replacement inside this TD
      // element, which is the one holds the week interval value.
      var weekIntervalNode = dojo.clone(elementList[0]);
      // Destroy the node from the TD element in the HTML fragment.
      elementList.forEach(dojo.destroy);
      
      // Remove the class name "node-needs-replacement" so we can easily
      // get another class name on this node, which is actually the name
      // of the placeholder this node will replace.
      dojo.removeClass(weekIntervalNode, "node-needs-replacement");
      var placeholderForWeekIntervalNode = weekIntervalNode.className.match(placeholderExp);
      
      // Get the name of the placeholder for checkboxes
      var placeholderForCheckboxes;
      for (var i=0; i<placeholders.length; i++) {
        if (placeholders[i] != placeholderForWeekIntervalNode ) {
          placeholderForCheckboxes = placeholders[i];
          break;
        }
      }
      
      // Split the text string into two parts using the 
      // "placeholderForCheckboxes" as the delimiter.
      var strArray = textString.split(placeholderForCheckboxes);
      var firstPart = strArray[0];
      var secondPart = strArray[1];
      
      var isInFirstPart;
      if (firstPart.indexOf(placeholderForWeekIntervalNode) != -1) {
        // The placeholder for the week intervale node is in the first part of
        // the text string.
        isInFirstPart = true;
        firstPart = firstPart.replace(placeholderForWeekIntervalNode,
            "<span class='" 
            + placeholderForWeekIntervalNode
            + "'>placeholder</span>");
      } else {
        // In the second part
        isInFirstPart = false;
        secondPart = secondPart.replace(placeholderForWeekIntervalNode,
            "<span class='" 
            + placeholderForWeekIntervalNode 
            + "'>placeholder</span>");
      }
      
      // Replace the placeholder for the week interval node is enough when
      // the string of the second part is empty.
      if (secondPart == "") {
        textNode.innerHTML = firstPart;
        dojo.place(weekIntervalNode, 
            dojo.query("span." + placeholderForWeekIntervalNode, textNode)[0], 
            "replace");
      } else {
        textNode.innerHTML = firstPart;
        
        // Apart from replacing the placeholder for the week interval node,
        // we also need to place the second part of the text string to
        // another table row following all the checkboxes.
        var whereToPlace = node.parentNode.nextSibling.nextSibling;
        var trNode = dojo.create("tr", {"class": "blue"});
        var tdNode = dojo.create("td", {
          "class": "bottom"
        }, trNode);
        tdNode.colSpan = "4";
        dojo.style(tdNode, "paddingLeft", "20px");
        var spanNode = dojo.create("span", {
          innerHTML: secondPart
        }, tdNode);
        
        // Place the new created table row.
        dojo.place(trNode, whereToPlace, "after");
        
        // Replace the placeholder with the week interval node.
        if (isInFirstPart) {
          dojo.place(weekIntervalNode, 
              dojo.query("span." + placeholderForWeekIntervalNode, textNode)[0], 
              "replace");
          
        } else {
          dojo.place(weekIntervalNode, 
              dojo.query("span." + placeholderForWeekIntervalNode, spanNode)[0], 
              "replace");
        }
        
        // Tweaking the styling.
        dojo.query("td.day", whereToPlace).forEach(function(tdNode){
          dojo.removeClass(tdNode, "bottom");
        });
        if(firstPart == "") {
          dojo.removeClass(node, "top");
        }
        dojo.query("th.type", node.parentNode)[0].rowSpan = "4";
        
      }
     
      return "Parsed Successfully"; 
    }
    
    
    if(elementList.length != placeholders.length) {
      
      throw new Error("The text string '" 
          + textString
          + "' from the 'FrequencyPatternSelector.properties' " 
          + "has the incorrect number of placeholders.");
    }
    
    // Clone all the dom nodes that need the replacement,
    // and delete the origial ones from the HTML fragment.
    var elementListStore = dojo.clone(elementList);
    elementList.forEach(dojo.destroy);

    
    // Replace all placeholders with the temporary span elements which hold
    // the specified classnames. 
    for (i=0; i<placeholders.length; i++) {
      var placeholder = placeholders[i];
      textString = textString.replace(placeholder,
          "<span class='" + placeholder + "'>placeholder</span>");
    }
    textNode.innerHTML = textString;

    // Loop over all nodes which needs the replacement to 
    // replace all the temporary 'span' element.
    elementListStore.forEach(function(elementNode, i){
      dojo.removeClass(elementNode, "node-needs-replacement");
      var elementClassName = elementNode.className.match(placeholderExp);
      dojo.place(elementNode, 
                 dojo.query("span." + elementClassName, node)[0], 
                 "replace");
    });
      
    return "Parsed Successfully";
  }

  });
  
  return curam.util.FrequencyEditor;
});

},
'curam/charting':function(){
define("curam/charting", [
        "dojo/dom-class",
        "dojo/ready",
        "cm/_base/_dom",
        "curam/define"],
function(dclass, ready, dom, define) {

define.singleton("curam.charting", {
  alignChartWrapper: function(node) {
    ready(function() {
      node = dom.getParentByClass(dojo.byId(node), "cluster");

      if (node) {
        dclass.add(node,"chart-panel");
      }
   });
 }
});

return curam.charting;

});
},
'url:curam/widget/resources/MenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:${onClickValue}\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n",
'url:dijit/templates/MenuSeparator.html':"<tr class=\"dijitMenuSeparator\">\n\t<td class=\"dijitMenuSeparatorIconCell\">\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n</tr>",
'dijit/_FocusMixin':function(){
define("dijit/_FocusMixin", [
	"./focus",
	"./_WidgetBase",
	"dojo/_base/declare", // declare
	"dojo/_base/lang" // lang.extend
], function(focus, _WidgetBase, declare, lang){

/*=====
	var _WidgetBase = dijit._WidgetBase;
=====*/

	// module:
	//		dijit/_FocusMixin
	// summary:
	//		Mixin to widget to provide _onFocus() and _onBlur() methods that
	//		fire when a widget or it's descendants get/lose focus

	// We don't know where _FocusMixin will occur in the inheritance chain, but we need the _onFocus()/_onBlur() below
	// to be last in the inheritance chain, so mixin to _WidgetBase.
	lang.extend(_WidgetBase, {
		// focused: [readonly] Boolean
		//		This widget or a widget it contains has focus, or is "active" because
		//		it was recently clicked.
		focused: false,

		onFocus: function(){
			// summary:
			//		Called when the widget becomes "active" because
			//		it or a widget inside of it either has focus, or has recently
			//		been clicked.
			// tags:
			//		callback
		},

		onBlur: function(){
			// summary:
			//		Called when the widget stops being "active" because
			//		focus moved to something outside of it, or the user
			//		clicked somewhere outside of it, or the widget was
			//		hidden.
			// tags:
			//		callback
		},

		_onFocus: function(){
			// summary:
			//		This is where widgets do processing for when they are active,
			//		such as changing CSS classes.  See onFocus() for more details.
			// tags:
			//		protected
			this.onFocus();
		},

		_onBlur: function(){
			// summary:
			//		This is where widgets do processing for when they stop being active,
			//		such as changing CSS classes.  See onBlur() for more details.
			// tags:
			//		protected
			this.onBlur();
		}
	});

	return declare("dijit._FocusMixin", null, {
		// summary:
		//		Mixin to widget to provide _onFocus() and _onBlur() methods that
		//		fire when a widget or it's descendants get/lose focus

		// flag that I want _onFocus()/_onBlur() notifications from focus manager
		_focusManager: focus
	});

});

},
'dijit/form/ValidationTextBox':function(){
require({cache:{
'url:dijit/form/templates/ValidationTextBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n"}});
define("dijit/form/ValidationTextBox", [
	"dojo/_base/declare", // declare
	"dojo/i18n", // i18n.getLocalization
	"./TextBox",
	"../Tooltip",
	"dojo/text!./templates/ValidationTextBox.html",
	"dojo/i18n!./nls/validate"
], function(declare, i18n, TextBox, Tooltip, template){

/*=====
	var Tooltip = dijit.Tooltip;
	var TextBox = dijit.form.TextBox;
=====*/

	// module:
	//		dijit/form/ValidationTextBox
	// summary:
	//		Base class for textbox widgets with the ability to validate content of various types and provide user feedback.


	/*=====
		dijit.form.ValidationTextBox.__Constraints = function(){
			// locale: String
			//		locale used for validation, picks up value from this widget's lang attribute
			// _flags_: anything
			//		various flags passed to regExpGen function
			this.locale = "";
			this._flags_ = "";
		}
	=====*/

	return declare("dijit.form.ValidationTextBox", TextBox, {
		// summary:
		//		Base class for textbox widgets with the ability to validate content of various types and provide user feedback.
		// tags:
		//		protected

		templateString: template,
		baseClass: "dijitTextBox dijitValidationTextBox",

		// required: Boolean
		//		User is required to enter data into this field.
		required: false,

		// promptMessage: String
		//		If defined, display this hint string immediately on focus to the textbox, if empty.
		//		Also displays if the textbox value is Incomplete (not yet valid but will be with additional input).
		//		Think of this like a tooltip that tells the user what to do, not an error message
		//		that tells the user what they've done wrong.
		//
		//		Message disappears when user starts typing.
		promptMessage: "",

		// invalidMessage: String
		// 		The message to display if value is invalid.
		//		The translated string value is read from the message file by default.
		// 		Set to "" to use the promptMessage instead.
		invalidMessage: "$_unset_$",

		// missingMessage: String
		// 		The message to display if value is empty and the field is required.
		//		The translated string value is read from the message file by default.
		// 		Set to "" to use the invalidMessage instead.
		missingMessage: "$_unset_$",

		// message: String
		//		Currently error/prompt message.
		//		When using the default tooltip implementation, this will only be
		//		displayed when the field is focused.
		message: "",

		// constraints: dijit.form.ValidationTextBox.__Constraints
		//		user-defined object needed to pass parameters to the validator functions
		constraints: {},

		// regExp: [extension protected] String
		//		regular expression string used to validate the input
		//		Do not specify both regExp and regExpGen
		regExp: ".*",

		regExpGen: function(/*dijit.form.ValidationTextBox.__Constraints*/ /*===== constraints =====*/){
			// summary:
			//		Overridable function used to generate regExp when dependent on constraints.
			//		Do not specify both regExp and regExpGen.
			// tags:
			//		extension protected
			return this.regExp; // String
		},

		// state: [readonly] String
		//		Shows current state (ie, validation result) of input (""=Normal, Incomplete, or Error)
		state: "",

		// tooltipPosition: String[]
		//		See description of `dijit.Tooltip.defaultPosition` for details on this parameter.
		tooltipPosition: [],

		_setValueAttr: function(){
			// summary:
			//		Hook so set('value', ...) works.
			this.inherited(arguments);
			this.validate(this.focused);
		},

		validator: function(/*anything*/ value, /*dijit.form.ValidationTextBox.__Constraints*/ constraints){
			// summary:
			//		Overridable function used to validate the text input against the regular expression.
			// tags:
			//		protected
			return (new RegExp("^(?:" + this.regExpGen(constraints) + ")"+(this.required?"":"?")+"$")).test(value) &&
				(!this.required || !this._isEmpty(value)) &&
				(this._isEmpty(value) || this.parse(value, constraints) !== undefined); // Boolean
		},

		_isValidSubset: function(){
			// summary:
			//		Returns true if the value is either already valid or could be made valid by appending characters.
			//		This is used for validation while the user [may be] still typing.
			return this.textbox.value.search(this._partialre) == 0;
		},

		isValid: function(/*Boolean*/ /*===== isFocused =====*/){
			// summary:
			//		Tests if value is valid.
			//		Can override with your own routine in a subclass.
			// tags:
			//		protected
			return this.validator(this.textbox.value, this.constraints);
		},

		_isEmpty: function(value){
			// summary:
			//		Checks for whitespace
			return (this.trim ? /^\s*$/ : /^$/).test(value); // Boolean
		},

		getErrorMessage: function(/*Boolean*/ /*===== isFocused =====*/){
			// summary:
			//		Return an error message to show if appropriate
			// tags:
			//		protected
			return (this.required && this._isEmpty(this.textbox.value)) ? this.missingMessage : this.invalidMessage; // String
		},

		getPromptMessage: function(/*Boolean*/ /*===== isFocused =====*/){
			// summary:
			//		Return a hint message to show when widget is first focused
			// tags:
			//		protected
			return this.promptMessage; // String
		},

		_maskValidSubsetError: true,
		validate: function(/*Boolean*/ isFocused){
			// summary:
			//		Called by oninit, onblur, and onkeypress.
			// description:
			//		Show missing or invalid messages if appropriate, and highlight textbox field.
			// tags:
			//		protected
			var message = "";
			var isValid = this.disabled || this.isValid(isFocused);
			if(isValid){ this._maskValidSubsetError = true; }
			var isEmpty = this._isEmpty(this.textbox.value);
			var isValidSubset = !isValid && isFocused && this._isValidSubset();
			this._set("state", isValid ? "" : (((((!this._hasBeenBlurred || isFocused) && isEmpty) || isValidSubset) && this._maskValidSubsetError) ? "Incomplete" : "Error"));
			this.focusNode.setAttribute("aria-invalid", isValid ? "false" : "true");

			if(this.state == "Error"){
				this._maskValidSubsetError = isFocused && isValidSubset; // we want the error to show up after a blur and refocus
				message = this.getErrorMessage(isFocused);
			}else if(this.state == "Incomplete"){
				message = this.getPromptMessage(isFocused); // show the prompt whenever the value is not yet complete
				this._maskValidSubsetError = !this._hasBeenBlurred || isFocused; // no Incomplete warnings while focused
			}else if(isEmpty){
				message = this.getPromptMessage(isFocused); // show the prompt whenever there's no error and no text
			}
			this.set("message", message);

			return isValid;
		},

		displayMessage: function(/*String*/ message){
			// summary:
			//		Overridable method to display validation errors/hints.
			//		By default uses a tooltip.
			// tags:
			//		extension
			if(message && this.focused){
				Tooltip.show(message, this.domNode, this.tooltipPosition, !this.isLeftToRight());
			}else{
				Tooltip.hide(this.domNode);
			}
		},

		_refreshState: function(){
			// Overrides TextBox._refreshState()
			this.validate(this.focused);
			this.inherited(arguments);
		},

		//////////// INITIALIZATION METHODS ///////////////////////////////////////

		constructor: function(){
			this.constraints = {};
		},

		_setConstraintsAttr: function(/*Object*/ constraints){
			if(!constraints.locale && this.lang){
				constraints.locale = this.lang;
			}
			this._set("constraints", constraints);
			this._computePartialRE();
		},

		_computePartialRE: function(){
			var p = this.regExpGen(this.constraints);
			this.regExp = p;
			var partialre = "";
			// parse the regexp and produce a new regexp that matches valid subsets
			// if the regexp is .* then there's no use in matching subsets since everything is valid
			if(p != ".*"){ this.regExp.replace(/\\.|\[\]|\[.*?[^\\]{1}\]|\{.*?\}|\(\?[=:!]|./g,
				function(re){
					switch(re.charAt(0)){
						case '{':
						case '+':
						case '?':
						case '*':
						case '^':
						case '$':
						case '|':
						case '(':
							partialre += re;
							break;
						case ")":
							partialre += "|$)";
							break;
						 default:
							partialre += "(?:"+re+"|$)";
							break;
					}
				}
			);}
			try{ // this is needed for now since the above regexp parsing needs more test verification
				"".search(partialre);
			}catch(e){ // should never be here unless the original RE is bad or the parsing is bad
				partialre = this.regExp;
				console.warn('RegExp error in ' + this.declaredClass + ': ' + this.regExp);
			} // should never be here unless the original RE is bad or the parsing is bad
			this._partialre = "^(?:" + partialre + ")$";
		},

		postMixInProperties: function(){
			this.inherited(arguments);
			this.messages = i18n.getLocalization("dijit.form", "validate", this.lang);
			if(this.invalidMessage == "$_unset_$"){ this.invalidMessage = this.messages.invalidMessage; }
			if(!this.invalidMessage){ this.invalidMessage = this.promptMessage; }
			if(this.missingMessage == "$_unset_$"){ this.missingMessage = this.messages.missingMessage; }
			if(!this.missingMessage){ this.missingMessage = this.invalidMessage; }
			this._setConstraintsAttr(this.constraints); // this needs to happen now (and later) due to codependency on _set*Attr calls attachPoints
		},

		_setDisabledAttr: function(/*Boolean*/ value){
			this.inherited(arguments);	// call FormValueWidget._setDisabledAttr()
			this._refreshState();
		},

		_setRequiredAttr: function(/*Boolean*/ value){
			this._set("required", value);
			this.focusNode.setAttribute("aria-required", value);
			this._refreshState();
		},

		_setMessageAttr: function(/*String*/ message){
			this._set("message", message);
			this.displayMessage(message);
		},

		reset:function(){
			// Overrides dijit.form.TextBox.reset() by also
			// hiding errors about partial matches
			this._maskValidSubsetError = true;
			this.inherited(arguments);
		},

		_onBlur: function(){
			// the message still exists but for back-compat, and to erase the tooltip
			// (if the message is being displayed as a tooltip), call displayMessage('')
			this.displayMessage('');

			this.inherited(arguments);
		}
	});
});

},
'url:dijit/layout/templates/ScrollingTabController.html':"<div class=\"dijitTabListContainer-${tabPosition} tabStrip-disabled dijitLayoutContainer\"><!-- CURAM-FIX: removed style=\"visibility:hidden, dd the tabStrip-disabled class by default.\" -->\r\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerMenuButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_menuBtn\"\r\n\t\t\tdata-dojo-props=\"containerId: '${containerId}', iconClass: 'dijitTabStripMenuIcon',\r\n\t\t\t\t\tdropDownPosition: ['below-alt', 'above-alt']\"\r\n\t\t\tdata-dojo-attach-point=\"_menuBtn\" showLabel=\"false\" title=\"\">&#9660;</div>\r\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_leftBtn\"\r\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideLeftIcon', showLabel:false, title:''\"\r\n\t\t\tdata-dojo-attach-point=\"_leftBtn\" data-dojo-attach-event=\"onClick: doSlideLeft\">&#9664;</div>\r\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_rightBtn\"\r\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideRightIcon', showLabel:false, title:''\"\r\n\t\t\tdata-dojo-attach-point=\"_rightBtn\" data-dojo-attach-event=\"onClick: doSlideRight\">&#9654;</div>\r\n\t<div class='dijitTabListWrapper dijitTabContainerTopNone dijitAlignClient' data-dojo-attach-point='tablistWrapper'>\r\n\t\t<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'\r\n\t\t\t\tdata-dojo-attach-point='containerNode' class='nowrapTabStrip dijitTabContainerTop-tabs'></div>\r\n\t</div>\r\n</div>\r\n",
'curam/codetable-hierarchy':function(){
/*
 * Copyright 2009-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * Provides the functionality for the code table hierarchies.
 * 
 */

/*
 * Modification History
 * --------------------
 * 11-Apr-2014  MV  [CR00424825] Move to common AJAX request API.
 * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
 *                include required bundle.
 * 31-Jul-2012 MV [CR00336202] Migrate to take on Dojo 1.7.3
 * 31-Jan-2012 MV [CR00302081] Move away from global context. 
 */

define("curam/codetable-hierarchy", ['curam/util/Request',
        "dojo/data/ItemFileReadStore",
        "curam/widget/FilteringSelect",
        "curam/util/ResourceBundle"
        ], function(curamRequest) {

/**
 * Creating Resource Bundle Object to access localized resources.
 */
dojo.requireLocalization("curam.application", "Debug");
var bundle = new curam.util.ResourceBundle("Debug");
  
var CodeTableHierarchy = {

  /**
   * This function initialises the codetable hierarchy.
   *
   * An empty option is the blank entry in the drop down. This is always the
   * first item in the drop down.
   *
   * @param noOptionCode the value for an empty option.
   * @param noOptionDesc a name for an empty option.
   * @param ddInfo an array containing pairs of id & ctName, where id is the id
   * of the drop down, and ctName is the name of the codetable associated with
   * this dropdown.
   */
  initLists: function(noOptionCode, noOptionDesc, ddInfo) {
    this.noOptionCode = noOptionCode;
    this.noOptionDesc = noOptionDesc;
    this.ddInfo = ddInfo;

    // this code needs to be executed after all the widgets have been created 
    // on the page, so it is placed in a function an executed by addOnLoad
    // which guarantees the page will be fully loaded before the code is
    // executed.
    this.lists = function(){
      var next = null;
    
      // Iterate in reverse to create a forward-linked list.
      for (var i = ddInfo.length - 1; i >= 0; i--) {
        next = new CodeTableHierarchy.DropDown(
        dijit.byId(ddInfo[i].id), ddInfo[i].ctName,
        noOptionCode, noOptionDesc, next);
    }};

    dojo.addOnLoad(this.lists);
  }, 

  /**
   * This function initialises a drop down in the codetable hierarchy.
   *
   * An empty option is the blank entry in the drop down. This is always the
   * first item in the drop down.
   *
   * @param widgetNode the node of the Dojo widget.
   * @param codeTableName the name of the codetable.
   * @param noOptionCode the value for an empty option.
   * @param noOptionDesc a name for an empty option.
   * @param next the next drop down in the hierarchy.
   */
  DropDown: function(widgetNode, codeTableName, noOptionCode, noOptionDesc, 
    next) {
    this.node = widgetNode.domNode;
    this.widgetNode = widgetNode;      
    this.codeTableName = codeTableName;
    this.noOptionCode = noOptionCode;
    this.noOptionDesc = noOptionDesc;
    this.next = next;
    var _this = this; 

    /**
     * Populates the next drop down in the hierarchy when a value has changed
     * in the previous drop down.     
     */
    this.populate = function() {      
      if(!_this.widgetNode.get("value")){
      _this.resetNext(_this);
      } else if (_this.next != null) {
      _this.resetNext(_this);        
        
        if (_this.widgetNode.get("value") == 0){
          return;
        }
        
        curamRequest.post({
          url: "../servlet/JSONServlet",
          
          handleAs: "text",
          
          preventCache: true,

          load: function(dataitems, evt){
            
            // if there are no codetable items returned, then log a message
            // and return.
            if (dataitems.length < 3){
              curam.debug
                .log(bundle.getProperty("curam.codetable-hierarchy.msg.1") 
                  + _this.codeTableName 
                  + bundle.getProperty("curam.codetable-hierarchy.msg.2") 
                  + _this.widgetNode.get('value') );
              return;
            }
          
            // create JavaScript object and add empty item  
            var dataItemsObj = dojo.fromJson(dataitems);
            dataItemsObj.unshift({"value":_this.noOptionCode,"name":""});                        
                   
            var select = dijit.byId(_this.next.widgetNode.id);
                       
            var newStore = new dojo.data.ItemFileReadStore({                
              data: {
                label: "name",
                identifier: "value",              
                items: dataItemsObj}});

             // update the widget with the new store and select the empty item            
             newStore.fetch({           
                onComplete: function(item, request) { 
                select.set("store", newStore);
                select.set("value", _this.noOptionCode);}           
             });            
          },
          
          error: function(error){
            curam.debug.log(error);  
          },
          
          content: {"content": dojo.toJson({
            operation: "getCodeTableSubsetForFilteringSelect",
            args: [_this.codeTableName, _this.widgetNode.get("value")]})}              
        });             
      }
    };

    /**
     * Resets all codetables to the left of the drop down that has changed.
     * 
     * @param dropDown the drop down that has changed
     */
    this.resetNext = function(dropDown) {

      while (dropDown.next != null) {                     
          var dataItemsObj = [];
          dataItemsObj.unshift({"value":dropDown.noOptionCode,
            "name":dropDown.noOptionDesc});                                  
        
          var select = dijit.byId(dropDown.next.widgetNode.id);
          
          var emptyStore = new dojo.data.ItemFileReadStore({                
            data: {
              label: "name",
              identifier: "value",              
              items: dataItemsObj}});
          
          // update the widget with the new store and select the empty item
          emptyStore.fetch({            
            onComplete: function(item, request) { 
              select.set("store", emptyStore);
              select.set('displayedValue', dropDown.noOptionDesc);}});
          
          dropDown = dropDown.next;           
      }      
    };

    if (next != null) {
      dojo.connect(this.widgetNode, "onChange", this.populate);
    } 
  }
};

// Keep the functions in the global scope for backwards compatibility.
// TODO: remove when code calling these functions is updated
dojo.global.CodeTableHierarchy = CodeTableHierarchy;

return CodeTableHierarchy;
});

},
'curam/util/ui/refresh/TabRefreshController':function(){
/*
 * Copyright 2011-2013 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/util/ui/refresh/TabRefreshController", ["curam/debug",
        "curam/util/ui/refresh/RefreshEvent",
        "curam/util/ResourceBundle"
        ], function() {

  /*
   * Modification History
   * --------------------
   * 26-Jun-2013  BOS [CR00390466] Adding requireLocalization to specifically
   *                include required bundle.
   * 07-May-2013  MV  [CR00383012] Fix destroy function to properly
   *    re-initialize members. 
   * 07-Mar-2013  MV  [CR00373496] Fix member variable values handling.
   * 22-Oct-2012  SK  [CR00346419] Now destroys the configuration references
   *                  to avoid memory leak.
   * 09-Oct-2012  BOS [CR00346368] Localized debug messages to console.
   * 04-Jul-2011  MV  [CR00269970] Initial version.
   */

  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");

  /**
   * @name curam.util.ui.refresh.TabRefreshController
   * @namespace Manages refreshing of the the tab UI components.
   *
   */
  var TabRefreshController = dojo.declare("curam.util.ui.refresh.TabRefreshController", null,
  /**
   * @lends curam.util.ui.refresh.TabRefreshController.prototype
   */
  {
    /** Event name for menu refresh. */
    EVENT_REFRESH_MENU: "/curam/refresh/menu",

    /** Event name for navigation refresh. */
    EVENT_REFRESH_NAVIGATION: "/curam/refresh/navigation",

    /** Event name for context panel refresh. */
    EVENT_REFRESH_CONTEXT: "/curam/refresh/context",

    /** Event name for the main content panel refresh. */
    EVENT_REFRESH_MAIN: "/curam/refresh/main-content",

    /** ID of the related tab widget. */
    _tabWidgetId: null,

    /** The configuration for onsubmit handling. */
    _configOnSubmit: null,

    /** The configuration for onload handling. */
    _configOnLoad: null,

    /** The handler function that performs the actual refresh based on the
     * generated events. */
    _handler: null,

    /**
     * Holds the last submit event to be processed. This is needed because page
     * submits are processed only when the next page loads. It is done for two
     * reasons: a) to make sure any server updates caused by the submit are
     * reflected when the UI is refreshed and b) to avoid double refreshes
     * when they are configured on both one page submit and the next page load.
     * If this is the case the refresh list is optimized and only done once.
     */
    _lastSubmitted: null,

    /**
     * Holds the current refresh event sent to the main content panel. This is
     * used to break potential infinite recursion when we are notified of page
     * events caused by our own refresh event.
     */
    _currentlyRefreshing: null,

    /**
     * Creates an instance of the refresh controller.
     *
     * @param {String} tabWidgetId Id of the tab widget this controller
     *            belongs to.
     * @param {Object} [config] The tab refresh configuration object.
     *            The expected structure is the one output
     *            by curam.util.client.render.component.TabRenderer.
     *            Configuration is optional as some tabs have no associated
     *            refresh configuration. If not provided, the controller will not
     *            be active, i.e. will not send out any refresh events ever.
     */
    constructor: function(tabWidgetId, config) {
      this._configOnSubmit = {};
      this._configOnLoad = {};

      if (!config) {
        // is null controller
        return;
      }

      this._tabWidgetId = tabWidgetId;

      // Expand the configuration data structure so that it is easily
      // used in the controller.
      dojo.forEach(config.config, dojo.hitch(this, function(item) {
        this._configOnSubmit[item.page] = item.onsubmit;
        this._configOnLoad[item.page] = item.onload;
      }));
    },

    /**
     * Notifies the controller of a page submit in the specified context.
     *
     * @param pageId ID of the page that has been submitted.
     * @param context Context in which the page has been submitted. The expected
     *            values for this parameter are defined as constants
     *            in the curam.util.ui.refresh.RefreshEvent class.
     */
    pageSubmitted: function(pageId, context) {
      // create event object - validates the parameters
      new curam.util.ui.refresh.RefreshEvent(
          curam.util.ui.refresh.RefreshEvent.prototype.TYPE_ONSUBMIT, context);
      curam.debug.log("curam.util.ui.refresh.TabRefreshController: " +
          bundle.getProperty("curam.util.ui.refresh.TabRefreshController.submit",
                             [pageId, context]));
      if (this._configOnSubmit[pageId]) {
        // if we are interested in this submit, record the event
        // it will be processed when a next page loads
        this._lastSubmitted = pageId;
        curam.debug.log("curam.util.ui.refresh.TabRefreshController: "
          + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
            + "submit.notify"));
      }
    },

    /**
     * Notifies the controller of a page load in the specified context.
     *
     * @param pageId ID of the page that has been loaded.
     * @param context Context in which the page has been loaded. The expected
     *            values for this parameter are defined as constants
     *            in the curam.util.ui.refresh.RefreshEvent class.
     */
    pageLoaded: function(pageId, context) {
      // create event object - also validates the parameters
      var event = new curam.util.ui.refresh.RefreshEvent(
          curam.util.ui.refresh.RefreshEvent.prototype.TYPE_ONLOAD, context);

      curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
        + bundle.getProperty("curam.util.ui.refresh.TabRefreshController.load",
          [pageId, context]));

      // do not react to onload event if it was caused by our refresh event
      // this avoids possible infinite recursion
      if (this._currentlyRefreshing && this._currentlyRefreshing.equals(event)) {
        this._currentlyRefreshing = null;
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
          + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
            + "refresh"));
        return;
      }

      // if a refresh is configured for both previous page submit and next page
      // load we merge the configurations and only refresh once
      var mergedRefreshConfig = {};

      // only support onload event for the main content panel
      if(context == event.SOURCE_CONTEXT_MAIN && this._configOnLoad[pageId]) {
        mergedRefreshConfig = this._configOnLoad[pageId];
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
            + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
              + ".load.config"));
      }
      // else ->
      // load in other contexts will be only used to dispatch
      // any previous onsubmit event
      if (this._lastSubmitted) {
        // merge the configs if we have both onsubmit and onload
        var cfg = this._configOnSubmit[this._lastSubmitted];
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
            + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
              + ".submit.config", [this._lastSubmitted]));

        mergedRefreshConfig.details = mergedRefreshConfig.details || cfg.details;
        mergedRefreshConfig.menubar = mergedRefreshConfig.menubar || cfg.menubar;
        mergedRefreshConfig.navigation =
            mergedRefreshConfig.navigation || cfg.navigation;
        mergedRefreshConfig.mainContent =
            mergedRefreshConfig.mainContent || cfg.mainContent;

        this._lastSubmitted = null;
      }

      this._fireRefreshEvents(mergedRefreshConfig);
    },

    /**
     * Invokes the refresh handler with events based on the received
     * page load/submit events and refresh configuration.
     *
     * @private
     *
     * @param cfg The relevant configuration fragment.
     */
    _fireRefreshEvents: function(cfg) {
      var events = [];
      if (cfg.details) {
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
          + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
            + ".refresh.context"));
        events.push(this.EVENT_REFRESH_CONTEXT + "/" + this._tabWidgetId);
      }
      if (cfg.menubar) {
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
          + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
            + ".refresh.menu"));
        events.push(this.EVENT_REFRESH_MENU + "/" + this._tabWidgetId);
      }
      if (cfg.navigation) {
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
          + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
            + ".refresh.nav"));
        events.push(this.EVENT_REFRESH_NAVIGATION + "/" + this._tabWidgetId);
      }
      if (cfg.mainContent) {
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
          + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
            + ".refresh.main"));
        // store the refresh event for later use in the infinite recursion
        // breaking code above
        this._currentlyRefreshing = new curam.util.ui.refresh.RefreshEvent(
            curam.util.ui.refresh.RefreshEvent.prototype.TYPE_ONLOAD,
            curam.util.ui.refresh.RefreshEvent.prototype.SOURCE_CONTEXT_MAIN,
            null);
        events.push(this.EVENT_REFRESH_MAIN + "/" + this._tabWidgetId);
      }
      if (events.length > 0) {
        curam.debug.log("curam.util.ui.refresh.TabRefreshController:"
            + bundle.getProperty("curam.util.ui.refresh.TabRefreshController"
              + ".refresh.log", [events.length, events]));
        this._handler(events);
      }
    },

    /**
     * Specifies the refresh handler function to be invoked when some tab UI
     * parts should be refreshed.
     *
     * @param {Function} handler A function to be invoked in response to tab UI
     *    refresh events. The function will be passed one parameter
     *    which is an array of refresh event names. The format of the refresh
     *    event names is the following: event_name/tab_widget_id, where
     *    the supported event_names are defined as constants in this class
     *    and tab_widget_id is ID of the tab the events are related to. Please
     *    note that all the events in the array will always refer to the same tab.
     */
    setRefreshHandler: function(handler) {
      this._handler = handler;
    },

    /**
     * Releases any resources related to this controller instance.
     * It is the responsibility of this class' clients to call this function when
     * the tab that owns the controller instance is closed.
     */
    destroy: function() {
      for (prop in this._configOnSubmit) {
        if (this._configOnSubmit.hasOwnProperty(prop)) {
        delete this._configOnSubmit[prop];
      }
      }
      for (prop in this._configOnLoad) {
        if (this._configOnLoad.hasOwnProperty(prop)) {
        delete this._configOnLoad[prop];
      }
      }
      this._configOnSubmit = {};
      this._configOnLoad = {};
      this._handler = null;
      this._lastSubmitted = null;
      this._currentlyRefreshing = null;
    }
  });

  return TabRefreshController;
});

},
'dojo/_base/url':function(){
define("dojo/_base/url", ["./kernel"], function(dojo) {
	// module:
	//		dojo/url
	// summary:
	//		This module contains dojo._Url

	var
		ore = new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"),
		ire = new RegExp("^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$"),
		_Url = function(){
			var n = null,
				_a = arguments,
				uri = [_a[0]];
			// resolve uri components relative to each other
			for(var i = 1; i<_a.length; i++){
				if(!_a[i]){ continue; }

				// Safari doesn't support this.constructor so we have to be explicit
				// FIXME: Tracked (and fixed) in Webkit bug 3537.
				//		http://bugs.webkit.org/show_bug.cgi?id=3537
				var relobj = new _Url(_a[i]+""),
					uriobj = new _Url(uri[0]+"");

				if(
					relobj.path == "" &&
					!relobj.scheme &&
					!relobj.authority &&
					!relobj.query
				){
					if(relobj.fragment != n){
						uriobj.fragment = relobj.fragment;
					}
					relobj = uriobj;
				}else if(!relobj.scheme){
					relobj.scheme = uriobj.scheme;

					if(!relobj.authority){
						relobj.authority = uriobj.authority;

						if(relobj.path.charAt(0) != "/"){
							var path = uriobj.path.substring(0,
								uriobj.path.lastIndexOf("/") + 1) + relobj.path;

							var segs = path.split("/");
							for(var j = 0; j < segs.length; j++){
								if(segs[j] == "."){
									// flatten "./" references
									if(j == segs.length - 1){
										segs[j] = "";
									}else{
										segs.splice(j, 1);
										j--;
									}
								}else if(j > 0 && !(j == 1 && segs[0] == "") &&
									segs[j] == ".." && segs[j-1] != ".."){
									// flatten "../" references
									if(j == (segs.length - 1)){
										segs.splice(j, 1);
										segs[j - 1] = "";
									}else{
										segs.splice(j - 1, 2);
										j -= 2;
									}
								}
							}
							relobj.path = segs.join("/");
						}
					}
				}

				uri = [];
				if(relobj.scheme){
					uri.push(relobj.scheme, ":");
				}
				if(relobj.authority){
					uri.push("//", relobj.authority);
				}
				uri.push(relobj.path);
				if(relobj.query){
					uri.push("?", relobj.query);
				}
				if(relobj.fragment){
					uri.push("#", relobj.fragment);
				}
			}

			this.uri = uri.join("");

			// break the uri into its main components
			var r = this.uri.match(ore);

			this.scheme = r[2] || (r[1] ? "" : n);
			this.authority = r[4] || (r[3] ? "" : n);
			this.path = r[5]; // can never be undefined
			this.query = r[7] || (r[6] ? "" : n);
			this.fragment	 = r[9] || (r[8] ? "" : n);

			if(this.authority != n){
				// server based naming authority
				r = this.authority.match(ire);

				this.user = r[3] || n;
				this.password = r[4] || n;
				this.host = r[6] || r[7]; // ipv6 || ipv4
				this.port = r[9] || n;
			}
		};
	_Url.prototype.toString = function(){ return this.uri; };

	return dojo._Url = _Url;
});

},
'dijit/form/_ComboBoxMenuMixin':function(){
define("dijit/form/_ComboBoxMenuMixin", [
	"dojo/_base/array", // array.forEach
	"dojo/_base/declare", // declare
	"dojo/dom-attr", // domAttr.set
	"dojo/i18n", // i18n.getLocalization
	"dojo/_base/window", // win.doc.createTextNode
	"dojo/i18n!./nls/ComboBox"
], function(array, declare, domAttr, i18n, win){

// module:
//		dijit/form/_ComboBoxMenuMixin
// summary:
//		Focus-less menu for internal use in `dijit.form.ComboBox`

return declare( "dijit.form._ComboBoxMenuMixin", null, {
	// summary:
	//		Focus-less menu for internal use in `dijit.form.ComboBox`
	// tags:
	//		private

	// _messages: Object
	//		Holds "next" and "previous" text for paging buttons on drop down
	_messages: null,

	postMixInProperties: function(){
		this.inherited(arguments);
		this._messages = i18n.getLocalization("dijit.form", "ComboBox", this.lang);
	},

	buildRendering: function(){
		this.inherited(arguments);

		// fill in template with i18n messages
		this.previousButton.innerHTML = this._messages["previousMessage"];
		this.nextButton.innerHTML = this._messages["nextMessage"];
	},

	_setValueAttr: function(/*Object*/ value){
		this.value = value;
		this.onChange(value);
	},

	onClick: function(/*DomNode*/ node){
		if(node == this.previousButton){
			this._setSelectedAttr(null);
			this.onPage(-1);
		}else if(node == this.nextButton){
			this._setSelectedAttr(null);
			this.onPage(1);
		}else{
			this.onChange(node);
		}
	},

	// stubs
	onChange: function(/*Number*/ /*===== direction =====*/){
		// summary:
		//		Notifies ComboBox/FilteringSelect that user selected an option.
		// tags:
		//		callback
	},

	onPage: function(/*Number*/ /*===== direction =====*/){
		// summary:
		//		Notifies ComboBox/FilteringSelect that user clicked to advance to next/previous page.
		// tags:
		//		callback
	},

	onClose: function(){
		// summary:
		//		Callback from dijit.popup code to this widget, notifying it that it closed
		// tags:
		//		private
		this._setSelectedAttr(null);
	},

	_createOption: function(/*Object*/ item, labelFunc){
		// summary:
		//		Creates an option to appear on the popup menu subclassed by
		//		`dijit.form.FilteringSelect`.

		var menuitem = this._createMenuItem();
		var labelObject = labelFunc(item);
		if(labelObject.html){
			menuitem.innerHTML = labelObject.label;
		}else{
			menuitem.appendChild(
				win.doc.createTextNode(labelObject.label)
			);
		}
		// #3250: in blank options, assign a normal height
		if(menuitem.innerHTML == ""){
			menuitem.innerHTML = "&#160;";	// &nbsp;
		}

		// update menuitem.dir if BidiSupport was required
		this.applyTextDir(menuitem, (menuitem.innerText || menuitem.textContent || ""));

		menuitem.item=item;
		return menuitem;
	},

	createOptions: function(results, options, labelFunc){
		// summary:
		//		Fills in the items in the drop down list
		// results:
		//		Array of items
		// options:
		//		The options to the query function of the store
		//
		// labelFunc:
		//		Function to produce a label in the drop down list from a dojo.data item

		this.items = results;

		// display "Previous . . ." button
		this.previousButton.style.display = (options.start == 0) ? "none" : "";
		domAttr.set(this.previousButton, "id", this.id + "_prev");
		// create options using _createOption function defined by parent
		// ComboBox (or FilteringSelect) class
		// #2309:
		//		iterate over cache nondestructively
		array.forEach(results, function(item, i){
			var menuitem = this._createOption(item, labelFunc);
			menuitem.setAttribute("item", i);	// index to this.items; use indirection to avoid mem leak
			domAttr.set(menuitem, "id", this.id + i);
			this.nextButton.parentNode.insertBefore(menuitem, this.nextButton);
		}, this);
		// display "Next . . ." button
		var displayMore = false;
		// Try to determine if we should show 'more'...
		if(results.total && !results.total.then && results.total != -1){
			if((options.start + options.count) < results.total){
				displayMore = true;
			}else if((options.start + options.count) > results.total && options.count == results.length){
				// Weird return from a data store, where a start + count > maxOptions
				// implies maxOptions isn't really valid and we have to go into faking it.
				// And more or less assume more if count == results.length
				displayMore = true;
			}
		}else if(options.count == results.length){
			//Don't know the size, so we do the best we can based off count alone.
			//So, if we have an exact match to count, assume more.
			displayMore = true;
		}

		this.nextButton.style.display = displayMore ? "" : "none";
		domAttr.set(this.nextButton,"id", this.id + "_next");
	},

	clearResultList: function(){
		// summary:
		//		Clears the entries in the drop down list, but of course keeps the previous and next buttons.
		var container = this.containerNode;
		while(container.childNodes.length > 2){
			container.removeChild(container.childNodes[container.childNodes.length-2]);
		}
		this._setSelectedAttr(null);
	},

	highlightFirstOption: function(){
		// summary:
		//		Highlight the first real item in the list (not Previous Choices).
		this.selectFirstNode();
	},

	highlightLastOption: function(){
		// summary:
		//		Highlight the last real item in the list (not More Choices).
		this.selectLastNode();
	},

	selectFirstNode: function(){
		this.inherited(arguments);
		if(this.getHighlightedOption() == this.previousButton){
			this.selectNextNode();
		}
	},

	selectLastNode: function(){
		this.inherited(arguments);
		if(this.getHighlightedOption() == this.nextButton){
			this.selectPreviousNode();
		}
	},

	getHighlightedOption: function(){
		return this._getSelectedAttr();
	}
});

});

},
'dijit/Tree':function(){
require({cache:{
'url:dijit/templates/TreeNode.html':"<div class=\"dijitTreeNode\" role=\"presentation\"\n\t><div data-dojo-attach-point=\"rowNode\" class=\"dijitTreeRow\" role=\"presentation\" data-dojo-attach-event=\"onmouseenter:_onMouseEnter, onmouseleave:_onMouseLeave, onclick:_onClick, ondblclick:_onDblClick\"\n\t\t><img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"expandoNode\" class=\"dijitTreeExpando\" role=\"presentation\"\n\t\t/><span data-dojo-attach-point=\"expandoNodeText\" class=\"dijitExpandoText\" role=\"presentation\"\n\t\t></span\n\t\t><span data-dojo-attach-point=\"contentNode\"\n\t\t\tclass=\"dijitTreeContent\" role=\"presentation\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"iconNode\" class=\"dijitIcon dijitTreeIcon\" role=\"presentation\"\n\t\t\t/><span data-dojo-attach-point=\"labelNode\" class=\"dijitTreeLabel\" role=\"treeitem\" tabindex=\"-1\" aria-selected=\"false\" data-dojo-attach-event=\"onfocus:_onLabelFocus\"></span>\n\t\t</span\n\t></div>\n\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitTreeContainer\" role=\"presentation\" style=\"display: none;\"></div>\n</div>\n",
'url:dijit/templates/Tree.html':"<div class=\"dijitTree dijitTreeContainer\" role=\"tree\"\n\tdata-dojo-attach-event=\"onkeypress:_onKeyPress\">\n\t<div class=\"dijitInline dijitTreeIndent\" style=\"position: absolute; top: -9999px\" data-dojo-attach-point=\"indentDetector\"></div>\n</div>\n"}});
define("dijit/Tree", [
	"dojo/_base/array", // array.filter array.forEach array.map
	"dojo/_base/connect",	// connect.isCopyKey()
	"dojo/cookie", // cookie
	"dojo/_base/declare", // declare
	"dojo/_base/Deferred", // Deferred
	"dojo/DeferredList", // DeferredList
	"dojo/dom", // dom.isDescendant
	"dojo/dom-class", // domClass.add domClass.remove domClass.replace domClass.toggle
	"dojo/dom-geometry", // domGeometry.setMarginBox domGeometry.position
	"dojo/dom-style",// domStyle.set
	"dojo/_base/event", // event.stop
	"dojo/fx", // fxUtils.wipeIn fxUtils.wipeOut
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/keys",	// arrows etc.
	"dojo/_base/lang", // lang.getObject lang.mixin lang.hitch
	"dojo/topic",
	"./focus",
	"./registry",	// registry.getEnclosingWidget(), manager.defaultDuration
	"./_base/manager",	// manager.getEnclosingWidget(), manager.defaultDuration
	"./_Widget",
	"./_TemplatedMixin",
	"./_Container",
	"./_Contained",
	"./_CssStateMixin",
	"dojo/text!./templates/TreeNode.html",
	"dojo/text!./templates/Tree.html",
	"./tree/TreeStoreModel",
	"./tree/ForestStoreModel",
	"./tree/_dndSelector"
], function(array, connect, cookie, declare, Deferred, DeferredList,
			dom, domClass, domGeometry, domStyle, event, fxUtils, kernel, keys, lang, topic,
			focus, registry, manager, _Widget, _TemplatedMixin, _Container, _Contained, _CssStateMixin,
			treeNodeTemplate, treeTemplate, TreeStoreModel, ForestStoreModel, _dndSelector){

/*=====
	var _Widget = dijit._Widget;
	var _TemplatedMixin = dijit._TemplatedMixin;
	var _CssStateMixin = dijit._CssStateMixin;
	var _Container = dijit._Container;
	var _Contained = dijit._Contained;
=====*/

// module:
//		dijit/Tree
// summary:
//		dijit.Tree widget, and internal dijit._TreeNode widget


var TreeNode = declare(
	"dijit._TreeNode",
	[_Widget, _TemplatedMixin, _Container, _Contained, _CssStateMixin],
{
	// summary:
	//		Single node within a tree.   This class is used internally
	//		by Tree and should not be accessed directly.
	// tags:
	//		private

	// item: [const] Item
	//		the dojo.data entry this tree represents
	item: null,

	// isTreeNode: [protected] Boolean
	//		Indicates that this is a TreeNode.   Used by `dijit.Tree` only,
	//		should not be accessed directly.
	isTreeNode: true,

	// label: String
	//		Text of this tree node
	label: "",
	_setLabelAttr: {node: "labelNode", type: "innerText"},

	// isExpandable: [private] Boolean
	//		This node has children, so show the expando node (+ sign)
	isExpandable: null,

	// isExpanded: [readonly] Boolean
	//		This node is currently expanded (ie, opened)
	isExpanded: false,

	// state: [private] String
	//		Dynamic loading-related stuff.
	//		When an empty folder node appears, it is "UNCHECKED" first,
	//		then after dojo.data query it becomes "LOADING" and, finally "LOADED"
	state: "UNCHECKED",

	templateString: treeNodeTemplate,

	baseClass: "dijitTreeNode",

	// For hover effect for tree node, and focus effect for label
	cssStateNodes: {
		rowNode: "dijitTreeRow",
		labelNode: "dijitTreeLabel"
	},

	// Tooltip is defined in _WidgetBase but we need to handle the mapping to DOM here
	_setTooltipAttr: {node: "rowNode", type: "attribute", attribute: "title"},

	buildRendering: function(){
		this.inherited(arguments);

		// set expand icon for leaf
		this._setExpando();

		// set icon and label class based on item
		this._updateItemClasses(this.item);

		if(this.isExpandable){
			this.labelNode.setAttribute("aria-expanded", this.isExpanded);
		}

		//aria-selected should be false on all selectable elements.
		this.setSelected(false);
	},

	_setIndentAttr: function(indent){
		// summary:
		//		Tell this node how many levels it should be indented
		// description:
		//		0 for top level nodes, 1 for their children, 2 for their
		//		grandchildren, etc.

		// Math.max() is to prevent negative padding on hidden root node (when indent == -1)
		var pixels = (Math.max(indent, 0) * this.tree._nodePixelIndent) + "px";

		domStyle.set(this.domNode, "backgroundPosition",	pixels + " 0px");
		domStyle.set(this.rowNode, this.isLeftToRight() ? "paddingLeft" : "paddingRight", pixels);

		array.forEach(this.getChildren(), function(child){
			child.set("indent", indent+1);
		});

		this._set("indent", indent);
	},

	markProcessing: function(){
		// summary:
		//		Visually denote that tree is loading data, etc.
		// tags:
		//		private
		this.state = "LOADING";
		this._setExpando(true);
	},

	unmarkProcessing: function(){
		// summary:
		//		Clear markup from markProcessing() call
		// tags:
		//		private
		this._setExpando(false);
	},

	_updateItemClasses: function(item){
		// summary:
		//		Set appropriate CSS classes for icon and label dom node
		//		(used to allow for item updates to change respective CSS)
		// tags:
		//		private
		var tree = this.tree, model = tree.model;
		if(tree._v10Compat && item === model.root){
			// For back-compat with 1.0, need to use null to specify root item (TODO: remove in 2.0)
			item = null;
		}
		this._applyClassAndStyle(item, "icon", "Icon");
		this._applyClassAndStyle(item, "label", "Label");
		this._applyClassAndStyle(item, "row", "Row");
	},

	_applyClassAndStyle: function(item, lower, upper){
		// summary:
		//		Set the appropriate CSS classes and styles for labels, icons and rows.
		//
		// item:
		//		The data item.
		//
		// lower:
		//		The lower case attribute to use, e.g. 'icon', 'label' or 'row'.
		//
		// upper:
		//		The upper case attribute to use, e.g. 'Icon', 'Label' or 'Row'.
		//
		// tags:
		//		private

		var clsName = "_" + lower + "Class";
		var nodeName = lower + "Node";
		var oldCls = this[clsName];

		this[clsName] = this.tree["get" + upper + "Class"](item, this.isExpanded);
		domClass.replace(this[nodeName], this[clsName] || "", oldCls || "");

		domStyle.set(this[nodeName], this.tree["get" + upper + "Style"](item, this.isExpanded) || {});
 	},

	_updateLayout: function(){
		// summary:
		//		Set appropriate CSS classes for this.domNode
		// tags:
		//		private
		var parent = this.getParent();
		if(!parent || !parent.rowNode || parent.rowNode.style.display == "none"){
			/* if we are hiding the root node then make every first level child look like a root node */
			domClass.add(this.domNode, "dijitTreeIsRoot");
		}else{
			domClass.toggle(this.domNode, "dijitTreeIsLast", !this.getNextSibling());
		}
	},

	_setExpando: function(/*Boolean*/ processing){
		// summary:
		//		Set the right image for the expando node
		// tags:
		//		private

		var styles = ["dijitTreeExpandoLoading", "dijitTreeExpandoOpened",
						"dijitTreeExpandoClosed", "dijitTreeExpandoLeaf"],
			_a11yStates = ["*","-","+","*"],
			idx = processing ? 0 : (this.isExpandable ?	(this.isExpanded ? 1 : 2) : 3);

		// apply the appropriate class to the expando node
		domClass.replace(this.expandoNode, styles[idx], styles);

		// provide a non-image based indicator for images-off mode
		this.expandoNodeText.innerHTML = _a11yStates[idx];

	},

	expand: function(){
		// summary:
		//		Show my children
		// returns:
		//		Deferred that fires when expansion is complete

		// If there's already an expand in progress or we are already expanded, just return
		if(this._expandDeferred){
			return this._expandDeferred;		// dojo.Deferred
		}

		// cancel in progress collapse operation
		this._wipeOut && this._wipeOut.stop();

		// All the state information for when a node is expanded, maybe this should be
		// set when the animation completes instead
		this.isExpanded = true;
		this.labelNode.setAttribute("aria-expanded", "true");
		if(this.tree.showRoot || this !== this.tree.rootNode){
			this.containerNode.setAttribute("role", "group");
		}
		domClass.add(this.contentNode,'dijitTreeContentExpanded');
		this._setExpando();
		this._updateItemClasses(this.item);
		
		if(this == this.tree.rootNode && this.tree.showRoot){
			this.tree.domNode.setAttribute("aria-expanded", "true");
		}

		var def,
			wipeIn = fxUtils.wipeIn({
				node: this.containerNode, duration: manager.defaultDuration,
				onEnd: function(){
					def.callback(true);
				}
			});

		// Deferred that fires when expand is complete
		def = (this._expandDeferred = new Deferred(function(){
			// Canceller
			wipeIn.stop();
		}));

		wipeIn.play();

		return def;		// dojo.Deferred
	},

	collapse: function(){
		// summary:
		//		Collapse this node (if it's expanded)

		if(!this.isExpanded){ return; }

		// cancel in progress expand operation
		if(this._expandDeferred){
			this._expandDeferred.cancel();
			delete this._expandDeferred;
		}

		this.isExpanded = false;
		this.labelNode.setAttribute("aria-expanded", "false");
		if(this == this.tree.rootNode && this.tree.showRoot){
			this.tree.domNode.setAttribute("aria-expanded", "false");
		}
		domClass.remove(this.contentNode,'dijitTreeContentExpanded');
		this._setExpando();
		this._updateItemClasses(this.item);

		if(!this._wipeOut){
			this._wipeOut = fxUtils.wipeOut({
				node: this.containerNode, duration: manager.defaultDuration
			});
		}
		this._wipeOut.play();
	},

	// indent: Integer
	//		Levels from this node to the root node
	indent: 0,

	setChildItems: function(/* Object[] */ items){
		// summary:
		//		Sets the child items of this node, removing/adding nodes
		//		from current children to match specified items[] array.
		//		Also, if this.persist == true, expands any children that were previously
		// 		opened.
		// returns:
		//		Deferred object that fires after all previously opened children
		//		have been expanded again (or fires instantly if there are no such children).

		var tree = this.tree,
			model = tree.model,
			defs = [];	// list of deferreds that need to fire before I am complete


		// Orphan all my existing children.
		// If items contains some of the same items as before then we will reattach them.
		// Don't call this.removeChild() because that will collapse the tree etc.
		array.forEach(this.getChildren(), function(child){
			_Container.prototype.removeChild.call(this, child);
		}, this);

		this.state = "LOADED";

		if(items && items.length > 0){
			this.isExpandable = true;

			// Create _TreeNode widget for each specified tree node, unless one already
			// exists and isn't being used (presumably it's from a DnD move and was recently
			// released
			array.forEach(items, function(item){
				var id = model.getIdentity(item),
					existingNodes = tree._itemNodesMap[id],
					node;
				if(existingNodes){
					for(var i=0;i<existingNodes.length;i++){
						if(existingNodes[i] && !existingNodes[i].getParent()){
							node = existingNodes[i];
							node.set('indent', this.indent+1);
							break;
						}
					}
				}
				if(!node){
					node = this.tree._createTreeNode({
							item: item,
							tree: tree,
							isExpandable: model.mayHaveChildren(item),
							label: tree.getLabel(item),
							tooltip: tree.getTooltip(item),
							dir: tree.dir,
							lang: tree.lang,
							textDir: tree.textDir,
							indent: this.indent + 1
						});
					if(existingNodes){
						existingNodes.push(node);
					}else{
						tree._itemNodesMap[id] = [node];
					}
				}
				this.addChild(node);

				// If node was previously opened then open it again now (this may trigger
				// more data store accesses, recursively)
				if(this.tree.autoExpand || this.tree._state(node)){
					defs.push(tree._expandNode(node));
				}
			}, this);

			// note that updateLayout() needs to be called on each child after
			// _all_ the children exist
			array.forEach(this.getChildren(), function(child){
				child._updateLayout();
			});
		}else{
			this.isExpandable=false;
		}

		if(this._setExpando){
			// change expando to/from dot or + icon, as appropriate
			this._setExpando(false);
		}

		// Set leaf icon or folder icon, as appropriate
		this._updateItemClasses(this.item);

		// On initial tree show, make the selected TreeNode as either the root node of the tree,
		// or the first child, if the root node is hidden
		if(this == tree.rootNode){
			var fc = this.tree.showRoot ? this : this.getChildren()[0];
			if(fc){
				fc.setFocusable(true);
				tree.lastFocused = fc;
			}else{
				// fallback: no nodes in tree so focus on Tree <div> itself
				tree.domNode.setAttribute("tabIndex", "0");
			}
		}

		return new DeferredList(defs);	// dojo.Deferred
	},

	getTreePath: function(){
		var node = this;
		var path = [];
		while(node && node !== this.tree.rootNode){
				path.unshift(node.item);
				node = node.getParent();
		}
		path.unshift(this.tree.rootNode.item);

		return path;
	},

	getIdentity: function(){
		return this.tree.model.getIdentity(this.item);
	},

	removeChild: function(/* treeNode */ node){
		this.inherited(arguments);

		var children = this.getChildren();
		if(children.length == 0){
			this.isExpandable = false;
			this.collapse();
		}

		array.forEach(children, function(child){
				child._updateLayout();
		});
	},

	makeExpandable: function(){
		// summary:
		//		if this node wasn't already showing the expando node,
		//		turn it into one and call _setExpando()

		// TODO: hmm this isn't called from anywhere, maybe should remove it for 2.0

		this.isExpandable = true;
		this._setExpando(false);
	},

	_onLabelFocus: function(){
		// summary:
		//		Called when this row is focused (possibly programatically)
		//		Note that we aren't using _onFocus() builtin to dijit
		//		because it's called when focus is moved to a descendant TreeNode.
		// tags:
		//		private
		this.tree._onNodeFocus(this);
	},

	setSelected: function(/*Boolean*/ selected){
		// summary:
		//		A Tree has a (single) currently selected node.
		//		Mark that this node is/isn't that currently selected node.
		// description:
		//		In particular, setting a node as selected involves setting tabIndex
		//		so that when user tabs to the tree, focus will go to that node (only).
		this.labelNode.setAttribute("aria-selected", selected);
		domClass.toggle(this.rowNode, "dijitTreeRowSelected", selected);
	},

	setFocusable: function(/*Boolean*/ selected){
		// summary:
		//		A Tree has a (single) node that's focusable.
		//		Mark that this node is/isn't that currently focsuable node.
		// description:
		//		In particular, setting a node as selected involves setting tabIndex
		//		so that when user tabs to the tree, focus will go to that node (only).

		this.labelNode.setAttribute("tabIndex", selected ? "0" : "-1");
	},

	_onClick: function(evt){
		// summary:
		//		Handler for onclick event on a node
		// tags:
		//		private
		this.tree._onClick(this, evt);
	},
	_onDblClick: function(evt){
		// summary:
		//		Handler for ondblclick event on a node
		// tags:
		//		private
		this.tree._onDblClick(this, evt);
	},

	_onMouseEnter: function(evt){
		// summary:
		//		Handler for onmouseenter event on a node
		// tags:
		//		private
		this.tree._onNodeMouseEnter(this, evt);
	},

	_onMouseLeave: function(evt){
		// summary:
		//		Handler for onmouseenter event on a node
		// tags:
		//		private
		this.tree._onNodeMouseLeave(this, evt);
	},

	_setTextDirAttr: function(textDir){
		if(textDir &&((this.textDir != textDir) || !this._created)){
			this._set("textDir", textDir);
			this.applyTextDir(this.labelNode, this.labelNode.innerText || this.labelNode.textContent || "");
			array.forEach(this.getChildren(), function(childNode){
				childNode.set("textDir", textDir);
			}, this);
		}
	}
});

var Tree = declare("dijit.Tree", [_Widget, _TemplatedMixin], {
	// summary:
	//		This widget displays hierarchical data from a store.

	// store: [deprecated] String||dojo.data.Store
	//		Deprecated.  Use "model" parameter instead.
	//		The store to get data to display in the tree.
	store: null,

	// model: dijit.Tree.model
	//		Interface to read tree data, get notifications of changes to tree data,
	//		and for handling drop operations (i.e drag and drop onto the tree)
	model: null,

	// query: [deprecated] anything
	//		Deprecated.  User should specify query to the model directly instead.
	//		Specifies datastore query to return the root item or top items for the tree.
	query: null,

	// label: [deprecated] String
	//		Deprecated.  Use dijit.tree.ForestStoreModel directly instead.
	//		Used in conjunction with query parameter.
	//		If a query is specified (rather than a root node id), and a label is also specified,
	//		then a fake root node is created and displayed, with this label.
	label: "",

	// showRoot: [const] Boolean
	//		Should the root node be displayed, or hidden?
	showRoot: true,

	// childrenAttr: [deprecated] String[]
	//		Deprecated.   This information should be specified in the model.
	//		One ore more attributes that holds children of a tree node
	childrenAttr: ["children"],

	// paths: String[][] or Item[][]
	//		Full paths from rootNode to selected nodes expressed as array of items or array of ids.
	//		Since setting the paths may be asynchronous (because ofwaiting on dojo.data), set("paths", ...)
	//		returns a Deferred to indicate when the set is complete.
	paths: [],

	// path: String[] or Item[]
	//      Backward compatible singular variant of paths.
	path: [],

	// selectedItems: [readonly] Item[]
	//		The currently selected items in this tree.
	//		This property can only be set (via set('selectedItems', ...)) when that item is already
	//		visible in the tree.   (I.e. the tree has already been expanded to show that node.)
	//		Should generally use `paths` attribute to set the selected items instead.
	selectedItems: null,

	// selectedItem: [readonly] Item
	//      Backward compatible singular variant of selectedItems.
	selectedItem: null,

	// openOnClick: Boolean
	//		If true, clicking a folder node's label will open it, rather than calling onClick()
	openOnClick: false,

	// openOnDblClick: Boolean
	//		If true, double-clicking a folder node's label will open it, rather than calling onDblClick()
	openOnDblClick: false,

	templateString: treeTemplate,

	// persist: Boolean
	//		Enables/disables use of cookies for state saving.
	persist: true,

	// autoExpand: Boolean
	//		Fully expand the tree on load.   Overrides `persist`.
	autoExpand: false,

	// dndController: [protected] Function|String
	//		Class to use as as the dnd controller.  Specifying this class enables DnD.
	//		Generally you should specify this as dijit.tree.dndSource.
	//      Setting of dijit.tree._dndSelector handles selection only (no actual DnD).
	dndController: _dndSelector,

	// parameters to pull off of the tree and pass on to the dndController as its params
	dndParams: ["onDndDrop","itemCreator","onDndCancel","checkAcceptance", "checkItemAcceptance", "dragThreshold", "betweenThreshold"],

	//declare the above items so they can be pulled from the tree's markup

	// onDndDrop: [protected] Function
	//		Parameter to dndController, see `dijit.tree.dndSource.onDndDrop`.
	//		Generally this doesn't need to be set.
	onDndDrop: null,

	/*=====
	itemCreator: function(nodes, target, source){
		// summary:
		//		Returns objects passed to `Tree.model.newItem()` based on DnD nodes
		//		dropped onto the tree.   Developer must override this method to enable
		// 		dropping from external sources onto this Tree, unless the Tree.model's items
		//		happen to look like {id: 123, name: "Apple" } with no other attributes.
		// description:
		//		For each node in nodes[], which came from source, create a hash of name/value
		//		pairs to be passed to Tree.model.newItem().  Returns array of those hashes.
		// nodes: DomNode[]
		//		The DOMNodes dragged from the source container
		// target: DomNode
		//		The target TreeNode.rowNode
		// source: dojo.dnd.Source
		//		The source container the nodes were dragged from, perhaps another Tree or a plain dojo.dnd.Source
		// returns: Object[]
		//		Array of name/value hashes for each new item to be added to the Tree, like:
		// |	[
		// |		{ id: 123, label: "apple", foo: "bar" },
		// |		{ id: 456, label: "pear", zaz: "bam" }
		// |	]
		// tags:
		//		extension
		return [{}];
	},
	=====*/
	itemCreator: null,

	// onDndCancel: [protected] Function
	//		Parameter to dndController, see `dijit.tree.dndSource.onDndCancel`.
	//		Generally this doesn't need to be set.
	onDndCancel: null,

/*=====
	checkAcceptance: function(source, nodes){
		// summary:
		//		Checks if the Tree itself can accept nodes from this source
		// source: dijit.tree._dndSource
		//		The source which provides items
		// nodes: DOMNode[]
		//		Array of DOM nodes corresponding to nodes being dropped, dijitTreeRow nodes if
		//		source is a dijit.Tree.
		// tags:
		//		extension
		return true;	// Boolean
	},
=====*/
	checkAcceptance: null,

/*=====
	checkItemAcceptance: function(target, source, position){
		// summary:
		//		Stub function to be overridden if one wants to check for the ability to drop at the node/item level
		// description:
		//		In the base case, this is called to check if target can become a child of source.
		//		When betweenThreshold is set, position="before" or "after" means that we
		//		are asking if the source node can be dropped before/after the target node.
		// target: DOMNode
		//		The dijitTreeRoot DOM node inside of the TreeNode that we are dropping on to
		//		Use dijit.getEnclosingWidget(target) to get the TreeNode.
		// source: dijit.tree.dndSource
		//		The (set of) nodes we are dropping
		// position: String
		//		"over", "before", or "after"
		// tags:
		//		extension
		return true;	// Boolean
	},
=====*/
	checkItemAcceptance: null,

	// dragThreshold: Integer
	//		Number of pixels mouse moves before it's considered the start of a drag operation
	dragThreshold: 5,

	// betweenThreshold: Integer
	//		Set to a positive value to allow drag and drop "between" nodes.
	//
	//		If during DnD mouse is over a (target) node but less than betweenThreshold
	//		pixels from the bottom edge, dropping the the dragged node will make it
	//		the next sibling of the target node, rather than the child.
	//
	//		Similarly, if mouse is over a target node but less that betweenThreshold
	//		pixels from the top edge, dropping the dragged node will make it
	//		the target node's previous sibling rather than the target node's child.
	betweenThreshold: 0,

	// _nodePixelIndent: Integer
	//		Number of pixels to indent tree nodes (relative to parent node).
	//		Default is 19 but can be overridden by setting CSS class dijitTreeIndent
	//		and calling resize() or startup() on tree after it's in the DOM.
	_nodePixelIndent: 19,

	_publish: function(/*String*/ topicName, /*Object*/ message){
		// summary:
		//		Publish a message for this widget/topic
		topic.publish(this.id, lang.mixin({tree: this, event: topicName}, message || {}));	// publish
	},

	postMixInProperties: function(){
		this.tree = this;

		if(this.autoExpand){
			// There's little point in saving opened/closed state of nodes for a Tree
			// that initially opens all it's nodes.
			this.persist = false;
		}

		this._itemNodesMap={};

		if(!this.cookieName && this.id){
			this.cookieName = this.id + "SaveStateCookie";
		}

		this._loadDeferred = new Deferred();

		this.inherited(arguments);
	},

	postCreate: function(){
		this._initState();

		// Create glue between store and Tree, if not specified directly by user
		if(!this.model){
			this._store2model();
		}

		// monitor changes to items
		this.connect(this.model, "onChange", "_onItemChange");
		this.connect(this.model, "onChildrenChange", "_onItemChildrenChange");
		this.connect(this.model, "onDelete", "_onItemDelete");

		this.inherited(arguments);

		if(this.dndController){
			if(lang.isString(this.dndController)){
				this.dndController = lang.getObject(this.dndController);
			}
			var params={};
			for(var i=0; i<this.dndParams.length;i++){
				if(this[this.dndParams[i]]){
					params[this.dndParams[i]] = this[this.dndParams[i]];
				}
			}
			this.dndController = new this.dndController(this, params);
		}

		this._load();
	},

	_store2model: function(){
		// summary:
		//		User specified a store&query rather than model, so create model from store/query
		this._v10Compat = true;
		kernel.deprecated("Tree: from version 2.0, should specify a model object rather than a store/query");

		var modelParams = {
			id: this.id + "_ForestStoreModel",
			store: this.store,
			query: this.query,
			childrenAttrs: this.childrenAttr
		};

		// Only override the model's mayHaveChildren() method if the user has specified an override
		if(this.params.mayHaveChildren){
			modelParams.mayHaveChildren = lang.hitch(this, "mayHaveChildren");
		}

		if(this.params.getItemChildren){
			modelParams.getChildren = lang.hitch(this, function(item, onComplete, onError){
				this.getItemChildren((this._v10Compat && item === this.model.root) ? null : item, onComplete, onError);
			});
		}
		this.model = new ForestStoreModel(modelParams);

		// For backwards compatibility, the visibility of the root node is controlled by
		// whether or not the user has specified a label
		this.showRoot = Boolean(this.label);
	},

	onLoad: function(){
		// summary:
		//		Called when tree finishes loading and expanding.
		// description:
		//		If persist == true the loading may encompass many levels of fetches
		//		from the data store, each asynchronous.   Waits for all to finish.
		// tags:
		//		callback
	},

	_load: function(){
		// summary:
		//		Initial load of the tree.
		//		Load root node (possibly hidden) and it's children.
		this.model.getRoot(
			lang.hitch(this, function(item){
				var rn = (this.rootNode = this.tree._createTreeNode({
					item: item,
					tree: this,
					isExpandable: true,
					label: this.label || this.getLabel(item),
					textDir: this.textDir,
					indent: this.showRoot ? 0 : -1
				}));
				if(!this.showRoot){
					rn.rowNode.style.display="none";
					// if root is not visible, move tree role to the invisible
					// root node's containerNode, see #12135
					this.domNode.setAttribute("role", "presentation");
					this.domNode.removeAttribute("aria-expanded");
					this.domNode.removeAttribute("aria-multiselectable");
					
					rn.labelNode.setAttribute("role", "presentation");
					rn.containerNode.setAttribute("role", "tree");
					rn.containerNode.setAttribute("aria-expanded","true");
					rn.containerNode.setAttribute("aria-multiselectable", !this.dndController.singular);
				}else{
					this.domNode.setAttribute("aria-multiselectable", !this.dndController.singular);
				}
				this.domNode.appendChild(rn.domNode);
				var identity = this.model.getIdentity(item);
				if(this._itemNodesMap[identity]){
					this._itemNodesMap[identity].push(rn);
				}else{
					this._itemNodesMap[identity] = [rn];
				}

				rn._updateLayout();		// sets "dijitTreeIsRoot" CSS classname

				// load top level children and then fire onLoad() event
				this._expandNode(rn).addCallback(lang.hitch(this, function(){
					this._loadDeferred.callback(true);
					this.onLoad();
				}));
			}),
			function(err){
				console.error(this, ": error loading root: ", err);
			}
		);
	},

	getNodesByItem: function(/*Item or id*/ item){
		// summary:
		//		Returns all tree nodes that refer to an item
		// returns:
		//		Array of tree nodes that refer to passed item

		if(!item){ return []; }
		var identity = lang.isString(item) ? item : this.model.getIdentity(item);
		// return a copy so widget don't get messed up by changes to returned array
		return [].concat(this._itemNodesMap[identity]);
	},

	_setSelectedItemAttr: function(/*Item or id*/ item){
		this.set('selectedItems', [item]);
	},

	_setSelectedItemsAttr: function(/*Items or ids*/ items){
		// summary:
		//		Select tree nodes related to passed items.
		//		WARNING: if model use multi-parented items or desired tree node isn't already loaded
		//		behavior is undefined. Use set('paths', ...) instead.
		var tree = this;
		this._loadDeferred.addCallback( lang.hitch(this, function(){
			var identities = array.map(items, function(item){
				return (!item || lang.isString(item)) ? item : tree.model.getIdentity(item);
			});
			var nodes = [];
			array.forEach(identities, function(id){
				nodes = nodes.concat(tree._itemNodesMap[id] || []);
			});
			this.set('selectedNodes', nodes);
		}));
	},

	_setPathAttr: function(/*Item[] || String[]*/ path){
		// summary:
		//      Singular variant of _setPathsAttr
		if(path.length){
			return this.set("paths", [path]);
		}else{
			// Empty list is interpreted as "select nothing"
			return this.set("paths", []);
		}
	},

	_setPathsAttr: function(/*Item[][] || String[][]*/ paths){
		// summary:
		//		Select the tree nodes identified by passed paths.
		// paths:
		//		Array of arrays of items or item id's
		// returns:
		//		Deferred to indicate when the set is complete
		var tree = this;

		// We may need to wait for some nodes to expand, so setting
		// each path will involve a Deferred. We bring those deferreds
		// together witha DeferredList.
		return new DeferredList(array.map(paths, function(path){
			var d = new Deferred();

			// normalize path to use identity
			path = array.map(path, function(item){
				return lang.isString(item) ? item : tree.model.getIdentity(item);
			});

			if(path.length){
				// Wait for the tree to load, if it hasn't already.
				tree._loadDeferred.addCallback(function(){ selectPath(path, [tree.rootNode], d); });
			}else{
				d.errback("Empty path");
			}
			return d;
		})).addCallback(setNodes);

		function selectPath(path, nodes, def){
			// Traverse path; the next path component should be among "nodes".
			var nextPath = path.shift();
			var nextNode = array.filter(nodes, function(node){
				return node.getIdentity() == nextPath;
			})[0];
			if(!!nextNode){
				if(path.length){
					tree._expandNode(nextNode).addCallback(function(){ selectPath(path, nextNode.getChildren(), def); });
				}else{
					//Successfully reached the end of this path
					def.callback(nextNode);
				}
			}else{
				def.errback("Could not expand path at " + nextPath);
			}
		}

		function setNodes(newNodes){
			//After all expansion is finished, set the selection to
			//the set of nodes successfully found.
			tree.set("selectedNodes", array.map(
				array.filter(newNodes,function(x){return x[0];}),
				function(x){return x[1];}));
		}
	},

	_setSelectedNodeAttr: function(node){
		this.set('selectedNodes', [node]);
	},
	_setSelectedNodesAttr: function(nodes){
		this._loadDeferred.addCallback( lang.hitch(this, function(){
			this.dndController.setSelection(nodes);
		}));
	},


	////////////// Data store related functions //////////////////////
	// These just get passed to the model; they are here for back-compat

	mayHaveChildren: function(/*dojo.data.Item*/ /*===== item =====*/){
		// summary:
		//		Deprecated.   This should be specified on the model itself.
		//
		//		Overridable function to tell if an item has or may have children.
		//		Controls whether or not +/- expando icon is shown.
		//		(For efficiency reasons we may not want to check if an element actually
		//		has children until user clicks the expando node)
		// tags:
		//		deprecated
	},

	getItemChildren: function(/*===== parentItem, onComplete =====*/){
		// summary:
		//		Deprecated.   This should be specified on the model itself.
		//
		// 		Overridable function that return array of child items of given parent item,
		//		or if parentItem==null then return top items in tree
		// tags:
		//		deprecated
	},

	///////////////////////////////////////////////////////
	// Functions for converting an item to a TreeNode
	getLabel: function(/*dojo.data.Item*/ item){
		// summary:
		//		Overridable function to get the label for a tree node (given the item)
		// tags:
		//		extension
		return this.model.getLabel(item);	// String
	},

	getIconClass: function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary:
		//		Overridable function to return CSS class name to display icon
		// tags:
		//		extension
		return (!item || this.model.mayHaveChildren(item)) ? (opened ? "dijitFolderOpened" : "dijitFolderClosed") : "dijitLeaf"
	},

	getLabelClass: function(/*===== item, opened =====*/){
		// summary:
		//		Overridable function to return CSS class name to display label
		// item: dojo.data.Item
		// opened: Boolean
		// returns: String
		//		CSS class name
		// tags:
		//		extension
	},

	getRowClass: function(/*===== item, opened =====*/){
		// summary:
		//		Overridable function to return CSS class name to display row
		// item: dojo.data.Item
		// opened: Boolean
		// returns: String
		//		CSS class name
		// tags:
		//		extension
	},

	getIconStyle: function(/*===== item, opened =====*/){
		// summary:
		//		Overridable function to return CSS styles to display icon
		// item: dojo.data.Item
		// opened: Boolean
		// returns: Object
		//		Object suitable for input to dojo.style() like {backgroundImage: "url(...)"}
		// tags:
		//		extension
	},

	getLabelStyle: function(/*===== item, opened =====*/){
		// summary:
		//		Overridable function to return CSS styles to display label
		// item: dojo.data.Item
		// opened: Boolean
		// returns:
		//		Object suitable for input to dojo.style() like {color: "red", background: "green"}
		// tags:
		//		extension
	},

	getRowStyle: function(/*===== item, opened =====*/){
		// summary:
		//		Overridable function to return CSS styles to display row
		// item: dojo.data.Item
		// opened: Boolean
		// returns:
		//		Object suitable for input to dojo.style() like {background-color: "#bbb"}
		// tags:
		//		extension
	},

	getTooltip: function(/*dojo.data.Item*/ /*===== item =====*/){
		// summary:
		//		Overridable function to get the tooltip for a tree node (given the item)
		// tags:
		//		extension
		return "";	// String
	},

	/////////// Keyboard and Mouse handlers ////////////////////

	_onKeyPress: function(/*Event*/ e){
		// summary:
		//		Translates keypress events into commands for the controller
		if(e.altKey){ return; }
		var treeNode = registry.getEnclosingWidget(e.target);
		if(!treeNode){ return; }

		var key = e.charOrCode;
		if(typeof key == "string" && key != " "){	// handle printables (letter navigation)
			// Check for key navigation.
			if(!e.altKey && !e.ctrlKey && !e.shiftKey && !e.metaKey){
				this._onLetterKeyNav( { node: treeNode, key: key.toLowerCase() } );
				event.stop(e);
			}
		}else{	// handle non-printables (arrow keys)
			// clear record of recent printables (being saved for multi-char letter navigation),
			// because "a", down-arrow, "b" shouldn't search for "ab"
			if(this._curSearch){
				clearTimeout(this._curSearch.timer);
				delete this._curSearch;
			}

			var map = this._keyHandlerMap;
			if(!map){
				// setup table mapping keys to events
				map = {};
				map[keys.ENTER]="_onEnterKey";
				//On WebKit based browsers, the combination ctrl-enter
				//does not get passed through. To allow accessible
				//multi-select on those browsers, the space key is
				//also used for selection.
				map[keys.SPACE]= map[" "] = "_onEnterKey";
				map[this.isLeftToRight() ? keys.LEFT_ARROW : keys.RIGHT_ARROW]="_onLeftArrow";
				map[this.isLeftToRight() ? keys.RIGHT_ARROW : keys.LEFT_ARROW]="_onRightArrow";
				map[keys.UP_ARROW]="_onUpArrow";
				map[keys.DOWN_ARROW]="_onDownArrow";
				map[keys.HOME]="_onHomeKey";
				map[keys.END]="_onEndKey";
				this._keyHandlerMap = map;
			}
			if(this._keyHandlerMap[key]){
				this[this._keyHandlerMap[key]]( { node: treeNode, item: treeNode.item, evt: e } );
				event.stop(e);
			}
		}
	},

	_onEnterKey: function(/*Object*/ message){
		this._publish("execute", { item: message.item, node: message.node } );
		this.dndController.userSelect(message.node, connect.isCopyKey( message.evt ), message.evt.shiftKey);
		this.onClick(message.item, message.node, message.evt);
	},

	_onDownArrow: function(/*Object*/ message){
		// summary:
		//		down arrow pressed; get next visible node, set focus there
		var node = this._getNextNode(message.node);
		if(node && node.isTreeNode){
			this.focusNode(node);
		}
	},

	_onUpArrow: function(/*Object*/ message){
		// summary:
		//		Up arrow pressed; move to previous visible node

		var node = message.node;

		// if younger siblings
		var previousSibling = node.getPreviousSibling();
		if(previousSibling){
			node = previousSibling;
			// if the previous node is expanded, dive in deep
			while(node.isExpandable && node.isExpanded && node.hasChildren()){
				// move to the last child
				var children = node.getChildren();
				node = children[children.length-1];
			}
		}else{
			// if this is the first child, return the parent
			// unless the parent is the root of a tree with a hidden root
			var parent = node.getParent();
			if(!(!this.showRoot && parent === this.rootNode)){
				node = parent;
			}
		}

		if(node && node.isTreeNode){
			this.focusNode(node);
		}
	},

	_onRightArrow: function(/*Object*/ message){
		// summary:
		//		Right arrow pressed; go to child node
		var node = message.node;

		// if not expanded, expand, else move to 1st child
		if(node.isExpandable && !node.isExpanded){
			this._expandNode(node);
		}else if(node.hasChildren()){
			node = node.getChildren()[0];
			if(node && node.isTreeNode){
				this.focusNode(node);
			}
		}
	},

	_onLeftArrow: function(/*Object*/ message){
		// summary:
		//		Left arrow pressed.
		//		If not collapsed, collapse, else move to parent.

		var node = message.node;

		if(node.isExpandable && node.isExpanded){
			this._collapseNode(node);
		}else{
			var parent = node.getParent();
			if(parent && parent.isTreeNode && !(!this.showRoot && parent === this.rootNode)){
				this.focusNode(parent);
			}
		}
	},

	_onHomeKey: function(){
		// summary:
		//		Home key pressed; get first visible node, and set focus there
		var node = this._getRootOrFirstNode();
		if(node){
			this.focusNode(node);
		}
	},

	_onEndKey: function(){
		// summary:
		//		End key pressed; go to last visible node.

		var node = this.rootNode;
		while(node.isExpanded){
			var c = node.getChildren();
			node = c[c.length - 1];
		}

		if(node && node.isTreeNode){
			this.focusNode(node);
		}
	},

	// multiCharSearchDuration: Number
	//		If multiple characters are typed where each keystroke happens within
	//		multiCharSearchDuration of the previous keystroke,
	//		search for nodes matching all the keystrokes.
	//
	//		For example, typing "ab" will search for entries starting with
	//		"ab" unless the delay between "a" and "b" is greater than multiCharSearchDuration.
	multiCharSearchDuration: 250,

	_onLetterKeyNav: function(message){
		// summary:
		//		Called when user presses a prinatable key; search for node starting with recently typed letters.
		// message: Object
		//		Like { node: TreeNode, key: 'a' } where key is the key the user pressed.

		// Branch depending on whether this key starts a new search, or modifies an existing search
		var cs = this._curSearch;
		if(cs){
			// We are continuing a search.  Ex: user has pressed 'a', and now has pressed
			// 'b', so we want to search for nodes starting w/"ab".
			cs.pattern = cs.pattern + message.key;
			clearTimeout(cs.timer);
		}else{
			// We are starting a new search
			cs = this._curSearch = {
					pattern: message.key,
					startNode: message.node
			};
		}

		// set/reset timer to forget recent keystrokes
		var self = this;
		cs.timer = setTimeout(function(){
			delete self._curSearch;
		}, this.multiCharSearchDuration);

		// Navigate to TreeNode matching keystrokes [entered so far].
		var node = cs.startNode;
		do{
			node = this._getNextNode(node);
			//check for last node, jump to first node if necessary
			if(!node){
				node = this._getRootOrFirstNode();
			}
		}while(node !== cs.startNode && (node.label.toLowerCase().substr(0, cs.pattern.length) != cs.pattern));
		if(node && node.isTreeNode){
			// no need to set focus if back where we started
			if(node !== cs.startNode){
				this.focusNode(node);
			}
		}
	},

	isExpandoNode: function(node, widget){
		// summary:
		//		check whether a dom node is the expandoNode for a particular TreeNode widget
		return dom.isDescendant(node, widget.expandoNode);
	},
	_onClick: function(/*TreeNode*/ nodeWidget, /*Event*/ e){
		// summary:
		//		Translates click events into commands for the controller to process

		var domElement = e.target,
			isExpandoClick = this.isExpandoNode(domElement, nodeWidget);

		if( (this.openOnClick && nodeWidget.isExpandable) || isExpandoClick ){
			// expando node was clicked, or label of a folder node was clicked; open it
			if(nodeWidget.isExpandable){
				this._onExpandoClick({node:nodeWidget});
			}
		}else{
			this._publish("execute", { item: nodeWidget.item, node: nodeWidget, evt: e } );
			this.onClick(nodeWidget.item, nodeWidget, e);
			this.focusNode(nodeWidget);
		}
		event.stop(e);
	},
	_onDblClick: function(/*TreeNode*/ nodeWidget, /*Event*/ e){
		// summary:
		//		Translates double-click events into commands for the controller to process

		var domElement = e.target,
			isExpandoClick = (domElement == nodeWidget.expandoNode || domElement == nodeWidget.expandoNodeText);

		if( (this.openOnDblClick && nodeWidget.isExpandable) ||isExpandoClick ){
			// expando node was clicked, or label of a folder node was clicked; open it
			if(nodeWidget.isExpandable){
				this._onExpandoClick({node:nodeWidget});
			}
		}else{
			this._publish("execute", { item: nodeWidget.item, node: nodeWidget, evt: e } );
			this.onDblClick(nodeWidget.item, nodeWidget, e);
			this.focusNode(nodeWidget);
		}
		event.stop(e);
	},

	_onExpandoClick: function(/*Object*/ message){
		// summary:
		//		User clicked the +/- icon; expand or collapse my children.
		var node = message.node;

		// If we are collapsing, we might be hiding the currently focused node.
		// Also, clicking the expando node might have erased focus from the current node.
		// For simplicity's sake just focus on the node with the expando.
		this.focusNode(node);

		if(node.isExpanded){
			this._collapseNode(node);
		}else{
			this._expandNode(node);
		}
	},

	onClick: function(/*===== item, node, evt =====*/){
		// summary:
		//		Callback when a tree node is clicked
		// item: dojo.data.Item
		// node: TreeNode
		// evt: Event
		// tags:
		//		callback
	},
	onDblClick: function(/*===== item, node, evt =====*/){
		// summary:
		//		Callback when a tree node is double-clicked
		// item: dojo.data.Item
		// node: TreeNode
		// evt: Event
		// tags:
		//		callback
	},
	onOpen: function(/*===== item, node =====*/){
		// summary:
		//		Callback when a node is opened
		// item: dojo.data.Item
		// node: TreeNode
		// tags:
		//		callback
	},
	onClose: function(/*===== item, node =====*/){
		// summary:
		//		Callback when a node is closed
		// item: dojo.data.Item
		// node: TreeNode
		// tags:
		//		callback
	},

	_getNextNode: function(node){
		// summary:
		//		Get next visible node

		if(node.isExpandable && node.isExpanded && node.hasChildren()){
			// if this is an expanded node, get the first child
			return node.getChildren()[0];		// _TreeNode
		}else{
			// find a parent node with a sibling
			while(node && node.isTreeNode){
				var returnNode = node.getNextSibling();
				if(returnNode){
					return returnNode;		// _TreeNode
				}
				node = node.getParent();
			}
			return null;
		}
	},

	_getRootOrFirstNode: function(){
		// summary:
		//		Get first visible node
		return this.showRoot ? this.rootNode : this.rootNode.getChildren()[0];
	},

	_collapseNode: function(/*_TreeNode*/ node){
		// summary:
		//		Called when the user has requested to collapse the node

		if(node._expandNodeDeferred){
			delete node._expandNodeDeferred;
		}

		if(node.isExpandable){
			if(node.state == "LOADING"){
				// ignore clicks while we are in the process of loading data
				return;
			}

			node.collapse();
			this.onClose(node.item, node);

			this._state(node, false);
		}
	},

	_expandNode: function(/*_TreeNode*/ node, /*Boolean?*/ recursive){
		// summary:
		//		Called when the user has requested to expand the node
		// recursive:
		//		Internal flag used when _expandNode() calls itself, don't set.
		// returns:
		//		Deferred that fires when the node is loaded and opened and (if persist=true) all it's descendants
		//		that were previously opened too

		if(node._expandNodeDeferred && !recursive){
			// there's already an expand in progress (or completed), so just return
			return node._expandNodeDeferred;	// dojo.Deferred
		}

		var model = this.model,
			item = node.item,
			_this = this;

		switch(node.state){
			case "UNCHECKED":
				// need to load all the children, and then expand
				node.markProcessing();

				// Setup deferred to signal when the load and expand are finished.
				// Save that deferred in this._expandDeferred as a flag that operation is in progress.
				var def = (node._expandNodeDeferred = new Deferred());

				// Get the children
				model.getChildren(
					item,
					function(items){
						node.unmarkProcessing();

						// Display the children and also start expanding any children that were previously expanded
						// (if this.persist == true).   The returned Deferred will fire when those expansions finish.
						var scid = node.setChildItems(items);

						// Call _expandNode() again but this time it will just to do the animation (default branch).
						// The returned Deferred will fire when the animation completes.
						// TODO: seems like I can avoid recursion and just use a deferred to sequence the events?
						var ed = _this._expandNode(node, true);

						// After the above two tasks (setChildItems() and recursive _expandNode()) finish,
						// signal that I am done.
						scid.addCallback(function(){
							ed.addCallback(function(){
								def.callback();
							})
						});
					},
					function(err){
						console.error(_this, ": error loading root children: ", err);
					}
				);
				break;

			default:	// "LOADED"
				// data is already loaded; just expand node
				def = (node._expandNodeDeferred = node.expand());

				this.onOpen(node.item, node);

				this._state(node, true);
		}

		return def;	// dojo.Deferred
	},

	////////////////// Miscellaneous functions ////////////////

	focusNode: function(/* _tree.Node */ node){
		// summary:
		//		Focus on the specified node (which must be visible)
		// tags:
		//		protected

		// set focus so that the label will be voiced using screen readers
		focus.focus(node.labelNode);
	},

	_onNodeFocus: function(/*dijit._Widget*/ node){
		// summary:
		//		Called when a TreeNode gets focus, either by user clicking
		//		it, or programatically by arrow key handling code.
		// description:
		//		It marks that the current node is the selected one, and the previously
		//		selected node no longer is.

		if(node && node != this.lastFocused){
			if(this.lastFocused && !this.lastFocused._destroyed){
				// mark that the previously focsable node is no longer focusable
				this.lastFocused.setFocusable(false);
			}

			// mark that the new node is the currently selected one
			node.setFocusable(true);
			this.lastFocused = node;
		}
	},

	_onNodeMouseEnter: function(/*dijit._Widget*/ /*===== node =====*/){
		// summary:
		//		Called when mouse is over a node (onmouseenter event),
		//		this is monitored by the DND code
	},

	_onNodeMouseLeave: function(/*dijit._Widget*/ /*===== node =====*/){
		// summary:
		//		Called when mouse leaves a node (onmouseleave event),
		//		this is monitored by the DND code
	},

	//////////////// Events from the model //////////////////////////

	_onItemChange: function(/*Item*/ item){
		// summary:
		//		Processes notification of a change to an item's scalar values like label
		var model = this.model,
			identity = model.getIdentity(item),
			nodes = this._itemNodesMap[identity];

		if(nodes){
			var label = this.getLabel(item),
				tooltip = this.getTooltip(item);
			array.forEach(nodes, function(node){
				node.set({
					item: item,		// theoretically could be new JS Object representing same item
					label: label,
					tooltip: tooltip
				});
				node._updateItemClasses(item);
			});
		}
	},

	_onItemChildrenChange: function(/*dojo.data.Item*/ parent, /*dojo.data.Item[]*/ newChildrenList){
		// summary:
		//		Processes notification of a change to an item's children
		var model = this.model,
			identity = model.getIdentity(parent),
			parentNodes = this._itemNodesMap[identity];

		if(parentNodes){
			array.forEach(parentNodes,function(parentNode){
				parentNode.setChildItems(newChildrenList);
			});
		}
	},

	_onItemDelete: function(/*Item*/ item){
		// summary:
		//		Processes notification of a deletion of an item
		var model = this.model,
			identity = model.getIdentity(item),
			nodes = this._itemNodesMap[identity];

		if(nodes){
			array.forEach(nodes,function(node){
				// Remove node from set of selected nodes (if it's selected)
				this.dndController.removeTreeNode(node);

				var parent = node.getParent();
				if(parent){
					// if node has not already been orphaned from a _onSetItem(parent, "children", ..) call...
					parent.removeChild(node);
				}
				node.destroyRecursive();
			}, this);
			delete this._itemNodesMap[identity];
		}
	},

	/////////////// Miscellaneous funcs

	_initState: function(){
		// summary:
		//		Load in which nodes should be opened automatically
		this._openedNodes = {};
		if(this.persist && this.cookieName){
			var oreo = cookie(this.cookieName);
			if(oreo){
				array.forEach(oreo.split(','), function(item){
					this._openedNodes[item] = true;
				}, this);
			}
		}
	},
	_state: function(node, expanded){
		// summary:
		//		Query or set expanded state for an node
		if(!this.persist){
			return false;
		}
		var path = array.map(node.getTreePath(), function(item){
				return this.model.getIdentity(item);
			}, this).join("/");
		if(arguments.length === 1){
			return this._openedNodes[path];
		}else{
			if(expanded){
				this._openedNodes[path] = true;
			}else{
				delete this._openedNodes[path];
			}
			var ary = [];
			for(var id in this._openedNodes){
				ary.push(id);
			}
			cookie(this.cookieName, ary.join(","), {expires:365});
		}
	},

	destroy: function(){
		if(this._curSearch){
			clearTimeout(this._curSearch.timer);
			delete this._curSearch;
		}
		if(this.rootNode){
			this.rootNode.destroyRecursive();
		}
		if(this.dndController && !lang.isString(this.dndController)){
			this.dndController.destroy();
		}
		this.rootNode = null;
		this.inherited(arguments);
	},

	destroyRecursive: function(){
		// A tree is treated as a leaf, not as a node with children (like a grid),
		// but defining destroyRecursive for back-compat.
		this.destroy();
	},

	resize: function(changeSize){
		if(changeSize){
			domGeometry.setMarginBox(this.domNode, changeSize);
		}

		// The only JS sizing involved w/tree is the indentation, which is specified
		// in CSS and read in through this dummy indentDetector node (tree must be
		// visible and attached to the DOM to read this)
		this._nodePixelIndent = domGeometry.position(this.tree.indentDetector).w;

		if(this.tree.rootNode){
			// If tree has already loaded, then reset indent for all the nodes
			this.tree.rootNode.set('indent', this.showRoot ? 0 : -1);
		}
	},

	_createTreeNode: function(/*Object*/ args){
		// summary:
		//		creates a TreeNode
		// description:
		//		Developers can override this method to define their own TreeNode class;
		//		However it will probably be removed in a future release in favor of a way
		//		of just specifying a widget for the label, rather than one that contains
		//		the children too.
		return new TreeNode(args);
	},

	_setTextDirAttr: function(textDir){
		if(textDir && this.textDir!= textDir){
			this._set("textDir",textDir);
			this.rootNode.set("textDir", textDir);
		}
	}
});

Tree._TreeNode = TreeNode;	// for monkey patching

return Tree;
});

},
'dijit/form/Button':function(){
require({cache:{
'url:dijit/form/templates/Button.html':"<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t></span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\n/></span>\n"}});
define("dijit/form/Button", [
	"require",
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.toggle
	"dojo/_base/kernel", // kernel.deprecated
	"dojo/_base/lang", // lang.trim
	"dojo/ready",
	"./_FormWidget",
	"./_ButtonMixin",
	"dojo/text!./templates/Button.html"
], function(require, declare, domClass, kernel, lang, ready, _FormWidget, _ButtonMixin, template){

/*=====
	var _FormWidget = dijit.form._FormWidget;
	var _ButtonMixin = dijit.form._ButtonMixin;
=====*/

// module:
//		dijit/form/Button
// summary:
//		Button widget

// Back compat w/1.6, remove for 2.0
if(!kernel.isAsync){
	ready(0, function(){
		var requires = ["dijit/form/DropDownButton", "dijit/form/ComboButton", "dijit/form/ToggleButton"];
		require(requires);	// use indirection so modules not rolled into a build
	});
}

return declare("dijit.form.Button", [_FormWidget, _ButtonMixin], {
	// summary:
	//		Basically the same thing as a normal HTML button, but with special styling.
	// description:
	//		Buttons can display a label, an icon, or both.
	//		A label should always be specified (through innerHTML) or the label
	//		attribute.  It can be hidden via showLabel=false.
	// example:
	// |	<button data-dojo-type="dijit.form.Button" onClick="...">Hello world</button>
	//
	// example:
	// |	var button1 = new dijit.form.Button({label: "hello world", onClick: foo});
	// |	dojo.body().appendChild(button1.domNode);

	// showLabel: Boolean
	//		Set this to true to hide the label text and display only the icon.
	//		(If showLabel=false then iconClass must be specified.)
	//		Especially useful for toolbars.
	//		If showLabel=true, the label will become the title (a.k.a. tooltip/hint) of the icon.
	//
	//		The exception case is for computers in high-contrast mode, where the label
	//		will still be displayed, since the icon doesn't appear.
	showLabel: true,

	// iconClass: String
	//		Class to apply to DOMNode in button to make it display an icon
	iconClass: "dijitNoIcon",
	_setIconClassAttr: { node: "iconNode", type: "class" },

	baseClass: "dijitButton",

	templateString: template,

	// Map widget attributes to DOMNode attributes.
	_setValueAttr: "valueNode",

	_onClick: function(/*Event*/ e){
		// summary:
		//		Internal function to handle click actions
		var ok = this.inherited(arguments);
		if(ok){
			if(this.valueNode){
				this.valueNode.click();
				e.preventDefault(); // cancel BUTTON click and continue with hidden INPUT click
				// leave ok = true so that subclasses can do what they need to do
			}
		}
		return ok;
	},

	_fillContent: function(/*DomNode*/ source){
		// Overrides _Templated._fillContent().
		// If button label is specified as srcNodeRef.innerHTML rather than
		// this.params.label, handle it here.
		// TODO: remove the method in 2.0, parser will do it all for me
		if(source && (!this.params || !("label" in this.params))){
			var sourceLabel = lang.trim(source.innerHTML);
			if(sourceLabel){
				this.label = sourceLabel; // _applyAttributes will be called after buildRendering completes to update the DOM
			}
		}
	},

	_setShowLabelAttr: function(val){
		if(this.containerNode){
			domClass.toggle(this.containerNode, "dijitDisplayNone", !val);
		}
		this._set("showLabel", val);
	},

	setLabel: function(/*String*/ content){
		// summary:
		//		Deprecated.  Use set('label', ...) instead.
		kernel.deprecated("dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
		this.set("label", content);
	},

	_setLabelAttr: function(/*String*/ content){
		// summary:
		//		Hook for set('label', ...) to work.
		// description:
		//		Set the label (text) of the button; takes an HTML string.
		//		If the label is hidden (showLabel=false) then and no title has
		//		been specified, then label is also set as title attribute of icon.
		this.inherited(arguments);
		if(!this.showLabel && !("title" in this.params)){
			this.titleNode.title = lang.trim(this.containerNode.innerText || this.containerNode.textContent || '');
		}
	}
});


});


},
'curam/ui/OpenTabEvent':function(){
/*
 * Copyright 2010 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Curam
 * Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

/**
 * @name curam.ui.OpenTabEvent
 * @namespace The open tab event.
 */
define("curam/ui/OpenTabEvent", ["curam/ui/PageRequest"
        ], function(PageRequest) {

/*
 * Modification History
 * --------------------
 * 02-May-2012  MK  [CR00323691] Use new Dojo AMD format.
 * 16-Jan-2011  DG  [CR00242400] Removed "requires". Now handled by cdej.js.
 * 03-Dec-2010  DG  [CR00217921] Constructor now takes a TabDescriptor object
 *                    and tabs can request to be opened in the background.
 * 29-Jul-2010  PK  [CR00211736] Moved from tab-app-controller.js to this file.
 */

var OpenTabEvent = dojo.declare("curam.ui.OpenTabEvent", null, 
/**
 * @lends curam.ui.OpenTabEvent
 */
{
  /**
   * Create a new event to open a tab. This combines a tab descriptor with a
   * UIM page request. If no UIM page request is provided, one will be derived
   * from the tab descriptor.
   *
   * @param {curam.tab.TabDescriptor} tabDescriptor The objects describing the
   *   tab and it content.
   * @param {curam.ui.PageRequest} uimPageRequest The object representing the
   *   page request.
   * @param {Boolean} openInBackgrond true to open the new tab in the
   *   background. The currently selected tab will remain selected. This is
   *   used when restoring a tab session.
   */
  constructor: function(tabDescriptor, uimPageRequest, openInBackground) {
    this.tabDescriptor = tabDescriptor;
    this.openInBackground = openInBackground ? true : false;
    if (uimPageRequest) {
      this.uimPageRequest = uimPageRequest;
    } else {
      // The request will be reconstructed from the tab descriptor.
      this.uimPageRequest
          = new PageRequest(tabDescriptor, tabDescriptor.isHomePage);
    }
  }
});

return OpenTabEvent;
});

},
'url:curam/layout/resources/ExpandoPane.html':"<div class=\"dojoxExpandoPane dojoxExpando${orient} ${startupCls}\">\r\n\t<div dojoAttachPoint=\"titleWrapper\" class=\"dojoxExpandoTitle\">\r\n\t\t<div class=\"dojoxExpandoIcon dojoxExpandoIcon${orient}\" role=\"button\" aria-label=\"${expandIconAlt}\" tabIndex=\"0\" dojoAttachPoint=\"iconNode\" dojoAttachEvent=\"onclick:toggle,onkeypress: enterCheck\"></div>\r\n\t\t<span class=\"dojoxExpandoTitleNode\" dojoAttachPoint=\"titleNode\" title=\"${title}\">${title}</span>\r\n\t</div>\r\n\t<div class=\"dojoxExpandoWrapper\" dojoAttachPoint=\"cwrapper\" dojoAttachEvent=\"ondblclick:_trap\">\r\n\t\t<div class=\"dojoxExpandoContent\" dojoAttachPoint=\"containerNode\"></div>\r\n\t</div>\r\n</div>\r\n",
'curam/widget/TransferList':function(){
define("curam/widget/TransferList", ["dijit/_Widget",
        "curam/util/ResourceBundle"
        ], function() {
  
  /**
   * Creating Resource Bundle Object to access localized resources.
   */
  dojo.requireLocalization("curam.application", "Debug");
  var bundle = new curam.util.ResourceBundle("Debug");
  
  var TransferList = dojo.declare("curam.widget.TransferList", dijit._Widget, {
    btnNames : ['allRight','toRight','toLeft','allLeft'],
    btnValues : [' ', ' ', ' ', ' '],
    //create an array for all css classes to be added for button
    bntClasses:["allRight","toRight","toLeft","allLeft"], 
    //rightEmptyText was decided to be left as an empty string
    rightEmptyText : "",
    widgetType:"TransferList",
  
    postCreate: function(){
      
      var parentCell = this.domNode.parentNode;
      dojo.addClass(parentCell, 'transferlistparent');
      var sibling = cm.nextSibling(this.domNode);
      
      this.leftList = this.domNode;
      var newTable = dojo.create('table', {
        "class" : 'transfer-list'
      });
      var newBody = dojo.create('tbody', {}, newTable);
      var newRow = dojo.create('tr', {}, newBody);
      var leftCell = dojo.create('td');

      var crtlCell = dojo.create('td', {"class" : "controls"});
      var self = this;
      
      function makeCallback(name){
        return function(){
          self.setSelection(name);
          return false;
        };
      }
      //add a class to the button when it is pressed down
      function buttonActive(id){
        return function(){
                dojo.addClass(dojo.byId(id),"active");
                return false;
                };
      }
      //remove the class when it is released
      function buttonBack(id){
        return function(){
                        dojo.removeClass(dojo.byId(id),"active");
                        return false;
                };
      }
      for (j = 0; j<4; j++) {
        var wrapDiv = dojo.create('div', {}, crtlCell);
        var titleTextArray = new Array(
          LOCALISED_TRANSFER_LIST_RA, 
          LOCALISED_TRANSFER_LIST_R, 
          LOCALISED_TRANSFER_LIST_L, 
          LOCALISED_TRANSFER_LIST_LA);
        var btn = dojo.create('input', {
          type: 'button',
          id: this.btnNames[j] + this.domNode.name,
          value: this.btnValues[j],
          //add css class to the button
          "class":this.bntClasses[j],
          "title":titleTextArray[j]
        }, wrapDiv);
        btn.listtwins=this;
        dojo.connect(btn, "onclick", makeCallback(btn.id));
        //change the arrow image for the button when the button is clicked
        dojo.connect(btn,"onmousedown",buttonActive(btn.id));
        dojo.connect(btn,"onmouseup",buttonBack(btn.id));
        dojo.connect(btn,"onmouseout",buttonBack(btn.id));
        
      }
      var rListCell = document.createElement('td');
      var rList = dojo.create('select', {
        id: this.domNode.name,
        name: this.domNode.name,
        multiple: 'multiple',
        "class": 'selected',
        size: 5
      }, rListCell);
      dojo.attr(this.domNode, {
        name: '__o3ign.' + rList.name,
        id: '__o3ign.' + rList.name,
        "class": 'selected',
        size: 5
      });

      this.rightList = rList;
      
      dojo.connect(this.leftList,"ondblclick",makeCallback('toRight'));
      dojo.connect(this.rightList,"ondblclick",makeCallback('toLeft'));
      
      function makeKeyCallback(name){
        return function(evt){
          if(evt.keyCode==evt.KEY_ENTER){
            self.setSelection(name);
          }
          return false;
        };
        
      }
      
      dojo.connect(this.leftList,"onkeydown",makeKeyCallback('toRight'));
      dojo.connect(this.rightList,"onkeydown",makeKeyCallback('toLeft'));
      
      leftCell.appendChild(this.domNode);
      newRow.appendChild(leftCell);
      newRow.appendChild(crtlCell);
      newRow.appendChild(rListCell);

      if(sibling){
        parentCell.insertBefore(newTable, sibling);
      }else{
        parentCell.appendChild(newTable);
      }
      
      this.setInitialSelection();
      this.adjustEmpties(this.leftList, this.rightList);
      
      var form = cm.getParentByType(this.domNode, "form");
      if(!form){
        curam.debug.log("curam.widget.TransferList " 
          + bundle.getProperty("curam.widget.TransferList.msg"));
        return;
      }
      dojo.connect(form, "onsubmit", function(){
        var currentList = self.rightList;
        var listOpts = new Array();
        for (k1=0; k1<currentList.options.length; k1++) {
          listOpts[listOpts.length] = currentList.options[k1];
        }
        currentList.options.length=0;
        for (k2=0; k2<listOpts.length; k2++) {
          listOpts[k2].selected=true;
          currentList.appendChild(listOpts[k2]);
        }
      });
      //add the selectWidthSetting() and auto resize the select
      //box size when resizing the window
      dojo.connect(window, 'onresize', this.selectWidthSetting);
      dojo.addOnLoad(this.selectWidthSetting);
      
    },
    
   setSelection : function(id){
      var moveAll = (id.indexOf('all')>-1);
      var currentSrc = (id.indexOf('Right')>-1) ? 
                                this.leftList : this.rightList;
      var currentTgt = (id.indexOf('Left')>-1) ? 
                                this.leftList : this.rightList;
      if (currentSrc.options[0] != null
            && currentSrc.options[0].text != this.rightEmptyText) {
        if (currentTgt.options[0] != null
            && (currentTgt.options[0].text == this.rightEmptyText
                //if USE_BLANK=true in UIM, then
                //when moving text string from left selection box to right selection box
                //replace blank string with the text string.
                || currentTgt.options[0].text == "")) {
          currentTgt.options[0] = null;
        }
        this.transferOptions(currentSrc,currentTgt,moveAll);
        this.adjustEmpties(this.leftList, this.rightList);
      }
    },
    setInitialSelection : function(){
      this.transferOptions(this.leftList,this.rightList,false);
    },
    
    adjustEmpties : function(leftList, rightList){
      if (rightList.options.length==0) {
        rightList.options[0]=new Option(this.rightEmptyText, '', false, false);
      }
    },
    transferOptions : function(currentSrc, currentTgt, moveAll) {
      if (currentSrc && currentTgt) {
        var allSelected = new Array();
        dojo.forEach(currentSrc.options, function(opt){
          if (moveAll || opt.selected) {
           allSelected[allSelected.length] = opt;
          }
        });
        this.appendAll(currentTgt, allSelected);
      }
    },
    appendAll : function(aList, children) {
      for (var i=0; i<children.length; i++) {
        children[i].selected=true;
        aList.appendChild(children[i]);
      }
    },
    //fix the width of select box after it is loaded
    selectWidthSetting: function(){
        if(dojo.query(".transfer-list select.selected")){
                    
                dojo.query(".transfer-list select.selected").forEach(function(selectNode){
                        var width = selectNode.parentNode.clientWidth;
                        selectNode.style.width=width + "px";
                });    
        }
    }
  });
  
  return TransferList;
});

},
'dojo/parser':function(){
define(
	"dojo/parser", ["./_base/kernel", "./_base/lang", "./_base/array", "./_base/config", "./_base/html", "./_base/window", "./_base/url",
	 	"./_base/json", "./aspect", "./date/stamp", "./has", "./query", "./on", "./ready"],
	function(dojo, dlang, darray, config, dhtml, dwindow, _Url, djson, aspect, dates, has, query, don, ready){

// module:
//		dojo/parser
// summary:
//		The Dom/Widget parsing package

new Date("X"); // workaround for #11279, new Date("") == NaN

if (1) {
	var form = document.createElement("form");
	// Test if DOMNode.attributes only lists the attributes the user specified, not attributes w/default values.
	has.add("dom-attributes-explicit", form.attributes.length == 0);

	// IE8 will erroneously list a few attributes that weren't specified,
	// but we know to skip them because they have a specified flag which is false
	has.add("dom-attributes-specified-flag", form.attributes.length < 40);

	// Otherwise, it's IE6-7 form.attributes will list hundreds of values, need to do outerHTML instead.
}

dojo.parser = new function(){
	// summary:
	//		The Dom/Widget parsing package

	var _nameMap = {
		// Map from widget name (ex: "dijit.form.Button") to structure mapping
		// lowercase version of attribute names to the version in the widget ex:
		//	{
		//		label: "label",
		//		onclick: "onClick"
		//	}
	};
	function getNameMap(proto){
		// summary:
		//		Returns map from lowercase name to attribute name in class, ex: {onclick: "onClick"}
		var map = {};
		for(var name in proto){
			if(name.charAt(0)=="_"){ continue; }	// skip internal properties
			map[name.toLowerCase()] = name;
		}
		return map;
	}
	// Widgets like BorderContainer add properties to _Widget via dojo.extend().
	// If BorderContainer is loaded after _Widget's parameter list has been cached,
	// we need to refresh that parameter list (for _Widget and all widgets that extend _Widget).
	aspect.after(dlang, "extend", function(){
		_nameMap = {};
	}, true);

	// Map from widget name (ex: "dijit.form.Button") to a map of { "list-of-mixins": ctor }
	// if "list-of-mixins" is "__type" this is the raw type without mixins
	var _ctorMap = {};


	function getCtor(type){
		var map = _ctorMap[type] || (_ctorMap[type] = {});
		return map["__type"] || (map["__type"] = (dlang.getObject(type) || require(type)));
	}

	this._functionFromScript = function(script, attrData){
		// summary:
		//		Convert a <script type="dojo/method" args="a, b, c"> ... </script>
		//		into a function
		// script: DOMNode
		//		The <script> DOMNode
		// attrData: String
		//		For HTML5 compliance, searches for attrData + "args" (typically
		//		"data-dojo-args") instead of "args"
		var preamble = "";
		var suffix = "";
		var argsStr = (script.getAttribute(attrData + "args") || script.getAttribute("args"));
		if(argsStr){
			darray.forEach(argsStr.split(/\s*,\s*/), function(part, idx){
				preamble += "var "+part+" = arguments["+idx+"]; ";
			});
		}
		var withStr = script.getAttribute("with");
		if(withStr && withStr.length){
			darray.forEach(withStr.split(/\s*,\s*/), function(part){
				preamble += "with("+part+"){";
				suffix += "}";
			});
		}
		return new Function(preamble+script.innerHTML+suffix);
	};

	this.instantiate = /*====== dojo.parser.instantiate= ======*/ function(nodes, mixin, options) {
		// summary:
		//		Takes array of nodes, and turns them into class instances and
		//		potentially calls a startup method to allow them to connect with
		//		any children.
		// nodes: Array
		//		Array of DOM nodes
		// mixin: Object?
		//		An object that will be mixed in with each node in the array.
		//		Values in the mixin will override values in the node, if they
		//		exist.
		// options: Object?
		//		An object used to hold kwArgs for instantiation.
		//		See parse.options argument for details.

		mixin = mixin || {};
		options = options || {};

		var dojoType = (options.scope || dojo._scopeName) + "Type",		// typically "dojoType"
			attrData = "data-" + (options.scope || dojo._scopeName) + "-",// typically "data-dojo-"
			dataDojoType = attrData + "type";						// typically "data-dojo-type"

		var list = [];
		darray.forEach(nodes, function(node){
			var type = dojoType in mixin ? mixin[dojoType] : node.getAttribute(dataDojoType) || node.getAttribute(dojoType);
			if(type){
				list.push({
					node: node,
					"type": type
				});
			}
		});

		// Instantiate the nodes and return the objects
		return this._instantiate(list, mixin, options);
	};

	this._instantiate = /*====== dojo.parser.instantiate= ======*/ function(nodes, mixin, options){
		// summary:
		//		Takes array of objects representing nodes, and turns them into class instances and
		//		potentially calls a startup method to allow them to connect with
		//		any children.
		// nodes: Array
		//		Array of objects like
		//	|		{
		//	|			type: "dijit.form.Button",
		//	|			node: DOMNode,
		//	|			scripts: [ ... ],	// array of <script type="dojo/..."> children of node
		//	|			inherited: { ... }	// settings inherited from ancestors like dir, theme, etc.
		//	|		}
		// mixin: Object
		//		An object that will be mixed in with each node in the array.
		//		Values in the mixin will override values in the node, if they
		//		exist.
		// options: Object
		//		An options object used to hold kwArgs for instantiation.
		//		See parse.options argument for details.

		var thelist = [];

		// Precompute names of special attributes we are looking for
		// TODO: for 2.0 default to data-dojo- regardless of scopeName (or maybe scopeName won't exist in 2.0)
		var dojoType = (options.scope || dojo._scopeName) + "Type",		// typically "dojoType"
			attrData = "data-" + (options.scope || dojo._scopeName) + "-",// typically "data-dojo-"
			dataDojoType = attrData + "type",						// typically "data-dojo-type"
			dataDojoProps = attrData + "props",						// typically "data-dojo-props"
			dataDojoAttachPoint = attrData + "attach-point",
			dataDojoAttachEvent = attrData + "attach-event",
			dataDojoId = attrData + "id",
			dataDojoMixins = attrData + "mixins";

		// And make hash to quickly check if a given attribute is special, and to map the name to something friendly
		var specialAttrs = {};
		darray.forEach([dataDojoProps, dataDojoType, dojoType, dataDojoId, "jsId", dataDojoAttachPoint,
				dataDojoAttachEvent, "dojoAttachPoint", "dojoAttachEvent", "class", "style", dataDojoMixins], function(name){
			specialAttrs[name.toLowerCase()] = name.replace(options.scope, "dojo");
		});

		function extend(type, mixins){
			return type.createSubclass && type.createSubclass(mixins) || type.extend.apply(type, mixins);
		}

		darray.forEach(nodes, function(obj){
			if(!obj){ return; }

			var node = obj.node,
				type = obj.type,
				mixins = node.getAttribute(dataDojoMixins), ctor;

			if(mixins){
				var map = _ctorMap[type];
				// remove whitespaces
				mixins = mixins.replace(/ /g, "");
				ctor = map && map[mixins];
				if(!ctor){
					// first get ctor for raw type (& create _ctorMap[type] if needed (should not be))
					ctor = getCtor(type);
					// then do the mixin
					ctor = _ctorMap[type][mixins] = extend(ctor, darray.map(mixins.split(","), getCtor));
				}
			}else{
				ctor = getCtor(type);
			}

			var proto = ctor && ctor.prototype;

			// Setup hash to hold parameter settings for this widget.	Start with the parameter
			// settings inherited from ancestors ("dir" and "lang").
			// Inherited setting may later be overridden by explicit settings on node itself.
			var params = {};

			if(options.defaults){
				// settings for the document itself (or whatever subtree is being parsed)
				dlang.mixin(params, options.defaults);
			}
			if(obj.inherited){
				// settings from dir=rtl or lang=... on a node above this node
				dlang.mixin(params, obj.inherited);
			}

			// Get list of attributes explicitly listed in the markup
			var attributes;
			if(has("dom-attributes-explicit")){
				// Standard path to get list of user specified attributes
				attributes = node.attributes;
			}else if(has("dom-attributes-specified-flag")){
				// Special processing needed for IE8, to skip a few faux values in attributes[]
				attributes = darray.filter(node.attributes, function(a){ return a.specified;});
			}else{
				// Special path for IE6-7, avoid (sometimes >100) bogus entries in node.attributes
				var clone = /^input$|^img$/i.test(node.nodeName) ? node : node.cloneNode(false),
					attrs = clone.outerHTML.replace(/=[^\s"']+|="[^"]*"|='[^']*'/g, "").replace(/^\s*<[a-zA-Z0-9]*\s*/, "").replace(/\s*>.*$/, "");

				attributes = darray.map(attrs.split(/\s+/), function(name){
					var lcName = name.toLowerCase();
					return {
						name: name,
						// getAttribute() doesn't work for button.value, returns innerHTML of button.
						// but getAttributeNode().value doesn't work for the form.encType or li.value
						value: (node.nodeName == "LI" && name == "value") || lcName == "enctype" ?
								node.getAttribute(lcName) : node.getAttributeNode(lcName).value
					};
				});
			}

			// Read in attributes and process them, including data-dojo-props, data-dojo-type,
			// dojoAttachPoint, etc., as well as normal foo=bar attributes.
			var i=0, item;
			while(item = attributes[i++]){
				var name = item.name,
					lcName = name.toLowerCase(),
					value = item.value;

				if(lcName in specialAttrs){
					switch(specialAttrs[lcName]){

					// Data-dojo-props.   Save for later to make sure it overrides direct foo=bar settings
					case "data-dojo-props":
						var extra = value;
						break;

					// data-dojo-id or jsId. TODO: drop jsId in 2.0
					case "data-dojo-id":
					case "jsId":
						var jsname = value;
						break;

					// For the benefit of _Templated
					case "data-dojo-attach-point":
					case "dojoAttachPoint":
						params.dojoAttachPoint = value;
						break;
					case "data-dojo-attach-event":
					case "dojoAttachEvent":
						params.dojoAttachEvent = value;
						break;

					// Special parameter handling needed for IE
					case "class":
						params["class"] = node.className;
						break;
					case "style":
						params["style"] = node.style && node.style.cssText;
						break;
					}
				}else{
					// Normal attribute, ex: value="123"

					// Find attribute in widget corresponding to specified name.
					// May involve case conversion, ex: onclick --> onClick
					if(!(name in proto)){
						var map = (_nameMap[type] || (_nameMap[type] = getNameMap(proto)));
						name = map[lcName] || name;
					}

					// Set params[name] to value, doing type conversion
					if(name in proto){
						switch(typeof proto[name]){
						case "string":
							params[name] = value;
							break;
						case "number":
							params[name] = value.length ? Number(value) : NaN;
							break;
						case "boolean":
							// for checked/disabled value might be "" or "checked".	 interpret as true.
							params[name] = value.toLowerCase() != "false";
							break;
						case "function":
							if(value === "" || value.search(/[^\w\.]+/i) != -1){
								// The user has specified some text for a function like "return x+5"
								params[name] = new Function(value);
							}else{
								// The user has specified the name of a function like "myOnClick"
								// or a single word function "return"
								params[name] = dlang.getObject(value, false) || new Function(value);
							}
							break;
						default:
							var pVal = proto[name];
							params[name] =
								(pVal && "length" in pVal) ? (value ? value.split(/\s*,\s*/) : []) :	// array
									(pVal instanceof Date) ?
										(value == "" ? new Date("") :	// the NaN of dates
										value == "now" ? new Date() :	// current date
										dates.fromISOString(value)) :
								(pVal instanceof dojo._Url) ? (dojo.baseUrl + value) :
								djson.fromJson(value);
						}
					}else{
						params[name] = value;
					}
				}
			}

			// Mix things found in data-dojo-props into the params, overriding any direct settings
			if(extra){
				try{
					extra = djson.fromJson.call(options.propsThis, "{" + extra + "}");
					dlang.mixin(params, extra);
				}catch(e){
					// give the user a pointer to their invalid parameters. FIXME: can we kill this in production?
					throw new Error(e.toString() + " in data-dojo-props='" + extra + "'");
				}
			}

			// Any parameters specified in "mixin" override everything else.
			dlang.mixin(params, mixin);

			var scripts = obj.scripts || (ctor && (ctor._noScript || proto._noScript) ? [] :
						query("> script[type^='dojo/']", node));

			// Process <script type="dojo/*"> script tags
			// <script type="dojo/method" event="foo"> tags are added to params, and passed to
			// the widget on instantiation.
			// <script type="dojo/method"> tags (with no event) are executed after instantiation
			// <script type="dojo/connect" data-dojo-event="foo"> tags are dojo.connected after instantiation
			// <script type="dojo/watch" data-dojo-prop="foo"> tags are dojo.watch after instantiation
			// <script type="dojo/on" data-dojo-event="foo"> tags are dojo.on after instantiation
			// note: dojo/* script tags cannot exist in self closing widgets, like <input />
			var connects = [],	// functions to connect after instantiation
				calls = [],		// functions to call after instantiation
				watch = [],  //functions to watch after instantiation
				on = []; //functions to on after instantiation

			if(scripts){
				for(i=0; i<scripts.length; i++){
					var script = scripts[i];
					node.removeChild(script);
					// FIXME: drop event="" support in 2.0. use data-dojo-event="" instead
					var event = (script.getAttribute(attrData + "event") || script.getAttribute("event")),
						prop = script.getAttribute(attrData + "prop"),
						scriptType = script.getAttribute("type"),
						nf = this._functionFromScript(script, attrData);
					if(event){
						if(scriptType == "dojo/connect"){
							connects.push({event: event, func: nf});
						}else if(scriptType == "dojo/on"){
							on.push({event: event, func: nf});
						}else{
							params[event] = nf;
						}
					}else if(scriptType == "dojo/watch"){
						watch.push({prop: prop, func: nf});
					}else{
						calls.push(nf);
					}
				}
			}

			// create the instance
			var markupFactory = ctor.markupFactory || proto.markupFactory;
			var instance = markupFactory ? markupFactory(params, node, ctor) : new ctor(params, node);
			thelist.push(instance);

			// map it to the JS namespace if that makes sense
			if(jsname){
				dlang.setObject(jsname, instance);
			}

			// process connections and startup functions
			for(i=0; i<connects.length; i++){
				aspect.after(instance, connects[i].event, dojo.hitch(instance, connects[i].func), true);
			}
			for(i=0; i<calls.length; i++){
				calls[i].call(instance);
			}
			for(i=0; i<watch.length; i++){
				instance.watch(watch[i].prop, watch[i].func);
			}
			for(i=0; i<on.length; i++){
				don(instance, on[i].event, on[i].func);
			}
		}, this);

		// Call startup on each top level instance if it makes sense (as for
		// widgets).  Parent widgets will recursively call startup on their
		// (non-top level) children
		if(!mixin._started){
			darray.forEach(thelist, function(instance){
				if( !options.noStart && instance  &&
					dlang.isFunction(instance.startup) &&
					!instance._started
				){
					instance.startup();
				}
			});
		}
		return thelist;
	};

	this.scan = /*====== dojo.parser.scan= ======*/ function(root, options){
		// summary:
		//		Scan a DOM tree and return an array of objects representing the DOMNodes
		//		that need to be turned into widgets.
		// description:
		//		Search specified node (or document root node) recursively for class instances
		//		and return an array of objects that represent potential widgets to be
		//		instantiated. Searches for either data-dojo-type="MID" or dojoType="MID" where
		//		"MID" is a module ID like "dijit/form/Button" or a fully qualified Class name
		//		like "dijit.form.Button".
		//
		//		See parser.parse() for details of markup.
		// root: DomNode?
		//		A default starting root node from which to start the parsing. Can be
		//		omitted, defaulting to the entire document. If omitted, the `options`
		//		object can be passed in this place. If the `options` object has a
		//		`rootNode` member, that is used.
		// options: Object
		//		a kwArgs options object, see parse() for details

		// Output list
		var list = [];

		var dojoType = (options.scope || dojo._scopeName) + "Type",		// typically "dojoType"
			attrData = "data-" + (options.scope || dojo._scopeName) + "-",	// typically "data-dojo-"
			dataDojoType = attrData + "type",						// typically "data-dojo-type"
			dataDojoTextDir = attrData + "textdir";					// typically "data-dojo-textdir"

		// Info on DOMNode currently being processed
		var node = root.firstChild;

		// Info on parent of DOMNode currently being processed
		//	- inherited: dir, lang, and textDir setting of parent, or inherited by parent
		//	- parent: pointer to identical structure for my parent (or null if no parent)
		//	- scripts: if specified, collects <script type="dojo/..."> type nodes from children
		var inherited = options.inherited;
		if(!inherited){
			function findAncestorAttr(node, attr){
				return (node.getAttribute && node.getAttribute(attr)) ||
					(node !== dwindow.doc && node !== dwindow.doc.documentElement && node.parentNode ? findAncestorAttr(node.parentNode, attr) : null);
			}
			inherited = {
				dir: findAncestorAttr(root, "dir"),
				lang: findAncestorAttr(root, "lang"),
				textDir: findAncestorAttr(root, dataDojoTextDir)
			};
			for(var key in inherited){
				if(!inherited[key]){ delete inherited[key]; }
			}
		}
		var parent = {
			inherited: inherited
		};

		// For collecting <script type="dojo/..."> type nodes (when null, we don't need to collect)
		var scripts;

		// when true, only look for <script type="dojo/..."> tags, and don't recurse to children
		var scriptsOnly;

		function getEffective(parent){
			// summary:
			//		Get effective dir, lang, textDir settings for specified obj
			//		(matching "parent" object structure above), and do caching.
			//		Take care not to return null entries.
			if(!parent.inherited){
				parent.inherited = {};
				var node = parent.node,
					grandparent = getEffective(parent.parent);
				var inherited  = {
					dir: node.getAttribute("dir") || grandparent.dir,
					lang: node.getAttribute("lang") || grandparent.lang,
					textDir: node.getAttribute(dataDojoTextDir) || grandparent.textDir
				};
				for(var key in inherited){
					if(inherited[key]){
						parent.inherited[key] = inherited[key];
					}
				}
			}
			return parent.inherited;
		}

		// DFS on DOM tree, collecting nodes with data-dojo-type specified.
		while(true){
			if(!node){
				// Finished this level, continue to parent's next sibling
				if(!parent || !parent.node){
					break;
				}
				node = parent.node.nextSibling;
				scripts = parent.scripts;
				scriptsOnly = false;
				parent = parent.parent;
				continue;
			}

			if(node.nodeType != 1){
				// Text or comment node, skip to next sibling
				node = node.nextSibling;
				continue;
			}

			if(scripts && node.nodeName.toLowerCase() == "script"){
				// Save <script type="dojo/..."> for parent, then continue to next sibling
				type = node.getAttribute("type");
				if(type && /^dojo\/\w/i.test(type)){
					scripts.push(node);
				}
				node = node.nextSibling;
				continue;
			}
			if(scriptsOnly){
				node = node.nextSibling;
				continue;
			}

			// Check for data-dojo-type attribute, fallback to backward compatible dojoType
			var type = node.getAttribute(dataDojoType) || node.getAttribute(dojoType);

			// Short circuit for leaf nodes containing nothing [but text]
			var firstChild = node.firstChild;
			if(!type && (!firstChild || (firstChild.nodeType == 3 && !firstChild.nextSibling))){
				node = node.nextSibling;
				continue;
			}

			// Setup data structure to save info on current node for when we return from processing descendant nodes
			var current = {
				node: node,
				scripts: scripts,
				parent: parent
			};

			// If dojoType/data-dojo-type specified, add to output array of nodes to instantiate
			// Note: won't find classes declared via dojo.Declaration, so use try/catch to avoid throw from require()
			// We don't care yet about mixins ctors, we check script stop only on main class
			var ctor;
			try{
				ctor = type && getCtor(type);
			}catch(e){
			}
			var childScripts = ctor && !ctor.prototype._noScript ? [] : null; // <script> nodes that are parent's children
			if(type){
				list.push({
					"type": type,
					node: node,
					scripts: childScripts,
					inherited: getEffective(current) // dir & lang settings for current node, explicit or inherited
				});
			}

			// Recurse, collecting <script type="dojo/..."> children, and also looking for
			// descendant nodes with dojoType specified (unless the widget has the stopParser flag).
			// When finished with children, go to my next sibling.
			node = firstChild;
			scripts = childScripts;
			scriptsOnly = ctor && ctor.prototype.stopParser && !(options.template);
			parent = current;
		}

		return list;
	};

	this.parse = /*====== dojo.parser.parse= ======*/ function(rootNode, options){
		// summary:
		//		Scan the DOM for class instances, and instantiate them.
		//
		// description:
		//		Search specified node (or root node) recursively for class instances,
		//		and instantiate them. Searches for either data-dojo-type="Class" or
		//		dojoType="Class" where "Class" is a a fully qualified class name,
		//		like `dijit.form.Button`
		//
		//		Using `data-dojo-type`:
		//		Attributes using can be mixed into the parameters used to instantiate the
		//		Class by using a `data-dojo-props` attribute on the node being converted.
		//		`data-dojo-props` should be a string attribute to be converted from JSON.
		//
		//		Using `dojoType`:
		//		Attributes are read from the original domNode and converted to appropriate
		//		types by looking up the Class prototype values. This is the default behavior
		//		from Dojo 1.0 to Dojo 1.5. `dojoType` support is deprecated, and will
		//		go away in Dojo 2.0.
		//
		// rootNode: DomNode?
		//		A default starting root node from which to start the parsing. Can be
		//		omitted, defaulting to the entire document. If omitted, the `options`
		//		object can be passed in this place. If the `options` object has a
		//		`rootNode` member, that is used.
		//
		// options: Object?
		//		A hash of options.
		//
		//			* noStart: Boolean?
		//				when set will prevent the parser from calling .startup()
		//				when locating the nodes.
		//			* rootNode: DomNode?
		//				identical to the function's `rootNode` argument, though
		//				allowed to be passed in via this `options object.
		//			* template: Boolean
		//				If true, ignores ContentPane's stopParser flag and parses contents inside of
		//				a ContentPane inside of a template.   This allows dojoAttachPoint on widgets/nodes
		//				nested inside the ContentPane to work.
		//			* inherited: Object
		//				Hash possibly containing dir and lang settings to be applied to
		//				parsed widgets, unless there's another setting on a sub-node that overrides
		//			* scope: String
		//				Root for attribute names to search for.   If scopeName is dojo,
		//				will search for data-dojo-type (or dojoType).   For backwards compatibility
		//				reasons defaults to dojo._scopeName (which is "dojo" except when
		//				multi-version support is used, when it will be something like dojo16, dojo20, etc.)
		//			* propsThis: Object
		//				If specified, "this" referenced from data-dojo-props will refer to propsThis.
		//				Intended for use from the widgets-in-template feature of `dijit._WidgetsInTemplateMixin`
		//
		// example:
		//		Parse all widgets on a page:
		//	|		dojo.parser.parse();
		//
		// example:
		//		Parse all classes within the node with id="foo"
		//	|		dojo.parser.parse(dojo.byId('foo'));
		//
		// example:
		//		Parse all classes in a page, but do not call .startup() on any
		//		child
		//	|		dojo.parser.parse({ noStart: true })
		//
		// example:
		//		Parse all classes in a node, but do not call .startup()
		//	|		dojo.parser.parse(someNode, { noStart:true });
		//	|		// or
		//	|		dojo.parser.parse({ noStart:true, rootNode: someNode });

		// determine the root node and options based on the passed arguments.
		var root;
		if(!options && rootNode && rootNode.rootNode){
			options = rootNode;
			root = options.rootNode;
		}else if(rootNode && dlang.isObject(rootNode) && !("nodeType" in rootNode)){
			options = rootNode;
		}else{
			root = rootNode;
		}
		root = root ? dhtml.byId(root) : dwindow.body();

		options = options || {};

		// List of all nodes on page w/dojoType specified
		var list = this.scan(root, options);

		// go build the object instances
		var mixin = options.template ? {template: true} : {};
		return this._instantiate(list, mixin, options); // Array
	};
}();


//Register the parser callback. It should be the first callback
//after the a11y test.
if(config.parseOnLoad){
	ready(100, dojo.parser, "parse");
}

return dojo.parser;
});

},
'url:dijit/templates/MenuBarItem.html':"<div class=\"dijitReset dijitInline dijitMenuItem dijitMenuItemLabel\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<span data-dojo-attach-point=\"containerNode\"></span>\n</div>\n",
'curam/debug':function(){
/*
 * Copyright 2009-2011 Curam Software Ltd.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Curam Software, Ltd. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance with the
 * terms of the license agreement you entered into with Curam Software.
 */

define("curam/debug", ["curam/define",
        "curam/util/LocalConfig"
        ], function(define, localConfig) {
  
  /*
   * Modification History
   * --------------------
   * 11-Apr-2014  MV  [CR00424825] Add support for JavaScript debug
   *    configuration and LocalConfig.
   * 12-Sep-2011  MV  [CR00286500] Fix stack overflow when logging window objects
   *     in IE.
   * 11-May-2011  MV  [CR00265902] Fixed log function invocation.
   * 26-Jan-2011  MV  [CR00244801] Fixed check for DEBUG flag.
   * 21-Jan-2011  DG  [CR00243540] Added note on new way to set DEBUG variable.
   *                    Added copyright. Tidied up formatting.
   * 26-Jun-2010  MV  [CR00204069] Improve to enable passing many number
   *                    of parameters. Enable easier usage by removing class
   *                    declaration and shortening the name.
   * 06-Nov-2009  SC  [CR00172239] Initial Version
   */
  /**
   * Provides a simple logging facility for debug tracing to the JavaScript
   * console.
   */
  define.singleton("curam.debug", {
    /**
     * A logging facility that can be turned on or off using the
     * "curam.trace.javascript" application property. Debug tracing is disabled
     * by default; use your application admin screens to enable it.
     * Any number of parameters can be passed. These are forwarded
     * to the <code>console.log.apply</code> function.
     */
    log: function() {
      if (curam.debug.enabled()) {
        try {
          var a = arguments;
          if (!dojo.isIE) {
            console.log.apply(console, a);
          
          // the above generic call doesn't work in IE  so the following ugly
          // specific handling must be provided
          } else {
            var numArgs = a.length;
            var sa = curam.debug._serializeArgument;
            switch(numArgs) {
              case 1: console.log(arguments[0]);
              break;
              
              case 2: console.log(a[0], sa(a[1]));
              break;
              
              case 3: console.log(a[0], sa(a[1]), sa(a[2]));
              break;
              
              case 4: console.log(a[0], sa(a[1]), sa(a[2]), sa(a[3]));
              break;
              
              case 5: console.log(a[0], sa(a[1]), sa(a[2]), sa(a[3]), sa(a[4]));
              break;
              
              case 6: console.log(a[0], sa(a[1]), sa(a[2]), sa(a[3]), sa(a[4]),
                  sa(a[5]));
              break;
              
              default: console.log("[Incomplete message - " + (numArgs - 5)
                  + " message a truncated] " + a[0],
                  sa(a[1]), sa(a[2]), sa(a[3]), sa(a[4]), sa(a[5]));
            }
          }

        } catch (e) {
          console.log(e);
          // Some problem with the console. Do nothing.
        }
      }
    },
    
    /**
     * Make a human readable version of the object to be logged.
     *
     * @param arg The object to be serialized.
     * @returns The human readable version of the object.
     */
    _serializeArgument: function(arg) {
      if (typeof arg != "undefined"
          && typeof arg.nodeType != "undefined"
          && typeof arg.cloneNode != "undefined") { // isNode 
        // DOM nodes can't be serialized using dojo.toJson(), so just return
        // default toString version
        return "" + arg;

      } else if (curam.debug._isWindow(arg)) {
        // window object causes stack overflow for dojo.toJson() so handling 
        // specifically here
        return arg.location.href;

      } else if (curam.debug._isArray(arg)
            && curam.debug._isWindow(arg[0])) { // is array of window objects
        // array of window objects causes stack overflow for dojo.toJson()
        // so handling specifically here
        return "[array of window objects, length " + arg.length + "]";

      } else {
        return dojo.toJson(arg);
      }
    },
    
    /**
     * Recognizes array objects.
     * 
     * @param arg The object to be checked.
     * @returns {Boolean} True if the argument is array, otherwise false.
     */
    _isArray: function(arg) {
      return typeof arg != "undefined"
          && (dojo.isArray(arg) || typeof arg.length != "undefined");
    },

    /**
     * Recognizes window object.
     *
     * @param arg The object to be checked.
     * @returns {Boolean} True if the argument is a window object,
     *    otherwise false.
     */
    _isWindow: function(arg) {
      // some of the significant properties might be undefined fo closed window
      // so handle this case separately
      var isClosed = typeof arg != "undefined"
        && typeof arg.closed != "undefined" && arg.closed;
      if (isClosed) {
        // it is a closed window
        return true;
      
      } else {
        return typeof arg != "undefined"
            && typeof arg.location != "undefined"
            && typeof arg.navigator != "undefined"
            && typeof arg.document != "undefined"
            && typeof arg.closed != "undefined";
      }
    },
    
    enabled: function() {
      return localConfig.readOption('jsTraceLog', 'false') == 'true';
    },
    
    /**
     * Performs setup of the debug/tracing infrastructure.
     * This is called from the application main page to setup debug.
     *
     * @param {Object} config Configuration data.
     */
    _setup: function(config) {
      localConfig.seedOption('jsTraceLog', config.trace, 'false');
      localConfig.seedOption('ajaxDebugMode', config.ajaxDebug, 'false');
      localConfig.seedOption('asyncProgressMonitor',
          config.asyncProgressMonitor, 'false');
    }
  });
  
  return curam.debug;
});

},
'url:curam/widget/templates/ComboBox.html':"<div class=\"dijit dijitReset dijitInline dijitLeft\"\r\n  id=\"widget_${id}\"\r\n  role=\"listbox\"\r\n  ><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\r\n    data-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\r\n    ><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n      ${_buttonInputDisabled}\r\n  /></div\r\n  ><div class='dijitReset dijitValidationContainer'\r\n    ><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n  /></div\r\n  ><div class=\"dijitReset dijitInputField dijitInputContainer\" role=\"listbox\"\r\n    ><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\r\n      data-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\r\n  /></div\r\n></div>\r\n",
'dijit/TooltipDialog':function(){
require({cache:{
'url:dijit/templates/TooltipDialog.html':"<div role=\"presentation\" tabIndex=\"-1\">\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" data-dojo-attach-point=\"containerNode\" role=\"dialog\"></div>\n\t</div>\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\"></div>\n</div>\n"}});
define("dijit/TooltipDialog", [
	"dojo/_base/declare", // declare
	"dojo/dom-class", // domClass.replace
	"dojo/_base/event", // event.stop
	"dojo/keys", // keys
	"dojo/_base/lang", // lang.hitch
	"./focus",
	"./layout/ContentPane",
	"./_DialogMixin",
	"./form/_FormMixin",
	"./_TemplatedMixin",
	"dojo/text!./templates/TooltipDialog.html",
	"."		// exports methods to dijit global
], function(declare, domClass, event, keys, lang,
			focus, ContentPane, _DialogMixin, _FormMixin, _TemplatedMixin, template, dijit){

/*=====
	var ContentPane = dijit.layout.ContentPane;
	var _DialogMixin = dijit._DialogMixin;
	var _FormMixin = dijit.form._FormMixin;
	var _TemplatedMixin = dijit._TemplatedMixin;
=====*/

	// module:
	//		dijit/TooltipDialog
	// summary:
	//		Pops up a dialog that appears like a Tooltip


	return declare("dijit.TooltipDialog",
		[ContentPane, _TemplatedMixin, _FormMixin, _DialogMixin], {
		// summary:
		//		Pops up a dialog that appears like a Tooltip

		// title: String
		// 		Description of tooltip dialog (required for a11y)
		title: "",

		// doLayout: [protected] Boolean
		//		Don't change this parameter from the default value.
		//		This ContentPane parameter doesn't make sense for TooltipDialog, since TooltipDialog
		//		is never a child of a layout container, nor can you specify the size of
		//		TooltipDialog in order to control the size of an inner widget.
		doLayout: false,

		// autofocus: Boolean
		// 		A Toggle to modify the default focus behavior of a Dialog, which
		// 		is to focus on the first dialog element after opening the dialog.
		//		False will disable autofocusing. Default: true
		autofocus: true,

		// baseClass: [protected] String
		//		The root className to use for the various states of this widget
		baseClass: "dijitTooltipDialog",

		// _firstFocusItem: [private] [readonly] DomNode
		//		The pointer to the first focusable node in the dialog.
		//		Set by `dijit._DialogMixin._getFocusItems`.
		_firstFocusItem: null,

		// _lastFocusItem: [private] [readonly] DomNode
		//		The pointer to which node has focus prior to our dialog.
		//		Set by `dijit._DialogMixin._getFocusItems`.
		_lastFocusItem: null,

		templateString: template,

		_setTitleAttr: function(/*String*/ title){
			this.containerNode.title = title;
			this._set("title", title)
		},

		postCreate: function(){
			this.inherited(arguments);
			this.connect(this.containerNode, "onkeypress", "_onKey");
		},

		orient: function(/*DomNode*/ node, /*String*/ aroundCorner, /*String*/ corner){
			// summary:
			//		Configure widget to be displayed in given position relative to the button.
			//		This is called from the dijit.popup code, and should not be called
			//		directly.
			// tags:
			//		protected
			var newC = "dijitTooltipAB" + (corner.charAt(1) == 'L' ? "Left" : "Right")
					+ " dijitTooltip"
					+ (corner.charAt(0) == 'T' ? "Below" : "Above");

			domClass.replace(this.domNode, newC, this._currentOrientClass || "");
			this._currentOrientClass = newC;
		},

		focus: function(){
			// summary:
			//		Focus on first field
			this._getFocusItems(this.containerNode);
			focus.focus(this._firstFocusItem);
		},

		onOpen: function(/*Object*/ pos){
			// summary:
			//		Called when dialog is displayed.
			//		This is called from the dijit.popup code, and should not be called directly.
			// tags:
			//		protected

			this.orient(this.domNode,pos.aroundCorner, pos.corner);
			this._onShow(); // lazy load trigger
		},

		onClose: function(){
			// summary:
			//		Called when dialog is hidden.
			//		This is called from the dijit.popup code, and should not be called directly.
			// tags:
			//		protected
			this.onHide();
		},

		_onKey: function(/*Event*/ evt){
			// summary:
			//		Handler for keyboard events
			// description:
			//		Keep keyboard focus in dialog; close dialog on escape key
			// tags:
			//		private

			var node = evt.target;
			if(evt.charOrCode === keys.TAB){
				this._getFocusItems(this.containerNode);
			}
			var singleFocusItem = (this._firstFocusItem == this._lastFocusItem);
			if(evt.charOrCode == keys.ESCAPE){
				// Use setTimeout to avoid crash on IE, see #10396.
				setTimeout(lang.hitch(this, "onCancel"), 0);
				event.stop(evt);
			}else if(node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === keys.TAB){
				if(!singleFocusItem){
					focus.focus(this._lastFocusItem); // send focus to last item in dialog
				}
				event.stop(evt);
			}else if(node == this._lastFocusItem && evt.charOrCode === keys.TAB && !evt.shiftKey){
				if(!singleFocusItem){
					focus.focus(this._firstFocusItem); // send focus to first item in dialog
				}
				event.stop(evt);
			}else if(evt.charOrCode === keys.TAB){
				// we want the browser's default tab handling to move focus
				// but we don't want the tab to propagate upwards
				evt.stopPropagation();
			}
		}
	});
});

},
'*now':function(r){r(['dojo/i18n!*preload*dojo/nls/cdej-main*["ar","ca","cs","da","de","el","en-gb","en-us","es-es","fi-fi","fr-fr","he-il","hu","it-it","ja-jp","ko-kr","nl-nl","nb","pl","pt-br","pt-pt","ru","sk","sl","sv","th","tr","zh-tw","zh-cn","ROOT"]']);}
,
'*noref':1}});
define("dojo/cdej-main", [], 1);
require(["curam/define","curam/debug","curam/util","curam/GlobalVars","curam/date","curam/dialog","curam/date/locale","curam/validation","curam/html","curam/i18n","curam/lnf","curam/tab","curam/charting","curam/UIMController","curam/FastUIMController","curam/contentPanel","curam/inPageNavigation","curam/codetable-hierarchy","curam/omega3-util","curam/widgets","curam/ajax","curam/ModalDialog","curam/layout/EmptyContentPane","curam/layout/CuramTabContainer","curam/layout/TabContainer","curam/pagination","curam/pagination/ControlPanel","curam/pagination/StateController","curam/pagination/ExpandableListModel","curam/pagination/DefaultListModel","curam/validation/calendar","curam/tab/util","curam/tab/TabSessionManager","curam/tab/TabDescriptor","curam/ui/PageRequest","curam/ui/OpenTabEvent","curam/ui/ClientDataAccessor","curam/ui/UIMPageAdaptor","curam/ui/SectionShortcutsPanel","curam/util/ScreenContext","curam/util/WordFileEdit","curam/util/TabActionsMenu","curam/util/ExpandableLists","curam/util/ListSort","curam/util/TabNavigation","curam/util/onLoad","curam/util/UimDialog","curam/util/Request","curam/util/LocalConfig","curam/util/Refresh","curam/util/external","curam/util/RuntimeContext","curam/util/portlet/PortletAdaptor","curam/util/FrequencyEditor","curam/util/Navigation","curam/util/Dialog","curam/ModalUIMController","curam/widget/_TabButton","curam/widget/ComboBox","curam/widget/DropDownButton","curam/widget/DeferredDropDownButton","curam/widget/DivButton","curam/widget/FilteringSelect","curam/widget/Menu","curam/widget/OptimalBrowserMessage","curam/widget/Select","curam/widget/TransferList","dojo/require","dojo/parser","dojo/html","dojo/aspect","dojo/data/ItemFileReadStore","dojo/data/util/sorter","dojo/data/util/simpleFetch","dojo/data/util/filter","dojo/io/iframe","dojo/dnd/common","dojo/dnd/autoscroll","dojo/dnd/Mover","dojo/dnd/Moveable","dojo/dnd/TimedMoveable","dojo/dnd/move","dojo/i18n","dojo/regexp","dojo/cookie","dojo/DeferredList","dijit/main","dijit/MenuItem","dijit/_KeyNavContainer","dijit/PopupMenuItem","dijit/CheckedMenuItem","dijit/MenuSeparator","dijit/Menu","dijit/_HasDropDown","dijit/_DialogMixin","dijit/form/Select","dijit/form/FilteringSelect","dijit/form/ComboBox","dijit/form/ComboButton","dijit/form/_FormMixin","dijit/form/Button","dijit/form/ToggleButton","dijit/form/_FormSelectWidget","dijit/form/TextBox","dijit/layout/StackController","dijit/layout/AccordionPane","dijit/TitlePane","dijit/layout/BorderContainer","dijit/layout/TabController","dijit/layout/StackContainer","dijit/layout/_TabContainerBase","dijit/layout/TabContainer","dijit/MenuBar","dijit/MenuBarItem","dijit/PopupMenuBarItem","dijit/tree/TreeStoreModel","dijit/tree/ForestStoreModel","dijit/Tree","dijit/TooltipDialog","dijit/DialogUnderlay","dijit/Dialog","curam/ui/UIController","dijit/layout/ScrollingTabController","dojox/encoding/digests/_base","dojox/encoding/digests/SHA1","dojox/storage","dojox/storage/_common","dojox/storage/manager","dojox/storage/Provider","dojox/storage/LocalStorageProvider","dojox/storage/CookieStorageProvider","dojox/storage/WhatWGStorageProvider","dojox/storage/BehaviorStorageProvider","dojox/html/_base","dojox/layout/ExpandoPane","dojox/layout/ContentPane","curam/layout/ExpandoPane","curam/layout/AccordionContainer"]);
