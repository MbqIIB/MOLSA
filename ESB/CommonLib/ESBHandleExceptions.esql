

CREATE COMPUTE MODULE HandleExceptions_ConstructsFaultReply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		DECLARE messageNumber,messageText,eCatalog,exceptionType,returnCode CHAR;
		
		DECLARE ptrException reference to InputExceptionList.*[1];
   	    -- keep looping while the moves to the child of exception list work 
		WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN				
        		SET messageNumber = ptrException.Number;
        		SET messageText = ptrException.Text;
        		SET eCatalog = ptrException.Catalog;
				SET exceptionType=FIELDNAME(ptrException);
  			END IF;
  			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild ;
		END WHILE; 


		Set returnCode = CASE exceptionType
		when 'UserException' THEN Environment.Variables.returnCode
		when 'ParserException' THEN '100001'
		ELSE '100002'
		END;		
			
		Set messageText = CASE exceptionType
		when 'UserException' THEN Environment.Variables.returnCodeDesc
		when 'ParserException' THEN 'Input message parsing failed in Service '
		ELSE 'Generic exception in Service Gateway'
		END;	
		
		Declare replymsg CHARACTER ;
		
		
		IF EXISTS(InputRoot.XMLNSC.*:Envelope.*:Body[]) THEN
			SET replymsg=FIELDNAME(InputRoot.XMLNSC.*:Envelope.*:Body.*[<1]);
			DECLARE  ns CHARACTER FIELDNAMESPACE(InputRoot.XMLNSC.*:Envelope.*:Body.*[<1]);
			IF replymsg is not null THEN
				SET replymsg=REPLACE(replymsg,'Request','Reply');
			ELSE
				SET replymsg='UnknownReply'	;				
			END IF;
			
	--Return Fault message to Client 
			SET OutputRoot.XMLNSC.{ns}:{replymsg}.{ns}:eAI_HEADER=InputRoot.XMLNSC.*:Envelope.*:Body.*[<1].*:eAI_HEADER;		
			SET OutputRoot.XMLNSC.{ns}:{replymsg}.{ns}:eAI_STATUS.{ns}:returnStatus.{ns}:returnCode=returnCode;
			SET OutputRoot.XMLNSC.{ns}:{replymsg}.{ns}:eAI_STATUS.{ns}:returnStatus.{ns}:returnCodeDesc=messageText;
	
			SET Environment.Variables.Org.referenceNum=InputRoot.XMLNSC.*:Envelope.*:Body.*[<1].*:eAI_HEADER.*:referenceNum;			


		ELSE
			SET replymsg=FIELDNAME(InputRoot.XMLNSC.*[<1]);
			DECLARE  ns CHARACTER FIELDNAMESPACE(InputRoot.XMLNSC.*[<1]);
			IF replymsg is not null THEN
				SET replymsg=REPLACE(replymsg,'Request','Reply');
			ELSE
				SET replymsg='UnknownReply'	;				
			END IF;
			
	--Return Fault message to Client 
			SET OutputRoot.XMLNSC.{ns}:{replymsg}.{ns}:eAI_HEADER=InputRoot.XMLNSC.*[<1].*:eAI_HEADER;		
			SET OutputRoot.XMLNSC.{ns}:{replymsg}.{ns}:eAI_STATUS.{ns}:returnStatus.{ns}:returnCode=returnCode;
			SET OutputRoot.XMLNSC.{ns}:{replymsg}.{ns}:eAI_STATUS.{ns}:returnStatus.{ns}:returnCodeDesc=messageText;
	
			SET Environment.Variables.Org.referenceNum=InputRoot.XMLNSC.*[<1].*:eAI_HEADER.*:referenceNum;			
			
		END IF;	
		
			
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;



CREATE COMPUTE MODULE HandleExceptions__ExceptionsDB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();		
		DECLARE messageNumber,messageText,eCatalog,exceptionType,returnCode CHAR;
		
		DECLARE ptrException reference to InputExceptionList.*[1];
   	    -- keep looping while the moves to the child of exception list work 
		WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN				
        		SET messageNumber = ptrException.Number;
        		SET messageText = ptrException.Text;
        		SET eCatalog = ptrException.Catalog;
				SET exceptionType=FIELDNAME(ptrException);
  			END IF;
  			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild ;
		END WHILE; 


		Set returnCode = CASE exceptionType
		when 'UserException' THEN Environment.Variables.returnCode
		when 'ParserException' THEN '100002'
		ELSE '100001'
		END;		
			
		Set messageText = CASE exceptionType
		when 'UserException' THEN Environment.Variables.returnCodeDesc
		when 'ParserException' THEN 'XML Parsing error'
		ELSE 'Runetime error'
		END;	
		
		-- update DB table with excpetion below
			PASSTHRU
				 'update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ? where INFORMATIONREQUESTID= ? '
				  TO Database.CURAMDB 
				 VALUES('MRS17002',Environment.Variables.Org.referenceNum) 
				 ;	
			-- PASSTHRU('update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ? where INFORMATIONREQUESTID= ?','MRS17002',Environment.Variables.Org.referenceNum);
		
		RETURN TRUE;		 		 				
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
CREATE PROCEDURE getLastExceptionDetail(IN InputTree reference,OUT messageText char)	
    /****************************************************************************
	 * A procedure that will get the details of the last exception from a message
	 * IN InputTree:  The incoming exception list
	 * IN messageNumber:  The last message numberr.
	 * IN messageText: The last message text.
	 *****************************************************************************/
   BEGIN
   	    -- Create a reference to the first child of the exception list
   	    declare ptrException reference to InputTree.*[1];
   	    -- keep looping while the moves to the child of exception list work 
		WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN
--        		SET messageNumber = ptrException.Number;
        		SET messageText = ptrException.Insert[5].Text;
  			END IF;
  			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild;
		END WHILE; 
	END;	

END MODULE;
