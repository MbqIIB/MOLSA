

CREATE COMPUTE MODULE ESBTrace_RouteTrace
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
-- restore original exception list
		SET OutputExceptionList=InputLocalEnvironment.Varaibles.ExceptionList;

		SET	OutputLocalEnvironment=InputLocalEnvironment;
		SET	OutputLocalEnvironment.Varaibles.ExceptionList=NULL;

		DECLARE hostOS CHARACTER;
				
		SET hostOS = SQL.Family;
				
		IF hostOS = 'WINDOWS' THEN  --Windows
			PROPAGATE  TO TERMINAL 'out1';
		ELSEIF hostOS = 'AIX' THEN  --AIX
			PROPAGATE  TO TERMINAL 'out2';
		ELSEIF hostOS = 'UNIX' THEN	-- UNIX
			PROPAGATE  TO TERMINAL 'out3';
		ELSE						-- Default
			PROPAGATE  TO TERMINAL 'out';	
		END IF;	
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE ESBTrace_SaveExceptionList
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties=InputProperties;
		SET OutputRoot.MQMD.MsgType = MQMT_DATAGRAM ;
		SET OutputRoot.MQMD.Persistence = MQPER_PERSISTENT;
		SET OutputRoot.MQMD.CodedCharSetId = 1208;
		DECLARE logMessage CHARACTER '';
		IF  Environment.Variables.Log.StringException is not null THEN
			SET OutputRoot.XMLNSC.Exception.StackTrace = Environment.Variables.Log.StringException;
		ELSE
			PROPAGATE  TO TERMINAL 'out1';
			RETURN FALSE;		
		END IF;		
		RETURN TRUE;
	END;

END MODULE;
CREATE COMPUTE MODULE ESBTrace_setMQMDHeader
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties=InputProperties;
		SET OutputRoot.Properties.CodedCharSetId=1208;
		SET OutputRoot.MQMD.MsgType = MQMT_DATAGRAM ;
		SET OutputRoot.MQMD.Persistence = MQPER_PERSISTENT;
		SET OutputRoot.MQMD.CodedCharSetId = 1208; 
		SET OutputRoot.MQMD.ReplyToQ = Environment.Variables.ServiceName; 
		SET OutputRoot.*[3] = InputRoot.*[<1];
		RETURN TRUE;
	END;

END MODULE;

CREATE FILTER MODULE ESBTrace_ReParse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN CARDINALITY(Body.*[]) >0;
	END;

END MODULE;
