

CREATE COMPUTE MODULE FileLogMsgflow_PrepareEnv
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot=InputRoot;
		IF EXISTS(InputRoot.XMLNSC.*:Envelope.*:Body[]) THEN
			SET OutputRoot.XMLNSC=InputRoot.XMLNSC.*:Envelope.*:Body.*[<1];
		END IF;
		DECLARE PARSNAME CHARACTER FIELDNAME(OutputRoot.*[<1]);
		DECLARE requestData BLOB;
		
		IF PARSNAME <> 'BLOB' THEN
		   SET requestData=ASBITSTREAM(OutputRoot.*[<1], InputProperties.Encoding, 1208);
		ELSE
		   SET requestData=InputRoot.BLOB.BLOB;
		END IF; 
		SET OutputLocalEnvironment.Variables.Data = CAST(requestData AS CHAR CCSID 1208);

		IF InputRoot.MQMD.SourceQueue='TRACE.LOG.FRM.REQ' THEN
			IF SQL.Family = 'WINDOWS' THEN  --Windows
				SET OutputLocalEnvironment.Variables.logDirectory='c:\ESBLog\Services';
			ELSE
				SET OutputLocalEnvironment.Variables.logDirectory='/var/mqsi/log/ESBLog/Services';		
			END IF;
			IF InputRoot.MQMD.ReplyToQ is not null and InputRoot.MQMD.ReplyToQ  <> '' THEN
				
				SET OutputLocalEnvironment.Variables.serviceName=TRIM(InputRoot.MQMD.ReplyToQ);
			ELSE
				SET OutputLocalEnvironment.Variables.serviceName='trace';
			END IF;		

			DECLARE clientChannel CHARACTER 'Outgoing';
			DECLARE indx INTEGER POSITION('clientChannel>' IN OutputLocalEnvironment.Variables.Data);
			if indx > 0 THEN
					SET clientChannel=SUBSTRING(OutputLocalEnvironment.Variables.Data FROM indx+14 for 3 );			
			END IF;	
				
			SET OutputLocalEnvironment.Variables.clientChannel=clientChannel;
--			SET OutputLocalEnvironment.Variables.Data =EncodeMessage(OutputLocalEnvironment.Variables.Data);	
		ELSE
			IF SQL.Family = 'WINDOWS' THEN  --Windows
				SET OutputLocalEnvironment.Variables.logDirectory='c:\ESBLog';
			ELSE
				SET OutputLocalEnvironment.Variables.logDirectory='/var/mqsi/log/ESBLog';		
			END IF;
			SET OutputLocalEnvironment.Variables.serviceName='errors';
			SET OutputLocalEnvironment.Variables.clientChannel='UndefinedChannel';
				
		END IF;					

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
