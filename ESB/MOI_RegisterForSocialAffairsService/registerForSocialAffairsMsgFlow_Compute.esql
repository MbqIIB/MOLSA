

CREATE COMPUTE MODULE registerForSocialAffairsMsgFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			 SET OutputLocalEnvironment= InputLocalEnvironment;
			 declare err INTEGER 1;
			 IF OutputLocalEnvironment.Variables.retCode.PROVIDERERRORCODE = '0' 
			 	OR 
			 	OutputLocalEnvironment.Variables.retCode.PROVIDERERRORCODE = 'SAS016'  -- waiting authorization
			 	THEN
				 -- success
				 PASSTHRU
				 'update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ? where INFORMATIONREQUESTID= ? '
				  TO Database.CURAMDB 
				 VALUES('MRS17004',Environment.Variables.Org.referenceNum) 
				 ;	

--				 PASSTHRU('update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ? where INFORMATIONREQUESTID= ?','MRS17004',Environment.Variables.Org.referenceNum);
			 ELSEIF STARTSWITH (OutputLocalEnvironment.Variables.retCode.PROVIDERERRORCODE , 'SAS') THEN
			 	-- wrong QID
				 PASSTHRU
				 'update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ? where INFORMATIONREQUESTID= ? '
				  TO Database.CURAMDB 
				 VALUES('MRS17001',Environment.Variables.Org.referenceNum) 
				 ;	
--				 PASSTHRU 'update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ''MRS17001'' where INFORMATIONREQUESTID= ''' || Environment.Variables.Org.referenceNum ||''''  TO Database.CURAMDB;
				 PASSTHRU 'insert into MOLSAINFORMATIONRESPONSE(INFORMATIONRESPONSEID,INFORMATIONREQUESTID,RECEIVEDDATE,RESPONSE,VERSIONNO) Values(?,?,?,?,?)'
				 TO Database.CURAMDB 
				 VALUES(GenerateRefernceIDINT(Environment.Variables.Org.referenceNum),Environment.Variables.Org.referenceNum,CURRENT_TIMESTAMP,OutputLocalEnvironment.Variables.retCode.ESBERRORCODEMSG,1)
				 ;
				 
			 ELSE
			 	-- generic exception
				 PASSTHRU
				 'update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ? where INFORMATIONREQUESTID= ? '
				  TO Database.CURAMDB 
				 VALUES('MRS17002',Environment.Variables.Org.referenceNum) 
				 ;	
			 	
--				 PASSTHRU('update MOLSAINFORMATIONREQUEST  set REQUESTSTATUS = ? where INFORMATIONREQUESTID= ?','MRS17002',Environment.Variables.Org.referenceNum);
			 		
			 END IF;	
			 
			 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
